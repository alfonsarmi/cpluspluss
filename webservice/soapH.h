/* soapH.h
   Generated by gSOAP 2.8.54 for sopa.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_short_DEFINED
#define SOAP_TYPE_short_DEFINED

inline void soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

inline int soap_write_short(struct soap *soap, short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_short(soap, p, "short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_short(soap, p, "short", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

inline int soap_read_short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_short(struct soap *soap, const char *URL, short *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_short(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_short(struct soap *soap, short *p)
{
	if (soap_read_short(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_LONG64(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_LONG64(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_LONG64(struct soap *soap, LONG64 *p)
{
	if (soap_read_LONG64(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_float_DEFINED
#define SOAP_TYPE_float_DEFINED

inline void soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

inline int soap_write_float(struct soap *soap, float const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_float(soap, p, "float", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_float(struct soap *soap, const char *URL, float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_float(soap, p, "float", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

inline int soap_read_float(struct soap *soap, float *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_float(struct soap *soap, const char *URL, float *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_float(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_float(struct soap *soap, float *p)
{
	if (soap_read_float(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_double(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (soap_read_double(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedByte_DEFINED
#define SOAP_TYPE_unsignedByte_DEFINED

inline void soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

inline int soap_write_unsignedByte(struct soap *soap, unsigned char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedByte(struct soap *soap, const char *URL, unsigned char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedByte(soap, p, "unsignedByte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

inline int soap_read_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedByte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedByte(struct soap *soap, const char *URL, unsigned char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedByte(struct soap *soap, unsigned char *p)
{
	if (soap_read_unsignedByte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedShort_DEFINED
#define SOAP_TYPE_unsignedShort_DEFINED

inline void soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_new_unsignedShort(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

inline int soap_write_unsignedShort(struct soap *soap, unsigned short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedShort(struct soap *soap, const char *URL, unsigned short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedShort(struct soap *soap, const char *URL, unsigned short const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedShort(soap, p, "unsignedShort", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

inline int soap_read_unsignedShort(struct soap *soap, unsigned short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedShort(struct soap *soap, const char *URL, unsigned short *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedShort(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedShort(struct soap *soap, unsigned short *p)
{
	if (soap_read_unsignedShort(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_unsignedInt_DEFINED
#define SOAP_TYPE_unsignedInt_DEFINED

inline void soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

inline int soap_write_unsignedInt(struct soap *soap, unsigned int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_unsignedInt(struct soap *soap, const char *URL, unsigned int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_unsignedInt(soap, p, "unsignedInt", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

inline int soap_read_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_unsignedInt(struct soap *soap, const char *URL, unsigned int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_unsignedInt(struct soap *soap, unsigned int *p)
{
	if (soap_read_unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ULONG64_DEFINED
#define SOAP_TYPE_ULONG64_DEFINED

inline void soap_default_ULONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ULONG64
	*a = SOAP_DEFAULT_ULONG64;
#else
	*a = (ULONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap*, const ULONG64 *, const char*, const char*);

inline int soap_write_ULONG64(struct soap *soap, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ULONG64(struct soap *soap, const char *URL, ULONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ULONG64(soap, p, "unsignedLong", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap*, ULONG64 *, const char*, const char*);

inline int soap_read_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ULONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ULONG64(struct soap *soap, const char *URL, ULONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ULONG64(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ULONG64(struct soap *soap, ULONG64 *p)
{
	if (soap_read_ULONG64(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_dateTime_DEFINED
#define SOAP_TYPE_dateTime_DEFINED

inline void soap_default_dateTime(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_dateTime
	*a = SOAP_DEFAULT_dateTime;
#else
	*a = (time_t)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap*, const time_t *, const char*, const char*);

inline int soap_write_dateTime(struct soap *soap, time_t const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_dateTime(struct soap *soap, const char *URL, time_t const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_dateTime(soap, p, "dateTime", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap*, time_t *, const char*, const char*);

inline int soap_read_dateTime(struct soap *soap, time_t *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_dateTime(struct soap *soap, const char *URL, time_t *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_dateTime(struct soap *soap, time_t *p)
{
	if (soap_read_dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__QuantityUnitsType_DEFINED
#define SOAP_TYPE_ns1__QuantityUnitsType_DEFINED

inline void soap_default_ns1__QuantityUnitsType(struct soap *soap, enum ns1__QuantityUnitsType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__QuantityUnitsType
	*a = SOAP_DEFAULT_ns1__QuantityUnitsType;
#else
	*a = (enum ns1__QuantityUnitsType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QuantityUnitsType(struct soap*, const char*, int, const enum ns1__QuantityUnitsType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__QuantityUnitsType2s(struct soap*, enum ns1__QuantityUnitsType);
SOAP_FMAC3 enum ns1__QuantityUnitsType * SOAP_FMAC4 soap_in_ns1__QuantityUnitsType(struct soap*, const char*, enum ns1__QuantityUnitsType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__QuantityUnitsType(struct soap*, const char*, enum ns1__QuantityUnitsType *);

SOAP_FMAC3 enum ns1__QuantityUnitsType * SOAP_FMAC4 soap_new_ns1__QuantityUnitsType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__QuantityUnitsType(struct soap*, const enum ns1__QuantityUnitsType *, const char*, const char*);

inline int soap_write_ns1__QuantityUnitsType(struct soap *soap, enum ns1__QuantityUnitsType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__QuantityUnitsType(soap, p, "ns1:QuantityUnitsType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__QuantityUnitsType(struct soap *soap, const char *URL, enum ns1__QuantityUnitsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__QuantityUnitsType(soap, p, "ns1:QuantityUnitsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QuantityUnitsType(struct soap *soap, const char *URL, enum ns1__QuantityUnitsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__QuantityUnitsType(soap, p, "ns1:QuantityUnitsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__QuantityUnitsType * SOAP_FMAC4 soap_get_ns1__QuantityUnitsType(struct soap*, enum ns1__QuantityUnitsType *, const char*, const char*);

inline int soap_read_ns1__QuantityUnitsType(struct soap *soap, enum ns1__QuantityUnitsType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__QuantityUnitsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QuantityUnitsType(struct soap *soap, const char *URL, enum ns1__QuantityUnitsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__QuantityUnitsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__QuantityUnitsType(struct soap *soap, enum ns1__QuantityUnitsType *p)
{
	if (soap_read_ns1__QuantityUnitsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AlarmCCTIUValueType_DEFINED
#define SOAP_TYPE_ns1__AlarmCCTIUValueType_DEFINED

inline void soap_default_ns1__AlarmCCTIUValueType(struct soap *soap, enum ns1__AlarmCCTIUValueType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__AlarmCCTIUValueType
	*a = SOAP_DEFAULT_ns1__AlarmCCTIUValueType;
#else
	*a = (enum ns1__AlarmCCTIUValueType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AlarmCCTIUValueType(struct soap*, const char*, int, const enum ns1__AlarmCCTIUValueType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__AlarmCCTIUValueType2s(struct soap*, enum ns1__AlarmCCTIUValueType);
SOAP_FMAC3 enum ns1__AlarmCCTIUValueType * SOAP_FMAC4 soap_in_ns1__AlarmCCTIUValueType(struct soap*, const char*, enum ns1__AlarmCCTIUValueType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__AlarmCCTIUValueType(struct soap*, const char*, enum ns1__AlarmCCTIUValueType *);

SOAP_FMAC3 enum ns1__AlarmCCTIUValueType * SOAP_FMAC4 soap_new_ns1__AlarmCCTIUValueType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__AlarmCCTIUValueType(struct soap*, const enum ns1__AlarmCCTIUValueType *, const char*, const char*);

inline int soap_write_ns1__AlarmCCTIUValueType(struct soap *soap, enum ns1__AlarmCCTIUValueType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__AlarmCCTIUValueType(soap, p, "ns1:AlarmCCTIUValueType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__AlarmCCTIUValueType(struct soap *soap, const char *URL, enum ns1__AlarmCCTIUValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__AlarmCCTIUValueType(soap, p, "ns1:AlarmCCTIUValueType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AlarmCCTIUValueType(struct soap *soap, const char *URL, enum ns1__AlarmCCTIUValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__AlarmCCTIUValueType(soap, p, "ns1:AlarmCCTIUValueType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__AlarmCCTIUValueType * SOAP_FMAC4 soap_get_ns1__AlarmCCTIUValueType(struct soap*, enum ns1__AlarmCCTIUValueType *, const char*, const char*);

inline int soap_read_ns1__AlarmCCTIUValueType(struct soap *soap, enum ns1__AlarmCCTIUValueType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__AlarmCCTIUValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AlarmCCTIUValueType(struct soap *soap, const char *URL, enum ns1__AlarmCCTIUValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AlarmCCTIUValueType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AlarmCCTIUValueType(struct soap *soap, enum ns1__AlarmCCTIUValueType *p)
{
	if (soap_read_ns1__AlarmCCTIUValueType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREQuantityUnitsType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREQuantityUnitsType_DEFINED

inline void soap_default_ns1__MTC_USCOREQuantityUnitsType(struct soap *soap, enum ns1__MTC_USCOREQuantityUnitsType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns1__MTC_USCOREQuantityUnitsType
	*a = SOAP_DEFAULT_ns1__MTC_USCOREQuantityUnitsType;
#else
	*a = (enum ns1__MTC_USCOREQuantityUnitsType)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREQuantityUnitsType(struct soap*, const char*, int, const enum ns1__MTC_USCOREQuantityUnitsType *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns1__MTC_USCOREQuantityUnitsType2s(struct soap*, enum ns1__MTC_USCOREQuantityUnitsType);
SOAP_FMAC3 enum ns1__MTC_USCOREQuantityUnitsType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREQuantityUnitsType(struct soap*, const char*, enum ns1__MTC_USCOREQuantityUnitsType *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns1__MTC_USCOREQuantityUnitsType(struct soap*, const char*, enum ns1__MTC_USCOREQuantityUnitsType *);

SOAP_FMAC3 enum ns1__MTC_USCOREQuantityUnitsType * SOAP_FMAC4 soap_new_ns1__MTC_USCOREQuantityUnitsType(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__MTC_USCOREQuantityUnitsType(struct soap*, const enum ns1__MTC_USCOREQuantityUnitsType *, const char*, const char*);

inline int soap_write_ns1__MTC_USCOREQuantityUnitsType(struct soap *soap, enum ns1__MTC_USCOREQuantityUnitsType const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_ns1__MTC_USCOREQuantityUnitsType(soap, p, "ns1:MTC_QuantityUnitsType", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREQuantityUnitsType(struct soap *soap, const char *URL, enum ns1__MTC_USCOREQuantityUnitsType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__MTC_USCOREQuantityUnitsType(soap, p, "ns1:MTC_QuantityUnitsType", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREQuantityUnitsType(struct soap *soap, const char *URL, enum ns1__MTC_USCOREQuantityUnitsType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_ns1__MTC_USCOREQuantityUnitsType(soap, p, "ns1:MTC_QuantityUnitsType", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns1__MTC_USCOREQuantityUnitsType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREQuantityUnitsType(struct soap*, enum ns1__MTC_USCOREQuantityUnitsType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREQuantityUnitsType(struct soap *soap, enum ns1__MTC_USCOREQuantityUnitsType *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREQuantityUnitsType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREQuantityUnitsType(struct soap *soap, const char *URL, enum ns1__MTC_USCOREQuantityUnitsType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREQuantityUnitsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREQuantityUnitsType(struct soap *soap, enum ns1__MTC_USCOREQuantityUnitsType *p)
{
	if (soap_read_ns1__MTC_USCOREQuantityUnitsType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__eqList_eq_DEFINED
#define SOAP_TYPE__ns1__eqList_eq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__eqList_eq(struct soap*, const char*, int, const _ns1__eqList_eq *, const char*);
SOAP_FMAC3 _ns1__eqList_eq * SOAP_FMAC4 soap_in__ns1__eqList_eq(struct soap*, const char*, _ns1__eqList_eq *, const char*);
SOAP_FMAC1 _ns1__eqList_eq * SOAP_FMAC2 soap_instantiate__ns1__eqList_eq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__eqList_eq * soap_new__ns1__eqList_eq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__eqList_eq(soap, n, NULL, NULL, NULL);
}

inline _ns1__eqList_eq * soap_new_req__ns1__eqList_eq(
	struct soap *soap,
	ns1__EquipmentReferenceType *eqT,
	int communicating)
{
	_ns1__eqList_eq *_p = soap_new__ns1__eqList_eq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__eqList_eq::eqT = eqT;
		_p->_ns1__eqList_eq::communicating = communicating;
	}
	return _p;
}

inline _ns1__eqList_eq * soap_new_set__ns1__eqList_eq(
	struct soap *soap,
	ns1__EquipmentReferenceType *eqT,
	int communicating)
{
	_ns1__eqList_eq *_p = soap_new__ns1__eqList_eq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__eqList_eq::eqT = eqT;
		_p->_ns1__eqList_eq::communicating = communicating;
	}
	return _p;
}

inline int soap_write__ns1__eqList_eq(struct soap *soap, _ns1__eqList_eq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eqList-eq", p->soap_type() == SOAP_TYPE__ns1__eqList_eq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__eqList_eq(struct soap *soap, const char *URL, _ns1__eqList_eq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eqList-eq", p->soap_type() == SOAP_TYPE__ns1__eqList_eq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__eqList_eq(struct soap *soap, const char *URL, _ns1__eqList_eq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eqList-eq", p->soap_type() == SOAP_TYPE__ns1__eqList_eq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__eqList_eq * SOAP_FMAC4 soap_get__ns1__eqList_eq(struct soap*, _ns1__eqList_eq *, const char*, const char*);

inline int soap_read__ns1__eqList_eq(struct soap *soap, _ns1__eqList_eq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__eqList_eq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__eqList_eq(struct soap *soap, const char *URL, _ns1__eqList_eq *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__eqList_eq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__eqList_eq(struct soap *soap, _ns1__eqList_eq *p)
{
	if (soap_read__ns1__eqList_eq(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AccountingUnitType_purse_DEFINED
#define SOAP_TYPE__ns1__AccountingUnitType_purse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AccountingUnitType_purse(struct soap*, const char*, int, const _ns1__AccountingUnitType_purse *, const char*);
SOAP_FMAC3 _ns1__AccountingUnitType_purse * SOAP_FMAC4 soap_in__ns1__AccountingUnitType_purse(struct soap*, const char*, _ns1__AccountingUnitType_purse *, const char*);
SOAP_FMAC1 _ns1__AccountingUnitType_purse * SOAP_FMAC2 soap_instantiate__ns1__AccountingUnitType_purse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AccountingUnitType_purse * soap_new__ns1__AccountingUnitType_purse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__AccountingUnitType_purse(soap, n, NULL, NULL, NULL);
}

inline _ns1__AccountingUnitType_purse * soap_new_req__ns1__AccountingUnitType_purse(
	struct soap *soap,
	LONG64 sr,
	LONG64 sv)
{
	_ns1__AccountingUnitType_purse *_p = soap_new__ns1__AccountingUnitType_purse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AccountingUnitType_purse::sr = sr;
		_p->_ns1__AccountingUnitType_purse::sv = sv;
	}
	return _p;
}

inline _ns1__AccountingUnitType_purse * soap_new_set__ns1__AccountingUnitType_purse(
	struct soap *soap,
	LONG64 sr,
	LONG64 sv)
{
	_ns1__AccountingUnitType_purse *_p = soap_new__ns1__AccountingUnitType_purse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AccountingUnitType_purse::sr = sr;
		_p->_ns1__AccountingUnitType_purse::sv = sv;
	}
	return _p;
}

inline int soap_write__ns1__AccountingUnitType_purse(struct soap *soap, _ns1__AccountingUnitType_purse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType-purse", p->soap_type() == SOAP_TYPE__ns1__AccountingUnitType_purse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AccountingUnitType_purse(struct soap *soap, const char *URL, _ns1__AccountingUnitType_purse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType-purse", p->soap_type() == SOAP_TYPE__ns1__AccountingUnitType_purse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AccountingUnitType_purse(struct soap *soap, const char *URL, _ns1__AccountingUnitType_purse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType-purse", p->soap_type() == SOAP_TYPE__ns1__AccountingUnitType_purse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AccountingUnitType_purse * SOAP_FMAC4 soap_get__ns1__AccountingUnitType_purse(struct soap*, _ns1__AccountingUnitType_purse *, const char*, const char*);

inline int soap_read__ns1__AccountingUnitType_purse(struct soap *soap, _ns1__AccountingUnitType_purse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AccountingUnitType_purse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AccountingUnitType_purse(struct soap *soap, const char *URL, _ns1__AccountingUnitType_purse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AccountingUnitType_purse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AccountingUnitType_purse(struct soap *soap, _ns1__AccountingUnitType_purse *p)
{
	if (soap_read__ns1__AccountingUnitType_purse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AccountingUnitType_mda_DEFINED
#define SOAP_TYPE__ns1__AccountingUnitType_mda_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AccountingUnitType_mda(struct soap*, const char*, int, const _ns1__AccountingUnitType_mda *, const char*);
SOAP_FMAC3 _ns1__AccountingUnitType_mda * SOAP_FMAC4 soap_in__ns1__AccountingUnitType_mda(struct soap*, const char*, _ns1__AccountingUnitType_mda *, const char*);
SOAP_FMAC1 _ns1__AccountingUnitType_mda * SOAP_FMAC2 soap_instantiate__ns1__AccountingUnitType_mda(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AccountingUnitType_mda * soap_new__ns1__AccountingUnitType_mda(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__AccountingUnitType_mda(soap, n, NULL, NULL, NULL);
}

inline _ns1__AccountingUnitType_mda * soap_new_req__ns1__AccountingUnitType_mda(
	struct soap *soap,
	LONG64 t,
	LONG64 p,
	LONG64 s,
	LONG64 pr,
	LONG64 n)
{
	_ns1__AccountingUnitType_mda *_p = soap_new__ns1__AccountingUnitType_mda(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AccountingUnitType_mda::t = t;
		_p->_ns1__AccountingUnitType_mda::p = p;
		_p->_ns1__AccountingUnitType_mda::s = s;
		_p->_ns1__AccountingUnitType_mda::pr = pr;
		_p->_ns1__AccountingUnitType_mda::n = n;
	}
	return _p;
}

inline _ns1__AccountingUnitType_mda * soap_new_set__ns1__AccountingUnitType_mda(
	struct soap *soap,
	LONG64 t,
	LONG64 p,
	LONG64 s,
	LONG64 pr,
	LONG64 n)
{
	_ns1__AccountingUnitType_mda *_p = soap_new__ns1__AccountingUnitType_mda(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AccountingUnitType_mda::t = t;
		_p->_ns1__AccountingUnitType_mda::p = p;
		_p->_ns1__AccountingUnitType_mda::s = s;
		_p->_ns1__AccountingUnitType_mda::pr = pr;
		_p->_ns1__AccountingUnitType_mda::n = n;
	}
	return _p;
}

inline int soap_write__ns1__AccountingUnitType_mda(struct soap *soap, _ns1__AccountingUnitType_mda const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType-mda", p->soap_type() == SOAP_TYPE__ns1__AccountingUnitType_mda ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AccountingUnitType_mda(struct soap *soap, const char *URL, _ns1__AccountingUnitType_mda const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType-mda", p->soap_type() == SOAP_TYPE__ns1__AccountingUnitType_mda ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AccountingUnitType_mda(struct soap *soap, const char *URL, _ns1__AccountingUnitType_mda const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType-mda", p->soap_type() == SOAP_TYPE__ns1__AccountingUnitType_mda ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AccountingUnitType_mda * SOAP_FMAC4 soap_get__ns1__AccountingUnitType_mda(struct soap*, _ns1__AccountingUnitType_mda *, const char*, const char*);

inline int soap_read__ns1__AccountingUnitType_mda(struct soap *soap, _ns1__AccountingUnitType_mda *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AccountingUnitType_mda(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AccountingUnitType_mda(struct soap *soap, const char *URL, _ns1__AccountingUnitType_mda *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AccountingUnitType_mda(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AccountingUnitType_mda(struct soap *soap, _ns1__AccountingUnitType_mda *p)
{
	if (soap_read__ns1__AccountingUnitType_mda(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AccountingUnitType_doc_DEFINED
#define SOAP_TYPE__ns1__AccountingUnitType_doc_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AccountingUnitType_doc(struct soap*, const char*, int, const _ns1__AccountingUnitType_doc *, const char*);
SOAP_FMAC3 _ns1__AccountingUnitType_doc * SOAP_FMAC4 soap_in__ns1__AccountingUnitType_doc(struct soap*, const char*, _ns1__AccountingUnitType_doc *, const char*);
SOAP_FMAC1 _ns1__AccountingUnitType_doc * SOAP_FMAC2 soap_instantiate__ns1__AccountingUnitType_doc(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AccountingUnitType_doc * soap_new__ns1__AccountingUnitType_doc(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__AccountingUnitType_doc(soap, n, NULL, NULL, NULL);
}

inline _ns1__AccountingUnitType_doc * soap_new_req__ns1__AccountingUnitType_doc(
	struct soap *soap,
	unsigned short type,
	char *id,
	char *name,
	char *addr,
	LONG64 cntNum)
{
	_ns1__AccountingUnitType_doc *_p = soap_new__ns1__AccountingUnitType_doc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AccountingUnitType_doc::type = type;
		_p->_ns1__AccountingUnitType_doc::id = id;
		_p->_ns1__AccountingUnitType_doc::name = name;
		_p->_ns1__AccountingUnitType_doc::addr = addr;
		_p->_ns1__AccountingUnitType_doc::cntNum = cntNum;
	}
	return _p;
}

inline _ns1__AccountingUnitType_doc * soap_new_set__ns1__AccountingUnitType_doc(
	struct soap *soap,
	unsigned short type,
	char *id,
	char *name,
	char *addr,
	LONG64 cntNum)
{
	_ns1__AccountingUnitType_doc *_p = soap_new__ns1__AccountingUnitType_doc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AccountingUnitType_doc::type = type;
		_p->_ns1__AccountingUnitType_doc::id = id;
		_p->_ns1__AccountingUnitType_doc::name = name;
		_p->_ns1__AccountingUnitType_doc::addr = addr;
		_p->_ns1__AccountingUnitType_doc::cntNum = cntNum;
	}
	return _p;
}

inline int soap_write__ns1__AccountingUnitType_doc(struct soap *soap, _ns1__AccountingUnitType_doc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType-doc", p->soap_type() == SOAP_TYPE__ns1__AccountingUnitType_doc ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AccountingUnitType_doc(struct soap *soap, const char *URL, _ns1__AccountingUnitType_doc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType-doc", p->soap_type() == SOAP_TYPE__ns1__AccountingUnitType_doc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AccountingUnitType_doc(struct soap *soap, const char *URL, _ns1__AccountingUnitType_doc const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType-doc", p->soap_type() == SOAP_TYPE__ns1__AccountingUnitType_doc ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AccountingUnitType_doc * SOAP_FMAC4 soap_get__ns1__AccountingUnitType_doc(struct soap*, _ns1__AccountingUnitType_doc *, const char*, const char*);

inline int soap_read__ns1__AccountingUnitType_doc(struct soap *soap, _ns1__AccountingUnitType_doc *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AccountingUnitType_doc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AccountingUnitType_doc(struct soap *soap, const char *URL, _ns1__AccountingUnitType_doc *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AccountingUnitType_doc(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AccountingUnitType_doc(struct soap *soap, _ns1__AccountingUnitType_doc *p)
{
	if (soap_read__ns1__AccountingUnitType_doc(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__QuantityUnitsType__DEFINED
#define SOAP_TYPE_ns1__QuantityUnitsType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QuantityUnitsType_(struct soap*, const char*, int, const ns1__QuantityUnitsType_ *, const char*);
SOAP_FMAC3 ns1__QuantityUnitsType_ * SOAP_FMAC4 soap_in_ns1__QuantityUnitsType_(struct soap*, const char*, ns1__QuantityUnitsType_ *, const char*);
SOAP_FMAC1 ns1__QuantityUnitsType_ * SOAP_FMAC2 soap_instantiate_ns1__QuantityUnitsType_(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QuantityUnitsType_ * soap_new_ns1__QuantityUnitsType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__QuantityUnitsType_(soap, n, NULL, NULL, NULL);
}

inline ns1__QuantityUnitsType_ * soap_new_req_ns1__QuantityUnitsType_(
	struct soap *soap,
	enum ns1__QuantityUnitsType __item)
{
	ns1__QuantityUnitsType_ *_p = soap_new_ns1__QuantityUnitsType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QuantityUnitsType_::__item = __item;
	}
	return _p;
}

inline ns1__QuantityUnitsType_ * soap_new_set_ns1__QuantityUnitsType_(
	struct soap *soap,
	enum ns1__QuantityUnitsType __item,
	char *__item__1)
{
	ns1__QuantityUnitsType_ *_p = soap_new_ns1__QuantityUnitsType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QuantityUnitsType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__QuantityUnitsType_(struct soap *soap, ns1__QuantityUnitsType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuantityUnitsType", p->soap_type() == SOAP_TYPE_ns1__QuantityUnitsType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__QuantityUnitsType_(struct soap *soap, const char *URL, ns1__QuantityUnitsType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuantityUnitsType", p->soap_type() == SOAP_TYPE_ns1__QuantityUnitsType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QuantityUnitsType_(struct soap *soap, const char *URL, ns1__QuantityUnitsType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuantityUnitsType", p->soap_type() == SOAP_TYPE_ns1__QuantityUnitsType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__QuantityUnitsType_ * SOAP_FMAC4 soap_get_ns1__QuantityUnitsType_(struct soap*, ns1__QuantityUnitsType_ *, const char*, const char*);

inline int soap_read_ns1__QuantityUnitsType_(struct soap *soap, ns1__QuantityUnitsType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__QuantityUnitsType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QuantityUnitsType_(struct soap *soap, const char *URL, ns1__QuantityUnitsType_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__QuantityUnitsType_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__QuantityUnitsType_(struct soap *soap, ns1__QuantityUnitsType_ *p)
{
	if (soap_read_ns1__QuantityUnitsType_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AlarmCCTIUValueType__DEFINED
#define SOAP_TYPE_ns1__AlarmCCTIUValueType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AlarmCCTIUValueType_(struct soap*, const char*, int, const ns1__AlarmCCTIUValueType_ *, const char*);
SOAP_FMAC3 ns1__AlarmCCTIUValueType_ * SOAP_FMAC4 soap_in_ns1__AlarmCCTIUValueType_(struct soap*, const char*, ns1__AlarmCCTIUValueType_ *, const char*);
SOAP_FMAC1 ns1__AlarmCCTIUValueType_ * SOAP_FMAC2 soap_instantiate_ns1__AlarmCCTIUValueType_(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AlarmCCTIUValueType_ * soap_new_ns1__AlarmCCTIUValueType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AlarmCCTIUValueType_(soap, n, NULL, NULL, NULL);
}

inline ns1__AlarmCCTIUValueType_ * soap_new_req_ns1__AlarmCCTIUValueType_(
	struct soap *soap,
	enum ns1__AlarmCCTIUValueType __item)
{
	ns1__AlarmCCTIUValueType_ *_p = soap_new_ns1__AlarmCCTIUValueType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AlarmCCTIUValueType_::__item = __item;
	}
	return _p;
}

inline ns1__AlarmCCTIUValueType_ * soap_new_set_ns1__AlarmCCTIUValueType_(
	struct soap *soap,
	enum ns1__AlarmCCTIUValueType __item,
	char *__item__1)
{
	ns1__AlarmCCTIUValueType_ *_p = soap_new_ns1__AlarmCCTIUValueType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AlarmCCTIUValueType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AlarmCCTIUValueType_(struct soap *soap, ns1__AlarmCCTIUValueType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmCCTIUValueType", p->soap_type() == SOAP_TYPE_ns1__AlarmCCTIUValueType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AlarmCCTIUValueType_(struct soap *soap, const char *URL, ns1__AlarmCCTIUValueType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmCCTIUValueType", p->soap_type() == SOAP_TYPE_ns1__AlarmCCTIUValueType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AlarmCCTIUValueType_(struct soap *soap, const char *URL, ns1__AlarmCCTIUValueType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmCCTIUValueType", p->soap_type() == SOAP_TYPE_ns1__AlarmCCTIUValueType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AlarmCCTIUValueType_ * SOAP_FMAC4 soap_get_ns1__AlarmCCTIUValueType_(struct soap*, ns1__AlarmCCTIUValueType_ *, const char*, const char*);

inline int soap_read_ns1__AlarmCCTIUValueType_(struct soap *soap, ns1__AlarmCCTIUValueType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AlarmCCTIUValueType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AlarmCCTIUValueType_(struct soap *soap, const char *URL, ns1__AlarmCCTIUValueType_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AlarmCCTIUValueType_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AlarmCCTIUValueType_(struct soap *soap, ns1__AlarmCCTIUValueType_ *p)
{
	if (soap_read_ns1__AlarmCCTIUValueType_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREQuantityUnitsType__DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREQuantityUnitsType__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREQuantityUnitsType_(struct soap*, const char*, int, const ns1__MTC_USCOREQuantityUnitsType_ *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREQuantityUnitsType_ * SOAP_FMAC4 soap_in_ns1__MTC_USCOREQuantityUnitsType_(struct soap*, const char*, ns1__MTC_USCOREQuantityUnitsType_ *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREQuantityUnitsType_ * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREQuantityUnitsType_(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREQuantityUnitsType_ * soap_new_ns1__MTC_USCOREQuantityUnitsType_(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREQuantityUnitsType_(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREQuantityUnitsType_ * soap_new_req_ns1__MTC_USCOREQuantityUnitsType_(
	struct soap *soap,
	enum ns1__MTC_USCOREQuantityUnitsType __item)
{
	ns1__MTC_USCOREQuantityUnitsType_ *_p = soap_new_ns1__MTC_USCOREQuantityUnitsType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREQuantityUnitsType_::__item = __item;
	}
	return _p;
}

inline ns1__MTC_USCOREQuantityUnitsType_ * soap_new_set_ns1__MTC_USCOREQuantityUnitsType_(
	struct soap *soap,
	enum ns1__MTC_USCOREQuantityUnitsType __item,
	char *__item__1)
{
	ns1__MTC_USCOREQuantityUnitsType_ *_p = soap_new_ns1__MTC_USCOREQuantityUnitsType_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREQuantityUnitsType_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREQuantityUnitsType_(struct soap *soap, ns1__MTC_USCOREQuantityUnitsType_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_QuantityUnitsType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREQuantityUnitsType_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREQuantityUnitsType_(struct soap *soap, const char *URL, ns1__MTC_USCOREQuantityUnitsType_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_QuantityUnitsType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREQuantityUnitsType_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREQuantityUnitsType_(struct soap *soap, const char *URL, ns1__MTC_USCOREQuantityUnitsType_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_QuantityUnitsType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREQuantityUnitsType_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREQuantityUnitsType_ * SOAP_FMAC4 soap_get_ns1__MTC_USCOREQuantityUnitsType_(struct soap*, ns1__MTC_USCOREQuantityUnitsType_ *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREQuantityUnitsType_(struct soap *soap, ns1__MTC_USCOREQuantityUnitsType_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREQuantityUnitsType_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREQuantityUnitsType_(struct soap *soap, const char *URL, ns1__MTC_USCOREQuantityUnitsType_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREQuantityUnitsType_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREQuantityUnitsType_(struct soap *soap, ns1__MTC_USCOREQuantityUnitsType_ *p)
{
	if (soap_read_ns1__MTC_USCOREQuantityUnitsType_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__Distance_DEFINED
#define SOAP_TYPE_ns2__Distance_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Distance(struct soap*, const char*, int, const ns2__Distance *, const char*);
SOAP_FMAC3 ns2__Distance * SOAP_FMAC4 soap_in_ns2__Distance(struct soap*, const char*, ns2__Distance *, const char*);
SOAP_FMAC1 ns2__Distance * SOAP_FMAC2 soap_instantiate_ns2__Distance(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Distance * soap_new_ns2__Distance(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Distance(soap, n, NULL, NULL, NULL);
}

inline ns2__Distance * soap_new_req_ns2__Distance(
	struct soap *soap,
	unsigned int Distance)
{
	ns2__Distance *_p = soap_new_ns2__Distance(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Distance::Distance = Distance;
	}
	return _p;
}

inline ns2__Distance * soap_new_set_ns2__Distance(
	struct soap *soap,
	unsigned int Distance,
	LONG64 *type,
	char *__item__1)
{
	ns2__Distance *_p = soap_new_ns2__Distance(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Distance::Distance = Distance;
		_p->ns2__Distance::type = type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__Distance(struct soap *soap, ns2__Distance const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Distance", p->soap_type() == SOAP_TYPE_ns2__Distance ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Distance(struct soap *soap, const char *URL, ns2__Distance const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Distance", p->soap_type() == SOAP_TYPE_ns2__Distance ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Distance(struct soap *soap, const char *URL, ns2__Distance const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Distance", p->soap_type() == SOAP_TYPE_ns2__Distance ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Distance * SOAP_FMAC4 soap_get_ns2__Distance(struct soap*, ns2__Distance *, const char*, const char*);

inline int soap_read_ns2__Distance(struct soap *soap, ns2__Distance *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__Distance(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Distance(struct soap *soap, const char *URL, ns2__Distance *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__Distance(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__Distance(struct soap *soap, ns2__Distance *p)
{
	if (soap_read_ns2__Distance(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__DistanceList_DEFINED
#define SOAP_TYPE_ns2__DistanceList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DistanceList(struct soap*, const char*, int, const ns2__DistanceList *, const char*);
SOAP_FMAC3 ns2__DistanceList * SOAP_FMAC4 soap_in_ns2__DistanceList(struct soap*, const char*, ns2__DistanceList *, const char*);
SOAP_FMAC1 ns2__DistanceList * SOAP_FMAC2 soap_instantiate_ns2__DistanceList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DistanceList * soap_new_ns2__DistanceList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DistanceList(soap, n, NULL, NULL, NULL);
}

inline ns2__DistanceList * soap_new_req_ns2__DistanceList(
	struct soap *soap,
	int __sizedistance,
	ns2__Distance **distance)
{
	ns2__DistanceList *_p = soap_new_ns2__DistanceList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DistanceList::__sizedistance = __sizedistance;
		_p->ns2__DistanceList::distance = distance;
	}
	return _p;
}

inline ns2__DistanceList * soap_new_set_ns2__DistanceList(
	struct soap *soap,
	int __sizedistance,
	ns2__Distance **distance,
	char *__item__1)
{
	ns2__DistanceList *_p = soap_new_ns2__DistanceList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DistanceList::__sizedistance = __sizedistance;
		_p->ns2__DistanceList::distance = distance;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__DistanceList(struct soap *soap, ns2__DistanceList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DistanceList", p->soap_type() == SOAP_TYPE_ns2__DistanceList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DistanceList(struct soap *soap, const char *URL, ns2__DistanceList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DistanceList", p->soap_type() == SOAP_TYPE_ns2__DistanceList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DistanceList(struct soap *soap, const char *URL, ns2__DistanceList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DistanceList", p->soap_type() == SOAP_TYPE_ns2__DistanceList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DistanceList * SOAP_FMAC4 soap_get_ns2__DistanceList(struct soap*, ns2__DistanceList *, const char*, const char*);

inline int soap_read_ns2__DistanceList(struct soap *soap, ns2__DistanceList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__DistanceList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DistanceList(struct soap *soap, const char *URL, ns2__DistanceList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__DistanceList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__DistanceList(struct soap *soap, ns2__DistanceList *p)
{
	if (soap_read_ns2__DistanceList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__DistanceMatrixElement_DEFINED
#define SOAP_TYPE_ns2__DistanceMatrixElement_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__DistanceMatrixElement(struct soap*, const char*, int, const ns2__DistanceMatrixElement *, const char*);
SOAP_FMAC3 ns2__DistanceMatrixElement * SOAP_FMAC4 soap_in_ns2__DistanceMatrixElement(struct soap*, const char*, ns2__DistanceMatrixElement *, const char*);
SOAP_FMAC1 ns2__DistanceMatrixElement * SOAP_FMAC2 soap_instantiate_ns2__DistanceMatrixElement(struct soap*, int, const char*, const char*, size_t*);

inline ns2__DistanceMatrixElement * soap_new_ns2__DistanceMatrixElement(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__DistanceMatrixElement(soap, n, NULL, NULL, NULL);
}

inline ns2__DistanceMatrixElement * soap_new_req_ns2__DistanceMatrixElement(
	struct soap *soap,
	ns2__DistanceList *distances,
	unsigned int originId,
	unsigned int destinationId)
{
	ns2__DistanceMatrixElement *_p = soap_new_ns2__DistanceMatrixElement(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DistanceMatrixElement::distances = distances;
		_p->ns2__DistanceMatrixElement::originId = originId;
		_p->ns2__DistanceMatrixElement::destinationId = destinationId;
	}
	return _p;
}

inline ns2__DistanceMatrixElement * soap_new_set_ns2__DistanceMatrixElement(
	struct soap *soap,
	ns2__DistanceList *distances,
	unsigned int originId,
	unsigned int destinationId,
	unsigned int *id,
	char *__item__1)
{
	ns2__DistanceMatrixElement *_p = soap_new_ns2__DistanceMatrixElement(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__DistanceMatrixElement::distances = distances;
		_p->ns2__DistanceMatrixElement::originId = originId;
		_p->ns2__DistanceMatrixElement::destinationId = destinationId;
		_p->ns2__DistanceMatrixElement::id = id;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__DistanceMatrixElement(struct soap *soap, ns2__DistanceMatrixElement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DistanceMatrixElement", p->soap_type() == SOAP_TYPE_ns2__DistanceMatrixElement ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__DistanceMatrixElement(struct soap *soap, const char *URL, ns2__DistanceMatrixElement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DistanceMatrixElement", p->soap_type() == SOAP_TYPE_ns2__DistanceMatrixElement ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__DistanceMatrixElement(struct soap *soap, const char *URL, ns2__DistanceMatrixElement const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:DistanceMatrixElement", p->soap_type() == SOAP_TYPE_ns2__DistanceMatrixElement ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__DistanceMatrixElement * SOAP_FMAC4 soap_get_ns2__DistanceMatrixElement(struct soap*, ns2__DistanceMatrixElement *, const char*, const char*);

inline int soap_read_ns2__DistanceMatrixElement(struct soap *soap, ns2__DistanceMatrixElement *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__DistanceMatrixElement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__DistanceMatrixElement(struct soap *soap, const char *URL, ns2__DistanceMatrixElement *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__DistanceMatrixElement(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__DistanceMatrixElement(struct soap *soap, ns2__DistanceMatrixElement *p)
{
	if (soap_read_ns2__DistanceMatrixElement(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__NameSet_DEFINED
#define SOAP_TYPE_ns2__NameSet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NameSet(struct soap*, const char*, int, const ns2__NameSet *, const char*);
SOAP_FMAC3 ns2__NameSet * SOAP_FMAC4 soap_in_ns2__NameSet(struct soap*, const char*, ns2__NameSet *, const char*);
SOAP_FMAC1 ns2__NameSet * SOAP_FMAC2 soap_instantiate_ns2__NameSet(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NameSet * soap_new_ns2__NameSet(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__NameSet(soap, n, NULL, NULL, NULL);
}

inline ns2__NameSet * soap_new_req_ns2__NameSet(
	struct soap *soap,
	char *name,
	char *lang)
{
	ns2__NameSet *_p = soap_new_ns2__NameSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__NameSet::name = name;
		_p->ns2__NameSet::lang = lang;
	}
	return _p;
}

inline ns2__NameSet * soap_new_set_ns2__NameSet(
	struct soap *soap,
	char *name,
	char *nameLong,
	char *display,
	char *displayLong,
	char *receipt,
	char *receiptLong,
	char *abbr,
	char *desc,
	char *lang,
	char *__item__1)
{
	ns2__NameSet *_p = soap_new_ns2__NameSet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__NameSet::name = name;
		_p->ns2__NameSet::nameLong = nameLong;
		_p->ns2__NameSet::display = display;
		_p->ns2__NameSet::displayLong = displayLong;
		_p->ns2__NameSet::receipt = receipt;
		_p->ns2__NameSet::receiptLong = receiptLong;
		_p->ns2__NameSet::abbr = abbr;
		_p->ns2__NameSet::desc = desc;
		_p->ns2__NameSet::lang = lang;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__NameSet(struct soap *soap, ns2__NameSet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:NameSet", p->soap_type() == SOAP_TYPE_ns2__NameSet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__NameSet(struct soap *soap, const char *URL, ns2__NameSet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:NameSet", p->soap_type() == SOAP_TYPE_ns2__NameSet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__NameSet(struct soap *soap, const char *URL, ns2__NameSet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:NameSet", p->soap_type() == SOAP_TYPE_ns2__NameSet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__NameSet * SOAP_FMAC4 soap_get_ns2__NameSet(struct soap*, ns2__NameSet *, const char*, const char*);

inline int soap_read_ns2__NameSet(struct soap *soap, ns2__NameSet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__NameSet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__NameSet(struct soap *soap, const char *URL, ns2__NameSet *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__NameSet(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__NameSet(struct soap *soap, ns2__NameSet *p)
{
	if (soap_read_ns2__NameSet(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__NameSetList_DEFINED
#define SOAP_TYPE_ns2__NameSetList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__NameSetList(struct soap*, const char*, int, const ns2__NameSetList *, const char*);
SOAP_FMAC3 ns2__NameSetList * SOAP_FMAC4 soap_in_ns2__NameSetList(struct soap*, const char*, ns2__NameSetList *, const char*);
SOAP_FMAC1 ns2__NameSetList * SOAP_FMAC2 soap_instantiate_ns2__NameSetList(struct soap*, int, const char*, const char*, size_t*);

inline ns2__NameSetList * soap_new_ns2__NameSetList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__NameSetList(soap, n, NULL, NULL, NULL);
}

inline ns2__NameSetList * soap_new_req_ns2__NameSetList(
	struct soap *soap,
	int __sizenameSet,
	ns2__NameSet **nameSet)
{
	ns2__NameSetList *_p = soap_new_ns2__NameSetList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__NameSetList::__sizenameSet = __sizenameSet;
		_p->ns2__NameSetList::nameSet = nameSet;
	}
	return _p;
}

inline ns2__NameSetList * soap_new_set_ns2__NameSetList(
	struct soap *soap,
	int __sizenameSet,
	ns2__NameSet **nameSet,
	char *length,
	char *__item__1)
{
	ns2__NameSetList *_p = soap_new_ns2__NameSetList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__NameSetList::__sizenameSet = __sizenameSet;
		_p->ns2__NameSetList::nameSet = nameSet;
		_p->ns2__NameSetList::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__NameSetList(struct soap *soap, ns2__NameSetList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:NameSetList", p->soap_type() == SOAP_TYPE_ns2__NameSetList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__NameSetList(struct soap *soap, const char *URL, ns2__NameSetList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:NameSetList", p->soap_type() == SOAP_TYPE_ns2__NameSetList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__NameSetList(struct soap *soap, const char *URL, ns2__NameSetList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:NameSetList", p->soap_type() == SOAP_TYPE_ns2__NameSetList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__NameSetList * SOAP_FMAC4 soap_get_ns2__NameSetList(struct soap*, ns2__NameSetList *, const char*, const char*);

inline int soap_read_ns2__NameSetList(struct soap *soap, ns2__NameSetList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__NameSetList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__NameSetList(struct soap *soap, const char *URL, ns2__NameSetList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__NameSetList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__NameSetList(struct soap *soap, ns2__NameSetList *p)
{
	if (soap_read_ns2__NameSetList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__Header_DEFINED
#define SOAP_TYPE_ns2__Header_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Header(struct soap*, const char*, int, const ns2__Header *, const char*);
SOAP_FMAC3 ns2__Header * SOAP_FMAC4 soap_in_ns2__Header(struct soap*, const char*, ns2__Header *, const char*);
SOAP_FMAC1 ns2__Header * SOAP_FMAC2 soap_instantiate_ns2__Header(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Header * soap_new_ns2__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__Header(soap, n, NULL, NULL, NULL);
}

inline ns2__Header * soap_new_req_ns2__Header(
	struct soap *soap,
	unsigned int formatVersion,
	unsigned int configurationVersion,
	time_t generationDate,
	time_t activationDate)
{
	ns2__Header *_p = soap_new_ns2__Header(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Header::formatVersion = formatVersion;
		_p->ns2__Header::configurationVersion = configurationVersion;
		_p->ns2__Header::generationDate = generationDate;
		_p->ns2__Header::activationDate = activationDate;
	}
	return _p;
}

inline ns2__Header * soap_new_set_ns2__Header(
	struct soap *soap,
	unsigned int formatVersion,
	unsigned int configurationVersion,
	unsigned int *configurationIncVersion,
	time_t generationDate,
	time_t activationDate,
	char *__item__1)
{
	ns2__Header *_p = soap_new_ns2__Header(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__Header::formatVersion = formatVersion;
		_p->ns2__Header::configurationVersion = configurationVersion;
		_p->ns2__Header::configurationIncVersion = configurationIncVersion;
		_p->ns2__Header::generationDate = generationDate;
		_p->ns2__Header::activationDate = activationDate;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__Header(struct soap *soap, ns2__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Header", p->soap_type() == SOAP_TYPE_ns2__Header ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__Header(struct soap *soap, const char *URL, ns2__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Header", p->soap_type() == SOAP_TYPE_ns2__Header ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__Header(struct soap *soap, const char *URL, ns2__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:Header", p->soap_type() == SOAP_TYPE_ns2__Header ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__Header * SOAP_FMAC4 soap_get_ns2__Header(struct soap*, ns2__Header *, const char*, const char*);

inline int soap_read_ns2__Header(struct soap *soap, ns2__Header *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__Header(struct soap *soap, const char *URL, ns2__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__Header(struct soap *soap, ns2__Header *p)
{
	if (soap_read_ns2__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns2__ConfigurationDocument_DEFINED
#define SOAP_TYPE_ns2__ConfigurationDocument_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ConfigurationDocument(struct soap*, const char*, int, const ns2__ConfigurationDocument *, const char*);
SOAP_FMAC3 ns2__ConfigurationDocument * SOAP_FMAC4 soap_in_ns2__ConfigurationDocument(struct soap*, const char*, ns2__ConfigurationDocument *, const char*);
SOAP_FMAC1 ns2__ConfigurationDocument * SOAP_FMAC2 soap_instantiate_ns2__ConfigurationDocument(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ConfigurationDocument * soap_new_ns2__ConfigurationDocument(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__ConfigurationDocument(soap, n, NULL, NULL, NULL);
}

inline ns2__ConfigurationDocument * soap_new_req_ns2__ConfigurationDocument(
	struct soap *soap,
	ns2__Header *header)
{
	ns2__ConfigurationDocument *_p = soap_new_ns2__ConfigurationDocument(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ConfigurationDocument::header = header;
	}
	return _p;
}

inline ns2__ConfigurationDocument * soap_new_set_ns2__ConfigurationDocument(
	struct soap *soap,
	ns2__Header *header,
	char *__item__1)
{
	ns2__ConfigurationDocument *_p = soap_new_ns2__ConfigurationDocument(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns2__ConfigurationDocument::header = header;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns2__ConfigurationDocument(struct soap *soap, ns2__ConfigurationDocument const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ConfigurationDocument", p->soap_type() == SOAP_TYPE_ns2__ConfigurationDocument ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__ConfigurationDocument(struct soap *soap, const char *URL, ns2__ConfigurationDocument const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ConfigurationDocument", p->soap_type() == SOAP_TYPE_ns2__ConfigurationDocument ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__ConfigurationDocument(struct soap *soap, const char *URL, ns2__ConfigurationDocument const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:ConfigurationDocument", p->soap_type() == SOAP_TYPE_ns2__ConfigurationDocument ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__ConfigurationDocument * SOAP_FMAC4 soap_get_ns2__ConfigurationDocument(struct soap*, ns2__ConfigurationDocument *, const char*, const char*);

inline int soap_read_ns2__ConfigurationDocument(struct soap *soap, ns2__ConfigurationDocument *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns2__ConfigurationDocument(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__ConfigurationDocument(struct soap *soap, const char *URL, ns2__ConfigurationDocument *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns2__ConfigurationDocument(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns2__ConfigurationDocument(struct soap *soap, ns2__ConfigurationDocument *p)
{
	if (soap_read_ns2__ConfigurationDocument(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__protocol_DEFINED
#define SOAP_TYPE__ns1__protocol_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__protocol(struct soap*, const char*, int, const _ns1__protocol *, const char*);
SOAP_FMAC3 _ns1__protocol * SOAP_FMAC4 soap_in__ns1__protocol(struct soap*, const char*, _ns1__protocol *, const char*);
SOAP_FMAC1 _ns1__protocol * SOAP_FMAC2 soap_instantiate__ns1__protocol(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__protocol * soap_new__ns1__protocol(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__protocol(soap, n, NULL, NULL, NULL);
}

inline _ns1__protocol * soap_new_req__ns1__protocol(
	struct soap *soap,
	const union _ns1__union_protocol& union_protocol,
	char *version)
{
	_ns1__protocol *_p = soap_new__ns1__protocol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__protocol::union_protocol = union_protocol;
		_p->_ns1__protocol::version = version;
	}
	return _p;
}

inline _ns1__protocol * soap_new_set__ns1__protocol(
	struct soap *soap,
	int __union_protocol,
	const union _ns1__union_protocol& union_protocol,
	char *version)
{
	_ns1__protocol *_p = soap_new__ns1__protocol(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__protocol::__union_protocol = __union_protocol;
		_p->_ns1__protocol::union_protocol = union_protocol;
		_p->_ns1__protocol::version = version;
	}
	return _p;
}

inline int soap_write__ns1__protocol(struct soap *soap, _ns1__protocol const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:protocol", p->soap_type() == SOAP_TYPE__ns1__protocol ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__protocol(struct soap *soap, const char *URL, _ns1__protocol const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:protocol", p->soap_type() == SOAP_TYPE__ns1__protocol ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__protocol(struct soap *soap, const char *URL, _ns1__protocol const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:protocol", p->soap_type() == SOAP_TYPE__ns1__protocol ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__protocol * SOAP_FMAC4 soap_get__ns1__protocol(struct soap*, _ns1__protocol *, const char*, const char*);

inline int soap_read__ns1__protocol(struct soap *soap, _ns1__protocol *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__protocol(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__protocol(struct soap *soap, const char *URL, _ns1__protocol *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__protocol(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__protocol(struct soap *soap, _ns1__protocol *p)
{
	if (soap_read__ns1__protocol(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingProductType_DEFINED
#define SOAP_TYPE_ns1__AccountingProductType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingProductType(struct soap*, const char*, int, const ns1__AccountingProductType *, const char*);
SOAP_FMAC3 ns1__AccountingProductType * SOAP_FMAC4 soap_in_ns1__AccountingProductType(struct soap*, const char*, ns1__AccountingProductType *, const char*);
SOAP_FMAC1 ns1__AccountingProductType * SOAP_FMAC2 soap_instantiate_ns1__AccountingProductType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingProductType * soap_new_ns1__AccountingProductType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingProductType(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingProductType * soap_new_req_ns1__AccountingProductType(
	struct soap *soap,
	LONG64 cd,
	LONG64 ag)
{
	ns1__AccountingProductType *_p = soap_new_ns1__AccountingProductType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingProductType::cd = cd;
		_p->ns1__AccountingProductType::ag = ag;
	}
	return _p;
}

inline ns1__AccountingProductType * soap_new_set_ns1__AccountingProductType(
	struct soap *soap,
	LONG64 cd,
	LONG64 ag,
	char *__item__1)
{
	ns1__AccountingProductType *_p = soap_new_ns1__AccountingProductType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingProductType::cd = cd;
		_p->ns1__AccountingProductType::ag = ag;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingProductType(struct soap *soap, ns1__AccountingProductType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingProductType", p->soap_type() == SOAP_TYPE_ns1__AccountingProductType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingProductType(struct soap *soap, const char *URL, ns1__AccountingProductType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingProductType", p->soap_type() == SOAP_TYPE_ns1__AccountingProductType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingProductType(struct soap *soap, const char *URL, ns1__AccountingProductType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingProductType", p->soap_type() == SOAP_TYPE_ns1__AccountingProductType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingProductType * SOAP_FMAC4 soap_get_ns1__AccountingProductType(struct soap*, ns1__AccountingProductType *, const char*, const char*);

inline int soap_read_ns1__AccountingProductType(struct soap *soap, ns1__AccountingProductType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingProductType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingProductType(struct soap *soap, const char *URL, ns1__AccountingProductType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingProductType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingProductType(struct soap *soap, ns1__AccountingProductType *p)
{
	if (soap_read_ns1__AccountingProductType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvRecordNotificationListType_DEFINED
#define SOAP_TYPE_ns1__SrvRecordNotificationListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvRecordNotificationListType(struct soap*, const char*, int, const ns1__SrvRecordNotificationListType *, const char*);
SOAP_FMAC3 ns1__SrvRecordNotificationListType * SOAP_FMAC4 soap_in_ns1__SrvRecordNotificationListType(struct soap*, const char*, ns1__SrvRecordNotificationListType *, const char*);
SOAP_FMAC1 ns1__SrvRecordNotificationListType * SOAP_FMAC2 soap_instantiate_ns1__SrvRecordNotificationListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvRecordNotificationListType * soap_new_ns1__SrvRecordNotificationListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvRecordNotificationListType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvRecordNotificationListType * soap_new_req_ns1__SrvRecordNotificationListType(
	struct soap *soap,
	int __sizesrvRecordNotification,
	ns1__SrvRecordNotificationType **srvRecordNotification)
{
	ns1__SrvRecordNotificationListType *_p = soap_new_ns1__SrvRecordNotificationListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvRecordNotificationListType::__sizesrvRecordNotification = __sizesrvRecordNotification;
		_p->ns1__SrvRecordNotificationListType::srvRecordNotification = srvRecordNotification;
	}
	return _p;
}

inline ns1__SrvRecordNotificationListType * soap_new_set_ns1__SrvRecordNotificationListType(
	struct soap *soap,
	int __sizesrvRecordNotification,
	ns1__SrvRecordNotificationType **srvRecordNotification,
	char *__item__1)
{
	ns1__SrvRecordNotificationListType *_p = soap_new_ns1__SrvRecordNotificationListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvRecordNotificationListType::__sizesrvRecordNotification = __sizesrvRecordNotification;
		_p->ns1__SrvRecordNotificationListType::srvRecordNotification = srvRecordNotification;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SrvRecordNotificationListType(struct soap *soap, ns1__SrvRecordNotificationListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordNotificationListType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordNotificationListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvRecordNotificationListType(struct soap *soap, const char *URL, ns1__SrvRecordNotificationListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordNotificationListType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordNotificationListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvRecordNotificationListType(struct soap *soap, const char *URL, ns1__SrvRecordNotificationListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordNotificationListType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordNotificationListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvRecordNotificationListType * SOAP_FMAC4 soap_get_ns1__SrvRecordNotificationListType(struct soap*, ns1__SrvRecordNotificationListType *, const char*, const char*);

inline int soap_read_ns1__SrvRecordNotificationListType(struct soap *soap, ns1__SrvRecordNotificationListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvRecordNotificationListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvRecordNotificationListType(struct soap *soap, const char *URL, ns1__SrvRecordNotificationListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvRecordNotificationListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvRecordNotificationListType(struct soap *soap, ns1__SrvRecordNotificationListType *p)
{
	if (soap_read_ns1__SrvRecordNotificationListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvOrderNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvOrderNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvOrderNotificationType(struct soap*, const char*, int, const ns1__SrvOrderNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvOrderNotificationType * SOAP_FMAC4 soap_in_ns1__SrvOrderNotificationType(struct soap*, const char*, ns1__SrvOrderNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvOrderNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvOrderNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvOrderNotificationType * soap_new_ns1__SrvOrderNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvOrderNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvOrderNotificationType * soap_new_req_ns1__SrvOrderNotificationType(
	struct soap *soap,
	char *params,
	int orderType,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvOrderNotificationType *_p = soap_new_ns1__SrvOrderNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvOrderNotificationType::params = params;
		_p->ns1__SrvOrderNotificationType::orderType = orderType;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvOrderNotificationType * soap_new_set_ns1__SrvOrderNotificationType(
	struct soap *soap,
	char *params,
	int orderType,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvOrderNotificationType *_p = soap_new_ns1__SrvOrderNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvOrderNotificationType::params = params;
		_p->ns1__SrvOrderNotificationType::orderType = orderType;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvOrderNotificationType(struct soap *soap, ns1__SrvOrderNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvOrderNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvOrderNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvOrderNotificationType(struct soap *soap, const char *URL, ns1__SrvOrderNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvOrderNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvOrderNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvOrderNotificationType(struct soap *soap, const char *URL, ns1__SrvOrderNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvOrderNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvOrderNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvOrderNotificationType * SOAP_FMAC4 soap_get_ns1__SrvOrderNotificationType(struct soap*, ns1__SrvOrderNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvOrderNotificationType(struct soap *soap, ns1__SrvOrderNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvOrderNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvOrderNotificationType(struct soap *soap, const char *URL, ns1__SrvOrderNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvOrderNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvOrderNotificationType(struct soap *soap, ns1__SrvOrderNotificationType *p)
{
	if (soap_read_ns1__SrvOrderNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFileNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvFileNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFileNotificationType(struct soap*, const char*, int, const ns1__SrvFileNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvFileNotificationType * SOAP_FMAC4 soap_in_ns1__SrvFileNotificationType(struct soap*, const char*, ns1__SrvFileNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvFileNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvFileNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFileNotificationType * soap_new_ns1__SrvFileNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFileNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFileNotificationType * soap_new_req_ns1__SrvFileNotificationType(
	struct soap *soap,
	char *filePath,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvFileNotificationType *_p = soap_new_ns1__SrvFileNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFileNotificationType::filePath = filePath;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvFileNotificationType * soap_new_set_ns1__SrvFileNotificationType(
	struct soap *soap,
	char *filePath,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvFileNotificationType *_p = soap_new_ns1__SrvFileNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFileNotificationType::filePath = filePath;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFileNotificationType(struct soap *soap, ns1__SrvFileNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFileNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFileNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFileNotificationType(struct soap *soap, const char *URL, ns1__SrvFileNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFileNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFileNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFileNotificationType(struct soap *soap, const char *URL, ns1__SrvFileNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFileNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFileNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFileNotificationType * SOAP_FMAC4 soap_get_ns1__SrvFileNotificationType(struct soap*, ns1__SrvFileNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvFileNotificationType(struct soap *soap, ns1__SrvFileNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFileNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFileNotificationType(struct soap *soap, const char *URL, ns1__SrvFileNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFileNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFileNotificationType(struct soap *soap, ns1__SrvFileNotificationType *p)
{
	if (soap_read_ns1__SrvFileNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvNewConfigurationNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvNewConfigurationNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvNewConfigurationNotificationType(struct soap*, const char*, int, const ns1__SrvNewConfigurationNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvNewConfigurationNotificationType * SOAP_FMAC4 soap_in_ns1__SrvNewConfigurationNotificationType(struct soap*, const char*, ns1__SrvNewConfigurationNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvNewConfigurationNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvNewConfigurationNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvNewConfigurationNotificationType * soap_new_ns1__SrvNewConfigurationNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvNewConfigurationNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvNewConfigurationNotificationType * soap_new_req_ns1__SrvNewConfigurationNotificationType(
	struct soap *soap,
	ns1__PackageConfigVersionListType *pkgList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvNewConfigurationNotificationType *_p = soap_new_ns1__SrvNewConfigurationNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvNewConfigurationNotificationType::pkgList = pkgList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvNewConfigurationNotificationType * soap_new_set_ns1__SrvNewConfigurationNotificationType(
	struct soap *soap,
	ns1__PackageConfigVersionListType *pkgList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvNewConfigurationNotificationType *_p = soap_new_ns1__SrvNewConfigurationNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvNewConfigurationNotificationType::pkgList = pkgList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvNewConfigurationNotificationType(struct soap *soap, ns1__SrvNewConfigurationNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvNewConfigurationNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvNewConfigurationNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvNewConfigurationNotificationType(struct soap *soap, const char *URL, ns1__SrvNewConfigurationNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvNewConfigurationNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvNewConfigurationNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvNewConfigurationNotificationType(struct soap *soap, const char *URL, ns1__SrvNewConfigurationNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvNewConfigurationNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvNewConfigurationNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvNewConfigurationNotificationType * SOAP_FMAC4 soap_get_ns1__SrvNewConfigurationNotificationType(struct soap*, ns1__SrvNewConfigurationNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvNewConfigurationNotificationType(struct soap *soap, ns1__SrvNewConfigurationNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvNewConfigurationNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvNewConfigurationNotificationType(struct soap *soap, const char *URL, ns1__SrvNewConfigurationNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvNewConfigurationNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvNewConfigurationNotificationType(struct soap *soap, ns1__SrvNewConfigurationNotificationType *p)
{
	if (soap_read_ns1__SrvNewConfigurationNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType * soap_new_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType * soap_new_req_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__StatusCCTIUListType *statusList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType::statusList = statusList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType * soap_new_set_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__StatusCCTIUListType *statusList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType::statusList = statusList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_StatusNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_StatusNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_StatusNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType * soap_new_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType * soap_new_req_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__AlarmCCTIUListType *alarmList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType::alarmList = alarmList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType * soap_new_set_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__AlarmCCTIUListType *alarmList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType::alarmList = alarmList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_AlarmNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_AlarmNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_AlarmNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCORECommandExecNotifyType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCORECommandExecNotifyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap*, const char*, int, const ns1__SrvMTC_USCORECommandExecNotifyType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecNotifyType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap*, const char*, ns1__SrvMTC_USCORECommandExecNotifyType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCORECommandExecNotifyType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCORECommandExecNotifyType * soap_new_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCORECommandExecNotifyType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCORECommandExecNotifyType * soap_new_req_ns1__SrvMTC_USCORECommandExecNotifyType(
	struct soap *soap,
	unsigned int status,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvMTC_USCORECommandExecNotifyType *_p = soap_new_ns1__SrvMTC_USCORECommandExecNotifyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORECommandExecNotifyType::status = status;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCORECommandExecNotifyType * soap_new_set_ns1__SrvMTC_USCORECommandExecNotifyType(
	struct soap *soap,
	unsigned int status,
	bool *endInError,
	unsigned int *errorCode,
	char *errorDesc,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCORECommandExecNotifyType *_p = soap_new_ns1__SrvMTC_USCORECommandExecNotifyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORECommandExecNotifyType::status = status;
		_p->ns1__SrvMTC_USCORECommandExecNotifyType::endInError = endInError;
		_p->ns1__SrvMTC_USCORECommandExecNotifyType::errorCode = errorCode;
		_p->ns1__SrvMTC_USCORECommandExecNotifyType::errorDesc = errorDesc;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap *soap, ns1__SrvMTC_USCORECommandExecNotifyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_CommandExecNotifyType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORECommandExecNotifyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORECommandExecNotifyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_CommandExecNotifyType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORECommandExecNotifyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORECommandExecNotifyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_CommandExecNotifyType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORECommandExecNotifyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecNotifyType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap*, ns1__SrvMTC_USCORECommandExecNotifyType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap *soap, ns1__SrvMTC_USCORECommandExecNotifyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCORECommandExecNotifyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORECommandExecNotifyType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCORECommandExecNotifyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCORECommandExecNotifyType(struct soap *soap, ns1__SrvMTC_USCORECommandExecNotifyType *p)
{
	if (soap_read_ns1__SrvMTC_USCORECommandExecNotifyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREStatusNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREStatusNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREStatusNotificationType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREStatusNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusNotificationType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREStatusNotificationType(struct soap*, const char*, ns1__SrvMTC_USCOREStatusNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREStatusNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREStatusNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREStatusNotificationType * soap_new_ns1__SrvMTC_USCOREStatusNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREStatusNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREStatusNotificationType * soap_new_req_ns1__SrvMTC_USCOREStatusNotificationType(
	struct soap *soap,
	ns1__StatusCCTIUListType *statusList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvMTC_USCOREStatusNotificationType *_p = soap_new_ns1__SrvMTC_USCOREStatusNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREStatusNotificationType::statusList = statusList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREStatusNotificationType * soap_new_set_ns1__SrvMTC_USCOREStatusNotificationType(
	struct soap *soap,
	ns1__StatusCCTIUListType *statusList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREStatusNotificationType *_p = soap_new_ns1__SrvMTC_USCOREStatusNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREStatusNotificationType::statusList = statusList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREStatusNotificationType(struct soap *soap, ns1__SrvMTC_USCOREStatusNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_StatusNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREStatusNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREStatusNotificationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREStatusNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_StatusNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREStatusNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREStatusNotificationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREStatusNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_StatusNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREStatusNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusNotificationType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREStatusNotificationType(struct soap*, ns1__SrvMTC_USCOREStatusNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREStatusNotificationType(struct soap *soap, ns1__SrvMTC_USCOREStatusNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREStatusNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREStatusNotificationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREStatusNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREStatusNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREStatusNotificationType(struct soap *soap, ns1__SrvMTC_USCOREStatusNotificationType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREStatusNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREAlarmNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREAlarmNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREAlarmNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmNotificationType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap*, const char*, ns1__SrvMTC_USCOREAlarmNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREAlarmNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREAlarmNotificationType * soap_new_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREAlarmNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREAlarmNotificationType * soap_new_req_ns1__SrvMTC_USCOREAlarmNotificationType(
	struct soap *soap,
	ns1__AlarmCCTIUListType *alarmList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvMTC_USCOREAlarmNotificationType *_p = soap_new_ns1__SrvMTC_USCOREAlarmNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREAlarmNotificationType::alarmList = alarmList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREAlarmNotificationType * soap_new_set_ns1__SrvMTC_USCOREAlarmNotificationType(
	struct soap *soap,
	ns1__AlarmCCTIUListType *alarmList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREAlarmNotificationType *_p = soap_new_ns1__SrvMTC_USCOREAlarmNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREAlarmNotificationType::alarmList = alarmList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap *soap, ns1__SrvMTC_USCOREAlarmNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_AlarmNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREAlarmNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREAlarmNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_AlarmNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREAlarmNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREAlarmNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_AlarmNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREAlarmNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmNotificationType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap*, ns1__SrvMTC_USCOREAlarmNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap *soap, ns1__SrvMTC_USCOREAlarmNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREAlarmNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREAlarmNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREAlarmNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREAlarmNotificationType(struct soap *soap, ns1__SrvMTC_USCOREAlarmNotificationType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREAlarmNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMtvmExtendedStateNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvMtvmExtendedStateNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMtvmExtendedStateNotificationType(struct soap*, const char*, int, const ns1__SrvMtvmExtendedStateNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvMtvmExtendedStateNotificationType * SOAP_FMAC4 soap_in_ns1__SrvMtvmExtendedStateNotificationType(struct soap*, const char*, ns1__SrvMtvmExtendedStateNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvMtvmExtendedStateNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvMtvmExtendedStateNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMtvmExtendedStateNotificationType * soap_new_ns1__SrvMtvmExtendedStateNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMtvmExtendedStateNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMtvmExtendedStateNotificationType * soap_new_req_ns1__SrvMtvmExtendedStateNotificationType(
	struct soap *soap,
	ns1__MtvmExtStateType *extState,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvMtvmExtendedStateNotificationType *_p = soap_new_ns1__SrvMtvmExtendedStateNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMtvmExtendedStateNotificationType::extState = extState;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvMtvmExtendedStateNotificationType * soap_new_set_ns1__SrvMtvmExtendedStateNotificationType(
	struct soap *soap,
	ns1__MtvmExtStateType *extState,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvMtvmExtendedStateNotificationType *_p = soap_new_ns1__SrvMtvmExtendedStateNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMtvmExtendedStateNotificationType::extState = extState;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMtvmExtendedStateNotificationType(struct soap *soap, ns1__SrvMtvmExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMtvmExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMtvmExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMtvmExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvMtvmExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMtvmExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMtvmExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMtvmExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvMtvmExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMtvmExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMtvmExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMtvmExtendedStateNotificationType * SOAP_FMAC4 soap_get_ns1__SrvMtvmExtendedStateNotificationType(struct soap*, ns1__SrvMtvmExtendedStateNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvMtvmExtendedStateNotificationType(struct soap *soap, ns1__SrvMtvmExtendedStateNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMtvmExtendedStateNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMtvmExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvMtvmExtendedStateNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMtvmExtendedStateNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMtvmExtendedStateNotificationType(struct soap *soap, ns1__SrvMtvmExtendedStateNotificationType *p)
{
	if (soap_read_ns1__SrvMtvmExtendedStateNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvExtendedStateNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvExtendedStateNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvExtendedStateNotificationType(struct soap*, const char*, int, const ns1__SrvExtendedStateNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvExtendedStateNotificationType * SOAP_FMAC4 soap_in_ns1__SrvExtendedStateNotificationType(struct soap*, const char*, ns1__SrvExtendedStateNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvExtendedStateNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvExtendedStateNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvExtendedStateNotificationType * soap_new_ns1__SrvExtendedStateNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvExtendedStateNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvExtendedStateNotificationType * soap_new_req_ns1__SrvExtendedStateNotificationType(
	struct soap *soap,
	ns1__ExtStateType *ee,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvExtendedStateNotificationType *_p = soap_new_ns1__SrvExtendedStateNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvExtendedStateNotificationType::ee = ee;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvExtendedStateNotificationType * soap_new_set_ns1__SrvExtendedStateNotificationType(
	struct soap *soap,
	ns1__ExtStateType *ee,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvExtendedStateNotificationType *_p = soap_new_ns1__SrvExtendedStateNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvExtendedStateNotificationType::ee = ee;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvExtendedStateNotificationType(struct soap *soap, ns1__SrvExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvExtendedStateNotificationType * SOAP_FMAC4 soap_get_ns1__SrvExtendedStateNotificationType(struct soap*, ns1__SrvExtendedStateNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvExtendedStateNotificationType(struct soap *soap, ns1__SrvExtendedStateNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvExtendedStateNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvExtendedStateNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvExtendedStateNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvExtendedStateNotificationType(struct soap *soap, ns1__SrvExtendedStateNotificationType *p)
{
	if (soap_read_ns1__SrvExtendedStateNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvTvmExtendedStateNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvTvmExtendedStateNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvTvmExtendedStateNotificationType(struct soap*, const char*, int, const ns1__SrvTvmExtendedStateNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvTvmExtendedStateNotificationType * SOAP_FMAC4 soap_in_ns1__SrvTvmExtendedStateNotificationType(struct soap*, const char*, ns1__SrvTvmExtendedStateNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvTvmExtendedStateNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvTvmExtendedStateNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvTvmExtendedStateNotificationType * soap_new_ns1__SrvTvmExtendedStateNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvTvmExtendedStateNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvTvmExtendedStateNotificationType * soap_new_req_ns1__SrvTvmExtendedStateNotificationType(
	struct soap *soap,
	ns1__TvmExtStateType *tvms,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvTvmExtendedStateNotificationType *_p = soap_new_ns1__SrvTvmExtendedStateNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvTvmExtendedStateNotificationType::tvms = tvms;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvTvmExtendedStateNotificationType * soap_new_set_ns1__SrvTvmExtendedStateNotificationType(
	struct soap *soap,
	ns1__TvmExtStateType *tvms,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvTvmExtendedStateNotificationType *_p = soap_new_ns1__SrvTvmExtendedStateNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvTvmExtendedStateNotificationType::tvms = tvms;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvTvmExtendedStateNotificationType(struct soap *soap, ns1__SrvTvmExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvTvmExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvTvmExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvTvmExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvTvmExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvTvmExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvTvmExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvTvmExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvTvmExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvTvmExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvTvmExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvTvmExtendedStateNotificationType * SOAP_FMAC4 soap_get_ns1__SrvTvmExtendedStateNotificationType(struct soap*, ns1__SrvTvmExtendedStateNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvTvmExtendedStateNotificationType(struct soap *soap, ns1__SrvTvmExtendedStateNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvTvmExtendedStateNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvTvmExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvTvmExtendedStateNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvTvmExtendedStateNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvTvmExtendedStateNotificationType(struct soap *soap, ns1__SrvTvmExtendedStateNotificationType *p)
{
	if (soap_read_ns1__SrvTvmExtendedStateNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvStateSceqnNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvStateSceqnNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvStateSceqnNotificationType(struct soap*, const char*, int, const ns1__SrvStateSceqnNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvStateSceqnNotificationType * SOAP_FMAC4 soap_in_ns1__SrvStateSceqnNotificationType(struct soap*, const char*, ns1__SrvStateSceqnNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvStateSceqnNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvStateSceqnNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvStateSceqnNotificationType * soap_new_ns1__SrvStateSceqnNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvStateSceqnNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvStateSceqnNotificationType * soap_new_req_ns1__SrvStateSceqnNotificationType(
	struct soap *soap,
	ns1__SceqExtStateType *scL,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvStateSceqnNotificationType *_p = soap_new_ns1__SrvStateSceqnNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvStateSceqnNotificationType::scL = scL;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvStateSceqnNotificationType * soap_new_set_ns1__SrvStateSceqnNotificationType(
	struct soap *soap,
	ns1__SceqExtStateType *scL,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvStateSceqnNotificationType *_p = soap_new_ns1__SrvStateSceqnNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvStateSceqnNotificationType::scL = scL;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvStateSceqnNotificationType(struct soap *soap, ns1__SrvStateSceqnNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateSceqnNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateSceqnNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvStateSceqnNotificationType(struct soap *soap, const char *URL, ns1__SrvStateSceqnNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateSceqnNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateSceqnNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvStateSceqnNotificationType(struct soap *soap, const char *URL, ns1__SrvStateSceqnNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateSceqnNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateSceqnNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvStateSceqnNotificationType * SOAP_FMAC4 soap_get_ns1__SrvStateSceqnNotificationType(struct soap*, ns1__SrvStateSceqnNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvStateSceqnNotificationType(struct soap *soap, ns1__SrvStateSceqnNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvStateSceqnNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvStateSceqnNotificationType(struct soap *soap, const char *URL, ns1__SrvStateSceqnNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvStateSceqnNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvStateSceqnNotificationType(struct soap *soap, ns1__SrvStateSceqnNotificationType *p)
{
	if (soap_read_ns1__SrvStateSceqnNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__stateConfigInstallationType_DEFINED
#define SOAP_TYPE_ns1__stateConfigInstallationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__stateConfigInstallationType(struct soap*, const char*, int, const ns1__stateConfigInstallationType *, const char*);
SOAP_FMAC3 ns1__stateConfigInstallationType * SOAP_FMAC4 soap_in_ns1__stateConfigInstallationType(struct soap*, const char*, ns1__stateConfigInstallationType *, const char*);
SOAP_FMAC1 ns1__stateConfigInstallationType * SOAP_FMAC2 soap_instantiate_ns1__stateConfigInstallationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__stateConfigInstallationType * soap_new_ns1__stateConfigInstallationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__stateConfigInstallationType(soap, n, NULL, NULL, NULL);
}

inline ns1__stateConfigInstallationType * soap_new_req_ns1__stateConfigInstallationType(
	struct soap *soap,
	int pkgId,
	int v,
	time_t actDate,
	int state)
{
	ns1__stateConfigInstallationType *_p = soap_new_ns1__stateConfigInstallationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stateConfigInstallationType::pkgId = pkgId;
		_p->ns1__stateConfigInstallationType::v = v;
		_p->ns1__stateConfigInstallationType::actDate = actDate;
		_p->ns1__stateConfigInstallationType::state = state;
	}
	return _p;
}

inline ns1__stateConfigInstallationType * soap_new_set_ns1__stateConfigInstallationType(
	struct soap *soap,
	int pkgId,
	int v,
	time_t actDate,
	int state,
	char *__item__1)
{
	ns1__stateConfigInstallationType *_p = soap_new_ns1__stateConfigInstallationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stateConfigInstallationType::pkgId = pkgId;
		_p->ns1__stateConfigInstallationType::v = v;
		_p->ns1__stateConfigInstallationType::actDate = actDate;
		_p->ns1__stateConfigInstallationType::state = state;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__stateConfigInstallationType(struct soap *soap, ns1__stateConfigInstallationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stateConfigInstallationType", p->soap_type() == SOAP_TYPE_ns1__stateConfigInstallationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__stateConfigInstallationType(struct soap *soap, const char *URL, ns1__stateConfigInstallationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stateConfigInstallationType", p->soap_type() == SOAP_TYPE_ns1__stateConfigInstallationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__stateConfigInstallationType(struct soap *soap, const char *URL, ns1__stateConfigInstallationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stateConfigInstallationType", p->soap_type() == SOAP_TYPE_ns1__stateConfigInstallationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__stateConfigInstallationType * SOAP_FMAC4 soap_get_ns1__stateConfigInstallationType(struct soap*, ns1__stateConfigInstallationType *, const char*, const char*);

inline int soap_read_ns1__stateConfigInstallationType(struct soap *soap, ns1__stateConfigInstallationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__stateConfigInstallationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__stateConfigInstallationType(struct soap *soap, const char *URL, ns1__stateConfigInstallationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__stateConfigInstallationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__stateConfigInstallationType(struct soap *soap, ns1__stateConfigInstallationType *p)
{
	if (soap_read_ns1__stateConfigInstallationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StateConfigInstallationListType_DEFINED
#define SOAP_TYPE_ns1__StateConfigInstallationListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StateConfigInstallationListType(struct soap*, const char*, int, const ns1__StateConfigInstallationListType *, const char*);
SOAP_FMAC3 ns1__StateConfigInstallationListType * SOAP_FMAC4 soap_in_ns1__StateConfigInstallationListType(struct soap*, const char*, ns1__StateConfigInstallationListType *, const char*);
SOAP_FMAC1 ns1__StateConfigInstallationListType * SOAP_FMAC2 soap_instantiate_ns1__StateConfigInstallationListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StateConfigInstallationListType * soap_new_ns1__StateConfigInstallationListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StateConfigInstallationListType(soap, n, NULL, NULL, NULL);
}

inline ns1__StateConfigInstallationListType * soap_new_req_ns1__StateConfigInstallationListType(
	struct soap *soap,
	int __sizesct,
	ns1__stateConfigInstallationType **sct)
{
	ns1__StateConfigInstallationListType *_p = soap_new_ns1__StateConfigInstallationListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StateConfigInstallationListType::__sizesct = __sizesct;
		_p->ns1__StateConfigInstallationListType::sct = sct;
	}
	return _p;
}

inline ns1__StateConfigInstallationListType * soap_new_set_ns1__StateConfigInstallationListType(
	struct soap *soap,
	int __sizesct,
	ns1__stateConfigInstallationType **sct,
	int *length,
	char *__item__1)
{
	ns1__StateConfigInstallationListType *_p = soap_new_ns1__StateConfigInstallationListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StateConfigInstallationListType::__sizesct = __sizesct;
		_p->ns1__StateConfigInstallationListType::sct = sct;
		_p->ns1__StateConfigInstallationListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__StateConfigInstallationListType(struct soap *soap, ns1__StateConfigInstallationListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StateConfigInstallationListType", p->soap_type() == SOAP_TYPE_ns1__StateConfigInstallationListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StateConfigInstallationListType(struct soap *soap, const char *URL, ns1__StateConfigInstallationListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StateConfigInstallationListType", p->soap_type() == SOAP_TYPE_ns1__StateConfigInstallationListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StateConfigInstallationListType(struct soap *soap, const char *URL, ns1__StateConfigInstallationListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StateConfigInstallationListType", p->soap_type() == SOAP_TYPE_ns1__StateConfigInstallationListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StateConfigInstallationListType * SOAP_FMAC4 soap_get_ns1__StateConfigInstallationListType(struct soap*, ns1__StateConfigInstallationListType *, const char*, const char*);

inline int soap_read_ns1__StateConfigInstallationListType(struct soap *soap, ns1__StateConfigInstallationListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__StateConfigInstallationListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StateConfigInstallationListType(struct soap *soap, const char *URL, ns1__StateConfigInstallationListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StateConfigInstallationListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StateConfigInstallationListType(struct soap *soap, ns1__StateConfigInstallationListType *p)
{
	if (soap_read_ns1__StateConfigInstallationListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvStateConfigInstallationNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvStateConfigInstallationNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvStateConfigInstallationNotificationType(struct soap*, const char*, int, const ns1__SrvStateConfigInstallationNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvStateConfigInstallationNotificationType * SOAP_FMAC4 soap_in_ns1__SrvStateConfigInstallationNotificationType(struct soap*, const char*, ns1__SrvStateConfigInstallationNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvStateConfigInstallationNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvStateConfigInstallationNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvStateConfigInstallationNotificationType * soap_new_ns1__SrvStateConfigInstallationNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvStateConfigInstallationNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvStateConfigInstallationNotificationType * soap_new_req_ns1__SrvStateConfigInstallationNotificationType(
	struct soap *soap,
	ns1__StateConfigInstallationListType *pl,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvStateConfigInstallationNotificationType *_p = soap_new_ns1__SrvStateConfigInstallationNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvStateConfigInstallationNotificationType::pl = pl;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvStateConfigInstallationNotificationType * soap_new_set_ns1__SrvStateConfigInstallationNotificationType(
	struct soap *soap,
	ns1__StateConfigInstallationListType *pl,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvStateConfigInstallationNotificationType *_p = soap_new_ns1__SrvStateConfigInstallationNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvStateConfigInstallationNotificationType::pl = pl;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvStateConfigInstallationNotificationType(struct soap *soap, ns1__SrvStateConfigInstallationNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateConfigInstallationNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateConfigInstallationNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvStateConfigInstallationNotificationType(struct soap *soap, const char *URL, ns1__SrvStateConfigInstallationNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateConfigInstallationNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateConfigInstallationNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvStateConfigInstallationNotificationType(struct soap *soap, const char *URL, ns1__SrvStateConfigInstallationNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateConfigInstallationNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateConfigInstallationNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvStateConfigInstallationNotificationType * SOAP_FMAC4 soap_get_ns1__SrvStateConfigInstallationNotificationType(struct soap*, ns1__SrvStateConfigInstallationNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvStateConfigInstallationNotificationType(struct soap *soap, ns1__SrvStateConfigInstallationNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvStateConfigInstallationNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvStateConfigInstallationNotificationType(struct soap *soap, const char *URL, ns1__SrvStateConfigInstallationNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvStateConfigInstallationNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvStateConfigInstallationNotificationType(struct soap *soap, ns1__SrvStateConfigInstallationNotificationType *p)
{
	if (soap_read_ns1__SrvStateConfigInstallationNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvVersionNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvVersionNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvVersionNotificationType(struct soap*, const char*, int, const ns1__SrvVersionNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvVersionNotificationType * SOAP_FMAC4 soap_in_ns1__SrvVersionNotificationType(struct soap*, const char*, ns1__SrvVersionNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvVersionNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvVersionNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvVersionNotificationType * soap_new_ns1__SrvVersionNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvVersionNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvVersionNotificationType * soap_new_req_ns1__SrvVersionNotificationType(
	struct soap *soap,
	ns1__versionListType *versionList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvVersionNotificationType *_p = soap_new_ns1__SrvVersionNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvVersionNotificationType::versionList = versionList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvVersionNotificationType * soap_new_set_ns1__SrvVersionNotificationType(
	struct soap *soap,
	ns1__versionListType *versionList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvVersionNotificationType *_p = soap_new_ns1__SrvVersionNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvVersionNotificationType::versionList = versionList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvVersionNotificationType(struct soap *soap, ns1__SrvVersionNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvVersionNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvVersionNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvVersionNotificationType(struct soap *soap, const char *URL, ns1__SrvVersionNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvVersionNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvVersionNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvVersionNotificationType(struct soap *soap, const char *URL, ns1__SrvVersionNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvVersionNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvVersionNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvVersionNotificationType * SOAP_FMAC4 soap_get_ns1__SrvVersionNotificationType(struct soap*, ns1__SrvVersionNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvVersionNotificationType(struct soap *soap, ns1__SrvVersionNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvVersionNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvVersionNotificationType(struct soap *soap, const char *URL, ns1__SrvVersionNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvVersionNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvVersionNotificationType(struct soap *soap, ns1__SrvVersionNotificationType *p)
{
	if (soap_read_ns1__SrvVersionNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvDiagnosticNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvDiagnosticNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvDiagnosticNotificationType(struct soap*, const char*, int, const ns1__SrvDiagnosticNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvDiagnosticNotificationType * SOAP_FMAC4 soap_in_ns1__SrvDiagnosticNotificationType(struct soap*, const char*, ns1__SrvDiagnosticNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvDiagnosticNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvDiagnosticNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvDiagnosticNotificationType * soap_new_ns1__SrvDiagnosticNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvDiagnosticNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvDiagnosticNotificationType * soap_new_req_ns1__SrvDiagnosticNotificationType(
	struct soap *soap,
	ns1__diagnosticListType *diagnosticList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvDiagnosticNotificationType *_p = soap_new_ns1__SrvDiagnosticNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvDiagnosticNotificationType::diagnosticList = diagnosticList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvDiagnosticNotificationType * soap_new_set_ns1__SrvDiagnosticNotificationType(
	struct soap *soap,
	ns1__diagnosticListType *diagnosticList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvDiagnosticNotificationType *_p = soap_new_ns1__SrvDiagnosticNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvDiagnosticNotificationType::diagnosticList = diagnosticList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvDiagnosticNotificationType(struct soap *soap, ns1__SrvDiagnosticNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvDiagnosticNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvDiagnosticNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvDiagnosticNotificationType(struct soap *soap, const char *URL, ns1__SrvDiagnosticNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvDiagnosticNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvDiagnosticNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvDiagnosticNotificationType(struct soap *soap, const char *URL, ns1__SrvDiagnosticNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvDiagnosticNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvDiagnosticNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvDiagnosticNotificationType * SOAP_FMAC4 soap_get_ns1__SrvDiagnosticNotificationType(struct soap*, ns1__SrvDiagnosticNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvDiagnosticNotificationType(struct soap *soap, ns1__SrvDiagnosticNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvDiagnosticNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvDiagnosticNotificationType(struct soap *soap, const char *URL, ns1__SrvDiagnosticNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvDiagnosticNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvDiagnosticNotificationType(struct soap *soap, ns1__SrvDiagnosticNotificationType *p)
{
	if (soap_read_ns1__SrvDiagnosticNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvConfigurationNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvConfigurationNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvConfigurationNotificationType(struct soap*, const char*, int, const ns1__SrvConfigurationNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvConfigurationNotificationType * SOAP_FMAC4 soap_in_ns1__SrvConfigurationNotificationType(struct soap*, const char*, ns1__SrvConfigurationNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvConfigurationNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvConfigurationNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvConfigurationNotificationType * soap_new_ns1__SrvConfigurationNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvConfigurationNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvConfigurationNotificationType * soap_new_req_ns1__SrvConfigurationNotificationType(
	struct soap *soap,
	ns1__confPackageListType *pl,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvConfigurationNotificationType *_p = soap_new_ns1__SrvConfigurationNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvConfigurationNotificationType::pl = pl;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvConfigurationNotificationType * soap_new_set_ns1__SrvConfigurationNotificationType(
	struct soap *soap,
	ns1__confPackageListType *pl,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvConfigurationNotificationType *_p = soap_new_ns1__SrvConfigurationNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvConfigurationNotificationType::pl = pl;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvConfigurationNotificationType(struct soap *soap, ns1__SrvConfigurationNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvConfigurationNotificationType(struct soap *soap, const char *URL, ns1__SrvConfigurationNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvConfigurationNotificationType(struct soap *soap, const char *URL, ns1__SrvConfigurationNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvConfigurationNotificationType * SOAP_FMAC4 soap_get_ns1__SrvConfigurationNotificationType(struct soap*, ns1__SrvConfigurationNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvConfigurationNotificationType(struct soap *soap, ns1__SrvConfigurationNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvConfigurationNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvConfigurationNotificationType(struct soap *soap, const char *URL, ns1__SrvConfigurationNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvConfigurationNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvConfigurationNotificationType(struct soap *soap, ns1__SrvConfigurationNotificationType *p)
{
	if (soap_read_ns1__SrvConfigurationNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvAlarmNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvAlarmNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvAlarmNotificationType(struct soap*, const char*, int, const ns1__SrvAlarmNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvAlarmNotificationType * SOAP_FMAC4 soap_in_ns1__SrvAlarmNotificationType(struct soap*, const char*, ns1__SrvAlarmNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvAlarmNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvAlarmNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvAlarmNotificationType * soap_new_ns1__SrvAlarmNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvAlarmNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvAlarmNotificationType * soap_new_req_ns1__SrvAlarmNotificationType(
	struct soap *soap,
	ns1__AlarmListType *alarmList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvAlarmNotificationType *_p = soap_new_ns1__SrvAlarmNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvAlarmNotificationType::alarmList = alarmList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvAlarmNotificationType * soap_new_set_ns1__SrvAlarmNotificationType(
	struct soap *soap,
	ns1__AlarmListType *alarmList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvAlarmNotificationType *_p = soap_new_ns1__SrvAlarmNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvAlarmNotificationType::alarmList = alarmList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvAlarmNotificationType(struct soap *soap, ns1__SrvAlarmNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvAlarmNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvAlarmNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvAlarmNotificationType(struct soap *soap, const char *URL, ns1__SrvAlarmNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvAlarmNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvAlarmNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvAlarmNotificationType(struct soap *soap, const char *URL, ns1__SrvAlarmNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvAlarmNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvAlarmNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvAlarmNotificationType * SOAP_FMAC4 soap_get_ns1__SrvAlarmNotificationType(struct soap*, ns1__SrvAlarmNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvAlarmNotificationType(struct soap *soap, ns1__SrvAlarmNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvAlarmNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvAlarmNotificationType(struct soap *soap, const char *URL, ns1__SrvAlarmNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvAlarmNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvAlarmNotificationType(struct soap *soap, ns1__SrvAlarmNotificationType *p)
{
	if (soap_read_ns1__SrvAlarmNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvStateNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvStateNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvStateNotificationType(struct soap*, const char*, int, const ns1__SrvStateNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvStateNotificationType * SOAP_FMAC4 soap_in_ns1__SrvStateNotificationType(struct soap*, const char*, ns1__SrvStateNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvStateNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvStateNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvStateNotificationType * soap_new_ns1__SrvStateNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvStateNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvStateNotificationType * soap_new_req_ns1__SrvStateNotificationType(
	struct soap *soap,
	ns1__stateType *state,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvStateNotificationType *_p = soap_new_ns1__SrvStateNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvStateNotificationType::state = state;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvStateNotificationType * soap_new_set_ns1__SrvStateNotificationType(
	struct soap *soap,
	ns1__stateType *state,
	ns1__SlaveStateListType *slavesState,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvStateNotificationType *_p = soap_new_ns1__SrvStateNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvStateNotificationType::state = state;
		_p->ns1__SrvStateNotificationType::slavesState = slavesState;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvStateNotificationType(struct soap *soap, ns1__SrvStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvStateNotificationType(struct soap *soap, const char *URL, ns1__SrvStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvStateNotificationType(struct soap *soap, const char *URL, ns1__SrvStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvStateNotificationType * SOAP_FMAC4 soap_get_ns1__SrvStateNotificationType(struct soap*, ns1__SrvStateNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvStateNotificationType(struct soap *soap, ns1__SrvStateNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvStateNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvStateNotificationType(struct soap *soap, const char *URL, ns1__SrvStateNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvStateNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvStateNotificationType(struct soap *soap, ns1__SrvStateNotificationType *p)
{
	if (soap_read_ns1__SrvStateNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType * soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType * soap_new_req_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(
	struct soap *soap,
	ns1__InfoFERecordMTCType *base,
	ns1__TransactionMTCRegTypeList *transacList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType::transacList = transacList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType * soap_new_set_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(
	struct soap *soap,
	ns1__InfoFERecordMTCType *base,
	ns1__TransactionMTCRegTypeList *transacList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType::transacList = transacList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCORETransactionNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCORETransactionNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCORETransactionNotificationType(struct soap*, const char*, int, const ns1__SrvMTC_USCORETransactionNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionNotificationType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCORETransactionNotificationType(struct soap*, const char*, ns1__SrvMTC_USCORETransactionNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCORETransactionNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCORETransactionNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCORETransactionNotificationType * soap_new_ns1__SrvMTC_USCORETransactionNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCORETransactionNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCORETransactionNotificationType * soap_new_req_ns1__SrvMTC_USCORETransactionNotificationType(
	struct soap *soap,
	ns1__TransactionMTCRegTypeList *transacList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvMTC_USCORETransactionNotificationType *_p = soap_new_ns1__SrvMTC_USCORETransactionNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORETransactionNotificationType::transacList = transacList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCORETransactionNotificationType * soap_new_set_ns1__SrvMTC_USCORETransactionNotificationType(
	struct soap *soap,
	ns1__TransactionMTCRegTypeList *transacList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCORETransactionNotificationType *_p = soap_new_ns1__SrvMTC_USCORETransactionNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORETransactionNotificationType::transacList = transacList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCORETransactionNotificationType(struct soap *soap, ns1__SrvMTC_USCORETransactionNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCORETransactionNotificationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCORETransactionNotificationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionNotificationType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCORETransactionNotificationType(struct soap*, ns1__SrvMTC_USCORETransactionNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCORETransactionNotificationType(struct soap *soap, ns1__SrvMTC_USCORETransactionNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCORETransactionNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCORETransactionNotificationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCORETransactionNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCORETransactionNotificationType(struct soap *soap, ns1__SrvMTC_USCORETransactionNotificationType *p)
{
	if (soap_read_ns1__SrvMTC_USCORETransactionNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvRecordNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvRecordNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvRecordNotificationType(struct soap*, const char*, int, const ns1__SrvRecordNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvRecordNotificationType * SOAP_FMAC4 soap_in_ns1__SrvRecordNotificationType(struct soap*, const char*, ns1__SrvRecordNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvRecordNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvRecordNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvRecordNotificationType * soap_new_ns1__SrvRecordNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvRecordNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvRecordNotificationType * soap_new_req_ns1__SrvRecordNotificationType(
	struct soap *soap,
	ns1__RecordListType *recList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvRecordNotificationType *_p = soap_new_ns1__SrvRecordNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvRecordNotificationType::recList = recList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvRecordNotificationType * soap_new_set_ns1__SrvRecordNotificationType(
	struct soap *soap,
	ns1__RecordListType *recList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvRecordNotificationType *_p = soap_new_ns1__SrvRecordNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvRecordNotificationType::recList = recList;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvRecordNotificationType(struct soap *soap, ns1__SrvRecordNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvRecordNotificationType(struct soap *soap, const char *URL, ns1__SrvRecordNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvRecordNotificationType(struct soap *soap, const char *URL, ns1__SrvRecordNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvRecordNotificationType * SOAP_FMAC4 soap_get_ns1__SrvRecordNotificationType(struct soap*, ns1__SrvRecordNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvRecordNotificationType(struct soap *soap, ns1__SrvRecordNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvRecordNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvRecordNotificationType(struct soap *soap, const char *URL, ns1__SrvRecordNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvRecordNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvRecordNotificationType(struct soap *soap, ns1__SrvRecordNotificationType *p)
{
	if (soap_read_ns1__SrvRecordNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PatternServiceNotificationType_DEFINED
#define SOAP_TYPE_ns1__PatternServiceNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PatternServiceNotificationType(struct soap*, const char*, int, const ns1__PatternServiceNotificationType *, const char*);
SOAP_FMAC3 ns1__PatternServiceNotificationType * SOAP_FMAC4 soap_in_ns1__PatternServiceNotificationType(struct soap*, const char*, ns1__PatternServiceNotificationType *, const char*);
SOAP_FMAC1 ns1__PatternServiceNotificationType * SOAP_FMAC2 soap_instantiate_ns1__PatternServiceNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PatternServiceNotificationType * soap_new_ns1__PatternServiceNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PatternServiceNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__PatternServiceNotificationType * soap_new_req_ns1__PatternServiceNotificationType(
	struct soap *soap,
	time_t dateTime,
	ns1__EquipmentReferenceType *notificationFrom)
{
	ns1__PatternServiceNotificationType *_p = soap_new_ns1__PatternServiceNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom;
	}
	return _p;
}

inline ns1__PatternServiceNotificationType * soap_new_set_ns1__PatternServiceNotificationType(
	struct soap *soap,
	time_t dateTime,
	ns1__EquipmentReferenceType *notificationFrom,
	ns1__EquipmentReferenceType *notificationTo,
	ns1__SlaveEquipmentListType *notSlaveList,
	unsigned int *idMessage,
	char *__item__1)
{
	ns1__PatternServiceNotificationType *_p = soap_new_ns1__PatternServiceNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PatternServiceNotificationType(struct soap *soap, ns1__PatternServiceNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceNotificationType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PatternServiceNotificationType(struct soap *soap, const char *URL, ns1__PatternServiceNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceNotificationType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PatternServiceNotificationType(struct soap *soap, const char *URL, ns1__PatternServiceNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceNotificationType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PatternServiceNotificationType * SOAP_FMAC4 soap_get_ns1__PatternServiceNotificationType(struct soap*, ns1__PatternServiceNotificationType *, const char*, const char*);

inline int soap_read_ns1__PatternServiceNotificationType(struct soap *soap, ns1__PatternServiceNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PatternServiceNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PatternServiceNotificationType(struct soap *soap, const char *URL, ns1__PatternServiceNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PatternServiceNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PatternServiceNotificationType(struct soap *soap, ns1__PatternServiceNotificationType *p)
{
	if (soap_read_ns1__PatternServiceNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvAgExtendedStateNotificationType_DEFINED
#define SOAP_TYPE_ns1__SrvAgExtendedStateNotificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvAgExtendedStateNotificationType(struct soap*, const char*, int, const ns1__SrvAgExtendedStateNotificationType *, const char*);
SOAP_FMAC3 ns1__SrvAgExtendedStateNotificationType * SOAP_FMAC4 soap_in_ns1__SrvAgExtendedStateNotificationType(struct soap*, const char*, ns1__SrvAgExtendedStateNotificationType *, const char*);
SOAP_FMAC1 ns1__SrvAgExtendedStateNotificationType * SOAP_FMAC2 soap_instantiate_ns1__SrvAgExtendedStateNotificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvAgExtendedStateNotificationType * soap_new_ns1__SrvAgExtendedStateNotificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvAgExtendedStateNotificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvAgExtendedStateNotificationType * soap_new_req_ns1__SrvAgExtendedStateNotificationType(
	struct soap *soap,
	ns1__AgExtStateType *ags,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1)
{
	ns1__SrvAgExtendedStateNotificationType *_p = soap_new_ns1__SrvAgExtendedStateNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvAgExtendedStateNotificationType::ags = ags;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
	}
	return _p;
}

inline ns1__SrvAgExtendedStateNotificationType * soap_new_set_ns1__SrvAgExtendedStateNotificationType(
	struct soap *soap,
	ns1__AgExtStateType *ags,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *notificationFrom__1,
	ns1__EquipmentReferenceType *notificationTo__1,
	ns1__SlaveEquipmentListType *notSlaveList__1,
	unsigned int *idMessage__1,
	char *__item__2)
{
	ns1__SrvAgExtendedStateNotificationType *_p = soap_new_ns1__SrvAgExtendedStateNotificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvAgExtendedStateNotificationType::ags = ags;
		_p->ns1__PatternServiceNotificationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceNotificationType::notificationFrom = notificationFrom__1;
		_p->ns1__PatternServiceNotificationType::notificationTo = notificationTo__1;
		_p->ns1__PatternServiceNotificationType::notSlaveList = notSlaveList__1;
		_p->ns1__PatternServiceNotificationType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvAgExtendedStateNotificationType(struct soap *soap, ns1__SrvAgExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvAgExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvAgExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvAgExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvAgExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvAgExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvAgExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvAgExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvAgExtendedStateNotificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvAgExtendedStateNotificationType", p->soap_type() == SOAP_TYPE_ns1__SrvAgExtendedStateNotificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvAgExtendedStateNotificationType * SOAP_FMAC4 soap_get_ns1__SrvAgExtendedStateNotificationType(struct soap*, ns1__SrvAgExtendedStateNotificationType *, const char*, const char*);

inline int soap_read_ns1__SrvAgExtendedStateNotificationType(struct soap *soap, ns1__SrvAgExtendedStateNotificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvAgExtendedStateNotificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvAgExtendedStateNotificationType(struct soap *soap, const char *URL, ns1__SrvAgExtendedStateNotificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvAgExtendedStateNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvAgExtendedStateNotificationType(struct soap *soap, ns1__SrvAgExtendedStateNotificationType *p)
{
	if (soap_read_ns1__SrvAgExtendedStateNotificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMtvmExtendedStateConfirmationType_DEFINED
#define SOAP_TYPE_ns1__SrvMtvmExtendedStateConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMtvmExtendedStateConfirmationType(struct soap*, const char*, int, const ns1__SrvMtvmExtendedStateConfirmationType *, const char*);
SOAP_FMAC3 ns1__SrvMtvmExtendedStateConfirmationType * SOAP_FMAC4 soap_in_ns1__SrvMtvmExtendedStateConfirmationType(struct soap*, const char*, ns1__SrvMtvmExtendedStateConfirmationType *, const char*);
SOAP_FMAC1 ns1__SrvMtvmExtendedStateConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__SrvMtvmExtendedStateConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMtvmExtendedStateConfirmationType * soap_new_ns1__SrvMtvmExtendedStateConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMtvmExtendedStateConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMtvmExtendedStateConfirmationType * soap_new_req_ns1__SrvMtvmExtendedStateConfirmationType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1)
{
	ns1__SrvMtvmExtendedStateConfirmationType *_p = soap_new_ns1__SrvMtvmExtendedStateConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
	}
	return _p;
}

inline ns1__SrvMtvmExtendedStateConfirmationType * soap_new_set_ns1__SrvMtvmExtendedStateConfirmationType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1,
	ns1__EquipmentReferenceType *confirmationTo__1,
	ns1__SlaveEquipmentListType *confSlaveList__1,
	unsigned int *idMessageNotification__1,
	char *__item__2)
{
	ns1__SrvMtvmExtendedStateConfirmationType *_p = soap_new_ns1__SrvMtvmExtendedStateConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo__1;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList__1;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMtvmExtendedStateConfirmationType(struct soap *soap, ns1__SrvMtvmExtendedStateConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMtvmExtendedStateConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvMtvmExtendedStateConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMtvmExtendedStateConfirmationType(struct soap *soap, const char *URL, ns1__SrvMtvmExtendedStateConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMtvmExtendedStateConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvMtvmExtendedStateConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMtvmExtendedStateConfirmationType(struct soap *soap, const char *URL, ns1__SrvMtvmExtendedStateConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMtvmExtendedStateConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvMtvmExtendedStateConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMtvmExtendedStateConfirmationType * SOAP_FMAC4 soap_get_ns1__SrvMtvmExtendedStateConfirmationType(struct soap*, ns1__SrvMtvmExtendedStateConfirmationType *, const char*, const char*);

inline int soap_read_ns1__SrvMtvmExtendedStateConfirmationType(struct soap *soap, ns1__SrvMtvmExtendedStateConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMtvmExtendedStateConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMtvmExtendedStateConfirmationType(struct soap *soap, const char *URL, ns1__SrvMtvmExtendedStateConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMtvmExtendedStateConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMtvmExtendedStateConfirmationType(struct soap *soap, ns1__SrvMtvmExtendedStateConfirmationType *p)
{
	if (soap_read_ns1__SrvMtvmExtendedStateConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvTvmExtendedStateConfirmationType_DEFINED
#define SOAP_TYPE_ns1__SrvTvmExtendedStateConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvTvmExtendedStateConfirmationType(struct soap*, const char*, int, const ns1__SrvTvmExtendedStateConfirmationType *, const char*);
SOAP_FMAC3 ns1__SrvTvmExtendedStateConfirmationType * SOAP_FMAC4 soap_in_ns1__SrvTvmExtendedStateConfirmationType(struct soap*, const char*, ns1__SrvTvmExtendedStateConfirmationType *, const char*);
SOAP_FMAC1 ns1__SrvTvmExtendedStateConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__SrvTvmExtendedStateConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvTvmExtendedStateConfirmationType * soap_new_ns1__SrvTvmExtendedStateConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvTvmExtendedStateConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvTvmExtendedStateConfirmationType * soap_new_req_ns1__SrvTvmExtendedStateConfirmationType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1)
{
	ns1__SrvTvmExtendedStateConfirmationType *_p = soap_new_ns1__SrvTvmExtendedStateConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
	}
	return _p;
}

inline ns1__SrvTvmExtendedStateConfirmationType * soap_new_set_ns1__SrvTvmExtendedStateConfirmationType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1,
	ns1__EquipmentReferenceType *confirmationTo__1,
	ns1__SlaveEquipmentListType *confSlaveList__1,
	unsigned int *idMessageNotification__1,
	char *__item__2)
{
	ns1__SrvTvmExtendedStateConfirmationType *_p = soap_new_ns1__SrvTvmExtendedStateConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo__1;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList__1;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvTvmExtendedStateConfirmationType(struct soap *soap, ns1__SrvTvmExtendedStateConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvTvmExtendedStateConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvTvmExtendedStateConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvTvmExtendedStateConfirmationType(struct soap *soap, const char *URL, ns1__SrvTvmExtendedStateConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvTvmExtendedStateConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvTvmExtendedStateConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvTvmExtendedStateConfirmationType(struct soap *soap, const char *URL, ns1__SrvTvmExtendedStateConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvTvmExtendedStateConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvTvmExtendedStateConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvTvmExtendedStateConfirmationType * SOAP_FMAC4 soap_get_ns1__SrvTvmExtendedStateConfirmationType(struct soap*, ns1__SrvTvmExtendedStateConfirmationType *, const char*, const char*);

inline int soap_read_ns1__SrvTvmExtendedStateConfirmationType(struct soap *soap, ns1__SrvTvmExtendedStateConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvTvmExtendedStateConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvTvmExtendedStateConfirmationType(struct soap *soap, const char *URL, ns1__SrvTvmExtendedStateConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvTvmExtendedStateConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvTvmExtendedStateConfirmationType(struct soap *soap, ns1__SrvTvmExtendedStateConfirmationType *p)
{
	if (soap_read_ns1__SrvTvmExtendedStateConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvOrderConfirmationType_DEFINED
#define SOAP_TYPE_ns1__SrvOrderConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvOrderConfirmationType(struct soap*, const char*, int, const ns1__SrvOrderConfirmationType *, const char*);
SOAP_FMAC3 ns1__SrvOrderConfirmationType * SOAP_FMAC4 soap_in_ns1__SrvOrderConfirmationType(struct soap*, const char*, ns1__SrvOrderConfirmationType *, const char*);
SOAP_FMAC1 ns1__SrvOrderConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__SrvOrderConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvOrderConfirmationType * soap_new_ns1__SrvOrderConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvOrderConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvOrderConfirmationType * soap_new_req_ns1__SrvOrderConfirmationType(
	struct soap *soap,
	char *params,
	int orderType,
	int result,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1)
{
	ns1__SrvOrderConfirmationType *_p = soap_new_ns1__SrvOrderConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvOrderConfirmationType::params = params;
		_p->ns1__SrvOrderConfirmationType::orderType = orderType;
		_p->ns1__SrvOrderConfirmationType::result = result;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
	}
	return _p;
}

inline ns1__SrvOrderConfirmationType * soap_new_set_ns1__SrvOrderConfirmationType(
	struct soap *soap,
	char *params,
	int orderType,
	int result,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1,
	ns1__EquipmentReferenceType *confirmationTo__1,
	ns1__SlaveEquipmentListType *confSlaveList__1,
	unsigned int *idMessageNotification__1,
	char *__item__2)
{
	ns1__SrvOrderConfirmationType *_p = soap_new_ns1__SrvOrderConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvOrderConfirmationType::params = params;
		_p->ns1__SrvOrderConfirmationType::orderType = orderType;
		_p->ns1__SrvOrderConfirmationType::result = result;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo__1;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList__1;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvOrderConfirmationType(struct soap *soap, ns1__SrvOrderConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvOrderConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvOrderConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvOrderConfirmationType(struct soap *soap, const char *URL, ns1__SrvOrderConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvOrderConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvOrderConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvOrderConfirmationType(struct soap *soap, const char *URL, ns1__SrvOrderConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvOrderConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvOrderConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvOrderConfirmationType * SOAP_FMAC4 soap_get_ns1__SrvOrderConfirmationType(struct soap*, ns1__SrvOrderConfirmationType *, const char*, const char*);

inline int soap_read_ns1__SrvOrderConfirmationType(struct soap *soap, ns1__SrvOrderConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvOrderConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvOrderConfirmationType(struct soap *soap, const char *URL, ns1__SrvOrderConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvOrderConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvOrderConfirmationType(struct soap *soap, ns1__SrvOrderConfirmationType *p)
{
	if (soap_read_ns1__SrvOrderConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFileConfirmationType_DEFINED
#define SOAP_TYPE_ns1__SrvFileConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFileConfirmationType(struct soap*, const char*, int, const ns1__SrvFileConfirmationType *, const char*);
SOAP_FMAC3 ns1__SrvFileConfirmationType * SOAP_FMAC4 soap_in_ns1__SrvFileConfirmationType(struct soap*, const char*, ns1__SrvFileConfirmationType *, const char*);
SOAP_FMAC1 ns1__SrvFileConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__SrvFileConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFileConfirmationType * soap_new_ns1__SrvFileConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFileConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFileConfirmationType * soap_new_req_ns1__SrvFileConfirmationType(
	struct soap *soap,
	unsigned int result,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1)
{
	ns1__SrvFileConfirmationType *_p = soap_new_ns1__SrvFileConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFileConfirmationType::result = result;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
	}
	return _p;
}

inline ns1__SrvFileConfirmationType * soap_new_set_ns1__SrvFileConfirmationType(
	struct soap *soap,
	unsigned int result,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1,
	ns1__EquipmentReferenceType *confirmationTo__1,
	ns1__SlaveEquipmentListType *confSlaveList__1,
	unsigned int *idMessageNotification__1,
	char *__item__2)
{
	ns1__SrvFileConfirmationType *_p = soap_new_ns1__SrvFileConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFileConfirmationType::result = result;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo__1;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList__1;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFileConfirmationType(struct soap *soap, ns1__SrvFileConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFileConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvFileConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFileConfirmationType(struct soap *soap, const char *URL, ns1__SrvFileConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFileConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvFileConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFileConfirmationType(struct soap *soap, const char *URL, ns1__SrvFileConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFileConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvFileConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFileConfirmationType * SOAP_FMAC4 soap_get_ns1__SrvFileConfirmationType(struct soap*, ns1__SrvFileConfirmationType *, const char*, const char*);

inline int soap_read_ns1__SrvFileConfirmationType(struct soap *soap, ns1__SrvFileConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFileConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFileConfirmationType(struct soap *soap, const char *URL, ns1__SrvFileConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFileConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFileConfirmationType(struct soap *soap, ns1__SrvFileConfirmationType *p)
{
	if (soap_read_ns1__SrvFileConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvNewConfigurationConfirmationType_DEFINED
#define SOAP_TYPE_ns1__SrvNewConfigurationConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvNewConfigurationConfirmationType(struct soap*, const char*, int, const ns1__SrvNewConfigurationConfirmationType *, const char*);
SOAP_FMAC3 ns1__SrvNewConfigurationConfirmationType * SOAP_FMAC4 soap_in_ns1__SrvNewConfigurationConfirmationType(struct soap*, const char*, ns1__SrvNewConfigurationConfirmationType *, const char*);
SOAP_FMAC1 ns1__SrvNewConfigurationConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__SrvNewConfigurationConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvNewConfigurationConfirmationType * soap_new_ns1__SrvNewConfigurationConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvNewConfigurationConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvNewConfigurationConfirmationType * soap_new_req_ns1__SrvNewConfigurationConfirmationType(
	struct soap *soap,
	ns1__PackageConfigVersionListType *pkgList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1)
{
	ns1__SrvNewConfigurationConfirmationType *_p = soap_new_ns1__SrvNewConfigurationConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvNewConfigurationConfirmationType::pkgList = pkgList;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
	}
	return _p;
}

inline ns1__SrvNewConfigurationConfirmationType * soap_new_set_ns1__SrvNewConfigurationConfirmationType(
	struct soap *soap,
	ns1__PackageConfigVersionListType *pkgList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1,
	ns1__EquipmentReferenceType *confirmationTo__1,
	ns1__SlaveEquipmentListType *confSlaveList__1,
	unsigned int *idMessageNotification__1,
	char *__item__2)
{
	ns1__SrvNewConfigurationConfirmationType *_p = soap_new_ns1__SrvNewConfigurationConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvNewConfigurationConfirmationType::pkgList = pkgList;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo__1;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList__1;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvNewConfigurationConfirmationType(struct soap *soap, ns1__SrvNewConfigurationConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvNewConfigurationConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvNewConfigurationConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvNewConfigurationConfirmationType(struct soap *soap, const char *URL, ns1__SrvNewConfigurationConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvNewConfigurationConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvNewConfigurationConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvNewConfigurationConfirmationType(struct soap *soap, const char *URL, ns1__SrvNewConfigurationConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvNewConfigurationConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvNewConfigurationConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvNewConfigurationConfirmationType * SOAP_FMAC4 soap_get_ns1__SrvNewConfigurationConfirmationType(struct soap*, ns1__SrvNewConfigurationConfirmationType *, const char*, const char*);

inline int soap_read_ns1__SrvNewConfigurationConfirmationType(struct soap *soap, ns1__SrvNewConfigurationConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvNewConfigurationConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvNewConfigurationConfirmationType(struct soap *soap, const char *URL, ns1__SrvNewConfigurationConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvNewConfigurationConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvNewConfigurationConfirmationType(struct soap *soap, ns1__SrvNewConfigurationConfirmationType *p)
{
	if (soap_read_ns1__SrvNewConfigurationConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvAlarmConfirmationType_DEFINED
#define SOAP_TYPE_ns1__SrvAlarmConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvAlarmConfirmationType(struct soap*, const char*, int, const ns1__SrvAlarmConfirmationType *, const char*);
SOAP_FMAC3 ns1__SrvAlarmConfirmationType * SOAP_FMAC4 soap_in_ns1__SrvAlarmConfirmationType(struct soap*, const char*, ns1__SrvAlarmConfirmationType *, const char*);
SOAP_FMAC1 ns1__SrvAlarmConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__SrvAlarmConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvAlarmConfirmationType * soap_new_ns1__SrvAlarmConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvAlarmConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvAlarmConfirmationType * soap_new_req_ns1__SrvAlarmConfirmationType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1)
{
	ns1__SrvAlarmConfirmationType *_p = soap_new_ns1__SrvAlarmConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
	}
	return _p;
}

inline ns1__SrvAlarmConfirmationType * soap_new_set_ns1__SrvAlarmConfirmationType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1,
	ns1__EquipmentReferenceType *confirmationTo__1,
	ns1__SlaveEquipmentListType *confSlaveList__1,
	unsigned int *idMessageNotification__1,
	char *__item__2)
{
	ns1__SrvAlarmConfirmationType *_p = soap_new_ns1__SrvAlarmConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo__1;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList__1;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvAlarmConfirmationType(struct soap *soap, ns1__SrvAlarmConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvAlarmConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvAlarmConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvAlarmConfirmationType(struct soap *soap, const char *URL, ns1__SrvAlarmConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvAlarmConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvAlarmConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvAlarmConfirmationType(struct soap *soap, const char *URL, ns1__SrvAlarmConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvAlarmConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvAlarmConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvAlarmConfirmationType * SOAP_FMAC4 soap_get_ns1__SrvAlarmConfirmationType(struct soap*, ns1__SrvAlarmConfirmationType *, const char*, const char*);

inline int soap_read_ns1__SrvAlarmConfirmationType(struct soap *soap, ns1__SrvAlarmConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvAlarmConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvAlarmConfirmationType(struct soap *soap, const char *URL, ns1__SrvAlarmConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvAlarmConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvAlarmConfirmationType(struct soap *soap, ns1__SrvAlarmConfirmationType *p)
{
	if (soap_read_ns1__SrvAlarmConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvStateConfirmationType_DEFINED
#define SOAP_TYPE_ns1__SrvStateConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvStateConfirmationType(struct soap*, const char*, int, const ns1__SrvStateConfirmationType *, const char*);
SOAP_FMAC3 ns1__SrvStateConfirmationType * SOAP_FMAC4 soap_in_ns1__SrvStateConfirmationType(struct soap*, const char*, ns1__SrvStateConfirmationType *, const char*);
SOAP_FMAC1 ns1__SrvStateConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__SrvStateConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvStateConfirmationType * soap_new_ns1__SrvStateConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvStateConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvStateConfirmationType * soap_new_req_ns1__SrvStateConfirmationType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1)
{
	ns1__SrvStateConfirmationType *_p = soap_new_ns1__SrvStateConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
	}
	return _p;
}

inline ns1__SrvStateConfirmationType * soap_new_set_ns1__SrvStateConfirmationType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1,
	ns1__EquipmentReferenceType *confirmationTo__1,
	ns1__SlaveEquipmentListType *confSlaveList__1,
	unsigned int *idMessageNotification__1,
	char *__item__2)
{
	ns1__SrvStateConfirmationType *_p = soap_new_ns1__SrvStateConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo__1;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList__1;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvStateConfirmationType(struct soap *soap, ns1__SrvStateConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvStateConfirmationType(struct soap *soap, const char *URL, ns1__SrvStateConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvStateConfirmationType(struct soap *soap, const char *URL, ns1__SrvStateConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvStateConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvStateConfirmationType * SOAP_FMAC4 soap_get_ns1__SrvStateConfirmationType(struct soap*, ns1__SrvStateConfirmationType *, const char*, const char*);

inline int soap_read_ns1__SrvStateConfirmationType(struct soap *soap, ns1__SrvStateConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvStateConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvStateConfirmationType(struct soap *soap, const char *URL, ns1__SrvStateConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvStateConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvStateConfirmationType(struct soap *soap, ns1__SrvStateConfirmationType *p)
{
	if (soap_read_ns1__SrvStateConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType * soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType * soap_new_req_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(
	struct soap *soap,
	ns1__TransactionMTCConfTypeList *confList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1)
{
	ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType::confList = confList;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType * soap_new_set_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(
	struct soap *soap,
	ns1__TransactionMTCConfTypeList *confList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1,
	ns1__EquipmentReferenceType *confirmationTo__1,
	ns1__SlaveEquipmentListType *confSlaveList__1,
	unsigned int *idMessageNotification__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType::confList = confList;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo__1;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList__1;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RecordConfirmationType_DEFINED
#define SOAP_TYPE_ns1__RecordConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecordConfirmationType(struct soap*, const char*, int, const ns1__RecordConfirmationType *, const char*);
SOAP_FMAC3 ns1__RecordConfirmationType * SOAP_FMAC4 soap_in_ns1__RecordConfirmationType(struct soap*, const char*, ns1__RecordConfirmationType *, const char*);
SOAP_FMAC1 ns1__RecordConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__RecordConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecordConfirmationType * soap_new_ns1__RecordConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecordConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__RecordConfirmationType * soap_new_req_ns1__RecordConfirmationType(
	struct soap *soap,
	ns1__RecordIdType *id,
	bool admited,
	unsigned int rejectionCode,
	char *rejectionDesc)
{
	ns1__RecordConfirmationType *_p = soap_new_ns1__RecordConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordConfirmationType::id = id;
		_p->ns1__RecordConfirmationType::admited = admited;
		_p->ns1__RecordConfirmationType::rejectionCode = rejectionCode;
		_p->ns1__RecordConfirmationType::rejectionDesc = rejectionDesc;
	}
	return _p;
}

inline ns1__RecordConfirmationType * soap_new_set_ns1__RecordConfirmationType(
	struct soap *soap,
	ns1__RecordIdType *id,
	bool admited,
	unsigned int rejectionCode,
	char *rejectionDesc,
	char *__item__1)
{
	ns1__RecordConfirmationType *_p = soap_new_ns1__RecordConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordConfirmationType::id = id;
		_p->ns1__RecordConfirmationType::admited = admited;
		_p->ns1__RecordConfirmationType::rejectionCode = rejectionCode;
		_p->ns1__RecordConfirmationType::rejectionDesc = rejectionDesc;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__RecordConfirmationType(struct soap *soap, ns1__RecordConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordConfirmationType", p->soap_type() == SOAP_TYPE_ns1__RecordConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecordConfirmationType(struct soap *soap, const char *URL, ns1__RecordConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordConfirmationType", p->soap_type() == SOAP_TYPE_ns1__RecordConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecordConfirmationType(struct soap *soap, const char *URL, ns1__RecordConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordConfirmationType", p->soap_type() == SOAP_TYPE_ns1__RecordConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecordConfirmationType * SOAP_FMAC4 soap_get_ns1__RecordConfirmationType(struct soap*, ns1__RecordConfirmationType *, const char*, const char*);

inline int soap_read_ns1__RecordConfirmationType(struct soap *soap, ns1__RecordConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RecordConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecordConfirmationType(struct soap *soap, const char *URL, ns1__RecordConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RecordConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RecordConfirmationType(struct soap *soap, ns1__RecordConfirmationType *p)
{
	if (soap_read_ns1__RecordConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RecordConfirmationListType_DEFINED
#define SOAP_TYPE_ns1__RecordConfirmationListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecordConfirmationListType(struct soap*, const char*, int, const ns1__RecordConfirmationListType *, const char*);
SOAP_FMAC3 ns1__RecordConfirmationListType * SOAP_FMAC4 soap_in_ns1__RecordConfirmationListType(struct soap*, const char*, ns1__RecordConfirmationListType *, const char*);
SOAP_FMAC1 ns1__RecordConfirmationListType * SOAP_FMAC2 soap_instantiate_ns1__RecordConfirmationListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecordConfirmationListType * soap_new_ns1__RecordConfirmationListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecordConfirmationListType(soap, n, NULL, NULL, NULL);
}

inline ns1__RecordConfirmationListType * soap_new_req_ns1__RecordConfirmationListType(
	struct soap *soap,
	int __sizeitems,
	ns1__RecordConfirmationType **items)
{
	ns1__RecordConfirmationListType *_p = soap_new_ns1__RecordConfirmationListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordConfirmationListType::__sizeitems = __sizeitems;
		_p->ns1__RecordConfirmationListType::items = items;
	}
	return _p;
}

inline ns1__RecordConfirmationListType * soap_new_set_ns1__RecordConfirmationListType(
	struct soap *soap,
	int __sizeitems,
	ns1__RecordConfirmationType **items,
	char *__item__1)
{
	ns1__RecordConfirmationListType *_p = soap_new_ns1__RecordConfirmationListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordConfirmationListType::__sizeitems = __sizeitems;
		_p->ns1__RecordConfirmationListType::items = items;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__RecordConfirmationListType(struct soap *soap, ns1__RecordConfirmationListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordConfirmationListType", p->soap_type() == SOAP_TYPE_ns1__RecordConfirmationListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecordConfirmationListType(struct soap *soap, const char *URL, ns1__RecordConfirmationListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordConfirmationListType", p->soap_type() == SOAP_TYPE_ns1__RecordConfirmationListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecordConfirmationListType(struct soap *soap, const char *URL, ns1__RecordConfirmationListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordConfirmationListType", p->soap_type() == SOAP_TYPE_ns1__RecordConfirmationListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecordConfirmationListType * SOAP_FMAC4 soap_get_ns1__RecordConfirmationListType(struct soap*, ns1__RecordConfirmationListType *, const char*, const char*);

inline int soap_read_ns1__RecordConfirmationListType(struct soap *soap, ns1__RecordConfirmationListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RecordConfirmationListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecordConfirmationListType(struct soap *soap, const char *URL, ns1__RecordConfirmationListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RecordConfirmationListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RecordConfirmationListType(struct soap *soap, ns1__RecordConfirmationListType *p)
{
	if (soap_read_ns1__RecordConfirmationListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvRecordConfirmationType_DEFINED
#define SOAP_TYPE_ns1__SrvRecordConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvRecordConfirmationType(struct soap*, const char*, int, const ns1__SrvRecordConfirmationType *, const char*);
SOAP_FMAC3 ns1__SrvRecordConfirmationType * SOAP_FMAC4 soap_in_ns1__SrvRecordConfirmationType(struct soap*, const char*, ns1__SrvRecordConfirmationType *, const char*);
SOAP_FMAC1 ns1__SrvRecordConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__SrvRecordConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvRecordConfirmationType * soap_new_ns1__SrvRecordConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvRecordConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvRecordConfirmationType * soap_new_req_ns1__SrvRecordConfirmationType(
	struct soap *soap,
	ns1__RecordConfirmationListType *confList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1)
{
	ns1__SrvRecordConfirmationType *_p = soap_new_ns1__SrvRecordConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvRecordConfirmationType::confList = confList;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
	}
	return _p;
}

inline ns1__SrvRecordConfirmationType * soap_new_set_ns1__SrvRecordConfirmationType(
	struct soap *soap,
	ns1__RecordConfirmationListType *confList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1,
	ns1__EquipmentReferenceType *confirmationTo__1,
	ns1__SlaveEquipmentListType *confSlaveList__1,
	unsigned int *idMessageNotification__1,
	char *__item__2)
{
	ns1__SrvRecordConfirmationType *_p = soap_new_ns1__SrvRecordConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvRecordConfirmationType::confList = confList;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo__1;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList__1;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvRecordConfirmationType(struct soap *soap, ns1__SrvRecordConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvRecordConfirmationType(struct soap *soap, const char *URL, ns1__SrvRecordConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvRecordConfirmationType(struct soap *soap, const char *URL, ns1__SrvRecordConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvRecordConfirmationType * SOAP_FMAC4 soap_get_ns1__SrvRecordConfirmationType(struct soap*, ns1__SrvRecordConfirmationType *, const char*, const char*);

inline int soap_read_ns1__SrvRecordConfirmationType(struct soap *soap, ns1__SrvRecordConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvRecordConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvRecordConfirmationType(struct soap *soap, const char *URL, ns1__SrvRecordConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvRecordConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvRecordConfirmationType(struct soap *soap, ns1__SrvRecordConfirmationType *p)
{
	if (soap_read_ns1__SrvRecordConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PatternServiceConfirmationType_DEFINED
#define SOAP_TYPE_ns1__PatternServiceConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PatternServiceConfirmationType(struct soap*, const char*, int, const ns1__PatternServiceConfirmationType *, const char*);
SOAP_FMAC3 ns1__PatternServiceConfirmationType * SOAP_FMAC4 soap_in_ns1__PatternServiceConfirmationType(struct soap*, const char*, ns1__PatternServiceConfirmationType *, const char*);
SOAP_FMAC1 ns1__PatternServiceConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__PatternServiceConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PatternServiceConfirmationType * soap_new_ns1__PatternServiceConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PatternServiceConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__PatternServiceConfirmationType * soap_new_req_ns1__PatternServiceConfirmationType(
	struct soap *soap,
	time_t dateTime,
	ns1__EquipmentReferenceType *confirmationFrom)
{
	ns1__PatternServiceConfirmationType *_p = soap_new_ns1__PatternServiceConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom;
	}
	return _p;
}

inline ns1__PatternServiceConfirmationType * soap_new_set_ns1__PatternServiceConfirmationType(
	struct soap *soap,
	time_t dateTime,
	ns1__EquipmentReferenceType *confirmationFrom,
	ns1__EquipmentReferenceType *confirmationTo,
	ns1__SlaveEquipmentListType *confSlaveList,
	unsigned int *idMessageNotification,
	char *__item__1)
{
	ns1__PatternServiceConfirmationType *_p = soap_new_ns1__PatternServiceConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PatternServiceConfirmationType(struct soap *soap, ns1__PatternServiceConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceConfirmationType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PatternServiceConfirmationType(struct soap *soap, const char *URL, ns1__PatternServiceConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceConfirmationType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PatternServiceConfirmationType(struct soap *soap, const char *URL, ns1__PatternServiceConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceConfirmationType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PatternServiceConfirmationType * SOAP_FMAC4 soap_get_ns1__PatternServiceConfirmationType(struct soap*, ns1__PatternServiceConfirmationType *, const char*, const char*);

inline int soap_read_ns1__PatternServiceConfirmationType(struct soap *soap, ns1__PatternServiceConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PatternServiceConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PatternServiceConfirmationType(struct soap *soap, const char *URL, ns1__PatternServiceConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PatternServiceConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PatternServiceConfirmationType(struct soap *soap, ns1__PatternServiceConfirmationType *p)
{
	if (soap_read_ns1__PatternServiceConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCORETransactionConfirmationType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCORETransactionConfirmationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap*, const char*, int, const ns1__SrvMTC_USCORETransactionConfirmationType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionConfirmationType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap*, const char*, ns1__SrvMTC_USCORETransactionConfirmationType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCORETransactionConfirmationType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCORETransactionConfirmationType * soap_new_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCORETransactionConfirmationType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCORETransactionConfirmationType * soap_new_req_ns1__SrvMTC_USCORETransactionConfirmationType(
	struct soap *soap,
	ns1__TransactionMTCConfTypeList *confList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1)
{
	ns1__SrvMTC_USCORETransactionConfirmationType *_p = soap_new_ns1__SrvMTC_USCORETransactionConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORETransactionConfirmationType::confList = confList;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCORETransactionConfirmationType * soap_new_set_ns1__SrvMTC_USCORETransactionConfirmationType(
	struct soap *soap,
	ns1__TransactionMTCConfTypeList *confList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *confirmationFrom__1,
	ns1__EquipmentReferenceType *confirmationTo__1,
	ns1__SlaveEquipmentListType *confSlaveList__1,
	unsigned int *idMessageNotification__1,
	char *__item__2)
{
	ns1__SrvMTC_USCORETransactionConfirmationType *_p = soap_new_ns1__SrvMTC_USCORETransactionConfirmationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORETransactionConfirmationType::confList = confList;
		_p->ns1__PatternServiceConfirmationType::dateTime = dateTime__1;
		_p->ns1__PatternServiceConfirmationType::confirmationFrom = confirmationFrom__1;
		_p->ns1__PatternServiceConfirmationType::confirmationTo = confirmationTo__1;
		_p->ns1__PatternServiceConfirmationType::confSlaveList = confSlaveList__1;
		_p->ns1__PatternServiceConfirmationType::idMessageNotification = idMessageNotification__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap *soap, ns1__SrvMTC_USCORETransactionConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionConfirmationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionConfirmationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionConfirmationType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionConfirmationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionConfirmationType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap*, ns1__SrvMTC_USCORETransactionConfirmationType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap *soap, ns1__SrvMTC_USCORETransactionConfirmationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCORETransactionConfirmationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionConfirmationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCORETransactionConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCORETransactionConfirmationType(struct soap *soap, ns1__SrvMTC_USCORETransactionConfirmationType *p)
{
	if (soap_read_ns1__SrvMTC_USCORETransactionConfirmationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SceqExtStateTypeList_DEFINED
#define SOAP_TYPE_ns1__SceqExtStateTypeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SceqExtStateTypeList(struct soap*, const char*, int, const ns1__SceqExtStateTypeList *, const char*);
SOAP_FMAC3 ns1__SceqExtStateTypeList * SOAP_FMAC4 soap_in_ns1__SceqExtStateTypeList(struct soap*, const char*, ns1__SceqExtStateTypeList *, const char*);
SOAP_FMAC1 ns1__SceqExtStateTypeList * SOAP_FMAC2 soap_instantiate_ns1__SceqExtStateTypeList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SceqExtStateTypeList * soap_new_ns1__SceqExtStateTypeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SceqExtStateTypeList(soap, n, NULL, NULL, NULL);
}

inline ns1__SceqExtStateTypeList * soap_new_req_ns1__SceqExtStateTypeList(
	struct soap *soap,
	int __sizestateSceq,
	ns1__SceqExtStateType **stateSceq)
{
	ns1__SceqExtStateTypeList *_p = soap_new_ns1__SceqExtStateTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SceqExtStateTypeList::__sizestateSceq = __sizestateSceq;
		_p->ns1__SceqExtStateTypeList::stateSceq = stateSceq;
	}
	return _p;
}

inline ns1__SceqExtStateTypeList * soap_new_set_ns1__SceqExtStateTypeList(
	struct soap *soap,
	int __sizestateSceq,
	ns1__SceqExtStateType **stateSceq,
	int *length,
	char *__item__1)
{
	ns1__SceqExtStateTypeList *_p = soap_new_ns1__SceqExtStateTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SceqExtStateTypeList::__sizestateSceq = __sizestateSceq;
		_p->ns1__SceqExtStateTypeList::stateSceq = stateSceq;
		_p->ns1__SceqExtStateTypeList::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SceqExtStateTypeList(struct soap *soap, ns1__SceqExtStateTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SceqExtStateTypeList", p->soap_type() == SOAP_TYPE_ns1__SceqExtStateTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SceqExtStateTypeList(struct soap *soap, const char *URL, ns1__SceqExtStateTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SceqExtStateTypeList", p->soap_type() == SOAP_TYPE_ns1__SceqExtStateTypeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SceqExtStateTypeList(struct soap *soap, const char *URL, ns1__SceqExtStateTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SceqExtStateTypeList", p->soap_type() == SOAP_TYPE_ns1__SceqExtStateTypeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SceqExtStateTypeList * SOAP_FMAC4 soap_get_ns1__SceqExtStateTypeList(struct soap*, ns1__SceqExtStateTypeList *, const char*, const char*);

inline int soap_read_ns1__SceqExtStateTypeList(struct soap *soap, ns1__SceqExtStateTypeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SceqExtStateTypeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SceqExtStateTypeList(struct soap *soap, const char *URL, ns1__SceqExtStateTypeList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SceqExtStateTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SceqExtStateTypeList(struct soap *soap, ns1__SceqExtStateTypeList *p)
{
	if (soap_read_ns1__SceqExtStateTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AgExtStateType_DEFINED
#define SOAP_TYPE_ns1__AgExtStateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AgExtStateType(struct soap*, const char*, int, const ns1__AgExtStateType *, const char*);
SOAP_FMAC3 ns1__AgExtStateType * SOAP_FMAC4 soap_in_ns1__AgExtStateType(struct soap*, const char*, ns1__AgExtStateType *, const char*);
SOAP_FMAC1 ns1__AgExtStateType * SOAP_FMAC2 soap_instantiate_ns1__AgExtStateType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AgExtStateType * soap_new_ns1__AgExtStateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AgExtStateType(soap, n, NULL, NULL, NULL);
}

inline ns1__AgExtStateType * soap_new_req_ns1__AgExtStateType(
	struct soap *soap,
	int wM,
	int sM,
	ns1__DeviceListType *devList,
	ns1__AlarmListType *alarmList,
	ns1__MediaOperationListType *mediaOpList,
	int teleCharginState,
	ns1__samDeviceTypeList *samDeviceList)
{
	ns1__AgExtStateType *_p = soap_new_ns1__AgExtStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AgExtStateType::wM = wM;
		_p->ns1__AgExtStateType::sM = sM;
		_p->ns1__AgExtStateType::devList = devList;
		_p->ns1__AgExtStateType::alarmList = alarmList;
		_p->ns1__AgExtStateType::mediaOpList = mediaOpList;
		_p->ns1__AgExtStateType::teleCharginState = teleCharginState;
		_p->ns1__AgExtStateType::samDeviceList = samDeviceList;
	}
	return _p;
}

inline ns1__AgExtStateType * soap_new_set_ns1__AgExtStateType(
	struct soap *soap,
	int wM,
	int sM,
	ns1__DeviceListType *devList,
	ns1__AlarmListType *alarmList,
	ns1__MediaOperationListType *mediaOpList,
	int teleCharginState,
	ns1__samDeviceTypeList *samDeviceList,
	char *__item__1)
{
	ns1__AgExtStateType *_p = soap_new_ns1__AgExtStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AgExtStateType::wM = wM;
		_p->ns1__AgExtStateType::sM = sM;
		_p->ns1__AgExtStateType::devList = devList;
		_p->ns1__AgExtStateType::alarmList = alarmList;
		_p->ns1__AgExtStateType::mediaOpList = mediaOpList;
		_p->ns1__AgExtStateType::teleCharginState = teleCharginState;
		_p->ns1__AgExtStateType::samDeviceList = samDeviceList;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AgExtStateType(struct soap *soap, ns1__AgExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AgExtStateType", p->soap_type() == SOAP_TYPE_ns1__AgExtStateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AgExtStateType(struct soap *soap, const char *URL, ns1__AgExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AgExtStateType", p->soap_type() == SOAP_TYPE_ns1__AgExtStateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AgExtStateType(struct soap *soap, const char *URL, ns1__AgExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AgExtStateType", p->soap_type() == SOAP_TYPE_ns1__AgExtStateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AgExtStateType * SOAP_FMAC4 soap_get_ns1__AgExtStateType(struct soap*, ns1__AgExtStateType *, const char*, const char*);

inline int soap_read_ns1__AgExtStateType(struct soap *soap, ns1__AgExtStateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AgExtStateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AgExtStateType(struct soap *soap, const char *URL, ns1__AgExtStateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AgExtStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AgExtStateType(struct soap *soap, ns1__AgExtStateType *p)
{
	if (soap_read_ns1__AgExtStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__diagnosticType_DEFINED
#define SOAP_TYPE_ns1__diagnosticType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__diagnosticType(struct soap*, const char*, int, const ns1__diagnosticType *, const char*);
SOAP_FMAC3 ns1__diagnosticType * SOAP_FMAC4 soap_in_ns1__diagnosticType(struct soap*, const char*, ns1__diagnosticType *, const char*);
SOAP_FMAC1 ns1__diagnosticType * SOAP_FMAC2 soap_instantiate_ns1__diagnosticType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__diagnosticType * soap_new_ns1__diagnosticType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__diagnosticType(soap, n, NULL, NULL, NULL);
}

inline ns1__diagnosticType * soap_new_req_ns1__diagnosticType(
	struct soap *soap,
	int itemCode,
	char *itemKey,
	int component,
	char *value,
	time_t date)
{
	ns1__diagnosticType *_p = soap_new_ns1__diagnosticType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__diagnosticType::itemCode = itemCode;
		_p->ns1__diagnosticType::itemKey = itemKey;
		_p->ns1__diagnosticType::component = component;
		_p->ns1__diagnosticType::value = value;
		_p->ns1__diagnosticType::date = date;
	}
	return _p;
}

inline ns1__diagnosticType * soap_new_set_ns1__diagnosticType(
	struct soap *soap,
	int itemCode,
	char *itemKey,
	int component,
	char *value,
	time_t date,
	char *__item__1)
{
	ns1__diagnosticType *_p = soap_new_ns1__diagnosticType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__diagnosticType::itemCode = itemCode;
		_p->ns1__diagnosticType::itemKey = itemKey;
		_p->ns1__diagnosticType::component = component;
		_p->ns1__diagnosticType::value = value;
		_p->ns1__diagnosticType::date = date;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__diagnosticType(struct soap *soap, ns1__diagnosticType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:diagnosticType", p->soap_type() == SOAP_TYPE_ns1__diagnosticType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__diagnosticType(struct soap *soap, const char *URL, ns1__diagnosticType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:diagnosticType", p->soap_type() == SOAP_TYPE_ns1__diagnosticType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__diagnosticType(struct soap *soap, const char *URL, ns1__diagnosticType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:diagnosticType", p->soap_type() == SOAP_TYPE_ns1__diagnosticType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__diagnosticType * SOAP_FMAC4 soap_get_ns1__diagnosticType(struct soap*, ns1__diagnosticType *, const char*, const char*);

inline int soap_read_ns1__diagnosticType(struct soap *soap, ns1__diagnosticType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__diagnosticType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__diagnosticType(struct soap *soap, const char *URL, ns1__diagnosticType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__diagnosticType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__diagnosticType(struct soap *soap, ns1__diagnosticType *p)
{
	if (soap_read_ns1__diagnosticType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__diagnosticListType_DEFINED
#define SOAP_TYPE_ns1__diagnosticListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__diagnosticListType(struct soap*, const char*, int, const ns1__diagnosticListType *, const char*);
SOAP_FMAC3 ns1__diagnosticListType * SOAP_FMAC4 soap_in_ns1__diagnosticListType(struct soap*, const char*, ns1__diagnosticListType *, const char*);
SOAP_FMAC1 ns1__diagnosticListType * SOAP_FMAC2 soap_instantiate_ns1__diagnosticListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__diagnosticListType * soap_new_ns1__diagnosticListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__diagnosticListType(soap, n, NULL, NULL, NULL);
}

inline ns1__diagnosticListType * soap_new_req_ns1__diagnosticListType(
	struct soap *soap,
	int __sizediagnostic,
	ns1__diagnosticType **diagnostic)
{
	ns1__diagnosticListType *_p = soap_new_ns1__diagnosticListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__diagnosticListType::__sizediagnostic = __sizediagnostic;
		_p->ns1__diagnosticListType::diagnostic = diagnostic;
	}
	return _p;
}

inline ns1__diagnosticListType * soap_new_set_ns1__diagnosticListType(
	struct soap *soap,
	int __sizediagnostic,
	ns1__diagnosticType **diagnostic,
	int *length,
	char *__item__1)
{
	ns1__diagnosticListType *_p = soap_new_ns1__diagnosticListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__diagnosticListType::__sizediagnostic = __sizediagnostic;
		_p->ns1__diagnosticListType::diagnostic = diagnostic;
		_p->ns1__diagnosticListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__diagnosticListType(struct soap *soap, ns1__diagnosticListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:diagnosticListType", p->soap_type() == SOAP_TYPE_ns1__diagnosticListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__diagnosticListType(struct soap *soap, const char *URL, ns1__diagnosticListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:diagnosticListType", p->soap_type() == SOAP_TYPE_ns1__diagnosticListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__diagnosticListType(struct soap *soap, const char *URL, ns1__diagnosticListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:diagnosticListType", p->soap_type() == SOAP_TYPE_ns1__diagnosticListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__diagnosticListType * SOAP_FMAC4 soap_get_ns1__diagnosticListType(struct soap*, ns1__diagnosticListType *, const char*, const char*);

inline int soap_read_ns1__diagnosticListType(struct soap *soap, ns1__diagnosticListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__diagnosticListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__diagnosticListType(struct soap *soap, const char *URL, ns1__diagnosticListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__diagnosticListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__diagnosticListType(struct soap *soap, ns1__diagnosticListType *p)
{
	if (soap_read_ns1__diagnosticListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__versionType_DEFINED
#define SOAP_TYPE_ns1__versionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__versionType(struct soap*, const char*, int, const ns1__versionType *, const char*);
SOAP_FMAC3 ns1__versionType * SOAP_FMAC4 soap_in_ns1__versionType(struct soap*, const char*, ns1__versionType *, const char*);
SOAP_FMAC1 ns1__versionType * SOAP_FMAC2 soap_instantiate_ns1__versionType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__versionType * soap_new_ns1__versionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__versionType(soap, n, NULL, NULL, NULL);
}

inline ns1__versionType * soap_new_req_ns1__versionType(
	struct soap *soap,
	int versionType,
	int itemCode,
	char *itemKey,
	int component,
	char *value,
	time_t date)
{
	ns1__versionType *_p = soap_new_ns1__versionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__versionType::versionType = versionType;
		_p->ns1__versionType::itemCode = itemCode;
		_p->ns1__versionType::itemKey = itemKey;
		_p->ns1__versionType::component = component;
		_p->ns1__versionType::value = value;
		_p->ns1__versionType::date = date;
	}
	return _p;
}

inline ns1__versionType * soap_new_set_ns1__versionType(
	struct soap *soap,
	int versionType,
	int itemCode,
	char *itemKey,
	int component,
	char *value,
	time_t date,
	char *__item__1)
{
	ns1__versionType *_p = soap_new_ns1__versionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__versionType::versionType = versionType;
		_p->ns1__versionType::itemCode = itemCode;
		_p->ns1__versionType::itemKey = itemKey;
		_p->ns1__versionType::component = component;
		_p->ns1__versionType::value = value;
		_p->ns1__versionType::date = date;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__versionType(struct soap *soap, ns1__versionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:versionType", p->soap_type() == SOAP_TYPE_ns1__versionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__versionType(struct soap *soap, const char *URL, ns1__versionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:versionType", p->soap_type() == SOAP_TYPE_ns1__versionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__versionType(struct soap *soap, const char *URL, ns1__versionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:versionType", p->soap_type() == SOAP_TYPE_ns1__versionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__versionType * SOAP_FMAC4 soap_get_ns1__versionType(struct soap*, ns1__versionType *, const char*, const char*);

inline int soap_read_ns1__versionType(struct soap *soap, ns1__versionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__versionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__versionType(struct soap *soap, const char *URL, ns1__versionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__versionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__versionType(struct soap *soap, ns1__versionType *p)
{
	if (soap_read_ns1__versionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__versionListType_DEFINED
#define SOAP_TYPE_ns1__versionListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__versionListType(struct soap*, const char*, int, const ns1__versionListType *, const char*);
SOAP_FMAC3 ns1__versionListType * SOAP_FMAC4 soap_in_ns1__versionListType(struct soap*, const char*, ns1__versionListType *, const char*);
SOAP_FMAC1 ns1__versionListType * SOAP_FMAC2 soap_instantiate_ns1__versionListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__versionListType * soap_new_ns1__versionListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__versionListType(soap, n, NULL, NULL, NULL);
}

inline ns1__versionListType * soap_new_req_ns1__versionListType(
	struct soap *soap,
	int __sizeversion,
	ns1__versionType **version)
{
	ns1__versionListType *_p = soap_new_ns1__versionListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__versionListType::__sizeversion = __sizeversion;
		_p->ns1__versionListType::version = version;
	}
	return _p;
}

inline ns1__versionListType * soap_new_set_ns1__versionListType(
	struct soap *soap,
	int __sizeversion,
	ns1__versionType **version,
	int *length,
	char *__item__1)
{
	ns1__versionListType *_p = soap_new_ns1__versionListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__versionListType::__sizeversion = __sizeversion;
		_p->ns1__versionListType::version = version;
		_p->ns1__versionListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__versionListType(struct soap *soap, ns1__versionListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:versionListType", p->soap_type() == SOAP_TYPE_ns1__versionListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__versionListType(struct soap *soap, const char *URL, ns1__versionListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:versionListType", p->soap_type() == SOAP_TYPE_ns1__versionListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__versionListType(struct soap *soap, const char *URL, ns1__versionListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:versionListType", p->soap_type() == SOAP_TYPE_ns1__versionListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__versionListType * SOAP_FMAC4 soap_get_ns1__versionListType(struct soap*, ns1__versionListType *, const char*, const char*);

inline int soap_read_ns1__versionListType(struct soap *soap, ns1__versionListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__versionListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__versionListType(struct soap *soap, const char *URL, ns1__versionListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__versionListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__versionListType(struct soap *soap, ns1__versionListType *p)
{
	if (soap_read_ns1__versionListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__eqList_DEFINED
#define SOAP_TYPE_ns1__eqList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__eqList(struct soap*, const char*, int, const ns1__eqList *, const char*);
SOAP_FMAC3 ns1__eqList * SOAP_FMAC4 soap_in_ns1__eqList(struct soap*, const char*, ns1__eqList *, const char*);
SOAP_FMAC1 ns1__eqList * SOAP_FMAC2 soap_instantiate_ns1__eqList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__eqList * soap_new_ns1__eqList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__eqList(soap, n, NULL, NULL, NULL);
}

inline ns1__eqList * soap_new_req_ns1__eqList(
	struct soap *soap,
	int __sizeeq,
	_ns1__eqList_eq *eq)
{
	ns1__eqList *_p = soap_new_ns1__eqList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__eqList::__sizeeq = __sizeeq;
		_p->ns1__eqList::eq = eq;
	}
	return _p;
}

inline ns1__eqList * soap_new_set_ns1__eqList(
	struct soap *soap,
	int __sizeeq,
	_ns1__eqList_eq *eq,
	char *__item__1)
{
	ns1__eqList *_p = soap_new_ns1__eqList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__eqList::__sizeeq = __sizeeq;
		_p->ns1__eqList::eq = eq;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__eqList(struct soap *soap, ns1__eqList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eqList", p->soap_type() == SOAP_TYPE_ns1__eqList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__eqList(struct soap *soap, const char *URL, ns1__eqList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eqList", p->soap_type() == SOAP_TYPE_ns1__eqList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__eqList(struct soap *soap, const char *URL, ns1__eqList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:eqList", p->soap_type() == SOAP_TYPE_ns1__eqList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__eqList * SOAP_FMAC4 soap_get_ns1__eqList(struct soap*, ns1__eqList *, const char*, const char*);

inline int soap_read_ns1__eqList(struct soap *soap, ns1__eqList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__eqList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__eqList(struct soap *soap, const char *URL, ns1__eqList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__eqList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__eqList(struct soap *soap, ns1__eqList *p)
{
	if (soap_read_ns1__eqList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SceqExtStateType_DEFINED
#define SOAP_TYPE_ns1__SceqExtStateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SceqExtStateType(struct soap*, const char*, int, const ns1__SceqExtStateType *, const char*);
SOAP_FMAC3 ns1__SceqExtStateType * SOAP_FMAC4 soap_in_ns1__SceqExtStateType(struct soap*, const char*, ns1__SceqExtStateType *, const char*);
SOAP_FMAC1 ns1__SceqExtStateType * SOAP_FMAC2 soap_instantiate_ns1__SceqExtStateType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SceqExtStateType * soap_new_ns1__SceqExtStateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SceqExtStateType(soap, n, NULL, NULL, NULL);
}

inline ns1__SceqExtStateType * soap_new_req_ns1__SceqExtStateType(
	struct soap *soap,
	int wM,
	int sM,
	ns1__DeviceListType *devList,
	ns1__AlarmListType *alarmList,
	int powerSupplyState,
	ns1__MediaOperationListType *mediaOpList,
	ns1__eqList *eqList)
{
	ns1__SceqExtStateType *_p = soap_new_ns1__SceqExtStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SceqExtStateType::wM = wM;
		_p->ns1__SceqExtStateType::sM = sM;
		_p->ns1__SceqExtStateType::devList = devList;
		_p->ns1__SceqExtStateType::alarmList = alarmList;
		_p->ns1__SceqExtStateType::powerSupplyState = powerSupplyState;
		_p->ns1__SceqExtStateType::mediaOpList = mediaOpList;
		_p->ns1__SceqExtStateType::eqList = eqList;
	}
	return _p;
}

inline ns1__SceqExtStateType * soap_new_set_ns1__SceqExtStateType(
	struct soap *soap,
	int wM,
	int sM,
	ns1__DeviceListType *devList,
	ns1__AlarmListType *alarmList,
	int powerSupplyState,
	ns1__MediaOperationListType *mediaOpList,
	ns1__eqList *eqList,
	char *__item__1)
{
	ns1__SceqExtStateType *_p = soap_new_ns1__SceqExtStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SceqExtStateType::wM = wM;
		_p->ns1__SceqExtStateType::sM = sM;
		_p->ns1__SceqExtStateType::devList = devList;
		_p->ns1__SceqExtStateType::alarmList = alarmList;
		_p->ns1__SceqExtStateType::powerSupplyState = powerSupplyState;
		_p->ns1__SceqExtStateType::mediaOpList = mediaOpList;
		_p->ns1__SceqExtStateType::eqList = eqList;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SceqExtStateType(struct soap *soap, ns1__SceqExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SceqExtStateType", p->soap_type() == SOAP_TYPE_ns1__SceqExtStateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SceqExtStateType(struct soap *soap, const char *URL, ns1__SceqExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SceqExtStateType", p->soap_type() == SOAP_TYPE_ns1__SceqExtStateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SceqExtStateType(struct soap *soap, const char *URL, ns1__SceqExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SceqExtStateType", p->soap_type() == SOAP_TYPE_ns1__SceqExtStateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SceqExtStateType * SOAP_FMAC4 soap_get_ns1__SceqExtStateType(struct soap*, ns1__SceqExtStateType *, const char*, const char*);

inline int soap_read_ns1__SceqExtStateType(struct soap *soap, ns1__SceqExtStateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SceqExtStateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SceqExtStateType(struct soap *soap, const char *URL, ns1__SceqExtStateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SceqExtStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SceqExtStateType(struct soap *soap, ns1__SceqExtStateType *p)
{
	if (soap_read_ns1__SceqExtStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__boxType_DEFINED
#define SOAP_TYPE_ns1__boxType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__boxType(struct soap*, const char*, int, const ns1__boxType *, const char*);
SOAP_FMAC3 ns1__boxType * SOAP_FMAC4 soap_in_ns1__boxType(struct soap*, const char*, ns1__boxType *, const char*);
SOAP_FMAC1 ns1__boxType * SOAP_FMAC2 soap_instantiate_ns1__boxType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__boxType * soap_new_ns1__boxType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__boxType(soap, n, NULL, NULL, NULL);
}

inline ns1__boxType * soap_new_req_ns1__boxType(
	struct soap *soap,
	unsigned short status,
	LONG64 sN,
	int minLevel,
	int maxLevel,
	ns1__monetaryUnitListType *monetaryUnitList)
{
	ns1__boxType *_p = soap_new_ns1__boxType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__boxType::status = status;
		_p->ns1__boxType::sN = sN;
		_p->ns1__boxType::minLevel = minLevel;
		_p->ns1__boxType::maxLevel = maxLevel;
		_p->ns1__boxType::monetaryUnitList = monetaryUnitList;
	}
	return _p;
}

inline ns1__boxType * soap_new_set_ns1__boxType(
	struct soap *soap,
	unsigned short status,
	LONG64 sN,
	int minLevel,
	int maxLevel,
	ns1__monetaryUnitListType *monetaryUnitList,
	unsigned int *id,
	unsigned int *type,
	char *__item__1)
{
	ns1__boxType *_p = soap_new_ns1__boxType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__boxType::status = status;
		_p->ns1__boxType::sN = sN;
		_p->ns1__boxType::minLevel = minLevel;
		_p->ns1__boxType::maxLevel = maxLevel;
		_p->ns1__boxType::monetaryUnitList = monetaryUnitList;
		_p->ns1__boxType::id = id;
		_p->ns1__boxType::type = type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__boxType(struct soap *soap, ns1__boxType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:boxType", p->soap_type() == SOAP_TYPE_ns1__boxType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__boxType(struct soap *soap, const char *URL, ns1__boxType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:boxType", p->soap_type() == SOAP_TYPE_ns1__boxType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__boxType(struct soap *soap, const char *URL, ns1__boxType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:boxType", p->soap_type() == SOAP_TYPE_ns1__boxType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__boxType * SOAP_FMAC4 soap_get_ns1__boxType(struct soap*, ns1__boxType *, const char*, const char*);

inline int soap_read_ns1__boxType(struct soap *soap, ns1__boxType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__boxType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__boxType(struct soap *soap, const char *URL, ns1__boxType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__boxType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__boxType(struct soap *soap, ns1__boxType *p)
{
	if (soap_read_ns1__boxType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BoxListType_DEFINED
#define SOAP_TYPE_ns1__BoxListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BoxListType(struct soap*, const char*, int, const ns1__BoxListType *, const char*);
SOAP_FMAC3 ns1__BoxListType * SOAP_FMAC4 soap_in_ns1__BoxListType(struct soap*, const char*, ns1__BoxListType *, const char*);
SOAP_FMAC1 ns1__BoxListType * SOAP_FMAC2 soap_instantiate_ns1__BoxListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BoxListType * soap_new_ns1__BoxListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BoxListType(soap, n, NULL, NULL, NULL);
}

inline ns1__BoxListType * soap_new_req_ns1__BoxListType(
	struct soap *soap,
	int __sizeBox,
	ns1__boxType **Box)
{
	ns1__BoxListType *_p = soap_new_ns1__BoxListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BoxListType::__sizeBox = __sizeBox;
		_p->ns1__BoxListType::Box = Box;
	}
	return _p;
}

inline ns1__BoxListType * soap_new_set_ns1__BoxListType(
	struct soap *soap,
	int __sizeBox,
	ns1__boxType **Box,
	int *length,
	char *__item__1)
{
	ns1__BoxListType *_p = soap_new_ns1__BoxListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BoxListType::__sizeBox = __sizeBox;
		_p->ns1__BoxListType::Box = Box;
		_p->ns1__BoxListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__BoxListType(struct soap *soap, ns1__BoxListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BoxListType", p->soap_type() == SOAP_TYPE_ns1__BoxListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BoxListType(struct soap *soap, const char *URL, ns1__BoxListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BoxListType", p->soap_type() == SOAP_TYPE_ns1__BoxListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BoxListType(struct soap *soap, const char *URL, ns1__BoxListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BoxListType", p->soap_type() == SOAP_TYPE_ns1__BoxListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BoxListType * SOAP_FMAC4 soap_get_ns1__BoxListType(struct soap*, ns1__BoxListType *, const char*, const char*);

inline int soap_read_ns1__BoxListType(struct soap *soap, ns1__BoxListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BoxListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BoxListType(struct soap *soap, const char *URL, ns1__BoxListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BoxListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BoxListType(struct soap *soap, ns1__BoxListType *p)
{
	if (soap_read_ns1__BoxListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TvmExtStateType_DEFINED
#define SOAP_TYPE_ns1__TvmExtStateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TvmExtStateType(struct soap*, const char*, int, const ns1__TvmExtStateType *, const char*);
SOAP_FMAC3 ns1__TvmExtStateType * SOAP_FMAC4 soap_in_ns1__TvmExtStateType(struct soap*, const char*, ns1__TvmExtStateType *, const char*);
SOAP_FMAC1 ns1__TvmExtStateType * SOAP_FMAC2 soap_instantiate_ns1__TvmExtStateType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TvmExtStateType * soap_new_ns1__TvmExtStateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TvmExtStateType(soap, n, NULL, NULL, NULL);
}

inline ns1__TvmExtStateType * soap_new_req_ns1__TvmExtStateType(
	struct soap *soap,
	int wM,
	int sM,
	ns1__DeviceListType *devList,
	ns1__AlarmListType *alarmList,
	ns1__MediaOperationListType *mediaOpList,
	int changeStatus,
	int purseStatus,
	int noteBoxStatus,
	int creditStatus,
	ns1__samDeviceTypeList *samDeviceList)
{
	ns1__TvmExtStateType *_p = soap_new_ns1__TvmExtStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TvmExtStateType::wM = wM;
		_p->ns1__TvmExtStateType::sM = sM;
		_p->ns1__TvmExtStateType::devList = devList;
		_p->ns1__TvmExtStateType::alarmList = alarmList;
		_p->ns1__TvmExtStateType::mediaOpList = mediaOpList;
		_p->ns1__TvmExtStateType::changeStatus = changeStatus;
		_p->ns1__TvmExtStateType::purseStatus = purseStatus;
		_p->ns1__TvmExtStateType::noteBoxStatus = noteBoxStatus;
		_p->ns1__TvmExtStateType::creditStatus = creditStatus;
		_p->ns1__TvmExtStateType::samDeviceList = samDeviceList;
	}
	return _p;
}

inline ns1__TvmExtStateType * soap_new_set_ns1__TvmExtStateType(
	struct soap *soap,
	int wM,
	int sM,
	ns1__DeviceListType *devList,
	ns1__AlarmListType *alarmList,
	ns1__MediaOperationListType *mediaOpList,
	int changeStatus,
	int purseStatus,
	int noteBoxStatus,
	int creditStatus,
	ns1__BoxListType *refillBoxList,
	ns1__BoxListType *hopperBoxList,
	ns1__BoxListType *collectionBoxList,
	ns1__BoxListType *noteDispenserBoxList,
	ns1__BoxListType *rejectedBoxList,
	ns1__BoxListType *monetaryBoxList,
	ns1__MediaDispenserListType *mediaDispenserList,
	ns1__samDeviceTypeList *samDeviceList,
	char *__item__1)
{
	ns1__TvmExtStateType *_p = soap_new_ns1__TvmExtStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TvmExtStateType::wM = wM;
		_p->ns1__TvmExtStateType::sM = sM;
		_p->ns1__TvmExtStateType::devList = devList;
		_p->ns1__TvmExtStateType::alarmList = alarmList;
		_p->ns1__TvmExtStateType::mediaOpList = mediaOpList;
		_p->ns1__TvmExtStateType::changeStatus = changeStatus;
		_p->ns1__TvmExtStateType::purseStatus = purseStatus;
		_p->ns1__TvmExtStateType::noteBoxStatus = noteBoxStatus;
		_p->ns1__TvmExtStateType::creditStatus = creditStatus;
		_p->ns1__TvmExtStateType::refillBoxList = refillBoxList;
		_p->ns1__TvmExtStateType::hopperBoxList = hopperBoxList;
		_p->ns1__TvmExtStateType::collectionBoxList = collectionBoxList;
		_p->ns1__TvmExtStateType::noteDispenserBoxList = noteDispenserBoxList;
		_p->ns1__TvmExtStateType::rejectedBoxList = rejectedBoxList;
		_p->ns1__TvmExtStateType::monetaryBoxList = monetaryBoxList;
		_p->ns1__TvmExtStateType::mediaDispenserList = mediaDispenserList;
		_p->ns1__TvmExtStateType::samDeviceList = samDeviceList;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__TvmExtStateType(struct soap *soap, ns1__TvmExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TvmExtStateType", p->soap_type() == SOAP_TYPE_ns1__TvmExtStateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TvmExtStateType(struct soap *soap, const char *URL, ns1__TvmExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TvmExtStateType", p->soap_type() == SOAP_TYPE_ns1__TvmExtStateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TvmExtStateType(struct soap *soap, const char *URL, ns1__TvmExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TvmExtStateType", p->soap_type() == SOAP_TYPE_ns1__TvmExtStateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TvmExtStateType * SOAP_FMAC4 soap_get_ns1__TvmExtStateType(struct soap*, ns1__TvmExtStateType *, const char*, const char*);

inline int soap_read_ns1__TvmExtStateType(struct soap *soap, ns1__TvmExtStateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TvmExtStateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TvmExtStateType(struct soap *soap, const char *URL, ns1__TvmExtStateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TvmExtStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TvmExtStateType(struct soap *soap, ns1__TvmExtStateType *p)
{
	if (soap_read_ns1__TvmExtStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__QuantityType_DEFINED
#define SOAP_TYPE_ns1__QuantityType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__QuantityType(struct soap*, const char*, int, const ns1__QuantityType *, const char*);
SOAP_FMAC3 ns1__QuantityType * SOAP_FMAC4 soap_in_ns1__QuantityType(struct soap*, const char*, ns1__QuantityType *, const char*);
SOAP_FMAC1 ns1__QuantityType * SOAP_FMAC2 soap_instantiate_ns1__QuantityType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__QuantityType * soap_new_ns1__QuantityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__QuantityType(soap, n, NULL, NULL, NULL);
}

inline ns1__QuantityType * soap_new_req_ns1__QuantityType(
	struct soap *soap,
	char *units,
	unsigned int quantity)
{
	ns1__QuantityType *_p = soap_new_ns1__QuantityType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QuantityType::units = units;
		_p->ns1__QuantityType::quantity = quantity;
	}
	return _p;
}

inline ns1__QuantityType * soap_new_set_ns1__QuantityType(
	struct soap *soap,
	char *units,
	unsigned int quantity,
	char *__item__1)
{
	ns1__QuantityType *_p = soap_new_ns1__QuantityType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__QuantityType::units = units;
		_p->ns1__QuantityType::quantity = quantity;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__QuantityType(struct soap *soap, ns1__QuantityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuantityType", p->soap_type() == SOAP_TYPE_ns1__QuantityType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__QuantityType(struct soap *soap, const char *URL, ns1__QuantityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuantityType", p->soap_type() == SOAP_TYPE_ns1__QuantityType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__QuantityType(struct soap *soap, const char *URL, ns1__QuantityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:QuantityType", p->soap_type() == SOAP_TYPE_ns1__QuantityType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__QuantityType * SOAP_FMAC4 soap_get_ns1__QuantityType(struct soap*, ns1__QuantityType *, const char*, const char*);

inline int soap_read_ns1__QuantityType(struct soap *soap, ns1__QuantityType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__QuantityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__QuantityType(struct soap *soap, const char *URL, ns1__QuantityType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__QuantityType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__QuantityType(struct soap *soap, ns1__QuantityType *p)
{
	if (soap_read_ns1__QuantityType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TransactionMTCConfTypeList_DEFINED
#define SOAP_TYPE_ns1__TransactionMTCConfTypeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransactionMTCConfTypeList(struct soap*, const char*, int, const ns1__TransactionMTCConfTypeList *, const char*);
SOAP_FMAC3 ns1__TransactionMTCConfTypeList * SOAP_FMAC4 soap_in_ns1__TransactionMTCConfTypeList(struct soap*, const char*, ns1__TransactionMTCConfTypeList *, const char*);
SOAP_FMAC1 ns1__TransactionMTCConfTypeList * SOAP_FMAC2 soap_instantiate_ns1__TransactionMTCConfTypeList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransactionMTCConfTypeList * soap_new_ns1__TransactionMTCConfTypeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TransactionMTCConfTypeList(soap, n, NULL, NULL, NULL);
}

inline ns1__TransactionMTCConfTypeList * soap_new_req_ns1__TransactionMTCConfTypeList(
	struct soap *soap,
	int __sizeitems,
	ns1__TransactionMTCConfType **items)
{
	ns1__TransactionMTCConfTypeList *_p = soap_new_ns1__TransactionMTCConfTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCConfTypeList::__sizeitems = __sizeitems;
		_p->ns1__TransactionMTCConfTypeList::items = items;
	}
	return _p;
}

inline ns1__TransactionMTCConfTypeList * soap_new_set_ns1__TransactionMTCConfTypeList(
	struct soap *soap,
	int __sizeitems,
	ns1__TransactionMTCConfType **items,
	char *__item__1)
{
	ns1__TransactionMTCConfTypeList *_p = soap_new_ns1__TransactionMTCConfTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCConfTypeList::__sizeitems = __sizeitems;
		_p->ns1__TransactionMTCConfTypeList::items = items;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__TransactionMTCConfTypeList(struct soap *soap, ns1__TransactionMTCConfTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCConfTypeList", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCConfTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TransactionMTCConfTypeList(struct soap *soap, const char *URL, ns1__TransactionMTCConfTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCConfTypeList", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCConfTypeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TransactionMTCConfTypeList(struct soap *soap, const char *URL, ns1__TransactionMTCConfTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCConfTypeList", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCConfTypeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TransactionMTCConfTypeList * SOAP_FMAC4 soap_get_ns1__TransactionMTCConfTypeList(struct soap*, ns1__TransactionMTCConfTypeList *, const char*, const char*);

inline int soap_read_ns1__TransactionMTCConfTypeList(struct soap *soap, ns1__TransactionMTCConfTypeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TransactionMTCConfTypeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TransactionMTCConfTypeList(struct soap *soap, const char *URL, ns1__TransactionMTCConfTypeList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TransactionMTCConfTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TransactionMTCConfTypeList(struct soap *soap, ns1__TransactionMTCConfTypeList *p)
{
	if (soap_read_ns1__TransactionMTCConfTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TransactionMTCConfType_DEFINED
#define SOAP_TYPE_ns1__TransactionMTCConfType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransactionMTCConfType(struct soap*, const char*, int, const ns1__TransactionMTCConfType *, const char*);
SOAP_FMAC3 ns1__TransactionMTCConfType * SOAP_FMAC4 soap_in_ns1__TransactionMTCConfType(struct soap*, const char*, ns1__TransactionMTCConfType *, const char*);
SOAP_FMAC1 ns1__TransactionMTCConfType * SOAP_FMAC2 soap_instantiate_ns1__TransactionMTCConfType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransactionMTCConfType * soap_new_ns1__TransactionMTCConfType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TransactionMTCConfType(soap, n, NULL, NULL, NULL);
}

inline ns1__TransactionMTCConfType * soap_new_req_ns1__TransactionMTCConfType(
	struct soap *soap,
	ns1__MTC_USCORETransactionIdType *id,
	bool admited,
	unsigned int rejectionCode,
	char *rejectionDesc)
{
	ns1__TransactionMTCConfType *_p = soap_new_ns1__TransactionMTCConfType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCConfType::id = id;
		_p->ns1__TransactionMTCConfType::admited = admited;
		_p->ns1__TransactionMTCConfType::rejectionCode = rejectionCode;
		_p->ns1__TransactionMTCConfType::rejectionDesc = rejectionDesc;
	}
	return _p;
}

inline ns1__TransactionMTCConfType * soap_new_set_ns1__TransactionMTCConfType(
	struct soap *soap,
	ns1__MTC_USCORETransactionIdType *id,
	bool admited,
	unsigned int rejectionCode,
	char *rejectionDesc,
	char *__item__1)
{
	ns1__TransactionMTCConfType *_p = soap_new_ns1__TransactionMTCConfType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCConfType::id = id;
		_p->ns1__TransactionMTCConfType::admited = admited;
		_p->ns1__TransactionMTCConfType::rejectionCode = rejectionCode;
		_p->ns1__TransactionMTCConfType::rejectionDesc = rejectionDesc;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__TransactionMTCConfType(struct soap *soap, ns1__TransactionMTCConfType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCConfType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCConfType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TransactionMTCConfType(struct soap *soap, const char *URL, ns1__TransactionMTCConfType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCConfType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCConfType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TransactionMTCConfType(struct soap *soap, const char *URL, ns1__TransactionMTCConfType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCConfType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCConfType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TransactionMTCConfType * SOAP_FMAC4 soap_get_ns1__TransactionMTCConfType(struct soap*, ns1__TransactionMTCConfType *, const char*, const char*);

inline int soap_read_ns1__TransactionMTCConfType(struct soap *soap, ns1__TransactionMTCConfType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TransactionMTCConfType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TransactionMTCConfType(struct soap *soap, const char *URL, ns1__TransactionMTCConfType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TransactionMTCConfType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TransactionMTCConfType(struct soap *soap, ns1__TransactionMTCConfType *p)
{
	if (soap_read_ns1__TransactionMTCConfType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CashInfo_DEFINED
#define SOAP_TYPE_ns1__CashInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CashInfo(struct soap*, const char*, int, const ns1__CashInfo *, const char*);
SOAP_FMAC3 ns1__CashInfo * SOAP_FMAC4 soap_in_ns1__CashInfo(struct soap*, const char*, ns1__CashInfo *, const char*);
SOAP_FMAC1 ns1__CashInfo * SOAP_FMAC2 soap_instantiate_ns1__CashInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CashInfo * soap_new_ns1__CashInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CashInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__CashInfo * soap_new_req_ns1__CashInfo(
	struct soap *soap,
	unsigned short pert,
	unsigned int payt,
	int type,
	ULONG64 amnt)
{
	ns1__CashInfo *_p = soap_new_ns1__CashInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashInfo::pert = pert;
		_p->ns1__CashInfo::payt = payt;
		_p->ns1__CashInfo::type = type;
		_p->ns1__CashInfo::amnt = amnt;
	}
	return _p;
}

inline ns1__CashInfo * soap_new_set_ns1__CashInfo(
	struct soap *soap,
	unsigned short pert,
	unsigned int payt,
	int type,
	ULONG64 amnt,
	char *__item__1)
{
	ns1__CashInfo *_p = soap_new_ns1__CashInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashInfo::pert = pert;
		_p->ns1__CashInfo::payt = payt;
		_p->ns1__CashInfo::type = type;
		_p->ns1__CashInfo::amnt = amnt;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__CashInfo(struct soap *soap, ns1__CashInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashInfo", p->soap_type() == SOAP_TYPE_ns1__CashInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CashInfo(struct soap *soap, const char *URL, ns1__CashInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashInfo", p->soap_type() == SOAP_TYPE_ns1__CashInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CashInfo(struct soap *soap, const char *URL, ns1__CashInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashInfo", p->soap_type() == SOAP_TYPE_ns1__CashInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CashInfo * SOAP_FMAC4 soap_get_ns1__CashInfo(struct soap*, ns1__CashInfo *, const char*, const char*);

inline int soap_read_ns1__CashInfo(struct soap *soap, ns1__CashInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CashInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CashInfo(struct soap *soap, const char *URL, ns1__CashInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CashInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CashInfo(struct soap *soap, ns1__CashInfo *p)
{
	if (soap_read_ns1__CashInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CashInfoList_DEFINED
#define SOAP_TYPE_ns1__CashInfoList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CashInfoList(struct soap*, const char*, int, const ns1__CashInfoList *, const char*);
SOAP_FMAC3 ns1__CashInfoList * SOAP_FMAC4 soap_in_ns1__CashInfoList(struct soap*, const char*, ns1__CashInfoList *, const char*);
SOAP_FMAC1 ns1__CashInfoList * SOAP_FMAC2 soap_instantiate_ns1__CashInfoList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CashInfoList * soap_new_ns1__CashInfoList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CashInfoList(soap, n, NULL, NULL, NULL);
}

inline ns1__CashInfoList * soap_new_req_ns1__CashInfoList(
	struct soap *soap,
	int __sizecashInfo,
	ns1__CashInfo **cashInfo)
{
	ns1__CashInfoList *_p = soap_new_ns1__CashInfoList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashInfoList::__sizecashInfo = __sizecashInfo;
		_p->ns1__CashInfoList::cashInfo = cashInfo;
	}
	return _p;
}

inline ns1__CashInfoList * soap_new_set_ns1__CashInfoList(
	struct soap *soap,
	int __sizecashInfo,
	ns1__CashInfo **cashInfo,
	unsigned int *size,
	char *__item__1)
{
	ns1__CashInfoList *_p = soap_new_ns1__CashInfoList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashInfoList::__sizecashInfo = __sizecashInfo;
		_p->ns1__CashInfoList::cashInfo = cashInfo;
		_p->ns1__CashInfoList::size = size;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__CashInfoList(struct soap *soap, ns1__CashInfoList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashInfoList", p->soap_type() == SOAP_TYPE_ns1__CashInfoList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CashInfoList(struct soap *soap, const char *URL, ns1__CashInfoList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashInfoList", p->soap_type() == SOAP_TYPE_ns1__CashInfoList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CashInfoList(struct soap *soap, const char *URL, ns1__CashInfoList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashInfoList", p->soap_type() == SOAP_TYPE_ns1__CashInfoList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CashInfoList * SOAP_FMAC4 soap_get_ns1__CashInfoList(struct soap*, ns1__CashInfoList *, const char*, const char*);

inline int soap_read_ns1__CashInfoList(struct soap *soap, ns1__CashInfoList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CashInfoList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CashInfoList(struct soap *soap, const char *URL, ns1__CashInfoList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CashInfoList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CashInfoList(struct soap *soap, ns1__CashInfoList *p)
{
	if (soap_read_ns1__CashInfoList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__samDeviceType_DEFINED
#define SOAP_TYPE_ns1__samDeviceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__samDeviceType(struct soap*, const char*, int, const ns1__samDeviceType *, const char*);
SOAP_FMAC3 ns1__samDeviceType * SOAP_FMAC4 soap_in_ns1__samDeviceType(struct soap*, const char*, ns1__samDeviceType *, const char*);
SOAP_FMAC1 ns1__samDeviceType * SOAP_FMAC2 soap_instantiate_ns1__samDeviceType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__samDeviceType * soap_new_ns1__samDeviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__samDeviceType(soap, n, NULL, NULL, NULL);
}

inline ns1__samDeviceType * soap_new_req_ns1__samDeviceType(
	struct soap *soap,
	LONG64 deviceCode,
	LONG64 sam,
	LONG64 migrationLevel,
	LONG64 currentQuotaTransactions,
	LONG64 currentQuotaValue)
{
	ns1__samDeviceType *_p = soap_new_ns1__samDeviceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__samDeviceType::deviceCode = deviceCode;
		_p->ns1__samDeviceType::sam = sam;
		_p->ns1__samDeviceType::migrationLevel = migrationLevel;
		_p->ns1__samDeviceType::currentQuotaTransactions = currentQuotaTransactions;
		_p->ns1__samDeviceType::currentQuotaValue = currentQuotaValue;
	}
	return _p;
}

inline ns1__samDeviceType * soap_new_set_ns1__samDeviceType(
	struct soap *soap,
	LONG64 deviceCode,
	LONG64 sam,
	LONG64 migrationLevel,
	LONG64 currentQuotaTransactions,
	LONG64 currentQuotaValue,
	char *__item__1)
{
	ns1__samDeviceType *_p = soap_new_ns1__samDeviceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__samDeviceType::deviceCode = deviceCode;
		_p->ns1__samDeviceType::sam = sam;
		_p->ns1__samDeviceType::migrationLevel = migrationLevel;
		_p->ns1__samDeviceType::currentQuotaTransactions = currentQuotaTransactions;
		_p->ns1__samDeviceType::currentQuotaValue = currentQuotaValue;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__samDeviceType(struct soap *soap, ns1__samDeviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:samDeviceType", p->soap_type() == SOAP_TYPE_ns1__samDeviceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__samDeviceType(struct soap *soap, const char *URL, ns1__samDeviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:samDeviceType", p->soap_type() == SOAP_TYPE_ns1__samDeviceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__samDeviceType(struct soap *soap, const char *URL, ns1__samDeviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:samDeviceType", p->soap_type() == SOAP_TYPE_ns1__samDeviceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__samDeviceType * SOAP_FMAC4 soap_get_ns1__samDeviceType(struct soap*, ns1__samDeviceType *, const char*, const char*);

inline int soap_read_ns1__samDeviceType(struct soap *soap, ns1__samDeviceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__samDeviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__samDeviceType(struct soap *soap, const char *URL, ns1__samDeviceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__samDeviceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__samDeviceType(struct soap *soap, ns1__samDeviceType *p)
{
	if (soap_read_ns1__samDeviceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__samDeviceTypeList_DEFINED
#define SOAP_TYPE_ns1__samDeviceTypeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__samDeviceTypeList(struct soap*, const char*, int, const ns1__samDeviceTypeList *, const char*);
SOAP_FMAC3 ns1__samDeviceTypeList * SOAP_FMAC4 soap_in_ns1__samDeviceTypeList(struct soap*, const char*, ns1__samDeviceTypeList *, const char*);
SOAP_FMAC1 ns1__samDeviceTypeList * SOAP_FMAC2 soap_instantiate_ns1__samDeviceTypeList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__samDeviceTypeList * soap_new_ns1__samDeviceTypeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__samDeviceTypeList(soap, n, NULL, NULL, NULL);
}

inline ns1__samDeviceTypeList * soap_new_req_ns1__samDeviceTypeList(
	struct soap *soap,
	int __sizesamDevice,
	ns1__samDeviceType **samDevice)
{
	ns1__samDeviceTypeList *_p = soap_new_ns1__samDeviceTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__samDeviceTypeList::__sizesamDevice = __sizesamDevice;
		_p->ns1__samDeviceTypeList::samDevice = samDevice;
	}
	return _p;
}

inline ns1__samDeviceTypeList * soap_new_set_ns1__samDeviceTypeList(
	struct soap *soap,
	int __sizesamDevice,
	ns1__samDeviceType **samDevice,
	int *length,
	char *__item__1)
{
	ns1__samDeviceTypeList *_p = soap_new_ns1__samDeviceTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__samDeviceTypeList::__sizesamDevice = __sizesamDevice;
		_p->ns1__samDeviceTypeList::samDevice = samDevice;
		_p->ns1__samDeviceTypeList::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__samDeviceTypeList(struct soap *soap, ns1__samDeviceTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:samDeviceTypeList", p->soap_type() == SOAP_TYPE_ns1__samDeviceTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__samDeviceTypeList(struct soap *soap, const char *URL, ns1__samDeviceTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:samDeviceTypeList", p->soap_type() == SOAP_TYPE_ns1__samDeviceTypeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__samDeviceTypeList(struct soap *soap, const char *URL, ns1__samDeviceTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:samDeviceTypeList", p->soap_type() == SOAP_TYPE_ns1__samDeviceTypeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__samDeviceTypeList * SOAP_FMAC4 soap_get_ns1__samDeviceTypeList(struct soap*, ns1__samDeviceTypeList *, const char*, const char*);

inline int soap_read_ns1__samDeviceTypeList(struct soap *soap, ns1__samDeviceTypeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__samDeviceTypeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__samDeviceTypeList(struct soap *soap, const char *URL, ns1__samDeviceTypeList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__samDeviceTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__samDeviceTypeList(struct soap *soap, ns1__samDeviceTypeList *p)
{
	if (soap_read_ns1__samDeviceTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Shift_DEFINED
#define SOAP_TYPE_ns1__Shift_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Shift(struct soap*, const char*, int, const ns1__Shift *, const char*);
SOAP_FMAC3 ns1__Shift * SOAP_FMAC4 soap_in_ns1__Shift(struct soap*, const char*, ns1__Shift *, const char*);
SOAP_FMAC1 ns1__Shift * SOAP_FMAC2 soap_instantiate_ns1__Shift(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Shift * soap_new_ns1__Shift(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Shift(soap, n, NULL, NULL, NULL);
}

inline ns1__Shift * soap_new_req_ns1__Shift(
	struct soap *soap,
	unsigned int id,
	unsigned int user,
	time_t start)
{
	ns1__Shift *_p = soap_new_ns1__Shift(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Shift::id = id;
		_p->ns1__Shift::user = user;
		_p->ns1__Shift::start = start;
	}
	return _p;
}

inline ns1__Shift * soap_new_set_ns1__Shift(
	struct soap *soap,
	unsigned int id,
	unsigned int user,
	time_t start,
	bool *active,
	char *__item__1)
{
	ns1__Shift *_p = soap_new_ns1__Shift(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Shift::id = id;
		_p->ns1__Shift::user = user;
		_p->ns1__Shift::start = start;
		_p->ns1__Shift::active = active;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__Shift(struct soap *soap, ns1__Shift const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Shift", p->soap_type() == SOAP_TYPE_ns1__Shift ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Shift(struct soap *soap, const char *URL, ns1__Shift const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Shift", p->soap_type() == SOAP_TYPE_ns1__Shift ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Shift(struct soap *soap, const char *URL, ns1__Shift const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Shift", p->soap_type() == SOAP_TYPE_ns1__Shift ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Shift * SOAP_FMAC4 soap_get_ns1__Shift(struct soap*, ns1__Shift *, const char*, const char*);

inline int soap_read_ns1__Shift(struct soap *soap, ns1__Shift *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Shift(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Shift(struct soap *soap, const char *URL, ns1__Shift *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Shift(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Shift(struct soap *soap, ns1__Shift *p)
{
	if (soap_read_ns1__Shift(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ShiftList_DEFINED
#define SOAP_TYPE_ns1__ShiftList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ShiftList(struct soap*, const char*, int, const ns1__ShiftList *, const char*);
SOAP_FMAC3 ns1__ShiftList * SOAP_FMAC4 soap_in_ns1__ShiftList(struct soap*, const char*, ns1__ShiftList *, const char*);
SOAP_FMAC1 ns1__ShiftList * SOAP_FMAC2 soap_instantiate_ns1__ShiftList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ShiftList * soap_new_ns1__ShiftList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ShiftList(soap, n, NULL, NULL, NULL);
}

inline ns1__ShiftList * soap_new_req_ns1__ShiftList(
	struct soap *soap,
	int __sizeshift,
	ns1__Shift **shift)
{
	ns1__ShiftList *_p = soap_new_ns1__ShiftList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ShiftList::__sizeshift = __sizeshift;
		_p->ns1__ShiftList::shift = shift;
	}
	return _p;
}

inline ns1__ShiftList * soap_new_set_ns1__ShiftList(
	struct soap *soap,
	int __sizeshift,
	ns1__Shift **shift,
	unsigned int *size,
	char *__item__1)
{
	ns1__ShiftList *_p = soap_new_ns1__ShiftList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ShiftList::__sizeshift = __sizeshift;
		_p->ns1__ShiftList::shift = shift;
		_p->ns1__ShiftList::size = size;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ShiftList(struct soap *soap, ns1__ShiftList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ShiftList", p->soap_type() == SOAP_TYPE_ns1__ShiftList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ShiftList(struct soap *soap, const char *URL, ns1__ShiftList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ShiftList", p->soap_type() == SOAP_TYPE_ns1__ShiftList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ShiftList(struct soap *soap, const char *URL, ns1__ShiftList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ShiftList", p->soap_type() == SOAP_TYPE_ns1__ShiftList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ShiftList * SOAP_FMAC4 soap_get_ns1__ShiftList(struct soap*, ns1__ShiftList *, const char*, const char*);

inline int soap_read_ns1__ShiftList(struct soap *soap, ns1__ShiftList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ShiftList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ShiftList(struct soap *soap, const char *URL, ns1__ShiftList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ShiftList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ShiftList(struct soap *soap, ns1__ShiftList *p)
{
	if (soap_read_ns1__ShiftList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DispenserStockType_DEFINED
#define SOAP_TYPE_ns1__DispenserStockType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DispenserStockType(struct soap*, const char*, int, const ns1__DispenserStockType *, const char*);
SOAP_FMAC3 ns1__DispenserStockType * SOAP_FMAC4 soap_in_ns1__DispenserStockType(struct soap*, const char*, ns1__DispenserStockType *, const char*);
SOAP_FMAC1 ns1__DispenserStockType * SOAP_FMAC2 soap_instantiate_ns1__DispenserStockType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DispenserStockType * soap_new_ns1__DispenserStockType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DispenserStockType(soap, n, NULL, NULL, NULL);
}

inline ns1__DispenserStockType * soap_new_req_ns1__DispenserStockType(
	struct soap *soap,
	int mediaType,
	int issued,
	int left,
	int rejected)
{
	ns1__DispenserStockType *_p = soap_new_ns1__DispenserStockType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DispenserStockType::mediaType = mediaType;
		_p->ns1__DispenserStockType::issued = issued;
		_p->ns1__DispenserStockType::left = left;
		_p->ns1__DispenserStockType::rejected = rejected;
	}
	return _p;
}

inline ns1__DispenserStockType * soap_new_set_ns1__DispenserStockType(
	struct soap *soap,
	int mediaType,
	int issued,
	int left,
	int rejected,
	int *id,
	int *status,
	char *__item__1)
{
	ns1__DispenserStockType *_p = soap_new_ns1__DispenserStockType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DispenserStockType::mediaType = mediaType;
		_p->ns1__DispenserStockType::issued = issued;
		_p->ns1__DispenserStockType::left = left;
		_p->ns1__DispenserStockType::rejected = rejected;
		_p->ns1__DispenserStockType::id = id;
		_p->ns1__DispenserStockType::status = status;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__DispenserStockType(struct soap *soap, ns1__DispenserStockType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DispenserStockType", p->soap_type() == SOAP_TYPE_ns1__DispenserStockType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DispenserStockType(struct soap *soap, const char *URL, ns1__DispenserStockType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DispenserStockType", p->soap_type() == SOAP_TYPE_ns1__DispenserStockType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DispenserStockType(struct soap *soap, const char *URL, ns1__DispenserStockType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DispenserStockType", p->soap_type() == SOAP_TYPE_ns1__DispenserStockType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DispenserStockType * SOAP_FMAC4 soap_get_ns1__DispenserStockType(struct soap*, ns1__DispenserStockType *, const char*, const char*);

inline int soap_read_ns1__DispenserStockType(struct soap *soap, ns1__DispenserStockType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DispenserStockType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DispenserStockType(struct soap *soap, const char *URL, ns1__DispenserStockType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DispenserStockType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DispenserStockType(struct soap *soap, ns1__DispenserStockType *p)
{
	if (soap_read_ns1__DispenserStockType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DispenserStockListType_DEFINED
#define SOAP_TYPE_ns1__DispenserStockListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DispenserStockListType(struct soap*, const char*, int, const ns1__DispenserStockListType *, const char*);
SOAP_FMAC3 ns1__DispenserStockListType * SOAP_FMAC4 soap_in_ns1__DispenserStockListType(struct soap*, const char*, ns1__DispenserStockListType *, const char*);
SOAP_FMAC1 ns1__DispenserStockListType * SOAP_FMAC2 soap_instantiate_ns1__DispenserStockListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DispenserStockListType * soap_new_ns1__DispenserStockListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DispenserStockListType(soap, n, NULL, NULL, NULL);
}

inline ns1__DispenserStockListType * soap_new_req_ns1__DispenserStockListType(
	struct soap *soap,
	int __sizestock,
	ns1__DispenserStockType **stock)
{
	ns1__DispenserStockListType *_p = soap_new_ns1__DispenserStockListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DispenserStockListType::__sizestock = __sizestock;
		_p->ns1__DispenserStockListType::stock = stock;
	}
	return _p;
}

inline ns1__DispenserStockListType * soap_new_set_ns1__DispenserStockListType(
	struct soap *soap,
	int __sizestock,
	ns1__DispenserStockType **stock,
	int *length,
	char *__item__1)
{
	ns1__DispenserStockListType *_p = soap_new_ns1__DispenserStockListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DispenserStockListType::__sizestock = __sizestock;
		_p->ns1__DispenserStockListType::stock = stock;
		_p->ns1__DispenserStockListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__DispenserStockListType(struct soap *soap, ns1__DispenserStockListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DispenserStockListType", p->soap_type() == SOAP_TYPE_ns1__DispenserStockListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DispenserStockListType(struct soap *soap, const char *URL, ns1__DispenserStockListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DispenserStockListType", p->soap_type() == SOAP_TYPE_ns1__DispenserStockListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DispenserStockListType(struct soap *soap, const char *URL, ns1__DispenserStockListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DispenserStockListType", p->soap_type() == SOAP_TYPE_ns1__DispenserStockListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DispenserStockListType * SOAP_FMAC4 soap_get_ns1__DispenserStockListType(struct soap*, ns1__DispenserStockListType *, const char*, const char*);

inline int soap_read_ns1__DispenserStockListType(struct soap *soap, ns1__DispenserStockListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DispenserStockListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DispenserStockListType(struct soap *soap, const char *URL, ns1__DispenserStockListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DispenserStockListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DispenserStockListType(struct soap *soap, ns1__DispenserStockListType *p)
{
	if (soap_read_ns1__DispenserStockListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MediaDispenserType_DEFINED
#define SOAP_TYPE_ns1__MediaDispenserType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaDispenserType(struct soap*, const char*, int, const ns1__MediaDispenserType *, const char*);
SOAP_FMAC3 ns1__MediaDispenserType * SOAP_FMAC4 soap_in_ns1__MediaDispenserType(struct soap*, const char*, ns1__MediaDispenserType *, const char*);
SOAP_FMAC1 ns1__MediaDispenserType * SOAP_FMAC2 soap_instantiate_ns1__MediaDispenserType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MediaDispenserType * soap_new_ns1__MediaDispenserType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MediaDispenserType(soap, n, NULL, NULL, NULL);
}

inline ns1__MediaDispenserType * soap_new_req_ns1__MediaDispenserType(
	struct soap *soap)
{
	ns1__MediaDispenserType *_p = soap_new_ns1__MediaDispenserType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__MediaDispenserType * soap_new_set_ns1__MediaDispenserType(
	struct soap *soap,
	ns1__DispenserStockListType *stockList,
	int *id,
	int *type,
	int *status,
	char *__item__1)
{
	ns1__MediaDispenserType *_p = soap_new_ns1__MediaDispenserType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaDispenserType::stockList = stockList;
		_p->ns1__MediaDispenserType::id = id;
		_p->ns1__MediaDispenserType::type = type;
		_p->ns1__MediaDispenserType::status = status;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MediaDispenserType(struct soap *soap, ns1__MediaDispenserType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaDispenserType", p->soap_type() == SOAP_TYPE_ns1__MediaDispenserType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MediaDispenserType(struct soap *soap, const char *URL, ns1__MediaDispenserType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaDispenserType", p->soap_type() == SOAP_TYPE_ns1__MediaDispenserType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MediaDispenserType(struct soap *soap, const char *URL, ns1__MediaDispenserType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaDispenserType", p->soap_type() == SOAP_TYPE_ns1__MediaDispenserType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MediaDispenserType * SOAP_FMAC4 soap_get_ns1__MediaDispenserType(struct soap*, ns1__MediaDispenserType *, const char*, const char*);

inline int soap_read_ns1__MediaDispenserType(struct soap *soap, ns1__MediaDispenserType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MediaDispenserType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MediaDispenserType(struct soap *soap, const char *URL, ns1__MediaDispenserType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MediaDispenserType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MediaDispenserType(struct soap *soap, ns1__MediaDispenserType *p)
{
	if (soap_read_ns1__MediaDispenserType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MediaDispenserListType_DEFINED
#define SOAP_TYPE_ns1__MediaDispenserListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaDispenserListType(struct soap*, const char*, int, const ns1__MediaDispenserListType *, const char*);
SOAP_FMAC3 ns1__MediaDispenserListType * SOAP_FMAC4 soap_in_ns1__MediaDispenserListType(struct soap*, const char*, ns1__MediaDispenserListType *, const char*);
SOAP_FMAC1 ns1__MediaDispenserListType * SOAP_FMAC2 soap_instantiate_ns1__MediaDispenserListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MediaDispenserListType * soap_new_ns1__MediaDispenserListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MediaDispenserListType(soap, n, NULL, NULL, NULL);
}

inline ns1__MediaDispenserListType * soap_new_req_ns1__MediaDispenserListType(
	struct soap *soap,
	int __sizedispenser,
	ns1__MediaDispenserType **dispenser)
{
	ns1__MediaDispenserListType *_p = soap_new_ns1__MediaDispenserListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaDispenserListType::__sizedispenser = __sizedispenser;
		_p->ns1__MediaDispenserListType::dispenser = dispenser;
	}
	return _p;
}

inline ns1__MediaDispenserListType * soap_new_set_ns1__MediaDispenserListType(
	struct soap *soap,
	int __sizedispenser,
	ns1__MediaDispenserType **dispenser,
	int *length,
	char *__item__1)
{
	ns1__MediaDispenserListType *_p = soap_new_ns1__MediaDispenserListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaDispenserListType::__sizedispenser = __sizedispenser;
		_p->ns1__MediaDispenserListType::dispenser = dispenser;
		_p->ns1__MediaDispenserListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MediaDispenserListType(struct soap *soap, ns1__MediaDispenserListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaDispenserListType", p->soap_type() == SOAP_TYPE_ns1__MediaDispenserListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MediaDispenserListType(struct soap *soap, const char *URL, ns1__MediaDispenserListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaDispenserListType", p->soap_type() == SOAP_TYPE_ns1__MediaDispenserListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MediaDispenserListType(struct soap *soap, const char *URL, ns1__MediaDispenserListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaDispenserListType", p->soap_type() == SOAP_TYPE_ns1__MediaDispenserListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MediaDispenserListType * SOAP_FMAC4 soap_get_ns1__MediaDispenserListType(struct soap*, ns1__MediaDispenserListType *, const char*, const char*);

inline int soap_read_ns1__MediaDispenserListType(struct soap *soap, ns1__MediaDispenserListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MediaDispenserListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MediaDispenserListType(struct soap *soap, const char *URL, ns1__MediaDispenserListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MediaDispenserListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MediaDispenserListType(struct soap *soap, ns1__MediaDispenserListType *p)
{
	if (soap_read_ns1__MediaDispenserListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ExtStateType_DEFINED
#define SOAP_TYPE_ns1__ExtStateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ExtStateType(struct soap*, const char*, int, const ns1__ExtStateType *, const char*);
SOAP_FMAC3 ns1__ExtStateType * SOAP_FMAC4 soap_in_ns1__ExtStateType(struct soap*, const char*, ns1__ExtStateType *, const char*);
SOAP_FMAC1 ns1__ExtStateType * SOAP_FMAC2 soap_instantiate_ns1__ExtStateType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ExtStateType * soap_new_ns1__ExtStateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ExtStateType(soap, n, NULL, NULL, NULL);
}

inline ns1__ExtStateType * soap_new_req_ns1__ExtStateType(
	struct soap *soap,
	int wM,
	int sM,
	ns1__DeviceListType *devList,
	ns1__AlarmListType *alarmList,
	ns1__MediaOperationListType *mediaOpList)
{
	ns1__ExtStateType *_p = soap_new_ns1__ExtStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExtStateType::wM = wM;
		_p->ns1__ExtStateType::sM = sM;
		_p->ns1__ExtStateType::devList = devList;
		_p->ns1__ExtStateType::alarmList = alarmList;
		_p->ns1__ExtStateType::mediaOpList = mediaOpList;
	}
	return _p;
}

inline ns1__ExtStateType * soap_new_set_ns1__ExtStateType(
	struct soap *soap,
	int wM,
	int sM,
	ns1__DeviceListType *devList,
	ns1__AlarmListType *alarmList,
	ns1__MediaOperationListType *mediaOpList,
	ns1__shiftType *shift,
	ns1__ShiftList *shiftList,
	ns1__samDeviceTypeList *samDeviceList,
	ns1__CashInfoList *cashInfoList,
	ns1__LocationType *location,
	char *__item__1)
{
	ns1__ExtStateType *_p = soap_new_ns1__ExtStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExtStateType::wM = wM;
		_p->ns1__ExtStateType::sM = sM;
		_p->ns1__ExtStateType::devList = devList;
		_p->ns1__ExtStateType::alarmList = alarmList;
		_p->ns1__ExtStateType::mediaOpList = mediaOpList;
		_p->ns1__ExtStateType::shift = shift;
		_p->ns1__ExtStateType::shiftList = shiftList;
		_p->ns1__ExtStateType::samDeviceList = samDeviceList;
		_p->ns1__ExtStateType::cashInfoList = cashInfoList;
		_p->ns1__ExtStateType::location = location;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ExtStateType(struct soap *soap, ns1__ExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExtStateType", p->soap_type() == SOAP_TYPE_ns1__ExtStateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ExtStateType(struct soap *soap, const char *URL, ns1__ExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExtStateType", p->soap_type() == SOAP_TYPE_ns1__ExtStateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ExtStateType(struct soap *soap, const char *URL, ns1__ExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ExtStateType", p->soap_type() == SOAP_TYPE_ns1__ExtStateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ExtStateType * SOAP_FMAC4 soap_get_ns1__ExtStateType(struct soap*, ns1__ExtStateType *, const char*, const char*);

inline int soap_read_ns1__ExtStateType(struct soap *soap, ns1__ExtStateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ExtStateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ExtStateType(struct soap *soap, const char *URL, ns1__ExtStateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ExtStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ExtStateType(struct soap *soap, ns1__ExtStateType *p)
{
	if (soap_read_ns1__ExtStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MtvmExtStateType_DEFINED
#define SOAP_TYPE_ns1__MtvmExtStateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MtvmExtStateType(struct soap*, const char*, int, const ns1__MtvmExtStateType *, const char*);
SOAP_FMAC3 ns1__MtvmExtStateType * SOAP_FMAC4 soap_in_ns1__MtvmExtStateType(struct soap*, const char*, ns1__MtvmExtStateType *, const char*);
SOAP_FMAC1 ns1__MtvmExtStateType * SOAP_FMAC2 soap_instantiate_ns1__MtvmExtStateType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MtvmExtStateType * soap_new_ns1__MtvmExtStateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MtvmExtStateType(soap, n, NULL, NULL, NULL);
}

inline ns1__MtvmExtStateType * soap_new_req_ns1__MtvmExtStateType(
	struct soap *soap,
	int wM__1,
	int sM__1,
	ns1__DeviceListType *devList__1,
	ns1__AlarmListType *alarmList__1,
	ns1__MediaOperationListType *mediaOpList__1)
{
	ns1__MtvmExtStateType *_p = soap_new_ns1__MtvmExtStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ExtStateType::wM = wM__1;
		_p->ns1__ExtStateType::sM = sM__1;
		_p->ns1__ExtStateType::devList = devList__1;
		_p->ns1__ExtStateType::alarmList = alarmList__1;
		_p->ns1__ExtStateType::mediaOpList = mediaOpList__1;
	}
	return _p;
}

inline ns1__MtvmExtStateType * soap_new_set_ns1__MtvmExtStateType(
	struct soap *soap,
	ns1__MediaDispenserListType *dispenserData,
	int wM__1,
	int sM__1,
	ns1__DeviceListType *devList__1,
	ns1__AlarmListType *alarmList__1,
	ns1__MediaOperationListType *mediaOpList__1,
	ns1__shiftType *shift__1,
	ns1__ShiftList *shiftList__1,
	ns1__samDeviceTypeList *samDeviceList__1,
	ns1__CashInfoList *cashInfoList__1,
	ns1__LocationType *location__1,
	char *__item__2)
{
	ns1__MtvmExtStateType *_p = soap_new_ns1__MtvmExtStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MtvmExtStateType::dispenserData = dispenserData;
		_p->ns1__ExtStateType::wM = wM__1;
		_p->ns1__ExtStateType::sM = sM__1;
		_p->ns1__ExtStateType::devList = devList__1;
		_p->ns1__ExtStateType::alarmList = alarmList__1;
		_p->ns1__ExtStateType::mediaOpList = mediaOpList__1;
		_p->ns1__ExtStateType::shift = shift__1;
		_p->ns1__ExtStateType::shiftList = shiftList__1;
		_p->ns1__ExtStateType::samDeviceList = samDeviceList__1;
		_p->ns1__ExtStateType::cashInfoList = cashInfoList__1;
		_p->ns1__ExtStateType::location = location__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MtvmExtStateType(struct soap *soap, ns1__MtvmExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MtvmExtStateType", p->soap_type() == SOAP_TYPE_ns1__MtvmExtStateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MtvmExtStateType(struct soap *soap, const char *URL, ns1__MtvmExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MtvmExtStateType", p->soap_type() == SOAP_TYPE_ns1__MtvmExtStateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MtvmExtStateType(struct soap *soap, const char *URL, ns1__MtvmExtStateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MtvmExtStateType", p->soap_type() == SOAP_TYPE_ns1__MtvmExtStateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MtvmExtStateType * SOAP_FMAC4 soap_get_ns1__MtvmExtStateType(struct soap*, ns1__MtvmExtStateType *, const char*, const char*);

inline int soap_read_ns1__MtvmExtStateType(struct soap *soap, ns1__MtvmExtStateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MtvmExtStateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MtvmExtStateType(struct soap *soap, const char *URL, ns1__MtvmExtStateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MtvmExtStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MtvmExtStateType(struct soap *soap, ns1__MtvmExtStateType *p)
{
	if (soap_read_ns1__MtvmExtStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORERangeDateTimeType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORERangeDateTimeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORERangeDateTimeType(struct soap*, const char*, int, const ns1__MTC_USCORERangeDateTimeType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORERangeDateTimeType * SOAP_FMAC4 soap_in_ns1__MTC_USCORERangeDateTimeType(struct soap*, const char*, ns1__MTC_USCORERangeDateTimeType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORERangeDateTimeType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORERangeDateTimeType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORERangeDateTimeType * soap_new_ns1__MTC_USCORERangeDateTimeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORERangeDateTimeType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORERangeDateTimeType * soap_new_req_ns1__MTC_USCORERangeDateTimeType(
	struct soap *soap,
	time_t start,
	time_t end)
{
	ns1__MTC_USCORERangeDateTimeType *_p = soap_new_ns1__MTC_USCORERangeDateTimeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORERangeDateTimeType::start = start;
		_p->ns1__MTC_USCORERangeDateTimeType::end = end;
	}
	return _p;
}

inline ns1__MTC_USCORERangeDateTimeType * soap_new_set_ns1__MTC_USCORERangeDateTimeType(
	struct soap *soap,
	time_t start,
	time_t end,
	char *__item__1)
{
	ns1__MTC_USCORERangeDateTimeType *_p = soap_new_ns1__MTC_USCORERangeDateTimeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORERangeDateTimeType::start = start;
		_p->ns1__MTC_USCORERangeDateTimeType::end = end;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORERangeDateTimeType(struct soap *soap, ns1__MTC_USCORERangeDateTimeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RangeDateTimeType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERangeDateTimeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORERangeDateTimeType(struct soap *soap, const char *URL, ns1__MTC_USCORERangeDateTimeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RangeDateTimeType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERangeDateTimeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORERangeDateTimeType(struct soap *soap, const char *URL, ns1__MTC_USCORERangeDateTimeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RangeDateTimeType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERangeDateTimeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORERangeDateTimeType * SOAP_FMAC4 soap_get_ns1__MTC_USCORERangeDateTimeType(struct soap*, ns1__MTC_USCORERangeDateTimeType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORERangeDateTimeType(struct soap *soap, ns1__MTC_USCORERangeDateTimeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORERangeDateTimeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORERangeDateTimeType(struct soap *soap, const char *URL, ns1__MTC_USCORERangeDateTimeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORERangeDateTimeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORERangeDateTimeType(struct soap *soap, ns1__MTC_USCORERangeDateTimeType *p)
{
	if (soap_read_ns1__MTC_USCORERangeDateTimeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvCommandV1ResponseType_DEFINED
#define SOAP_TYPE_ns1__srvCommandV1ResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvCommandV1ResponseType(struct soap*, const char*, int, const ns1__srvCommandV1ResponseType *, const char*);
SOAP_FMAC3 ns1__srvCommandV1ResponseType * SOAP_FMAC4 soap_in_ns1__srvCommandV1ResponseType(struct soap*, const char*, ns1__srvCommandV1ResponseType *, const char*);
SOAP_FMAC1 ns1__srvCommandV1ResponseType * SOAP_FMAC2 soap_instantiate_ns1__srvCommandV1ResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvCommandV1ResponseType * soap_new_ns1__srvCommandV1ResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvCommandV1ResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvCommandV1ResponseType * soap_new_req_ns1__srvCommandV1ResponseType(
	struct soap *soap,
	int result,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *responseFrom__2,
	unsigned int idMessageRequest__2,
	bool admited__2)
{
	ns1__srvCommandV1ResponseType *_p = soap_new_ns1__srvCommandV1ResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__srvCommandV1ResponseType::result = result;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__2;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__2;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__2;
		_p->ns1__PatternServiceResponseType::admited = admited__2;
	}
	return _p;
}

inline ns1__srvCommandV1ResponseType * soap_new_set_ns1__srvCommandV1ResponseType(
	struct soap *soap,
	int result,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *responseFrom__2,
	ns1__EquipmentReferenceType *responseTo__2,
	ns1__SlaveEquipmentListType *respSlaveList__2,
	unsigned int idMessageRequest__2,
	bool admited__2,
	unsigned int *rejectionCode__2,
	char *rejectionDesc__2,
	char *__item__3)
{
	ns1__srvCommandV1ResponseType *_p = soap_new_ns1__srvCommandV1ResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__srvCommandV1ResponseType::result = result;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__2;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__2;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__2;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__2;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__2;
		_p->ns1__PatternServiceResponseType::admited = admited__2;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__2;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ns1__srvCommandV1ResponseType(struct soap *soap, ns1__srvCommandV1ResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandV1ResponseType", p->soap_type() == SOAP_TYPE_ns1__srvCommandV1ResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvCommandV1ResponseType(struct soap *soap, const char *URL, ns1__srvCommandV1ResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandV1ResponseType", p->soap_type() == SOAP_TYPE_ns1__srvCommandV1ResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvCommandV1ResponseType(struct soap *soap, const char *URL, ns1__srvCommandV1ResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandV1ResponseType", p->soap_type() == SOAP_TYPE_ns1__srvCommandV1ResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvCommandV1ResponseType * SOAP_FMAC4 soap_get_ns1__srvCommandV1ResponseType(struct soap*, ns1__srvCommandV1ResponseType *, const char*, const char*);

inline int soap_read_ns1__srvCommandV1ResponseType(struct soap *soap, ns1__srvCommandV1ResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvCommandV1ResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvCommandV1ResponseType(struct soap *soap, const char *URL, ns1__srvCommandV1ResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvCommandV1ResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvCommandV1ResponseType(struct soap *soap, ns1__srvCommandV1ResponseType *p)
{
	if (soap_read_ns1__srvCommandV1ResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvCommandBaseResponseType_DEFINED
#define SOAP_TYPE_ns1__srvCommandBaseResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvCommandBaseResponseType(struct soap*, const char*, int, const ns1__srvCommandBaseResponseType *, const char*);
SOAP_FMAC3 ns1__srvCommandBaseResponseType * SOAP_FMAC4 soap_in_ns1__srvCommandBaseResponseType(struct soap*, const char*, ns1__srvCommandBaseResponseType *, const char*);
SOAP_FMAC1 ns1__srvCommandBaseResponseType * SOAP_FMAC2 soap_instantiate_ns1__srvCommandBaseResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvCommandBaseResponseType * soap_new_ns1__srvCommandBaseResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvCommandBaseResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvCommandBaseResponseType * soap_new_req_ns1__srvCommandBaseResponseType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__srvCommandBaseResponseType *_p = soap_new_ns1__srvCommandBaseResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__srvCommandBaseResponseType * soap_new_set_ns1__srvCommandBaseResponseType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__srvCommandBaseResponseType *_p = soap_new_ns1__srvCommandBaseResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__srvCommandBaseResponseType(struct soap *soap, ns1__srvCommandBaseResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandBaseResponseType", p->soap_type() == SOAP_TYPE_ns1__srvCommandBaseResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvCommandBaseResponseType(struct soap *soap, const char *URL, ns1__srvCommandBaseResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandBaseResponseType", p->soap_type() == SOAP_TYPE_ns1__srvCommandBaseResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvCommandBaseResponseType(struct soap *soap, const char *URL, ns1__srvCommandBaseResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandBaseResponseType", p->soap_type() == SOAP_TYPE_ns1__srvCommandBaseResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvCommandBaseResponseType * SOAP_FMAC4 soap_get_ns1__srvCommandBaseResponseType(struct soap*, ns1__srvCommandBaseResponseType *, const char*, const char*);

inline int soap_read_ns1__srvCommandBaseResponseType(struct soap *soap, ns1__srvCommandBaseResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvCommandBaseResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvCommandBaseResponseType(struct soap *soap, const char *URL, ns1__srvCommandBaseResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvCommandBaseResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvCommandBaseResponseType(struct soap *soap, ns1__srvCommandBaseResponseType *p)
{
	if (soap_read_ns1__srvCommandBaseResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__configFileType_DEFINED
#define SOAP_TYPE_ns1__configFileType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__configFileType(struct soap*, const char*, int, const ns1__configFileType *, const char*);
SOAP_FMAC3 ns1__configFileType * SOAP_FMAC4 soap_in_ns1__configFileType(struct soap*, const char*, ns1__configFileType *, const char*);
SOAP_FMAC1 ns1__configFileType * SOAP_FMAC2 soap_instantiate_ns1__configFileType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__configFileType * soap_new_ns1__configFileType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__configFileType(soap, n, NULL, NULL, NULL);
}

inline ns1__configFileType * soap_new_req_ns1__configFileType(
	struct soap *soap,
	LONG64 id,
	LONG64 version,
	LONG64 incVersion)
{
	ns1__configFileType *_p = soap_new_ns1__configFileType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__configFileType::id = id;
		_p->ns1__configFileType::version = version;
		_p->ns1__configFileType::incVersion = incVersion;
	}
	return _p;
}

inline ns1__configFileType * soap_new_set_ns1__configFileType(
	struct soap *soap,
	LONG64 id,
	LONG64 version,
	LONG64 incVersion,
	char *__item__1)
{
	ns1__configFileType *_p = soap_new_ns1__configFileType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__configFileType::id = id;
		_p->ns1__configFileType::version = version;
		_p->ns1__configFileType::incVersion = incVersion;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__configFileType(struct soap *soap, ns1__configFileType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:configFileType", p->soap_type() == SOAP_TYPE_ns1__configFileType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__configFileType(struct soap *soap, const char *URL, ns1__configFileType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:configFileType", p->soap_type() == SOAP_TYPE_ns1__configFileType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__configFileType(struct soap *soap, const char *URL, ns1__configFileType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:configFileType", p->soap_type() == SOAP_TYPE_ns1__configFileType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__configFileType * SOAP_FMAC4 soap_get_ns1__configFileType(struct soap*, ns1__configFileType *, const char*, const char*);

inline int soap_read_ns1__configFileType(struct soap *soap, ns1__configFileType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__configFileType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__configFileType(struct soap *soap, const char *URL, ns1__configFileType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__configFileType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__configFileType(struct soap *soap, ns1__configFileType *p)
{
	if (soap_read_ns1__configFileType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__configFileListType_DEFINED
#define SOAP_TYPE_ns1__configFileListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__configFileListType(struct soap*, const char*, int, const ns1__configFileListType *, const char*);
SOAP_FMAC3 ns1__configFileListType * SOAP_FMAC4 soap_in_ns1__configFileListType(struct soap*, const char*, ns1__configFileListType *, const char*);
SOAP_FMAC1 ns1__configFileListType * SOAP_FMAC2 soap_instantiate_ns1__configFileListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__configFileListType * soap_new_ns1__configFileListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__configFileListType(soap, n, NULL, NULL, NULL);
}

inline ns1__configFileListType * soap_new_req_ns1__configFileListType(
	struct soap *soap,
	int __sizeconfigFile,
	ns1__configFileType **configFile)
{
	ns1__configFileListType *_p = soap_new_ns1__configFileListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__configFileListType::__sizeconfigFile = __sizeconfigFile;
		_p->ns1__configFileListType::configFile = configFile;
	}
	return _p;
}

inline ns1__configFileListType * soap_new_set_ns1__configFileListType(
	struct soap *soap,
	int __sizeconfigFile,
	ns1__configFileType **configFile,
	int *length,
	char *__item__1)
{
	ns1__configFileListType *_p = soap_new_ns1__configFileListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__configFileListType::__sizeconfigFile = __sizeconfigFile;
		_p->ns1__configFileListType::configFile = configFile;
		_p->ns1__configFileListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__configFileListType(struct soap *soap, ns1__configFileListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:configFileListType", p->soap_type() == SOAP_TYPE_ns1__configFileListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__configFileListType(struct soap *soap, const char *URL, ns1__configFileListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:configFileListType", p->soap_type() == SOAP_TYPE_ns1__configFileListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__configFileListType(struct soap *soap, const char *URL, ns1__configFileListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:configFileListType", p->soap_type() == SOAP_TYPE_ns1__configFileListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__configFileListType * SOAP_FMAC4 soap_get_ns1__configFileListType(struct soap*, ns1__configFileListType *, const char*, const char*);

inline int soap_read_ns1__configFileListType(struct soap *soap, ns1__configFileListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__configFileListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__configFileListType(struct soap *soap, const char *URL, ns1__configFileListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__configFileListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__configFileListType(struct soap *soap, ns1__configFileListType *p)
{
	if (soap_read_ns1__configFileListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__packageType_DEFINED
#define SOAP_TYPE_ns1__packageType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__packageType(struct soap*, const char*, int, const ns1__packageType *, const char*);
SOAP_FMAC3 ns1__packageType * SOAP_FMAC4 soap_in_ns1__packageType(struct soap*, const char*, ns1__packageType *, const char*);
SOAP_FMAC1 ns1__packageType * SOAP_FMAC2 soap_instantiate_ns1__packageType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__packageType * soap_new_ns1__packageType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__packageType(soap, n, NULL, NULL, NULL);
}

inline ns1__packageType * soap_new_req_ns1__packageType(
	struct soap *soap,
	ns1__configFileListType *configFileList,
	LONG64 id,
	LONG64 version)
{
	ns1__packageType *_p = soap_new_ns1__packageType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__packageType::configFileList = configFileList;
		_p->ns1__packageType::id = id;
		_p->ns1__packageType::version = version;
	}
	return _p;
}

inline ns1__packageType * soap_new_set_ns1__packageType(
	struct soap *soap,
	ns1__configFileListType *configFileList,
	LONG64 id,
	LONG64 version,
	char *__item__1)
{
	ns1__packageType *_p = soap_new_ns1__packageType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__packageType::configFileList = configFileList;
		_p->ns1__packageType::id = id;
		_p->ns1__packageType::version = version;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__packageType(struct soap *soap, ns1__packageType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:packageType", p->soap_type() == SOAP_TYPE_ns1__packageType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__packageType(struct soap *soap, const char *URL, ns1__packageType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:packageType", p->soap_type() == SOAP_TYPE_ns1__packageType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__packageType(struct soap *soap, const char *URL, ns1__packageType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:packageType", p->soap_type() == SOAP_TYPE_ns1__packageType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__packageType * SOAP_FMAC4 soap_get_ns1__packageType(struct soap*, ns1__packageType *, const char*, const char*);

inline int soap_read_ns1__packageType(struct soap *soap, ns1__packageType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__packageType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__packageType(struct soap *soap, const char *URL, ns1__packageType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__packageType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__packageType(struct soap *soap, ns1__packageType *p)
{
	if (soap_read_ns1__packageType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__confPackageListType_DEFINED
#define SOAP_TYPE_ns1__confPackageListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__confPackageListType(struct soap*, const char*, int, const ns1__confPackageListType *, const char*);
SOAP_FMAC3 ns1__confPackageListType * SOAP_FMAC4 soap_in_ns1__confPackageListType(struct soap*, const char*, ns1__confPackageListType *, const char*);
SOAP_FMAC1 ns1__confPackageListType * SOAP_FMAC2 soap_instantiate_ns1__confPackageListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__confPackageListType * soap_new_ns1__confPackageListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__confPackageListType(soap, n, NULL, NULL, NULL);
}

inline ns1__confPackageListType * soap_new_req_ns1__confPackageListType(
	struct soap *soap,
	int __sizepackage,
	ns1__packageType **package)
{
	ns1__confPackageListType *_p = soap_new_ns1__confPackageListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__confPackageListType::__sizepackage = __sizepackage;
		_p->ns1__confPackageListType::package = package;
	}
	return _p;
}

inline ns1__confPackageListType * soap_new_set_ns1__confPackageListType(
	struct soap *soap,
	int __sizepackage,
	ns1__packageType **package,
	int *length,
	char *__item__1)
{
	ns1__confPackageListType *_p = soap_new_ns1__confPackageListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__confPackageListType::__sizepackage = __sizepackage;
		_p->ns1__confPackageListType::package = package;
		_p->ns1__confPackageListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__confPackageListType(struct soap *soap, ns1__confPackageListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:confPackageListType", p->soap_type() == SOAP_TYPE_ns1__confPackageListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__confPackageListType(struct soap *soap, const char *URL, ns1__confPackageListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:confPackageListType", p->soap_type() == SOAP_TYPE_ns1__confPackageListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__confPackageListType(struct soap *soap, const char *URL, ns1__confPackageListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:confPackageListType", p->soap_type() == SOAP_TYPE_ns1__confPackageListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__confPackageListType * SOAP_FMAC4 soap_get_ns1__confPackageListType(struct soap*, ns1__confPackageListType *, const char*, const char*);

inline int soap_read_ns1__confPackageListType(struct soap *soap, ns1__confPackageListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__confPackageListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__confPackageListType(struct soap *soap, const char *URL, ns1__confPackageListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__confPackageListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__confPackageListType(struct soap *soap, ns1__confPackageListType *p)
{
	if (soap_read_ns1__confPackageListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvConfigurationV1ResponseType_DEFINED
#define SOAP_TYPE_ns1__srvConfigurationV1ResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvConfigurationV1ResponseType(struct soap*, const char*, int, const ns1__srvConfigurationV1ResponseType *, const char*);
SOAP_FMAC3 ns1__srvConfigurationV1ResponseType * SOAP_FMAC4 soap_in_ns1__srvConfigurationV1ResponseType(struct soap*, const char*, ns1__srvConfigurationV1ResponseType *, const char*);
SOAP_FMAC1 ns1__srvConfigurationV1ResponseType * SOAP_FMAC2 soap_instantiate_ns1__srvConfigurationV1ResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvConfigurationV1ResponseType * soap_new_ns1__srvConfigurationV1ResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvConfigurationV1ResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvConfigurationV1ResponseType * soap_new_req_ns1__srvConfigurationV1ResponseType(
	struct soap *soap,
	ns1__confPackageListType *packageList,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *responseFrom__2,
	unsigned int idMessageRequest__2,
	bool admited__2)
{
	ns1__srvConfigurationV1ResponseType *_p = soap_new_ns1__srvConfigurationV1ResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__srvConfigurationV1ResponseType::packageList = packageList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__2;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__2;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__2;
		_p->ns1__PatternServiceResponseType::admited = admited__2;
	}
	return _p;
}

inline ns1__srvConfigurationV1ResponseType * soap_new_set_ns1__srvConfigurationV1ResponseType(
	struct soap *soap,
	ns1__confPackageListType *packageList,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *responseFrom__2,
	ns1__EquipmentReferenceType *responseTo__2,
	ns1__SlaveEquipmentListType *respSlaveList__2,
	unsigned int idMessageRequest__2,
	bool admited__2,
	unsigned int *rejectionCode__2,
	char *rejectionDesc__2,
	char *__item__3)
{
	ns1__srvConfigurationV1ResponseType *_p = soap_new_ns1__srvConfigurationV1ResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__srvConfigurationV1ResponseType::packageList = packageList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__2;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__2;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__2;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__2;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__2;
		_p->ns1__PatternServiceResponseType::admited = admited__2;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__2;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ns1__srvConfigurationV1ResponseType(struct soap *soap, ns1__srvConfigurationV1ResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationV1ResponseType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationV1ResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvConfigurationV1ResponseType(struct soap *soap, const char *URL, ns1__srvConfigurationV1ResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationV1ResponseType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationV1ResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvConfigurationV1ResponseType(struct soap *soap, const char *URL, ns1__srvConfigurationV1ResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationV1ResponseType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationV1ResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvConfigurationV1ResponseType * SOAP_FMAC4 soap_get_ns1__srvConfigurationV1ResponseType(struct soap*, ns1__srvConfigurationV1ResponseType *, const char*, const char*);

inline int soap_read_ns1__srvConfigurationV1ResponseType(struct soap *soap, ns1__srvConfigurationV1ResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvConfigurationV1ResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvConfigurationV1ResponseType(struct soap *soap, const char *URL, ns1__srvConfigurationV1ResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvConfigurationV1ResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvConfigurationV1ResponseType(struct soap *soap, ns1__srvConfigurationV1ResponseType *p)
{
	if (soap_read_ns1__srvConfigurationV1ResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvConfigurationBaseResponseType_DEFINED
#define SOAP_TYPE_ns1__srvConfigurationBaseResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvConfigurationBaseResponseType(struct soap*, const char*, int, const ns1__srvConfigurationBaseResponseType *, const char*);
SOAP_FMAC3 ns1__srvConfigurationBaseResponseType * SOAP_FMAC4 soap_in_ns1__srvConfigurationBaseResponseType(struct soap*, const char*, ns1__srvConfigurationBaseResponseType *, const char*);
SOAP_FMAC1 ns1__srvConfigurationBaseResponseType * SOAP_FMAC2 soap_instantiate_ns1__srvConfigurationBaseResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvConfigurationBaseResponseType * soap_new_ns1__srvConfigurationBaseResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvConfigurationBaseResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvConfigurationBaseResponseType * soap_new_req_ns1__srvConfigurationBaseResponseType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__srvConfigurationBaseResponseType *_p = soap_new_ns1__srvConfigurationBaseResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__srvConfigurationBaseResponseType * soap_new_set_ns1__srvConfigurationBaseResponseType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__srvConfigurationBaseResponseType *_p = soap_new_ns1__srvConfigurationBaseResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__srvConfigurationBaseResponseType(struct soap *soap, ns1__srvConfigurationBaseResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationBaseResponseType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationBaseResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvConfigurationBaseResponseType(struct soap *soap, const char *URL, ns1__srvConfigurationBaseResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationBaseResponseType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationBaseResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvConfigurationBaseResponseType(struct soap *soap, const char *URL, ns1__srvConfigurationBaseResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationBaseResponseType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationBaseResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvConfigurationBaseResponseType * SOAP_FMAC4 soap_get_ns1__srvConfigurationBaseResponseType(struct soap*, ns1__srvConfigurationBaseResponseType *, const char*, const char*);

inline int soap_read_ns1__srvConfigurationBaseResponseType(struct soap *soap, ns1__srvConfigurationBaseResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvConfigurationBaseResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvConfigurationBaseResponseType(struct soap *soap, const char *URL, ns1__srvConfigurationBaseResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvConfigurationBaseResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvConfigurationBaseResponseType(struct soap *soap, ns1__srvConfigurationBaseResponseType *p)
{
	if (soap_read_ns1__srvConfigurationBaseResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MonitoringTypeId_DEFINED
#define SOAP_TYPE_ns1__MonitoringTypeId_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MonitoringTypeId(struct soap*, const char*, int, const ns1__MonitoringTypeId *, const char*);
SOAP_FMAC3 ns1__MonitoringTypeId * SOAP_FMAC4 soap_in_ns1__MonitoringTypeId(struct soap*, const char*, ns1__MonitoringTypeId *, const char*);
SOAP_FMAC1 ns1__MonitoringTypeId * SOAP_FMAC2 soap_instantiate_ns1__MonitoringTypeId(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MonitoringTypeId * soap_new_ns1__MonitoringTypeId(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MonitoringTypeId(soap, n, NULL, NULL, NULL);
}

inline ns1__MonitoringTypeId * soap_new_req_ns1__MonitoringTypeId(
	struct soap *soap,
	unsigned int eId,
	time_t date)
{
	ns1__MonitoringTypeId *_p = soap_new_ns1__MonitoringTypeId(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MonitoringTypeId::eId = eId;
		_p->ns1__MonitoringTypeId::date = date;
	}
	return _p;
}

inline ns1__MonitoringTypeId * soap_new_set_ns1__MonitoringTypeId(
	struct soap *soap,
	unsigned int eId,
	time_t date,
	char *__item__1)
{
	ns1__MonitoringTypeId *_p = soap_new_ns1__MonitoringTypeId(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MonitoringTypeId::eId = eId;
		_p->ns1__MonitoringTypeId::date = date;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MonitoringTypeId(struct soap *soap, ns1__MonitoringTypeId const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MonitoringTypeId", p->soap_type() == SOAP_TYPE_ns1__MonitoringTypeId ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MonitoringTypeId(struct soap *soap, const char *URL, ns1__MonitoringTypeId const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MonitoringTypeId", p->soap_type() == SOAP_TYPE_ns1__MonitoringTypeId ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MonitoringTypeId(struct soap *soap, const char *URL, ns1__MonitoringTypeId const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MonitoringTypeId", p->soap_type() == SOAP_TYPE_ns1__MonitoringTypeId ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MonitoringTypeId * SOAP_FMAC4 soap_get_ns1__MonitoringTypeId(struct soap*, ns1__MonitoringTypeId *, const char*, const char*);

inline int soap_read_ns1__MonitoringTypeId(struct soap *soap, ns1__MonitoringTypeId *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MonitoringTypeId(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MonitoringTypeId(struct soap *soap, const char *URL, ns1__MonitoringTypeId *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MonitoringTypeId(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MonitoringTypeId(struct soap *soap, ns1__MonitoringTypeId *p)
{
	if (soap_read_ns1__MonitoringTypeId(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SlavePresentationResponseType_DEFINED
#define SOAP_TYPE_ns1__SlavePresentationResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SlavePresentationResponseType(struct soap*, const char*, int, const ns1__SlavePresentationResponseType *, const char*);
SOAP_FMAC3 ns1__SlavePresentationResponseType * SOAP_FMAC4 soap_in_ns1__SlavePresentationResponseType(struct soap*, const char*, ns1__SlavePresentationResponseType *, const char*);
SOAP_FMAC1 ns1__SlavePresentationResponseType * SOAP_FMAC2 soap_instantiate_ns1__SlavePresentationResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SlavePresentationResponseType * soap_new_ns1__SlavePresentationResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SlavePresentationResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SlavePresentationResponseType * soap_new_req_ns1__SlavePresentationResponseType(
	struct soap *soap,
	ns1__MonitoringTypeId *slave,
	unsigned short result)
{
	ns1__SlavePresentationResponseType *_p = soap_new_ns1__SlavePresentationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlavePresentationResponseType::slave = slave;
		_p->ns1__SlavePresentationResponseType::result = result;
	}
	return _p;
}

inline ns1__SlavePresentationResponseType * soap_new_set_ns1__SlavePresentationResponseType(
	struct soap *soap,
	ns1__MonitoringTypeId *slave,
	unsigned short result,
	char *__item__1)
{
	ns1__SlavePresentationResponseType *_p = soap_new_ns1__SlavePresentationResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlavePresentationResponseType::slave = slave;
		_p->ns1__SlavePresentationResponseType::result = result;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SlavePresentationResponseType(struct soap *soap, ns1__SlavePresentationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlavePresentationResponseType", p->soap_type() == SOAP_TYPE_ns1__SlavePresentationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SlavePresentationResponseType(struct soap *soap, const char *URL, ns1__SlavePresentationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlavePresentationResponseType", p->soap_type() == SOAP_TYPE_ns1__SlavePresentationResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SlavePresentationResponseType(struct soap *soap, const char *URL, ns1__SlavePresentationResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlavePresentationResponseType", p->soap_type() == SOAP_TYPE_ns1__SlavePresentationResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SlavePresentationResponseType * SOAP_FMAC4 soap_get_ns1__SlavePresentationResponseType(struct soap*, ns1__SlavePresentationResponseType *, const char*, const char*);

inline int soap_read_ns1__SlavePresentationResponseType(struct soap *soap, ns1__SlavePresentationResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SlavePresentationResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SlavePresentationResponseType(struct soap *soap, const char *URL, ns1__SlavePresentationResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SlavePresentationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SlavePresentationResponseType(struct soap *soap, ns1__SlavePresentationResponseType *p)
{
	if (soap_read_ns1__SlavePresentationResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SlavePresentationResponseListType_DEFINED
#define SOAP_TYPE_ns1__SlavePresentationResponseListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SlavePresentationResponseListType(struct soap*, const char*, int, const ns1__SlavePresentationResponseListType *, const char*);
SOAP_FMAC3 ns1__SlavePresentationResponseListType * SOAP_FMAC4 soap_in_ns1__SlavePresentationResponseListType(struct soap*, const char*, ns1__SlavePresentationResponseListType *, const char*);
SOAP_FMAC1 ns1__SlavePresentationResponseListType * SOAP_FMAC2 soap_instantiate_ns1__SlavePresentationResponseListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SlavePresentationResponseListType * soap_new_ns1__SlavePresentationResponseListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SlavePresentationResponseListType(soap, n, NULL, NULL, NULL);
}

inline ns1__SlavePresentationResponseListType * soap_new_req_ns1__SlavePresentationResponseListType(
	struct soap *soap,
	int __sizeslaveResponse,
	ns1__SlavePresentationResponseType **slaveResponse)
{
	ns1__SlavePresentationResponseListType *_p = soap_new_ns1__SlavePresentationResponseListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlavePresentationResponseListType::__sizeslaveResponse = __sizeslaveResponse;
		_p->ns1__SlavePresentationResponseListType::slaveResponse = slaveResponse;
	}
	return _p;
}

inline ns1__SlavePresentationResponseListType * soap_new_set_ns1__SlavePresentationResponseListType(
	struct soap *soap,
	int __sizeslaveResponse,
	ns1__SlavePresentationResponseType **slaveResponse,
	char *__item__1)
{
	ns1__SlavePresentationResponseListType *_p = soap_new_ns1__SlavePresentationResponseListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlavePresentationResponseListType::__sizeslaveResponse = __sizeslaveResponse;
		_p->ns1__SlavePresentationResponseListType::slaveResponse = slaveResponse;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SlavePresentationResponseListType(struct soap *soap, ns1__SlavePresentationResponseListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlavePresentationResponseListType", p->soap_type() == SOAP_TYPE_ns1__SlavePresentationResponseListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SlavePresentationResponseListType(struct soap *soap, const char *URL, ns1__SlavePresentationResponseListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlavePresentationResponseListType", p->soap_type() == SOAP_TYPE_ns1__SlavePresentationResponseListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SlavePresentationResponseListType(struct soap *soap, const char *URL, ns1__SlavePresentationResponseListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlavePresentationResponseListType", p->soap_type() == SOAP_TYPE_ns1__SlavePresentationResponseListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SlavePresentationResponseListType * SOAP_FMAC4 soap_get_ns1__SlavePresentationResponseListType(struct soap*, ns1__SlavePresentationResponseListType *, const char*, const char*);

inline int soap_read_ns1__SlavePresentationResponseListType(struct soap *soap, ns1__SlavePresentationResponseListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SlavePresentationResponseListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SlavePresentationResponseListType(struct soap *soap, const char *URL, ns1__SlavePresentationResponseListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SlavePresentationResponseListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SlavePresentationResponseListType(struct soap *soap, ns1__SlavePresentationResponseListType *p)
{
	if (soap_read_ns1__SlavePresentationResponseListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvPresentationV1ResponseType_DEFINED
#define SOAP_TYPE_ns1__srvPresentationV1ResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvPresentationV1ResponseType(struct soap*, const char*, int, const ns1__srvPresentationV1ResponseType *, const char*);
SOAP_FMAC3 ns1__srvPresentationV1ResponseType * SOAP_FMAC4 soap_in_ns1__srvPresentationV1ResponseType(struct soap*, const char*, ns1__srvPresentationV1ResponseType *, const char*);
SOAP_FMAC1 ns1__srvPresentationV1ResponseType * SOAP_FMAC2 soap_instantiate_ns1__srvPresentationV1ResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvPresentationV1ResponseType * soap_new_ns1__srvPresentationV1ResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvPresentationV1ResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvPresentationV1ResponseType * soap_new_req_ns1__srvPresentationV1ResponseType(
	struct soap *soap,
	unsigned short result,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *responseFrom__2,
	unsigned int idMessageRequest__2,
	bool admited__2)
{
	ns1__srvPresentationV1ResponseType *_p = soap_new_ns1__srvPresentationV1ResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__srvPresentationV1ResponseType::result = result;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__2;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__2;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__2;
		_p->ns1__PatternServiceResponseType::admited = admited__2;
	}
	return _p;
}

inline ns1__srvPresentationV1ResponseType * soap_new_set_ns1__srvPresentationV1ResponseType(
	struct soap *soap,
	unsigned short result,
	ns1__SlavePresentationResponseListType *slavesResponse,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *responseFrom__2,
	ns1__EquipmentReferenceType *responseTo__2,
	ns1__SlaveEquipmentListType *respSlaveList__2,
	unsigned int idMessageRequest__2,
	bool admited__2,
	unsigned int *rejectionCode__2,
	char *rejectionDesc__2,
	char *__item__3)
{
	ns1__srvPresentationV1ResponseType *_p = soap_new_ns1__srvPresentationV1ResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__srvPresentationV1ResponseType::result = result;
		_p->ns1__srvPresentationV1ResponseType::slavesResponse = slavesResponse;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__2;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__2;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__2;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__2;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__2;
		_p->ns1__PatternServiceResponseType::admited = admited__2;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__2;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ns1__srvPresentationV1ResponseType(struct soap *soap, ns1__srvPresentationV1ResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationV1ResponseType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationV1ResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvPresentationV1ResponseType(struct soap *soap, const char *URL, ns1__srvPresentationV1ResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationV1ResponseType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationV1ResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvPresentationV1ResponseType(struct soap *soap, const char *URL, ns1__srvPresentationV1ResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationV1ResponseType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationV1ResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvPresentationV1ResponseType * SOAP_FMAC4 soap_get_ns1__srvPresentationV1ResponseType(struct soap*, ns1__srvPresentationV1ResponseType *, const char*, const char*);

inline int soap_read_ns1__srvPresentationV1ResponseType(struct soap *soap, ns1__srvPresentationV1ResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvPresentationV1ResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvPresentationV1ResponseType(struct soap *soap, const char *URL, ns1__srvPresentationV1ResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvPresentationV1ResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvPresentationV1ResponseType(struct soap *soap, ns1__srvPresentationV1ResponseType *p)
{
	if (soap_read_ns1__srvPresentationV1ResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvPresentationBaseResponseType_DEFINED
#define SOAP_TYPE_ns1__srvPresentationBaseResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvPresentationBaseResponseType(struct soap*, const char*, int, const ns1__srvPresentationBaseResponseType *, const char*);
SOAP_FMAC3 ns1__srvPresentationBaseResponseType * SOAP_FMAC4 soap_in_ns1__srvPresentationBaseResponseType(struct soap*, const char*, ns1__srvPresentationBaseResponseType *, const char*);
SOAP_FMAC1 ns1__srvPresentationBaseResponseType * SOAP_FMAC2 soap_instantiate_ns1__srvPresentationBaseResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvPresentationBaseResponseType * soap_new_ns1__srvPresentationBaseResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvPresentationBaseResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvPresentationBaseResponseType * soap_new_req_ns1__srvPresentationBaseResponseType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__srvPresentationBaseResponseType *_p = soap_new_ns1__srvPresentationBaseResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__srvPresentationBaseResponseType * soap_new_set_ns1__srvPresentationBaseResponseType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__srvPresentationBaseResponseType *_p = soap_new_ns1__srvPresentationBaseResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__srvPresentationBaseResponseType(struct soap *soap, ns1__srvPresentationBaseResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationBaseResponseType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationBaseResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvPresentationBaseResponseType(struct soap *soap, const char *URL, ns1__srvPresentationBaseResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationBaseResponseType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationBaseResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvPresentationBaseResponseType(struct soap *soap, const char *URL, ns1__srvPresentationBaseResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationBaseResponseType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationBaseResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvPresentationBaseResponseType * SOAP_FMAC4 soap_get_ns1__srvPresentationBaseResponseType(struct soap*, ns1__srvPresentationBaseResponseType *, const char*, const char*);

inline int soap_read_ns1__srvPresentationBaseResponseType(struct soap *soap, ns1__srvPresentationBaseResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvPresentationBaseResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvPresentationBaseResponseType(struct soap *soap, const char *URL, ns1__srvPresentationBaseResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvPresentationBaseResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvPresentationBaseResponseType(struct soap *soap, ns1__srvPresentationBaseResponseType *p)
{
	if (soap_read_ns1__srvPresentationBaseResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__versionList_DEFINED
#define SOAP_TYPE_ns1__versionList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__versionList(struct soap*, const char*, int, const ns1__versionList *, const char*);
SOAP_FMAC3 ns1__versionList * SOAP_FMAC4 soap_in_ns1__versionList(struct soap*, const char*, ns1__versionList *, const char*);
SOAP_FMAC1 ns1__versionList * SOAP_FMAC2 soap_instantiate_ns1__versionList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__versionList * soap_new_ns1__versionList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__versionList(soap, n, NULL, NULL, NULL);
}

inline ns1__versionList * soap_new_req_ns1__versionList(
	struct soap *soap,
	ns1__PackageConfigVersionListType *pkgList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__versionList *_p = soap_new_ns1__versionList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__versionList::pkgList = pkgList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__versionList * soap_new_set_ns1__versionList(
	struct soap *soap,
	ns1__PackageConfigVersionListType *pkgList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__versionList *_p = soap_new_ns1__versionList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__versionList::pkgList = pkgList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__versionList(struct soap *soap, ns1__versionList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:versionList", p->soap_type() == SOAP_TYPE_ns1__versionList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__versionList(struct soap *soap, const char *URL, ns1__versionList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:versionList", p->soap_type() == SOAP_TYPE_ns1__versionList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__versionList(struct soap *soap, const char *URL, ns1__versionList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:versionList", p->soap_type() == SOAP_TYPE_ns1__versionList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__versionList * SOAP_FMAC4 soap_get_ns1__versionList(struct soap*, ns1__versionList *, const char*, const char*);

inline int soap_read_ns1__versionList(struct soap *soap, ns1__versionList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__versionList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__versionList(struct soap *soap, const char *URL, ns1__versionList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__versionList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__versionList(struct soap *soap, ns1__versionList *p)
{
	if (soap_read_ns1__versionList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvConfigurationContentResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvConfigurationContentResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvConfigurationContentResponseType(struct soap*, const char*, int, const ns1__SrvConfigurationContentResponseType *, const char*);
SOAP_FMAC3 ns1__SrvConfigurationContentResponseType * SOAP_FMAC4 soap_in_ns1__SrvConfigurationContentResponseType(struct soap*, const char*, ns1__SrvConfigurationContentResponseType *, const char*);
SOAP_FMAC1 ns1__SrvConfigurationContentResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvConfigurationContentResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvConfigurationContentResponseType * soap_new_ns1__SrvConfigurationContentResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvConfigurationContentResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvConfigurationContentResponseType * soap_new_req_ns1__SrvConfigurationContentResponseType(
	struct soap *soap,
	bool askForMore,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvConfigurationContentResponseType *_p = soap_new_ns1__SrvConfigurationContentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvConfigurationContentResponseType::askForMore = askForMore;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvConfigurationContentResponseType * soap_new_set_ns1__SrvConfigurationContentResponseType(
	struct soap *soap,
	ns2__ConfigurationDocument *file,
	ns1__PackageConfigVersionType *pkg,
	bool askForMore,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvConfigurationContentResponseType *_p = soap_new_ns1__SrvConfigurationContentResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvConfigurationContentResponseType::file = file;
		_p->ns1__SrvConfigurationContentResponseType::pkg = pkg;
		_p->ns1__SrvConfigurationContentResponseType::askForMore = askForMore;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvConfigurationContentResponseType(struct soap *soap, ns1__SrvConfigurationContentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationContentResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationContentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvConfigurationContentResponseType(struct soap *soap, const char *URL, ns1__SrvConfigurationContentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationContentResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationContentResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvConfigurationContentResponseType(struct soap *soap, const char *URL, ns1__SrvConfigurationContentResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationContentResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationContentResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvConfigurationContentResponseType * SOAP_FMAC4 soap_get_ns1__SrvConfigurationContentResponseType(struct soap*, ns1__SrvConfigurationContentResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvConfigurationContentResponseType(struct soap *soap, ns1__SrvConfigurationContentResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvConfigurationContentResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvConfigurationContentResponseType(struct soap *soap, const char *URL, ns1__SrvConfigurationContentResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvConfigurationContentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvConfigurationContentResponseType(struct soap *soap, ns1__SrvConfigurationContentResponseType *p)
{
	if (soap_read_ns1__SrvConfigurationContentResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREVersionResponseType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCOREVersionResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCOREVersionResponseType * soap_new_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCOREVersionResponseType * soap_new_req_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__VersionsCCTIUType *versionList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREVersionResponseType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREVersionResponseType::versionList = versionList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCOREVersionResponseType * soap_new_set_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__VersionsCCTIUType *versionList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREVersionResponseType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREVersionResponseType::versionList = versionList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_VersionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_VersionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_VersionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREVersionResponseType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCOREVersionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType * soap_new_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType * soap_new_req_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__DiagnosticCCTIUListType *diagnosticList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType::diagnosticList = diagnosticList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType * soap_new_set_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__DiagnosticCCTIUListType *diagnosticList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType::diagnosticList = diagnosticList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_DiagnosticResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_DiagnosticResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_DiagnosticResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusResponseType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCOREStatusResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCOREStatusResponseType * soap_new_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCOREStatusResponseType * soap_new_req_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__StatusCCTIUListType *statusList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREStatusResponseType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREStatusResponseType::statusList = statusList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCOREStatusResponseType * soap_new_set_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__StatusCCTIUListType *statusList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREStatusResponseType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREStatusResponseType::statusList = statusList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_StatusResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_StatusResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_StatusResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusResponseType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCOREStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InfoFEMonitorCCTIUType_DEFINED
#define SOAP_TYPE_ns1__InfoFEMonitorCCTIUType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InfoFEMonitorCCTIUType(struct soap*, const char*, int, const ns1__InfoFEMonitorCCTIUType *, const char*);
SOAP_FMAC3 ns1__InfoFEMonitorCCTIUType * SOAP_FMAC4 soap_in_ns1__InfoFEMonitorCCTIUType(struct soap*, const char*, ns1__InfoFEMonitorCCTIUType *, const char*);
SOAP_FMAC1 ns1__InfoFEMonitorCCTIUType * SOAP_FMAC2 soap_instantiate_ns1__InfoFEMonitorCCTIUType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InfoFEMonitorCCTIUType * soap_new_ns1__InfoFEMonitorCCTIUType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InfoFEMonitorCCTIUType(soap, n, NULL, NULL, NULL);
}

inline ns1__InfoFEMonitorCCTIUType * soap_new_req_ns1__InfoFEMonitorCCTIUType(
	struct soap *soap,
	time_t dateTime,
	ns1__LocationType *location)
{
	ns1__InfoFEMonitorCCTIUType *_p = soap_new_ns1__InfoFEMonitorCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InfoFEMonitorCCTIUType::dateTime = dateTime;
		_p->ns1__InfoFEMonitorCCTIUType::location = location;
	}
	return _p;
}

inline ns1__InfoFEMonitorCCTIUType * soap_new_set_ns1__InfoFEMonitorCCTIUType(
	struct soap *soap,
	time_t dateTime,
	ns1__LocationType *location,
	char *__item__1)
{
	ns1__InfoFEMonitorCCTIUType *_p = soap_new_ns1__InfoFEMonitorCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InfoFEMonitorCCTIUType::dateTime = dateTime;
		_p->ns1__InfoFEMonitorCCTIUType::location = location;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__InfoFEMonitorCCTIUType(struct soap *soap, ns1__InfoFEMonitorCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InfoFEMonitorCCTIUType", p->soap_type() == SOAP_TYPE_ns1__InfoFEMonitorCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InfoFEMonitorCCTIUType(struct soap *soap, const char *URL, ns1__InfoFEMonitorCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InfoFEMonitorCCTIUType", p->soap_type() == SOAP_TYPE_ns1__InfoFEMonitorCCTIUType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InfoFEMonitorCCTIUType(struct soap *soap, const char *URL, ns1__InfoFEMonitorCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InfoFEMonitorCCTIUType", p->soap_type() == SOAP_TYPE_ns1__InfoFEMonitorCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InfoFEMonitorCCTIUType * SOAP_FMAC4 soap_get_ns1__InfoFEMonitorCCTIUType(struct soap*, ns1__InfoFEMonitorCCTIUType *, const char*, const char*);

inline int soap_read_ns1__InfoFEMonitorCCTIUType(struct soap *soap, ns1__InfoFEMonitorCCTIUType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__InfoFEMonitorCCTIUType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InfoFEMonitorCCTIUType(struct soap *soap, const char *URL, ns1__InfoFEMonitorCCTIUType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__InfoFEMonitorCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InfoFEMonitorCCTIUType(struct soap *soap, ns1__InfoFEMonitorCCTIUType *p)
{
	if (soap_read_ns1__InfoFEMonitorCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType * soap_new_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType * soap_new_req_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__AlarmCCTIUListType *alarmList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType::alarmList = alarmList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType * soap_new_set_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(
	struct soap *soap,
	ns1__InfoFEMonitorCCTIUType *base,
	ns1__AlarmCCTIUListType *alarmList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType::alarmList = alarmList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_AlarmResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_AlarmResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_AlarmResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCORECommandExecResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCORECommandExecResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCORECommandExecResponseType(struct soap*, const char*, int, const ns1__SrvMTC_USCORECommandExecResponseType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecResponseType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCORECommandExecResponseType(struct soap*, const char*, ns1__SrvMTC_USCORECommandExecResponseType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCORECommandExecResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCORECommandExecResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCORECommandExecResponseType * soap_new_ns1__SrvMTC_USCORECommandExecResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCORECommandExecResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCORECommandExecResponseType * soap_new_req_ns1__SrvMTC_USCORECommandExecResponseType(
	struct soap *soap,
	unsigned int status,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvMTC_USCORECommandExecResponseType *_p = soap_new_ns1__SrvMTC_USCORECommandExecResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORECommandExecResponseType::status = status;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCORECommandExecResponseType * soap_new_set_ns1__SrvMTC_USCORECommandExecResponseType(
	struct soap *soap,
	unsigned int status,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvMTC_USCORECommandExecResponseType *_p = soap_new_ns1__SrvMTC_USCORECommandExecResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORECommandExecResponseType::status = status;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCORECommandExecResponseType(struct soap *soap, ns1__SrvMTC_USCORECommandExecResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_CommandExecResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORECommandExecResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCORECommandExecResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORECommandExecResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_CommandExecResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORECommandExecResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCORECommandExecResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORECommandExecResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_CommandExecResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORECommandExecResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecResponseType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCORECommandExecResponseType(struct soap*, ns1__SrvMTC_USCORECommandExecResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCORECommandExecResponseType(struct soap *soap, ns1__SrvMTC_USCORECommandExecResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCORECommandExecResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCORECommandExecResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORECommandExecResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCORECommandExecResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCORECommandExecResponseType(struct soap *soap, ns1__SrvMTC_USCORECommandExecResponseType *p)
{
	if (soap_read_ns1__SrvMTC_USCORECommandExecResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementChangeResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementChangeResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREConfigElementChangeResponseType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementChangeResponseType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREConfigElementChangeResponseType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREConfigElementChangeResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREConfigElementChangeResponseType * soap_new_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREConfigElementChangeResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREConfigElementChangeResponseType * soap_new_req_ns1__SrvMTC_USCOREConfigElementChangeResponseType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvMTC_USCOREConfigElementChangeResponseType *_p = soap_new_ns1__SrvMTC_USCOREConfigElementChangeResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREConfigElementChangeResponseType * soap_new_set_ns1__SrvMTC_USCOREConfigElementChangeResponseType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREConfigElementChangeResponseType *_p = soap_new_ns1__SrvMTC_USCOREConfigElementChangeResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementChangeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementChangeResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementChangeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementChangeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementChangeResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementChangeResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementChangeResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementChangeResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementChangeResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementChangeResponseType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap*, ns1__SrvMTC_USCOREConfigElementChangeResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementChangeResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREConfigElementChangeResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementChangeResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREConfigElementChangeResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementChangeResponseType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREConfigElementChangeResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREConfigElementResponseType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementResponseType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREConfigElementResponseType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREConfigElementResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREConfigElementResponseType * soap_new_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREConfigElementResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREConfigElementResponseType * soap_new_req_ns1__SrvMTC_USCOREConfigElementResponseType(
	struct soap *soap,
	ns1__ConfigElementCCTIUListType *configElemList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvMTC_USCOREConfigElementResponseType *_p = soap_new_ns1__SrvMTC_USCOREConfigElementResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREConfigElementResponseType::configElemList = configElemList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREConfigElementResponseType * soap_new_set_ns1__SrvMTC_USCOREConfigElementResponseType(
	struct soap *soap,
	ns1__ConfigElementCCTIUListType *configElemList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREConfigElementResponseType *_p = soap_new_ns1__SrvMTC_USCOREConfigElementResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREConfigElementResponseType::configElemList = configElemList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementResponseType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap*, ns1__SrvMTC_USCOREConfigElementResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREConfigElementResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREConfigElementResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREConfigElementResponseType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementResponseType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREConfigElementResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__VersionElementCfgType_DEFINED
#define SOAP_TYPE_ns1__VersionElementCfgType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VersionElementCfgType(struct soap*, const char*, int, const ns1__VersionElementCfgType *, const char*);
SOAP_FMAC3 ns1__VersionElementCfgType * SOAP_FMAC4 soap_in_ns1__VersionElementCfgType(struct soap*, const char*, ns1__VersionElementCfgType *, const char*);
SOAP_FMAC1 ns1__VersionElementCfgType * SOAP_FMAC2 soap_instantiate_ns1__VersionElementCfgType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__VersionElementCfgType * soap_new_ns1__VersionElementCfgType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__VersionElementCfgType(soap, n, NULL, NULL, NULL);
}

inline ns1__VersionElementCfgType * soap_new_req_ns1__VersionElementCfgType(
	struct soap *soap)
{
	ns1__VersionElementCfgType *_p = soap_new_ns1__VersionElementCfgType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__VersionElementCfgType * soap_new_set_ns1__VersionElementCfgType(
	struct soap *soap,
	unsigned int *id,
	unsigned int *version,
	char *name,
	char *__item__1)
{
	ns1__VersionElementCfgType *_p = soap_new_ns1__VersionElementCfgType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionElementCfgType::id = id;
		_p->ns1__VersionElementCfgType::version = version;
		_p->ns1__VersionElementCfgType::name = name;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__VersionElementCfgType(struct soap *soap, ns1__VersionElementCfgType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionElementCfgType", p->soap_type() == SOAP_TYPE_ns1__VersionElementCfgType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__VersionElementCfgType(struct soap *soap, const char *URL, ns1__VersionElementCfgType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionElementCfgType", p->soap_type() == SOAP_TYPE_ns1__VersionElementCfgType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__VersionElementCfgType(struct soap *soap, const char *URL, ns1__VersionElementCfgType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionElementCfgType", p->soap_type() == SOAP_TYPE_ns1__VersionElementCfgType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__VersionElementCfgType * SOAP_FMAC4 soap_get_ns1__VersionElementCfgType(struct soap*, ns1__VersionElementCfgType *, const char*, const char*);

inline int soap_read_ns1__VersionElementCfgType(struct soap *soap, ns1__VersionElementCfgType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__VersionElementCfgType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__VersionElementCfgType(struct soap *soap, const char *URL, ns1__VersionElementCfgType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__VersionElementCfgType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__VersionElementCfgType(struct soap *soap, ns1__VersionElementCfgType *p)
{
	if (soap_read_ns1__VersionElementCfgType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__VersionElementCfgListType_DEFINED
#define SOAP_TYPE_ns1__VersionElementCfgListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VersionElementCfgListType(struct soap*, const char*, int, const ns1__VersionElementCfgListType *, const char*);
SOAP_FMAC3 ns1__VersionElementCfgListType * SOAP_FMAC4 soap_in_ns1__VersionElementCfgListType(struct soap*, const char*, ns1__VersionElementCfgListType *, const char*);
SOAP_FMAC1 ns1__VersionElementCfgListType * SOAP_FMAC2 soap_instantiate_ns1__VersionElementCfgListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__VersionElementCfgListType * soap_new_ns1__VersionElementCfgListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__VersionElementCfgListType(soap, n, NULL, NULL, NULL);
}

inline ns1__VersionElementCfgListType * soap_new_req_ns1__VersionElementCfgListType(
	struct soap *soap,
	int __sizeelement,
	ns1__VersionElementCfgType **element)
{
	ns1__VersionElementCfgListType *_p = soap_new_ns1__VersionElementCfgListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionElementCfgListType::__sizeelement = __sizeelement;
		_p->ns1__VersionElementCfgListType::element = element;
	}
	return _p;
}

inline ns1__VersionElementCfgListType * soap_new_set_ns1__VersionElementCfgListType(
	struct soap *soap,
	int __sizeelement,
	ns1__VersionElementCfgType **element,
	char *__item__1)
{
	ns1__VersionElementCfgListType *_p = soap_new_ns1__VersionElementCfgListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionElementCfgListType::__sizeelement = __sizeelement;
		_p->ns1__VersionElementCfgListType::element = element;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__VersionElementCfgListType(struct soap *soap, ns1__VersionElementCfgListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionElementCfgListType", p->soap_type() == SOAP_TYPE_ns1__VersionElementCfgListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__VersionElementCfgListType(struct soap *soap, const char *URL, ns1__VersionElementCfgListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionElementCfgListType", p->soap_type() == SOAP_TYPE_ns1__VersionElementCfgListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__VersionElementCfgListType(struct soap *soap, const char *URL, ns1__VersionElementCfgListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionElementCfgListType", p->soap_type() == SOAP_TYPE_ns1__VersionElementCfgListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__VersionElementCfgListType * SOAP_FMAC4 soap_get_ns1__VersionElementCfgListType(struct soap*, ns1__VersionElementCfgListType *, const char*, const char*);

inline int soap_read_ns1__VersionElementCfgListType(struct soap *soap, ns1__VersionElementCfgListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__VersionElementCfgListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__VersionElementCfgListType(struct soap *soap, const char *URL, ns1__VersionElementCfgListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__VersionElementCfgListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__VersionElementCfgListType(struct soap *soap, ns1__VersionElementCfgListType *p)
{
	if (soap_read_ns1__VersionElementCfgListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__VersionCfgType_DEFINED
#define SOAP_TYPE_ns1__VersionCfgType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VersionCfgType(struct soap*, const char*, int, const ns1__VersionCfgType *, const char*);
SOAP_FMAC3 ns1__VersionCfgType * SOAP_FMAC4 soap_in_ns1__VersionCfgType(struct soap*, const char*, ns1__VersionCfgType *, const char*);
SOAP_FMAC1 ns1__VersionCfgType * SOAP_FMAC2 soap_instantiate_ns1__VersionCfgType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__VersionCfgType * soap_new_ns1__VersionCfgType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__VersionCfgType(soap, n, NULL, NULL, NULL);
}

inline ns1__VersionCfgType * soap_new_req_ns1__VersionCfgType(
	struct soap *soap)
{
	ns1__VersionCfgType *_p = soap_new_ns1__VersionCfgType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__VersionCfgType * soap_new_set_ns1__VersionCfgType(
	struct soap *soap,
	ns1__VersionElementCfgListType *elementList,
	bool *current,
	unsigned int *owner,
	unsigned int *id,
	unsigned int *version,
	char *name,
	time_t *activation,
	char *__item__1)
{
	ns1__VersionCfgType *_p = soap_new_ns1__VersionCfgType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionCfgType::elementList = elementList;
		_p->ns1__VersionCfgType::current = current;
		_p->ns1__VersionCfgType::owner = owner;
		_p->ns1__VersionCfgType::id = id;
		_p->ns1__VersionCfgType::version = version;
		_p->ns1__VersionCfgType::name = name;
		_p->ns1__VersionCfgType::activation = activation;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__VersionCfgType(struct soap *soap, ns1__VersionCfgType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionCfgType", p->soap_type() == SOAP_TYPE_ns1__VersionCfgType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__VersionCfgType(struct soap *soap, const char *URL, ns1__VersionCfgType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionCfgType", p->soap_type() == SOAP_TYPE_ns1__VersionCfgType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__VersionCfgType(struct soap *soap, const char *URL, ns1__VersionCfgType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionCfgType", p->soap_type() == SOAP_TYPE_ns1__VersionCfgType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__VersionCfgType * SOAP_FMAC4 soap_get_ns1__VersionCfgType(struct soap*, ns1__VersionCfgType *, const char*, const char*);

inline int soap_read_ns1__VersionCfgType(struct soap *soap, ns1__VersionCfgType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__VersionCfgType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__VersionCfgType(struct soap *soap, const char *URL, ns1__VersionCfgType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__VersionCfgType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__VersionCfgType(struct soap *soap, ns1__VersionCfgType *p)
{
	if (soap_read_ns1__VersionCfgType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__VersionCfgListType_DEFINED
#define SOAP_TYPE_ns1__VersionCfgListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VersionCfgListType(struct soap*, const char*, int, const ns1__VersionCfgListType *, const char*);
SOAP_FMAC3 ns1__VersionCfgListType * SOAP_FMAC4 soap_in_ns1__VersionCfgListType(struct soap*, const char*, ns1__VersionCfgListType *, const char*);
SOAP_FMAC1 ns1__VersionCfgListType * SOAP_FMAC2 soap_instantiate_ns1__VersionCfgListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__VersionCfgListType * soap_new_ns1__VersionCfgListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__VersionCfgListType(soap, n, NULL, NULL, NULL);
}

inline ns1__VersionCfgListType * soap_new_req_ns1__VersionCfgListType(
	struct soap *soap,
	int __sizepkg,
	ns1__VersionCfgType **pkg)
{
	ns1__VersionCfgListType *_p = soap_new_ns1__VersionCfgListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionCfgListType::__sizepkg = __sizepkg;
		_p->ns1__VersionCfgListType::pkg = pkg;
	}
	return _p;
}

inline ns1__VersionCfgListType * soap_new_set_ns1__VersionCfgListType(
	struct soap *soap,
	int __sizepkg,
	ns1__VersionCfgType **pkg,
	char *__item__1)
{
	ns1__VersionCfgListType *_p = soap_new_ns1__VersionCfgListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionCfgListType::__sizepkg = __sizepkg;
		_p->ns1__VersionCfgListType::pkg = pkg;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__VersionCfgListType(struct soap *soap, ns1__VersionCfgListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionCfgListType", p->soap_type() == SOAP_TYPE_ns1__VersionCfgListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__VersionCfgListType(struct soap *soap, const char *URL, ns1__VersionCfgListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionCfgListType", p->soap_type() == SOAP_TYPE_ns1__VersionCfgListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__VersionCfgListType(struct soap *soap, const char *URL, ns1__VersionCfgListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionCfgListType", p->soap_type() == SOAP_TYPE_ns1__VersionCfgListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__VersionCfgListType * SOAP_FMAC4 soap_get_ns1__VersionCfgListType(struct soap*, ns1__VersionCfgListType *, const char*, const char*);

inline int soap_read_ns1__VersionCfgListType(struct soap *soap, ns1__VersionCfgListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__VersionCfgListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__VersionCfgListType(struct soap *soap, const char *URL, ns1__VersionCfgListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__VersionCfgListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__VersionCfgListType(struct soap *soap, ns1__VersionCfgListType *p)
{
	if (soap_read_ns1__VersionCfgListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__VersionFW_USCOREHWType_DEFINED
#define SOAP_TYPE_ns1__VersionFW_USCOREHWType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VersionFW_USCOREHWType(struct soap*, const char*, int, const ns1__VersionFW_USCOREHWType *, const char*);
SOAP_FMAC3 ns1__VersionFW_USCOREHWType * SOAP_FMAC4 soap_in_ns1__VersionFW_USCOREHWType(struct soap*, const char*, ns1__VersionFW_USCOREHWType *, const char*);
SOAP_FMAC1 ns1__VersionFW_USCOREHWType * SOAP_FMAC2 soap_instantiate_ns1__VersionFW_USCOREHWType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__VersionFW_USCOREHWType * soap_new_ns1__VersionFW_USCOREHWType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__VersionFW_USCOREHWType(soap, n, NULL, NULL, NULL);
}

inline ns1__VersionFW_USCOREHWType * soap_new_req_ns1__VersionFW_USCOREHWType(
	struct soap *soap,
	char *value)
{
	ns1__VersionFW_USCOREHWType *_p = soap_new_ns1__VersionFW_USCOREHWType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionFW_USCOREHWType::value = value;
	}
	return _p;
}

inline ns1__VersionFW_USCOREHWType * soap_new_set_ns1__VersionFW_USCOREHWType(
	struct soap *soap,
	char *value,
	unsigned int *item,
	unsigned int *code,
	char *__item__1)
{
	ns1__VersionFW_USCOREHWType *_p = soap_new_ns1__VersionFW_USCOREHWType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionFW_USCOREHWType::value = value;
		_p->ns1__VersionFW_USCOREHWType::item = item;
		_p->ns1__VersionFW_USCOREHWType::code = code;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__VersionFW_USCOREHWType(struct soap *soap, ns1__VersionFW_USCOREHWType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionFW_HWType", p->soap_type() == SOAP_TYPE_ns1__VersionFW_USCOREHWType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__VersionFW_USCOREHWType(struct soap *soap, const char *URL, ns1__VersionFW_USCOREHWType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionFW_HWType", p->soap_type() == SOAP_TYPE_ns1__VersionFW_USCOREHWType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__VersionFW_USCOREHWType(struct soap *soap, const char *URL, ns1__VersionFW_USCOREHWType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionFW_HWType", p->soap_type() == SOAP_TYPE_ns1__VersionFW_USCOREHWType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__VersionFW_USCOREHWType * SOAP_FMAC4 soap_get_ns1__VersionFW_USCOREHWType(struct soap*, ns1__VersionFW_USCOREHWType *, const char*, const char*);

inline int soap_read_ns1__VersionFW_USCOREHWType(struct soap *soap, ns1__VersionFW_USCOREHWType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__VersionFW_USCOREHWType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__VersionFW_USCOREHWType(struct soap *soap, const char *URL, ns1__VersionFW_USCOREHWType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__VersionFW_USCOREHWType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__VersionFW_USCOREHWType(struct soap *soap, ns1__VersionFW_USCOREHWType *p)
{
	if (soap_read_ns1__VersionFW_USCOREHWType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__VersionFW_USCOREHWListType_DEFINED
#define SOAP_TYPE_ns1__VersionFW_USCOREHWListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VersionFW_USCOREHWListType(struct soap*, const char*, int, const ns1__VersionFW_USCOREHWListType *, const char*);
SOAP_FMAC3 ns1__VersionFW_USCOREHWListType * SOAP_FMAC4 soap_in_ns1__VersionFW_USCOREHWListType(struct soap*, const char*, ns1__VersionFW_USCOREHWListType *, const char*);
SOAP_FMAC1 ns1__VersionFW_USCOREHWListType * SOAP_FMAC2 soap_instantiate_ns1__VersionFW_USCOREHWListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__VersionFW_USCOREHWListType * soap_new_ns1__VersionFW_USCOREHWListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__VersionFW_USCOREHWListType(soap, n, NULL, NULL, NULL);
}

inline ns1__VersionFW_USCOREHWListType * soap_new_req_ns1__VersionFW_USCOREHWListType(
	struct soap *soap,
	int __sizeitems,
	ns1__VersionFW_USCOREHWType **items)
{
	ns1__VersionFW_USCOREHWListType *_p = soap_new_ns1__VersionFW_USCOREHWListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionFW_USCOREHWListType::__sizeitems = __sizeitems;
		_p->ns1__VersionFW_USCOREHWListType::items = items;
	}
	return _p;
}

inline ns1__VersionFW_USCOREHWListType * soap_new_set_ns1__VersionFW_USCOREHWListType(
	struct soap *soap,
	int __sizeitems,
	ns1__VersionFW_USCOREHWType **items,
	char *__item__1)
{
	ns1__VersionFW_USCOREHWListType *_p = soap_new_ns1__VersionFW_USCOREHWListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionFW_USCOREHWListType::__sizeitems = __sizeitems;
		_p->ns1__VersionFW_USCOREHWListType::items = items;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__VersionFW_USCOREHWListType(struct soap *soap, ns1__VersionFW_USCOREHWListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionFW_HWListType", p->soap_type() == SOAP_TYPE_ns1__VersionFW_USCOREHWListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__VersionFW_USCOREHWListType(struct soap *soap, const char *URL, ns1__VersionFW_USCOREHWListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionFW_HWListType", p->soap_type() == SOAP_TYPE_ns1__VersionFW_USCOREHWListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__VersionFW_USCOREHWListType(struct soap *soap, const char *URL, ns1__VersionFW_USCOREHWListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionFW_HWListType", p->soap_type() == SOAP_TYPE_ns1__VersionFW_USCOREHWListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__VersionFW_USCOREHWListType * SOAP_FMAC4 soap_get_ns1__VersionFW_USCOREHWListType(struct soap*, ns1__VersionFW_USCOREHWListType *, const char*, const char*);

inline int soap_read_ns1__VersionFW_USCOREHWListType(struct soap *soap, ns1__VersionFW_USCOREHWListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__VersionFW_USCOREHWListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__VersionFW_USCOREHWListType(struct soap *soap, const char *URL, ns1__VersionFW_USCOREHWListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__VersionFW_USCOREHWListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__VersionFW_USCOREHWListType(struct soap *soap, ns1__VersionFW_USCOREHWListType *p)
{
	if (soap_read_ns1__VersionFW_USCOREHWListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__VersionsCCTIUType_DEFINED
#define SOAP_TYPE_ns1__VersionsCCTIUType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__VersionsCCTIUType(struct soap*, const char*, int, const ns1__VersionsCCTIUType *, const char*);
SOAP_FMAC3 ns1__VersionsCCTIUType * SOAP_FMAC4 soap_in_ns1__VersionsCCTIUType(struct soap*, const char*, ns1__VersionsCCTIUType *, const char*);
SOAP_FMAC1 ns1__VersionsCCTIUType * SOAP_FMAC2 soap_instantiate_ns1__VersionsCCTIUType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__VersionsCCTIUType * soap_new_ns1__VersionsCCTIUType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__VersionsCCTIUType(soap, n, NULL, NULL, NULL);
}

inline ns1__VersionsCCTIUType * soap_new_req_ns1__VersionsCCTIUType(
	struct soap *soap,
	ns1__VersionFW_USCOREHWListType *fw,
	ns1__VersionFW_USCOREHWListType *hw,
	ns1__VersionCfgListType *cfg)
{
	ns1__VersionsCCTIUType *_p = soap_new_ns1__VersionsCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionsCCTIUType::fw = fw;
		_p->ns1__VersionsCCTIUType::hw = hw;
		_p->ns1__VersionsCCTIUType::cfg = cfg;
	}
	return _p;
}

inline ns1__VersionsCCTIUType * soap_new_set_ns1__VersionsCCTIUType(
	struct soap *soap,
	ns1__VersionFW_USCOREHWListType *fw,
	ns1__VersionFW_USCOREHWListType *hw,
	ns1__VersionCfgListType *cfg,
	char *__item__1)
{
	ns1__VersionsCCTIUType *_p = soap_new_ns1__VersionsCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__VersionsCCTIUType::fw = fw;
		_p->ns1__VersionsCCTIUType::hw = hw;
		_p->ns1__VersionsCCTIUType::cfg = cfg;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__VersionsCCTIUType(struct soap *soap, ns1__VersionsCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionsCCTIUType", p->soap_type() == SOAP_TYPE_ns1__VersionsCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__VersionsCCTIUType(struct soap *soap, const char *URL, ns1__VersionsCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionsCCTIUType", p->soap_type() == SOAP_TYPE_ns1__VersionsCCTIUType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__VersionsCCTIUType(struct soap *soap, const char *URL, ns1__VersionsCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:VersionsCCTIUType", p->soap_type() == SOAP_TYPE_ns1__VersionsCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__VersionsCCTIUType * SOAP_FMAC4 soap_get_ns1__VersionsCCTIUType(struct soap*, ns1__VersionsCCTIUType *, const char*, const char*);

inline int soap_read_ns1__VersionsCCTIUType(struct soap *soap, ns1__VersionsCCTIUType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__VersionsCCTIUType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__VersionsCCTIUType(struct soap *soap, const char *URL, ns1__VersionsCCTIUType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__VersionsCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__VersionsCCTIUType(struct soap *soap, ns1__VersionsCCTIUType *p)
{
	if (soap_read_ns1__VersionsCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREVersionResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREVersionResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREVersionResponseType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREVersionResponseType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREVersionResponseType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREVersionResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREVersionResponseType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREVersionResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREVersionResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREVersionResponseType * soap_new_ns1__SrvMTC_USCOREVersionResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREVersionResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREVersionResponseType * soap_new_req_ns1__SrvMTC_USCOREVersionResponseType(
	struct soap *soap,
	ns1__VersionsCCTIUType *versionList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvMTC_USCOREVersionResponseType *_p = soap_new_ns1__SrvMTC_USCOREVersionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREVersionResponseType::versionList = versionList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREVersionResponseType * soap_new_set_ns1__SrvMTC_USCOREVersionResponseType(
	struct soap *soap,
	ns1__VersionsCCTIUType *versionList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREVersionResponseType *_p = soap_new_ns1__SrvMTC_USCOREVersionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREVersionResponseType::versionList = versionList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREVersionResponseType(struct soap *soap, ns1__SrvMTC_USCOREVersionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_VersionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREVersionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREVersionResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREVersionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_VersionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREVersionResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREVersionResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREVersionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_VersionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREVersionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREVersionResponseType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREVersionResponseType(struct soap*, ns1__SrvMTC_USCOREVersionResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREVersionResponseType(struct soap *soap, ns1__SrvMTC_USCOREVersionResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREVersionResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREVersionResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREVersionResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREVersionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREVersionResponseType(struct soap *soap, ns1__SrvMTC_USCOREVersionResponseType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREVersionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticCCTIUType_DEFINED
#define SOAP_TYPE_ns1__DiagnosticCCTIUType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DiagnosticCCTIUType(struct soap*, const char*, int, const ns1__DiagnosticCCTIUType *, const char*);
SOAP_FMAC3 ns1__DiagnosticCCTIUType * SOAP_FMAC4 soap_in_ns1__DiagnosticCCTIUType(struct soap*, const char*, ns1__DiagnosticCCTIUType *, const char*);
SOAP_FMAC1 ns1__DiagnosticCCTIUType * SOAP_FMAC2 soap_instantiate_ns1__DiagnosticCCTIUType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DiagnosticCCTIUType * soap_new_ns1__DiagnosticCCTIUType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DiagnosticCCTIUType(soap, n, NULL, NULL, NULL);
}

inline ns1__DiagnosticCCTIUType * soap_new_req_ns1__DiagnosticCCTIUType(
	struct soap *soap,
	ns1__ValueType *value,
	time_t dateTime)
{
	ns1__DiagnosticCCTIUType *_p = soap_new_ns1__DiagnosticCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DiagnosticCCTIUType::value = value;
		_p->ns1__DiagnosticCCTIUType::dateTime = dateTime;
	}
	return _p;
}

inline ns1__DiagnosticCCTIUType * soap_new_set_ns1__DiagnosticCCTIUType(
	struct soap *soap,
	ns1__ValueType *value,
	time_t dateTime,
	unsigned int *item,
	unsigned int *code,
	char *__item__1)
{
	ns1__DiagnosticCCTIUType *_p = soap_new_ns1__DiagnosticCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DiagnosticCCTIUType::value = value;
		_p->ns1__DiagnosticCCTIUType::dateTime = dateTime;
		_p->ns1__DiagnosticCCTIUType::item = item;
		_p->ns1__DiagnosticCCTIUType::code = code;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__DiagnosticCCTIUType(struct soap *soap, ns1__DiagnosticCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagnosticCCTIUType", p->soap_type() == SOAP_TYPE_ns1__DiagnosticCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DiagnosticCCTIUType(struct soap *soap, const char *URL, ns1__DiagnosticCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagnosticCCTIUType", p->soap_type() == SOAP_TYPE_ns1__DiagnosticCCTIUType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DiagnosticCCTIUType(struct soap *soap, const char *URL, ns1__DiagnosticCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagnosticCCTIUType", p->soap_type() == SOAP_TYPE_ns1__DiagnosticCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DiagnosticCCTIUType * SOAP_FMAC4 soap_get_ns1__DiagnosticCCTIUType(struct soap*, ns1__DiagnosticCCTIUType *, const char*, const char*);

inline int soap_read_ns1__DiagnosticCCTIUType(struct soap *soap, ns1__DiagnosticCCTIUType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DiagnosticCCTIUType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DiagnosticCCTIUType(struct soap *soap, const char *URL, ns1__DiagnosticCCTIUType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DiagnosticCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DiagnosticCCTIUType(struct soap *soap, ns1__DiagnosticCCTIUType *p)
{
	if (soap_read_ns1__DiagnosticCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DiagnosticCCTIUListType_DEFINED
#define SOAP_TYPE_ns1__DiagnosticCCTIUListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DiagnosticCCTIUListType(struct soap*, const char*, int, const ns1__DiagnosticCCTIUListType *, const char*);
SOAP_FMAC3 ns1__DiagnosticCCTIUListType * SOAP_FMAC4 soap_in_ns1__DiagnosticCCTIUListType(struct soap*, const char*, ns1__DiagnosticCCTIUListType *, const char*);
SOAP_FMAC1 ns1__DiagnosticCCTIUListType * SOAP_FMAC2 soap_instantiate_ns1__DiagnosticCCTIUListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DiagnosticCCTIUListType * soap_new_ns1__DiagnosticCCTIUListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DiagnosticCCTIUListType(soap, n, NULL, NULL, NULL);
}

inline ns1__DiagnosticCCTIUListType * soap_new_req_ns1__DiagnosticCCTIUListType(
	struct soap *soap,
	int __sizeitems,
	ns1__DiagnosticCCTIUType **items)
{
	ns1__DiagnosticCCTIUListType *_p = soap_new_ns1__DiagnosticCCTIUListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DiagnosticCCTIUListType::__sizeitems = __sizeitems;
		_p->ns1__DiagnosticCCTIUListType::items = items;
	}
	return _p;
}

inline ns1__DiagnosticCCTIUListType * soap_new_set_ns1__DiagnosticCCTIUListType(
	struct soap *soap,
	int __sizeitems,
	ns1__DiagnosticCCTIUType **items,
	char *__item__1)
{
	ns1__DiagnosticCCTIUListType *_p = soap_new_ns1__DiagnosticCCTIUListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DiagnosticCCTIUListType::__sizeitems = __sizeitems;
		_p->ns1__DiagnosticCCTIUListType::items = items;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__DiagnosticCCTIUListType(struct soap *soap, ns1__DiagnosticCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagnosticCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__DiagnosticCCTIUListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DiagnosticCCTIUListType(struct soap *soap, const char *URL, ns1__DiagnosticCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagnosticCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__DiagnosticCCTIUListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DiagnosticCCTIUListType(struct soap *soap, const char *URL, ns1__DiagnosticCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DiagnosticCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__DiagnosticCCTIUListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DiagnosticCCTIUListType * SOAP_FMAC4 soap_get_ns1__DiagnosticCCTIUListType(struct soap*, ns1__DiagnosticCCTIUListType *, const char*, const char*);

inline int soap_read_ns1__DiagnosticCCTIUListType(struct soap *soap, ns1__DiagnosticCCTIUListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DiagnosticCCTIUListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DiagnosticCCTIUListType(struct soap *soap, const char *URL, ns1__DiagnosticCCTIUListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DiagnosticCCTIUListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DiagnosticCCTIUListType(struct soap *soap, ns1__DiagnosticCCTIUListType *p)
{
	if (soap_read_ns1__DiagnosticCCTIUListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREDiagnosticResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREDiagnosticResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREDiagnosticResponseType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREDiagnosticResponseType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREDiagnosticResponseType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREDiagnosticResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREDiagnosticResponseType * soap_new_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREDiagnosticResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREDiagnosticResponseType * soap_new_req_ns1__SrvMTC_USCOREDiagnosticResponseType(
	struct soap *soap,
	ns1__DiagnosticCCTIUListType *diagnosticList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvMTC_USCOREDiagnosticResponseType *_p = soap_new_ns1__SrvMTC_USCOREDiagnosticResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREDiagnosticResponseType::diagnosticList = diagnosticList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREDiagnosticResponseType * soap_new_set_ns1__SrvMTC_USCOREDiagnosticResponseType(
	struct soap *soap,
	ns1__DiagnosticCCTIUListType *diagnosticList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREDiagnosticResponseType *_p = soap_new_ns1__SrvMTC_USCOREDiagnosticResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREDiagnosticResponseType::diagnosticList = diagnosticList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap *soap, ns1__SrvMTC_USCOREDiagnosticResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_DiagnosticResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREDiagnosticResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREDiagnosticResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_DiagnosticResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREDiagnosticResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREDiagnosticResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_DiagnosticResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREDiagnosticResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREDiagnosticResponseType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap*, ns1__SrvMTC_USCOREDiagnosticResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap *soap, ns1__SrvMTC_USCOREDiagnosticResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREDiagnosticResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREDiagnosticResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREDiagnosticResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREDiagnosticResponseType(struct soap *soap, ns1__SrvMTC_USCOREDiagnosticResponseType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREDiagnosticResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StatusCCTIUType_DEFINED
#define SOAP_TYPE_ns1__StatusCCTIUType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StatusCCTIUType(struct soap*, const char*, int, const ns1__StatusCCTIUType *, const char*);
SOAP_FMAC3 ns1__StatusCCTIUType * SOAP_FMAC4 soap_in_ns1__StatusCCTIUType(struct soap*, const char*, ns1__StatusCCTIUType *, const char*);
SOAP_FMAC1 ns1__StatusCCTIUType * SOAP_FMAC2 soap_instantiate_ns1__StatusCCTIUType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StatusCCTIUType * soap_new_ns1__StatusCCTIUType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StatusCCTIUType(soap, n, NULL, NULL, NULL);
}

inline ns1__StatusCCTIUType * soap_new_req_ns1__StatusCCTIUType(
	struct soap *soap,
	unsigned int value,
	time_t dateTime)
{
	ns1__StatusCCTIUType *_p = soap_new_ns1__StatusCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StatusCCTIUType::value = value;
		_p->ns1__StatusCCTIUType::dateTime = dateTime;
	}
	return _p;
}

inline ns1__StatusCCTIUType * soap_new_set_ns1__StatusCCTIUType(
	struct soap *soap,
	unsigned int value,
	time_t dateTime,
	unsigned int *item,
	unsigned int *code,
	char *__item__1)
{
	ns1__StatusCCTIUType *_p = soap_new_ns1__StatusCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StatusCCTIUType::value = value;
		_p->ns1__StatusCCTIUType::dateTime = dateTime;
		_p->ns1__StatusCCTIUType::item = item;
		_p->ns1__StatusCCTIUType::code = code;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__StatusCCTIUType(struct soap *soap, ns1__StatusCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatusCCTIUType", p->soap_type() == SOAP_TYPE_ns1__StatusCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StatusCCTIUType(struct soap *soap, const char *URL, ns1__StatusCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatusCCTIUType", p->soap_type() == SOAP_TYPE_ns1__StatusCCTIUType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StatusCCTIUType(struct soap *soap, const char *URL, ns1__StatusCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatusCCTIUType", p->soap_type() == SOAP_TYPE_ns1__StatusCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StatusCCTIUType * SOAP_FMAC4 soap_get_ns1__StatusCCTIUType(struct soap*, ns1__StatusCCTIUType *, const char*, const char*);

inline int soap_read_ns1__StatusCCTIUType(struct soap *soap, ns1__StatusCCTIUType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__StatusCCTIUType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StatusCCTIUType(struct soap *soap, const char *URL, ns1__StatusCCTIUType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StatusCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StatusCCTIUType(struct soap *soap, ns1__StatusCCTIUType *p)
{
	if (soap_read_ns1__StatusCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StatusCCTIUListType_DEFINED
#define SOAP_TYPE_ns1__StatusCCTIUListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StatusCCTIUListType(struct soap*, const char*, int, const ns1__StatusCCTIUListType *, const char*);
SOAP_FMAC3 ns1__StatusCCTIUListType * SOAP_FMAC4 soap_in_ns1__StatusCCTIUListType(struct soap*, const char*, ns1__StatusCCTIUListType *, const char*);
SOAP_FMAC1 ns1__StatusCCTIUListType * SOAP_FMAC2 soap_instantiate_ns1__StatusCCTIUListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StatusCCTIUListType * soap_new_ns1__StatusCCTIUListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StatusCCTIUListType(soap, n, NULL, NULL, NULL);
}

inline ns1__StatusCCTIUListType * soap_new_req_ns1__StatusCCTIUListType(
	struct soap *soap,
	int __sizeitems,
	ns1__StatusCCTIUType **items)
{
	ns1__StatusCCTIUListType *_p = soap_new_ns1__StatusCCTIUListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StatusCCTIUListType::__sizeitems = __sizeitems;
		_p->ns1__StatusCCTIUListType::items = items;
	}
	return _p;
}

inline ns1__StatusCCTIUListType * soap_new_set_ns1__StatusCCTIUListType(
	struct soap *soap,
	int __sizeitems,
	ns1__StatusCCTIUType **items,
	char *__item__1)
{
	ns1__StatusCCTIUListType *_p = soap_new_ns1__StatusCCTIUListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StatusCCTIUListType::__sizeitems = __sizeitems;
		_p->ns1__StatusCCTIUListType::items = items;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__StatusCCTIUListType(struct soap *soap, ns1__StatusCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatusCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__StatusCCTIUListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StatusCCTIUListType(struct soap *soap, const char *URL, ns1__StatusCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatusCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__StatusCCTIUListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StatusCCTIUListType(struct soap *soap, const char *URL, ns1__StatusCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StatusCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__StatusCCTIUListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StatusCCTIUListType * SOAP_FMAC4 soap_get_ns1__StatusCCTIUListType(struct soap*, ns1__StatusCCTIUListType *, const char*, const char*);

inline int soap_read_ns1__StatusCCTIUListType(struct soap *soap, ns1__StatusCCTIUListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__StatusCCTIUListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StatusCCTIUListType(struct soap *soap, const char *URL, ns1__StatusCCTIUListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StatusCCTIUListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StatusCCTIUListType(struct soap *soap, ns1__StatusCCTIUListType *p)
{
	if (soap_read_ns1__StatusCCTIUListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREStatusResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREStatusResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREStatusResponseType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREStatusResponseType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusResponseType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREStatusResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREStatusResponseType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREStatusResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREStatusResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREStatusResponseType * soap_new_ns1__SrvMTC_USCOREStatusResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREStatusResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREStatusResponseType * soap_new_req_ns1__SrvMTC_USCOREStatusResponseType(
	struct soap *soap,
	ns1__StatusCCTIUListType *statusList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvMTC_USCOREStatusResponseType *_p = soap_new_ns1__SrvMTC_USCOREStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREStatusResponseType::statusList = statusList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREStatusResponseType * soap_new_set_ns1__SrvMTC_USCOREStatusResponseType(
	struct soap *soap,
	ns1__StatusCCTIUListType *statusList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREStatusResponseType *_p = soap_new_ns1__SrvMTC_USCOREStatusResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREStatusResponseType::statusList = statusList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREStatusResponseType(struct soap *soap, ns1__SrvMTC_USCOREStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_StatusResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREStatusResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_StatusResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREStatusResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREStatusResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREStatusResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_StatusResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREStatusResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusResponseType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREStatusResponseType(struct soap*, ns1__SrvMTC_USCOREStatusResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREStatusResponseType(struct soap *soap, ns1__SrvMTC_USCOREStatusResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREStatusResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREStatusResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREStatusResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREStatusResponseType(struct soap *soap, ns1__SrvMTC_USCOREStatusResponseType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREStatusResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AlarmCCTIUType_DEFINED
#define SOAP_TYPE_ns1__AlarmCCTIUType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AlarmCCTIUType(struct soap*, const char*, int, const ns1__AlarmCCTIUType *, const char*);
SOAP_FMAC3 ns1__AlarmCCTIUType * SOAP_FMAC4 soap_in_ns1__AlarmCCTIUType(struct soap*, const char*, ns1__AlarmCCTIUType *, const char*);
SOAP_FMAC1 ns1__AlarmCCTIUType * SOAP_FMAC2 soap_instantiate_ns1__AlarmCCTIUType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AlarmCCTIUType * soap_new_ns1__AlarmCCTIUType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AlarmCCTIUType(soap, n, NULL, NULL, NULL);
}

inline ns1__AlarmCCTIUType * soap_new_req_ns1__AlarmCCTIUType(
	struct soap *soap,
	char *value,
	time_t dateTime)
{
	ns1__AlarmCCTIUType *_p = soap_new_ns1__AlarmCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AlarmCCTIUType::value = value;
		_p->ns1__AlarmCCTIUType::dateTime = dateTime;
	}
	return _p;
}

inline ns1__AlarmCCTIUType * soap_new_set_ns1__AlarmCCTIUType(
	struct soap *soap,
	char *value,
	time_t dateTime,
	unsigned int *item,
	unsigned int *code,
	char *__item__1)
{
	ns1__AlarmCCTIUType *_p = soap_new_ns1__AlarmCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AlarmCCTIUType::value = value;
		_p->ns1__AlarmCCTIUType::dateTime = dateTime;
		_p->ns1__AlarmCCTIUType::item = item;
		_p->ns1__AlarmCCTIUType::code = code;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AlarmCCTIUType(struct soap *soap, ns1__AlarmCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmCCTIUType", p->soap_type() == SOAP_TYPE_ns1__AlarmCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AlarmCCTIUType(struct soap *soap, const char *URL, ns1__AlarmCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmCCTIUType", p->soap_type() == SOAP_TYPE_ns1__AlarmCCTIUType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AlarmCCTIUType(struct soap *soap, const char *URL, ns1__AlarmCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmCCTIUType", p->soap_type() == SOAP_TYPE_ns1__AlarmCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AlarmCCTIUType * SOAP_FMAC4 soap_get_ns1__AlarmCCTIUType(struct soap*, ns1__AlarmCCTIUType *, const char*, const char*);

inline int soap_read_ns1__AlarmCCTIUType(struct soap *soap, ns1__AlarmCCTIUType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AlarmCCTIUType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AlarmCCTIUType(struct soap *soap, const char *URL, ns1__AlarmCCTIUType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AlarmCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AlarmCCTIUType(struct soap *soap, ns1__AlarmCCTIUType *p)
{
	if (soap_read_ns1__AlarmCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AlarmCCTIUListType_DEFINED
#define SOAP_TYPE_ns1__AlarmCCTIUListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AlarmCCTIUListType(struct soap*, const char*, int, const ns1__AlarmCCTIUListType *, const char*);
SOAP_FMAC3 ns1__AlarmCCTIUListType * SOAP_FMAC4 soap_in_ns1__AlarmCCTIUListType(struct soap*, const char*, ns1__AlarmCCTIUListType *, const char*);
SOAP_FMAC1 ns1__AlarmCCTIUListType * SOAP_FMAC2 soap_instantiate_ns1__AlarmCCTIUListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AlarmCCTIUListType * soap_new_ns1__AlarmCCTIUListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AlarmCCTIUListType(soap, n, NULL, NULL, NULL);
}

inline ns1__AlarmCCTIUListType * soap_new_req_ns1__AlarmCCTIUListType(
	struct soap *soap,
	int __sizeitems,
	ns1__AlarmCCTIUType **items)
{
	ns1__AlarmCCTIUListType *_p = soap_new_ns1__AlarmCCTIUListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AlarmCCTIUListType::__sizeitems = __sizeitems;
		_p->ns1__AlarmCCTIUListType::items = items;
	}
	return _p;
}

inline ns1__AlarmCCTIUListType * soap_new_set_ns1__AlarmCCTIUListType(
	struct soap *soap,
	int __sizeitems,
	ns1__AlarmCCTIUType **items,
	char *__item__1)
{
	ns1__AlarmCCTIUListType *_p = soap_new_ns1__AlarmCCTIUListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AlarmCCTIUListType::__sizeitems = __sizeitems;
		_p->ns1__AlarmCCTIUListType::items = items;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AlarmCCTIUListType(struct soap *soap, ns1__AlarmCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__AlarmCCTIUListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AlarmCCTIUListType(struct soap *soap, const char *URL, ns1__AlarmCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__AlarmCCTIUListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AlarmCCTIUListType(struct soap *soap, const char *URL, ns1__AlarmCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__AlarmCCTIUListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AlarmCCTIUListType * SOAP_FMAC4 soap_get_ns1__AlarmCCTIUListType(struct soap*, ns1__AlarmCCTIUListType *, const char*, const char*);

inline int soap_read_ns1__AlarmCCTIUListType(struct soap *soap, ns1__AlarmCCTIUListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AlarmCCTIUListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AlarmCCTIUListType(struct soap *soap, const char *URL, ns1__AlarmCCTIUListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AlarmCCTIUListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AlarmCCTIUListType(struct soap *soap, ns1__AlarmCCTIUListType *p)
{
	if (soap_read_ns1__AlarmCCTIUListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREAlarmResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREAlarmResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREAlarmResponseType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREAlarmResponseType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmResponseType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREAlarmResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREAlarmResponseType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREAlarmResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREAlarmResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREAlarmResponseType * soap_new_ns1__SrvMTC_USCOREAlarmResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREAlarmResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREAlarmResponseType * soap_new_req_ns1__SrvMTC_USCOREAlarmResponseType(
	struct soap *soap,
	ns1__AlarmCCTIUListType *alarmList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvMTC_USCOREAlarmResponseType *_p = soap_new_ns1__SrvMTC_USCOREAlarmResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREAlarmResponseType::alarmList = alarmList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREAlarmResponseType * soap_new_set_ns1__SrvMTC_USCOREAlarmResponseType(
	struct soap *soap,
	ns1__AlarmCCTIUListType *alarmList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREAlarmResponseType *_p = soap_new_ns1__SrvMTC_USCOREAlarmResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREAlarmResponseType::alarmList = alarmList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREAlarmResponseType(struct soap *soap, ns1__SrvMTC_USCOREAlarmResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_AlarmResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREAlarmResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREAlarmResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREAlarmResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_AlarmResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREAlarmResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREAlarmResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREAlarmResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_AlarmResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREAlarmResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmResponseType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREAlarmResponseType(struct soap*, ns1__SrvMTC_USCOREAlarmResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREAlarmResponseType(struct soap *soap, ns1__SrvMTC_USCOREAlarmResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREAlarmResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREAlarmResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREAlarmResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREAlarmResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREAlarmResponseType(struct soap *soap, ns1__SrvMTC_USCOREAlarmResponseType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREAlarmResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SlaveStateListType_DEFINED
#define SOAP_TYPE_ns1__SlaveStateListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SlaveStateListType(struct soap*, const char*, int, const ns1__SlaveStateListType *, const char*);
SOAP_FMAC3 ns1__SlaveStateListType * SOAP_FMAC4 soap_in_ns1__SlaveStateListType(struct soap*, const char*, ns1__SlaveStateListType *, const char*);
SOAP_FMAC1 ns1__SlaveStateListType * SOAP_FMAC2 soap_instantiate_ns1__SlaveStateListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SlaveStateListType * soap_new_ns1__SlaveStateListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SlaveStateListType(soap, n, NULL, NULL, NULL);
}

inline ns1__SlaveStateListType * soap_new_req_ns1__SlaveStateListType(
	struct soap *soap,
	int __sizeslave,
	ns1__SlaveStateType **slave)
{
	ns1__SlaveStateListType *_p = soap_new_ns1__SlaveStateListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlaveStateListType::__sizeslave = __sizeslave;
		_p->ns1__SlaveStateListType::slave = slave;
	}
	return _p;
}

inline ns1__SlaveStateListType * soap_new_set_ns1__SlaveStateListType(
	struct soap *soap,
	int __sizeslave,
	ns1__SlaveStateType **slave,
	char *__item__1)
{
	ns1__SlaveStateListType *_p = soap_new_ns1__SlaveStateListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlaveStateListType::__sizeslave = __sizeslave;
		_p->ns1__SlaveStateListType::slave = slave;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SlaveStateListType(struct soap *soap, ns1__SlaveStateListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveStateListType", p->soap_type() == SOAP_TYPE_ns1__SlaveStateListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SlaveStateListType(struct soap *soap, const char *URL, ns1__SlaveStateListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveStateListType", p->soap_type() == SOAP_TYPE_ns1__SlaveStateListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SlaveStateListType(struct soap *soap, const char *URL, ns1__SlaveStateListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveStateListType", p->soap_type() == SOAP_TYPE_ns1__SlaveStateListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SlaveStateListType * SOAP_FMAC4 soap_get_ns1__SlaveStateListType(struct soap*, ns1__SlaveStateListType *, const char*, const char*);

inline int soap_read_ns1__SlaveStateListType(struct soap *soap, ns1__SlaveStateListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SlaveStateListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SlaveStateListType(struct soap *soap, const char *URL, ns1__SlaveStateListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SlaveStateListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SlaveStateListType(struct soap *soap, ns1__SlaveStateListType *p)
{
	if (soap_read_ns1__SlaveStateListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SlaveStateType_DEFINED
#define SOAP_TYPE_ns1__SlaveStateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SlaveStateType(struct soap*, const char*, int, const ns1__SlaveStateType *, const char*);
SOAP_FMAC3 ns1__SlaveStateType * SOAP_FMAC4 soap_in_ns1__SlaveStateType(struct soap*, const char*, ns1__SlaveStateType *, const char*);
SOAP_FMAC1 ns1__SlaveStateType * SOAP_FMAC2 soap_instantiate_ns1__SlaveStateType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SlaveStateType * soap_new_ns1__SlaveStateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SlaveStateType(soap, n, NULL, NULL, NULL);
}

inline ns1__SlaveStateType * soap_new_req_ns1__SlaveStateType(
	struct soap *soap,
	int workingMode__1,
	int stationMode__1,
	ns1__DeviceListType *deviceList__1,
	ns1__AlarmListType *alarmList__1)
{
	ns1__SlaveStateType *_p = soap_new_ns1__SlaveStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stateType::workingMode = workingMode__1;
		_p->ns1__stateType::stationMode = stationMode__1;
		_p->ns1__stateType::deviceList = deviceList__1;
		_p->ns1__stateType::alarmList = alarmList__1;
	}
	return _p;
}

inline ns1__SlaveStateType * soap_new_set_ns1__SlaveStateType(
	struct soap *soap,
	unsigned int *id,
	int workingMode__1,
	int stationMode__1,
	ns1__DeviceListType *deviceList__1,
	ns1__AlarmListType *alarmList__1,
	char *__item__2)
{
	ns1__SlaveStateType *_p = soap_new_ns1__SlaveStateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlaveStateType::id = id;
		_p->ns1__stateType::workingMode = workingMode__1;
		_p->ns1__stateType::stationMode = stationMode__1;
		_p->ns1__stateType::deviceList = deviceList__1;
		_p->ns1__stateType::alarmList = alarmList__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SlaveStateType(struct soap *soap, ns1__SlaveStateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveStateType", p->soap_type() == SOAP_TYPE_ns1__SlaveStateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SlaveStateType(struct soap *soap, const char *URL, ns1__SlaveStateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveStateType", p->soap_type() == SOAP_TYPE_ns1__SlaveStateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SlaveStateType(struct soap *soap, const char *URL, ns1__SlaveStateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveStateType", p->soap_type() == SOAP_TYPE_ns1__SlaveStateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SlaveStateType * SOAP_FMAC4 soap_get_ns1__SlaveStateType(struct soap*, ns1__SlaveStateType *, const char*, const char*);

inline int soap_read_ns1__SlaveStateType(struct soap *soap, ns1__SlaveStateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SlaveStateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SlaveStateType(struct soap *soap, const char *URL, ns1__SlaveStateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SlaveStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SlaveStateType(struct soap *soap, ns1__SlaveStateType *p)
{
	if (soap_read_ns1__SlaveStateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AlarmType_DEFINED
#define SOAP_TYPE_ns1__AlarmType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AlarmType(struct soap*, const char*, int, const ns1__AlarmType *, const char*);
SOAP_FMAC3 ns1__AlarmType * SOAP_FMAC4 soap_in_ns1__AlarmType(struct soap*, const char*, ns1__AlarmType *, const char*);
SOAP_FMAC1 ns1__AlarmType * SOAP_FMAC2 soap_instantiate_ns1__AlarmType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AlarmType * soap_new_ns1__AlarmType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AlarmType(soap, n, NULL, NULL, NULL);
}

inline ns1__AlarmType * soap_new_req_ns1__AlarmType(
	struct soap *soap,
	LONG64 version,
	LONG64 alarmCode,
	LONG64 deviceCode,
	unsigned int level,
	LONG64 deactivated,
	time_t date,
	char *description,
	time_t openingDate)
{
	ns1__AlarmType *_p = soap_new_ns1__AlarmType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AlarmType::version = version;
		_p->ns1__AlarmType::alarmCode = alarmCode;
		_p->ns1__AlarmType::deviceCode = deviceCode;
		_p->ns1__AlarmType::level = level;
		_p->ns1__AlarmType::deactivated = deactivated;
		_p->ns1__AlarmType::date = date;
		_p->ns1__AlarmType::description = description;
		_p->ns1__AlarmType::openingDate = openingDate;
	}
	return _p;
}

inline ns1__AlarmType * soap_new_set_ns1__AlarmType(
	struct soap *soap,
	LONG64 version,
	LONG64 alarmCode,
	LONG64 deviceCode,
	unsigned int level,
	LONG64 deactivated,
	time_t date,
	char *description,
	time_t openingDate,
	char *__item__1)
{
	ns1__AlarmType *_p = soap_new_ns1__AlarmType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AlarmType::version = version;
		_p->ns1__AlarmType::alarmCode = alarmCode;
		_p->ns1__AlarmType::deviceCode = deviceCode;
		_p->ns1__AlarmType::level = level;
		_p->ns1__AlarmType::deactivated = deactivated;
		_p->ns1__AlarmType::date = date;
		_p->ns1__AlarmType::description = description;
		_p->ns1__AlarmType::openingDate = openingDate;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AlarmType(struct soap *soap, ns1__AlarmType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmType", p->soap_type() == SOAP_TYPE_ns1__AlarmType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AlarmType(struct soap *soap, const char *URL, ns1__AlarmType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmType", p->soap_type() == SOAP_TYPE_ns1__AlarmType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AlarmType(struct soap *soap, const char *URL, ns1__AlarmType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmType", p->soap_type() == SOAP_TYPE_ns1__AlarmType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AlarmType * SOAP_FMAC4 soap_get_ns1__AlarmType(struct soap*, ns1__AlarmType *, const char*, const char*);

inline int soap_read_ns1__AlarmType(struct soap *soap, ns1__AlarmType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AlarmType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AlarmType(struct soap *soap, const char *URL, ns1__AlarmType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AlarmType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AlarmType(struct soap *soap, ns1__AlarmType *p)
{
	if (soap_read_ns1__AlarmType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AlarmListType_DEFINED
#define SOAP_TYPE_ns1__AlarmListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AlarmListType(struct soap*, const char*, int, const ns1__AlarmListType *, const char*);
SOAP_FMAC3 ns1__AlarmListType * SOAP_FMAC4 soap_in_ns1__AlarmListType(struct soap*, const char*, ns1__AlarmListType *, const char*);
SOAP_FMAC1 ns1__AlarmListType * SOAP_FMAC2 soap_instantiate_ns1__AlarmListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AlarmListType * soap_new_ns1__AlarmListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AlarmListType(soap, n, NULL, NULL, NULL);
}

inline ns1__AlarmListType * soap_new_req_ns1__AlarmListType(
	struct soap *soap,
	int __sizealarm,
	ns1__AlarmType **alarm)
{
	ns1__AlarmListType *_p = soap_new_ns1__AlarmListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AlarmListType::__sizealarm = __sizealarm;
		_p->ns1__AlarmListType::alarm = alarm;
	}
	return _p;
}

inline ns1__AlarmListType * soap_new_set_ns1__AlarmListType(
	struct soap *soap,
	int __sizealarm,
	ns1__AlarmType **alarm,
	unsigned int *length,
	char *__item__1)
{
	ns1__AlarmListType *_p = soap_new_ns1__AlarmListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AlarmListType::__sizealarm = __sizealarm;
		_p->ns1__AlarmListType::alarm = alarm;
		_p->ns1__AlarmListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AlarmListType(struct soap *soap, ns1__AlarmListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmListType", p->soap_type() == SOAP_TYPE_ns1__AlarmListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AlarmListType(struct soap *soap, const char *URL, ns1__AlarmListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmListType", p->soap_type() == SOAP_TYPE_ns1__AlarmListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AlarmListType(struct soap *soap, const char *URL, ns1__AlarmListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AlarmListType", p->soap_type() == SOAP_TYPE_ns1__AlarmListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AlarmListType * SOAP_FMAC4 soap_get_ns1__AlarmListType(struct soap*, ns1__AlarmListType *, const char*, const char*);

inline int soap_read_ns1__AlarmListType(struct soap *soap, ns1__AlarmListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AlarmListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AlarmListType(struct soap *soap, const char *URL, ns1__AlarmListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AlarmListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AlarmListType(struct soap *soap, ns1__AlarmListType *p)
{
	if (soap_read_ns1__AlarmListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MeasureType_DEFINED
#define SOAP_TYPE_ns1__MeasureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MeasureType(struct soap*, const char*, int, const ns1__MeasureType *, const char*);
SOAP_FMAC3 ns1__MeasureType * SOAP_FMAC4 soap_in_ns1__MeasureType(struct soap*, const char*, ns1__MeasureType *, const char*);
SOAP_FMAC1 ns1__MeasureType * SOAP_FMAC2 soap_instantiate_ns1__MeasureType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MeasureType * soap_new_ns1__MeasureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MeasureType(soap, n, NULL, NULL, NULL);
}

inline ns1__MeasureType * soap_new_req_ns1__MeasureType(
	struct soap *soap)
{
	ns1__MeasureType *_p = soap_new_ns1__MeasureType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__MeasureType * soap_new_set_ns1__MeasureType(
	struct soap *soap,
	char *__item,
	char *name,
	char *__item__1)
{
	ns1__MeasureType *_p = soap_new_ns1__MeasureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MeasureType::__item = __item;
		_p->ns1__MeasureType::name = name;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MeasureType(struct soap *soap, ns1__MeasureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MeasureType", p->soap_type() == SOAP_TYPE_ns1__MeasureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MeasureType(struct soap *soap, const char *URL, ns1__MeasureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MeasureType", p->soap_type() == SOAP_TYPE_ns1__MeasureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MeasureType(struct soap *soap, const char *URL, ns1__MeasureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MeasureType", p->soap_type() == SOAP_TYPE_ns1__MeasureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MeasureType * SOAP_FMAC4 soap_get_ns1__MeasureType(struct soap*, ns1__MeasureType *, const char*, const char*);

inline int soap_read_ns1__MeasureType(struct soap *soap, ns1__MeasureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MeasureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MeasureType(struct soap *soap, const char *URL, ns1__MeasureType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MeasureType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MeasureType(struct soap *soap, ns1__MeasureType *p)
{
	if (soap_read_ns1__MeasureType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MeasureListType_DEFINED
#define SOAP_TYPE_ns1__MeasureListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MeasureListType(struct soap*, const char*, int, const ns1__MeasureListType *, const char*);
SOAP_FMAC3 ns1__MeasureListType * SOAP_FMAC4 soap_in_ns1__MeasureListType(struct soap*, const char*, ns1__MeasureListType *, const char*);
SOAP_FMAC1 ns1__MeasureListType * SOAP_FMAC2 soap_instantiate_ns1__MeasureListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MeasureListType * soap_new_ns1__MeasureListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MeasureListType(soap, n, NULL, NULL, NULL);
}

inline ns1__MeasureListType * soap_new_req_ns1__MeasureListType(
	struct soap *soap,
	int __sizevalue,
	ns1__MeasureType **value)
{
	ns1__MeasureListType *_p = soap_new_ns1__MeasureListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MeasureListType::__sizevalue = __sizevalue;
		_p->ns1__MeasureListType::value = value;
	}
	return _p;
}

inline ns1__MeasureListType * soap_new_set_ns1__MeasureListType(
	struct soap *soap,
	int __sizevalue,
	ns1__MeasureType **value,
	int *length,
	char *__item__1)
{
	ns1__MeasureListType *_p = soap_new_ns1__MeasureListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MeasureListType::__sizevalue = __sizevalue;
		_p->ns1__MeasureListType::value = value;
		_p->ns1__MeasureListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MeasureListType(struct soap *soap, ns1__MeasureListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MeasureListType", p->soap_type() == SOAP_TYPE_ns1__MeasureListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MeasureListType(struct soap *soap, const char *URL, ns1__MeasureListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MeasureListType", p->soap_type() == SOAP_TYPE_ns1__MeasureListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MeasureListType(struct soap *soap, const char *URL, ns1__MeasureListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MeasureListType", p->soap_type() == SOAP_TYPE_ns1__MeasureListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MeasureListType * SOAP_FMAC4 soap_get_ns1__MeasureListType(struct soap*, ns1__MeasureListType *, const char*, const char*);

inline int soap_read_ns1__MeasureListType(struct soap *soap, ns1__MeasureListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MeasureListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MeasureListType(struct soap *soap, const char *URL, ns1__MeasureListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MeasureListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MeasureListType(struct soap *soap, ns1__MeasureListType *p)
{
	if (soap_read_ns1__MeasureListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeviceType_DEFINED
#define SOAP_TYPE_ns1__DeviceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceType(struct soap*, const char*, int, const ns1__DeviceType *, const char*);
SOAP_FMAC3 ns1__DeviceType * SOAP_FMAC4 soap_in_ns1__DeviceType(struct soap*, const char*, ns1__DeviceType *, const char*);
SOAP_FMAC1 ns1__DeviceType * SOAP_FMAC2 soap_instantiate_ns1__DeviceType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DeviceType * soap_new_ns1__DeviceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeviceType(soap, n, NULL, NULL, NULL);
}

inline ns1__DeviceType * soap_new_req_ns1__DeviceType(
	struct soap *soap,
	LONG64 deviceCode,
	LONG64 serialNumber,
	LONG64 state)
{
	ns1__DeviceType *_p = soap_new_ns1__DeviceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DeviceType::deviceCode = deviceCode;
		_p->ns1__DeviceType::serialNumber = serialNumber;
		_p->ns1__DeviceType::state = state;
	}
	return _p;
}

inline ns1__DeviceType * soap_new_set_ns1__DeviceType(
	struct soap *soap,
	LONG64 *version,
	LONG64 deviceCode,
	LONG64 serialNumber,
	LONG64 state,
	LONG64 *stationId,
	ns1__MeasureListType *measureList,
	char *__item__1)
{
	ns1__DeviceType *_p = soap_new_ns1__DeviceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DeviceType::version = version;
		_p->ns1__DeviceType::deviceCode = deviceCode;
		_p->ns1__DeviceType::serialNumber = serialNumber;
		_p->ns1__DeviceType::state = state;
		_p->ns1__DeviceType::stationId = stationId;
		_p->ns1__DeviceType::measureList = measureList;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__DeviceType(struct soap *soap, ns1__DeviceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DeviceType", p->soap_type() == SOAP_TYPE_ns1__DeviceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeviceType(struct soap *soap, const char *URL, ns1__DeviceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DeviceType", p->soap_type() == SOAP_TYPE_ns1__DeviceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeviceType(struct soap *soap, const char *URL, ns1__DeviceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DeviceType", p->soap_type() == SOAP_TYPE_ns1__DeviceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DeviceType * SOAP_FMAC4 soap_get_ns1__DeviceType(struct soap*, ns1__DeviceType *, const char*, const char*);

inline int soap_read_ns1__DeviceType(struct soap *soap, ns1__DeviceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DeviceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeviceType(struct soap *soap, const char *URL, ns1__DeviceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DeviceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeviceType(struct soap *soap, ns1__DeviceType *p)
{
	if (soap_read_ns1__DeviceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__DeviceListType_DEFINED
#define SOAP_TYPE_ns1__DeviceListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__DeviceListType(struct soap*, const char*, int, const ns1__DeviceListType *, const char*);
SOAP_FMAC3 ns1__DeviceListType * SOAP_FMAC4 soap_in_ns1__DeviceListType(struct soap*, const char*, ns1__DeviceListType *, const char*);
SOAP_FMAC1 ns1__DeviceListType * SOAP_FMAC2 soap_instantiate_ns1__DeviceListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__DeviceListType * soap_new_ns1__DeviceListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__DeviceListType(soap, n, NULL, NULL, NULL);
}

inline ns1__DeviceListType * soap_new_req_ns1__DeviceListType(
	struct soap *soap,
	int __sizedevice,
	ns1__DeviceType **device)
{
	ns1__DeviceListType *_p = soap_new_ns1__DeviceListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DeviceListType::__sizedevice = __sizedevice;
		_p->ns1__DeviceListType::device = device;
	}
	return _p;
}

inline ns1__DeviceListType * soap_new_set_ns1__DeviceListType(
	struct soap *soap,
	int __sizedevice,
	ns1__DeviceType **device,
	int *length,
	char *__item__1)
{
	ns1__DeviceListType *_p = soap_new_ns1__DeviceListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__DeviceListType::__sizedevice = __sizedevice;
		_p->ns1__DeviceListType::device = device;
		_p->ns1__DeviceListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__DeviceListType(struct soap *soap, ns1__DeviceListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DeviceListType", p->soap_type() == SOAP_TYPE_ns1__DeviceListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__DeviceListType(struct soap *soap, const char *URL, ns1__DeviceListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DeviceListType", p->soap_type() == SOAP_TYPE_ns1__DeviceListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__DeviceListType(struct soap *soap, const char *URL, ns1__DeviceListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DeviceListType", p->soap_type() == SOAP_TYPE_ns1__DeviceListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__DeviceListType * SOAP_FMAC4 soap_get_ns1__DeviceListType(struct soap*, ns1__DeviceListType *, const char*, const char*);

inline int soap_read_ns1__DeviceListType(struct soap *soap, ns1__DeviceListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__DeviceListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__DeviceListType(struct soap *soap, const char *URL, ns1__DeviceListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__DeviceListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__DeviceListType(struct soap *soap, ns1__DeviceListType *p)
{
	if (soap_read_ns1__DeviceListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__stateType_DEFINED
#define SOAP_TYPE_ns1__stateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__stateType(struct soap*, const char*, int, const ns1__stateType *, const char*);
SOAP_FMAC3 ns1__stateType * SOAP_FMAC4 soap_in_ns1__stateType(struct soap*, const char*, ns1__stateType *, const char*);
SOAP_FMAC1 ns1__stateType * SOAP_FMAC2 soap_instantiate_ns1__stateType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__stateType * soap_new_ns1__stateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__stateType(soap, n, NULL, NULL, NULL);
}

inline ns1__stateType * soap_new_req_ns1__stateType(
	struct soap *soap,
	int workingMode,
	int stationMode,
	ns1__DeviceListType *deviceList,
	ns1__AlarmListType *alarmList)
{
	ns1__stateType *_p = soap_new_ns1__stateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stateType::workingMode = workingMode;
		_p->ns1__stateType::stationMode = stationMode;
		_p->ns1__stateType::deviceList = deviceList;
		_p->ns1__stateType::alarmList = alarmList;
	}
	return _p;
}

inline ns1__stateType * soap_new_set_ns1__stateType(
	struct soap *soap,
	int workingMode,
	int stationMode,
	ns1__DeviceListType *deviceList,
	ns1__AlarmListType *alarmList,
	char *__item__1)
{
	ns1__stateType *_p = soap_new_ns1__stateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stateType::workingMode = workingMode;
		_p->ns1__stateType::stationMode = stationMode;
		_p->ns1__stateType::deviceList = deviceList;
		_p->ns1__stateType::alarmList = alarmList;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__stateType(struct soap *soap, ns1__stateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stateType", p->soap_type() == SOAP_TYPE_ns1__stateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__stateType(struct soap *soap, const char *URL, ns1__stateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stateType", p->soap_type() == SOAP_TYPE_ns1__stateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__stateType(struct soap *soap, const char *URL, ns1__stateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stateType", p->soap_type() == SOAP_TYPE_ns1__stateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__stateType * SOAP_FMAC4 soap_get_ns1__stateType(struct soap*, ns1__stateType *, const char*, const char*);

inline int soap_read_ns1__stateType(struct soap *soap, ns1__stateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__stateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__stateType(struct soap *soap, const char *URL, ns1__stateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__stateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__stateType(struct soap *soap, ns1__stateType *p)
{
	if (soap_read_ns1__stateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvStateResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvStateResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvStateResponseType(struct soap*, const char*, int, const ns1__SrvStateResponseType *, const char*);
SOAP_FMAC3 ns1__SrvStateResponseType * SOAP_FMAC4 soap_in_ns1__SrvStateResponseType(struct soap*, const char*, ns1__SrvStateResponseType *, const char*);
SOAP_FMAC1 ns1__SrvStateResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvStateResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvStateResponseType * soap_new_ns1__SrvStateResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvStateResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvStateResponseType * soap_new_req_ns1__SrvStateResponseType(
	struct soap *soap,
	ns1__stateType *state,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvStateResponseType *_p = soap_new_ns1__SrvStateResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvStateResponseType::state = state;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvStateResponseType * soap_new_set_ns1__SrvStateResponseType(
	struct soap *soap,
	ns1__stateType *state,
	ns1__SlaveStateListType *slavesState,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvStateResponseType *_p = soap_new_ns1__SrvStateResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvStateResponseType::state = state;
		_p->ns1__SrvStateResponseType::slavesState = slavesState;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvStateResponseType(struct soap *soap, ns1__SrvStateResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvStateResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvStateResponseType(struct soap *soap, const char *URL, ns1__SrvStateResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvStateResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvStateResponseType(struct soap *soap, const char *URL, ns1__SrvStateResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvStateResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvStateResponseType * SOAP_FMAC4 soap_get_ns1__SrvStateResponseType(struct soap*, ns1__SrvStateResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvStateResponseType(struct soap *soap, ns1__SrvStateResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvStateResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvStateResponseType(struct soap *soap, const char *URL, ns1__SrvStateResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvStateResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvStateResponseType(struct soap *soap, ns1__SrvStateResponseType *p)
{
	if (soap_read_ns1__SrvStateResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InfoFERecordMTCType_DEFINED
#define SOAP_TYPE_ns1__InfoFERecordMTCType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InfoFERecordMTCType(struct soap*, const char*, int, const ns1__InfoFERecordMTCType *, const char*);
SOAP_FMAC3 ns1__InfoFERecordMTCType * SOAP_FMAC4 soap_in_ns1__InfoFERecordMTCType(struct soap*, const char*, ns1__InfoFERecordMTCType *, const char*);
SOAP_FMAC1 ns1__InfoFERecordMTCType * SOAP_FMAC2 soap_instantiate_ns1__InfoFERecordMTCType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InfoFERecordMTCType * soap_new_ns1__InfoFERecordMTCType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InfoFERecordMTCType(soap, n, NULL, NULL, NULL);
}

inline ns1__InfoFERecordMTCType * soap_new_req_ns1__InfoFERecordMTCType(
	struct soap *soap,
	ns1__LocationType *location)
{
	ns1__InfoFERecordMTCType *_p = soap_new_ns1__InfoFERecordMTCType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InfoFERecordMTCType::location = location;
	}
	return _p;
}

inline ns1__InfoFERecordMTCType * soap_new_set_ns1__InfoFERecordMTCType(
	struct soap *soap,
	ns1__LocationType *location,
	char *__item__1)
{
	ns1__InfoFERecordMTCType *_p = soap_new_ns1__InfoFERecordMTCType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InfoFERecordMTCType::location = location;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__InfoFERecordMTCType(struct soap *soap, ns1__InfoFERecordMTCType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InfoFERecordMTCType", p->soap_type() == SOAP_TYPE_ns1__InfoFERecordMTCType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InfoFERecordMTCType(struct soap *soap, const char *URL, ns1__InfoFERecordMTCType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InfoFERecordMTCType", p->soap_type() == SOAP_TYPE_ns1__InfoFERecordMTCType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InfoFERecordMTCType(struct soap *soap, const char *URL, ns1__InfoFERecordMTCType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InfoFERecordMTCType", p->soap_type() == SOAP_TYPE_ns1__InfoFERecordMTCType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InfoFERecordMTCType * SOAP_FMAC4 soap_get_ns1__InfoFERecordMTCType(struct soap*, ns1__InfoFERecordMTCType *, const char*, const char*);

inline int soap_read_ns1__InfoFERecordMTCType(struct soap *soap, ns1__InfoFERecordMTCType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__InfoFERecordMTCType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InfoFERecordMTCType(struct soap *soap, const char *URL, ns1__InfoFERecordMTCType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__InfoFERecordMTCType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InfoFERecordMTCType(struct soap *soap, ns1__InfoFERecordMTCType *p)
{
	if (soap_read_ns1__InfoFERecordMTCType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionResponseType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCORETransactionResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCORETransactionResponseType * soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCORETransactionResponseType * soap_new_req_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(
	struct soap *soap,
	ns1__InfoFERecordMTCType *base,
	ns1__TransactionMTCRegTypeList *transacList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionResponseType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionResponseType::transacList = transacList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCORETransactionResponseType * soap_new_set_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(
	struct soap *soap,
	ns1__InfoFERecordMTCType *base,
	ns1__TransactionMTCRegTypeList *transacList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionResponseType::base = base;
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionResponseType::transacList = transacList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionResponseType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SignedTransactionMTCRegType_DEFINED
#define SOAP_TYPE_ns1__SignedTransactionMTCRegType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SignedTransactionMTCRegType(struct soap*, const char*, int, const ns1__SignedTransactionMTCRegType *, const char*);
SOAP_FMAC3 ns1__SignedTransactionMTCRegType * SOAP_FMAC4 soap_in_ns1__SignedTransactionMTCRegType(struct soap*, const char*, ns1__SignedTransactionMTCRegType *, const char*);
SOAP_FMAC1 ns1__SignedTransactionMTCRegType * SOAP_FMAC2 soap_instantiate_ns1__SignedTransactionMTCRegType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SignedTransactionMTCRegType * soap_new_ns1__SignedTransactionMTCRegType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SignedTransactionMTCRegType(soap, n, NULL, NULL, NULL);
}

inline ns1__SignedTransactionMTCRegType * soap_new_req_ns1__SignedTransactionMTCRegType(
	struct soap *soap,
	const xsd__base64Binary& signature)
{
	ns1__SignedTransactionMTCRegType *_p = soap_new_ns1__SignedTransactionMTCRegType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SignedTransactionMTCRegType::signature = signature;
	}
	return _p;
}

inline ns1__SignedTransactionMTCRegType * soap_new_set_ns1__SignedTransactionMTCRegType(
	struct soap *soap,
	xsd__base64Binary *register_,
	ns1__MTC_USCOREUnsignedTransactionRegType *registerType,
	const xsd__base64Binary& signature,
	char *__item__1)
{
	ns1__SignedTransactionMTCRegType *_p = soap_new_ns1__SignedTransactionMTCRegType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SignedTransactionMTCRegType::register_ = register_;
		_p->ns1__SignedTransactionMTCRegType::registerType = registerType;
		_p->ns1__SignedTransactionMTCRegType::signature = signature;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SignedTransactionMTCRegType(struct soap *soap, ns1__SignedTransactionMTCRegType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignedTransactionMTCRegType", p->soap_type() == SOAP_TYPE_ns1__SignedTransactionMTCRegType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SignedTransactionMTCRegType(struct soap *soap, const char *URL, ns1__SignedTransactionMTCRegType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignedTransactionMTCRegType", p->soap_type() == SOAP_TYPE_ns1__SignedTransactionMTCRegType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SignedTransactionMTCRegType(struct soap *soap, const char *URL, ns1__SignedTransactionMTCRegType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignedTransactionMTCRegType", p->soap_type() == SOAP_TYPE_ns1__SignedTransactionMTCRegType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SignedTransactionMTCRegType * SOAP_FMAC4 soap_get_ns1__SignedTransactionMTCRegType(struct soap*, ns1__SignedTransactionMTCRegType *, const char*, const char*);

inline int soap_read_ns1__SignedTransactionMTCRegType(struct soap *soap, ns1__SignedTransactionMTCRegType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SignedTransactionMTCRegType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SignedTransactionMTCRegType(struct soap *soap, const char *URL, ns1__SignedTransactionMTCRegType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SignedTransactionMTCRegType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SignedTransactionMTCRegType(struct soap *soap, ns1__SignedTransactionMTCRegType *p)
{
	if (soap_read_ns1__SignedTransactionMTCRegType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREActionExecutedContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREActionExecutedContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREActionExecutedContentType(struct soap*, const char*, int, const ns1__MTC_USCOREActionExecutedContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREActionExecutedContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREActionExecutedContentType(struct soap*, const char*, ns1__MTC_USCOREActionExecutedContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREActionExecutedContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREActionExecutedContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREActionExecutedContentType * soap_new_ns1__MTC_USCOREActionExecutedContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREActionExecutedContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREActionExecutedContentType * soap_new_req_ns1__MTC_USCOREActionExecutedContentType(
	struct soap *soap,
	ns1__ActionIdType *actionId,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREActionExecutedContentType *_p = soap_new_ns1__MTC_USCOREActionExecutedContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREActionExecutedContentType::actionId = actionId;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREActionExecutedContentType * soap_new_set_ns1__MTC_USCOREActionExecutedContentType(
	struct soap *soap,
	ns1__ActionIdType *actionId,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREActionExecutedContentType *_p = soap_new_ns1__MTC_USCOREActionExecutedContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREActionExecutedContentType::actionId = actionId;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREActionExecutedContentType(struct soap *soap, ns1__MTC_USCOREActionExecutedContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ActionExecutedContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREActionExecutedContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREActionExecutedContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREActionExecutedContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ActionExecutedContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREActionExecutedContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREActionExecutedContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREActionExecutedContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ActionExecutedContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREActionExecutedContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREActionExecutedContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREActionExecutedContentType(struct soap*, ns1__MTC_USCOREActionExecutedContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREActionExecutedContentType(struct soap *soap, ns1__MTC_USCOREActionExecutedContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREActionExecutedContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREActionExecutedContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREActionExecutedContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREActionExecutedContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREActionExecutedContentType(struct soap *soap, ns1__MTC_USCOREActionExecutedContentType *p)
{
	if (soap_read_ns1__MTC_USCOREActionExecutedContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORERestitutionTitleContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORERestitutionTitleContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORERestitutionTitleContentType(struct soap*, const char*, int, const ns1__MTC_USCORERestitutionTitleContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORERestitutionTitleContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCORERestitutionTitleContentType(struct soap*, const char*, ns1__MTC_USCORERestitutionTitleContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORERestitutionTitleContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORERestitutionTitleContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORERestitutionTitleContentType * soap_new_ns1__MTC_USCORERestitutionTitleContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORERestitutionTitleContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORERestitutionTitleContentType * soap_new_req_ns1__MTC_USCORERestitutionTitleContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__ProductIdType *titleId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETitleInfoType *titleInfo,
	int __sizequantity,
	ns1__MTC_USCOREQuantityType **quantity,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCORERestitutionTitleContentType *_p = soap_new_ns1__MTC_USCORERestitutionTitleContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORERestitutionTitleContentType::susId = susId;
		_p->ns1__MTC_USCORERestitutionTitleContentType::appId = appId;
		_p->ns1__MTC_USCORERestitutionTitleContentType::titleId = titleId;
		_p->ns1__MTC_USCORERestitutionTitleContentType::appInfo = appInfo;
		_p->ns1__MTC_USCORERestitutionTitleContentType::titleInfo = titleInfo;
		_p->ns1__MTC_USCORERestitutionTitleContentType::__sizequantity = __sizequantity;
		_p->ns1__MTC_USCORERestitutionTitleContentType::quantity = quantity;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCORERestitutionTitleContentType * soap_new_set_ns1__MTC_USCORERestitutionTitleContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__ProductIdType *titleId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETitleInfoType *titleInfo,
	int __sizequantity,
	ns1__MTC_USCOREQuantityType **quantity,
	ns1__ActionIdType *action,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCORERestitutionTitleContentType *_p = soap_new_ns1__MTC_USCORERestitutionTitleContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORERestitutionTitleContentType::susId = susId;
		_p->ns1__MTC_USCORERestitutionTitleContentType::appId = appId;
		_p->ns1__MTC_USCORERestitutionTitleContentType::titleId = titleId;
		_p->ns1__MTC_USCORERestitutionTitleContentType::appInfo = appInfo;
		_p->ns1__MTC_USCORERestitutionTitleContentType::titleInfo = titleInfo;
		_p->ns1__MTC_USCORERestitutionTitleContentType::__sizequantity = __sizequantity;
		_p->ns1__MTC_USCORERestitutionTitleContentType::quantity = quantity;
		_p->ns1__MTC_USCORERestitutionTitleContentType::action = action;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORERestitutionTitleContentType(struct soap *soap, ns1__MTC_USCORERestitutionTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RestitutionTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERestitutionTitleContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORERestitutionTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCORERestitutionTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RestitutionTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERestitutionTitleContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORERestitutionTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCORERestitutionTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RestitutionTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERestitutionTitleContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORERestitutionTitleContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCORERestitutionTitleContentType(struct soap*, ns1__MTC_USCORERestitutionTitleContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORERestitutionTitleContentType(struct soap *soap, ns1__MTC_USCORERestitutionTitleContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORERestitutionTitleContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORERestitutionTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCORERestitutionTitleContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORERestitutionTitleContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORERestitutionTitleContentType(struct soap *soap, ns1__MTC_USCORERestitutionTitleContentType *p)
{
	if (soap_read_ns1__MTC_USCORERestitutionTitleContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREEditTitleContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREEditTitleContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREEditTitleContentType(struct soap*, const char*, int, const ns1__MTC_USCOREEditTitleContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREEditTitleContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREEditTitleContentType(struct soap*, const char*, ns1__MTC_USCOREEditTitleContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREEditTitleContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREEditTitleContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREEditTitleContentType * soap_new_ns1__MTC_USCOREEditTitleContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREEditTitleContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREEditTitleContentType * soap_new_req_ns1__MTC_USCOREEditTitleContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__ProductIdType *titleId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETitleInfoType *titleInfo,
	unsigned short status,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREEditTitleContentType *_p = soap_new_ns1__MTC_USCOREEditTitleContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREEditTitleContentType::susId = susId;
		_p->ns1__MTC_USCOREEditTitleContentType::appId = appId;
		_p->ns1__MTC_USCOREEditTitleContentType::titleId = titleId;
		_p->ns1__MTC_USCOREEditTitleContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREEditTitleContentType::titleInfo = titleInfo;
		_p->ns1__MTC_USCOREEditTitleContentType::status = status;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREEditTitleContentType * soap_new_set_ns1__MTC_USCOREEditTitleContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__ProductIdType *titleId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETitleInfoType *titleInfo,
	unsigned short status,
	ns1__ActionIdType *action,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREEditTitleContentType *_p = soap_new_ns1__MTC_USCOREEditTitleContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREEditTitleContentType::susId = susId;
		_p->ns1__MTC_USCOREEditTitleContentType::appId = appId;
		_p->ns1__MTC_USCOREEditTitleContentType::titleId = titleId;
		_p->ns1__MTC_USCOREEditTitleContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREEditTitleContentType::titleInfo = titleInfo;
		_p->ns1__MTC_USCOREEditTitleContentType::status = status;
		_p->ns1__MTC_USCOREEditTitleContentType::action = action;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREEditTitleContentType(struct soap *soap, ns1__MTC_USCOREEditTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EditTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEditTitleContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREEditTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREEditTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EditTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEditTitleContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREEditTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREEditTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EditTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEditTitleContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREEditTitleContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREEditTitleContentType(struct soap*, ns1__MTC_USCOREEditTitleContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREEditTitleContentType(struct soap *soap, ns1__MTC_USCOREEditTitleContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREEditTitleContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREEditTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREEditTitleContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREEditTitleContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREEditTitleContentType(struct soap *soap, ns1__MTC_USCOREEditTitleContentType *p)
{
	if (soap_read_ns1__MTC_USCOREEditTitleContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORETMobilitatCurveType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORETMobilitatCurveType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORETMobilitatCurveType(struct soap*, const char*, int, const ns1__MTC_USCORETMobilitatCurveType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORETMobilitatCurveType * SOAP_FMAC4 soap_in_ns1__MTC_USCORETMobilitatCurveType(struct soap*, const char*, ns1__MTC_USCORETMobilitatCurveType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORETMobilitatCurveType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORETMobilitatCurveType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORETMobilitatCurveType * soap_new_ns1__MTC_USCORETMobilitatCurveType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORETMobilitatCurveType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORETMobilitatCurveType * soap_new_req_ns1__MTC_USCORETMobilitatCurveType(
	struct soap *soap,
	char *date,
	int __sizecount,
	unsigned int *count)
{
	ns1__MTC_USCORETMobilitatCurveType *_p = soap_new_ns1__MTC_USCORETMobilitatCurveType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORETMobilitatCurveType::date = date;
		_p->ns1__MTC_USCORETMobilitatCurveType::__sizecount = __sizecount;
		_p->ns1__MTC_USCORETMobilitatCurveType::count = count;
	}
	return _p;
}

inline ns1__MTC_USCORETMobilitatCurveType * soap_new_set_ns1__MTC_USCORETMobilitatCurveType(
	struct soap *soap,
	char *date,
	int __sizecount,
	unsigned int *count,
	char *__item__1)
{
	ns1__MTC_USCORETMobilitatCurveType *_p = soap_new_ns1__MTC_USCORETMobilitatCurveType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORETMobilitatCurveType::date = date;
		_p->ns1__MTC_USCORETMobilitatCurveType::__sizecount = __sizecount;
		_p->ns1__MTC_USCORETMobilitatCurveType::count = count;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORETMobilitatCurveType(struct soap *soap, ns1__MTC_USCORETMobilitatCurveType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TMobilitatCurveType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETMobilitatCurveType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORETMobilitatCurveType(struct soap *soap, const char *URL, ns1__MTC_USCORETMobilitatCurveType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TMobilitatCurveType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETMobilitatCurveType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORETMobilitatCurveType(struct soap *soap, const char *URL, ns1__MTC_USCORETMobilitatCurveType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TMobilitatCurveType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETMobilitatCurveType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORETMobilitatCurveType * SOAP_FMAC4 soap_get_ns1__MTC_USCORETMobilitatCurveType(struct soap*, ns1__MTC_USCORETMobilitatCurveType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORETMobilitatCurveType(struct soap *soap, ns1__MTC_USCORETMobilitatCurveType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORETMobilitatCurveType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORETMobilitatCurveType(struct soap *soap, const char *URL, ns1__MTC_USCORETMobilitatCurveType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORETMobilitatCurveType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORETMobilitatCurveType(struct soap *soap, ns1__MTC_USCORETMobilitatCurveType *p)
{
	if (soap_read_ns1__MTC_USCORETMobilitatCurveType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREValidationTitleContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREValidationTitleContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREValidationTitleContentType(struct soap*, const char*, int, const ns1__MTC_USCOREValidationTitleContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREValidationTitleContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREValidationTitleContentType(struct soap*, const char*, ns1__MTC_USCOREValidationTitleContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREValidationTitleContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREValidationTitleContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREValidationTitleContentType * soap_new_ns1__MTC_USCOREValidationTitleContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREValidationTitleContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREValidationTitleContentType * soap_new_req_ns1__MTC_USCOREValidationTitleContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__ProductIdType *titleId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETitleInfoType *titleInfo,
	unsigned int valType,
	unsigned int valResult,
	unsigned int fareId,
	int __sizequantity,
	ns1__MTC_USCOREQuantityType **quantity,
	unsigned int passInStageInProcess,
	unsigned int passOutStageInProcess,
	unsigned int passInPrevStage,
	unsigned int passOutPrevStage,
	ns1__MTC_USCORETMobilitatCurveType *curve,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREValidationTitleContentType *_p = soap_new_ns1__MTC_USCOREValidationTitleContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREValidationTitleContentType::susId = susId;
		_p->ns1__MTC_USCOREValidationTitleContentType::appId = appId;
		_p->ns1__MTC_USCOREValidationTitleContentType::titleId = titleId;
		_p->ns1__MTC_USCOREValidationTitleContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREValidationTitleContentType::titleInfo = titleInfo;
		_p->ns1__MTC_USCOREValidationTitleContentType::valType = valType;
		_p->ns1__MTC_USCOREValidationTitleContentType::valResult = valResult;
		_p->ns1__MTC_USCOREValidationTitleContentType::fareId = fareId;
		_p->ns1__MTC_USCOREValidationTitleContentType::__sizequantity = __sizequantity;
		_p->ns1__MTC_USCOREValidationTitleContentType::quantity = quantity;
		_p->ns1__MTC_USCOREValidationTitleContentType::passInStageInProcess = passInStageInProcess;
		_p->ns1__MTC_USCOREValidationTitleContentType::passOutStageInProcess = passOutStageInProcess;
		_p->ns1__MTC_USCOREValidationTitleContentType::passInPrevStage = passInPrevStage;
		_p->ns1__MTC_USCOREValidationTitleContentType::passOutPrevStage = passOutPrevStage;
		_p->ns1__MTC_USCOREValidationTitleContentType::curve = curve;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREValidationTitleContentType * soap_new_set_ns1__MTC_USCOREValidationTitleContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__ProductIdType *titleId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETitleInfoType *titleInfo,
	unsigned int valType,
	unsigned int valResult,
	unsigned int fareId,
	int __sizequantity,
	ns1__MTC_USCOREQuantityType **quantity,
	unsigned int passInStageInProcess,
	unsigned int passOutStageInProcess,
	unsigned int passInPrevStage,
	unsigned int passOutPrevStage,
	ns1__MTC_USCORETMobilitatCurveType *curve,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREValidationTitleContentType *_p = soap_new_ns1__MTC_USCOREValidationTitleContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREValidationTitleContentType::susId = susId;
		_p->ns1__MTC_USCOREValidationTitleContentType::appId = appId;
		_p->ns1__MTC_USCOREValidationTitleContentType::titleId = titleId;
		_p->ns1__MTC_USCOREValidationTitleContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREValidationTitleContentType::titleInfo = titleInfo;
		_p->ns1__MTC_USCOREValidationTitleContentType::valType = valType;
		_p->ns1__MTC_USCOREValidationTitleContentType::valResult = valResult;
		_p->ns1__MTC_USCOREValidationTitleContentType::fareId = fareId;
		_p->ns1__MTC_USCOREValidationTitleContentType::__sizequantity = __sizequantity;
		_p->ns1__MTC_USCOREValidationTitleContentType::quantity = quantity;
		_p->ns1__MTC_USCOREValidationTitleContentType::passInStageInProcess = passInStageInProcess;
		_p->ns1__MTC_USCOREValidationTitleContentType::passOutStageInProcess = passOutStageInProcess;
		_p->ns1__MTC_USCOREValidationTitleContentType::passInPrevStage = passInPrevStage;
		_p->ns1__MTC_USCOREValidationTitleContentType::passOutPrevStage = passOutPrevStage;
		_p->ns1__MTC_USCOREValidationTitleContentType::curve = curve;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREValidationTitleContentType(struct soap *soap, ns1__MTC_USCOREValidationTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ValidationTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREValidationTitleContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREValidationTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREValidationTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ValidationTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREValidationTitleContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREValidationTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREValidationTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ValidationTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREValidationTitleContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREValidationTitleContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREValidationTitleContentType(struct soap*, ns1__MTC_USCOREValidationTitleContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREValidationTitleContentType(struct soap *soap, ns1__MTC_USCOREValidationTitleContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREValidationTitleContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREValidationTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREValidationTitleContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREValidationTitleContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREValidationTitleContentType(struct soap *soap, ns1__MTC_USCOREValidationTitleContentType *p)
{
	if (soap_read_ns1__MTC_USCOREValidationTitleContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORERechargeTitleContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORERechargeTitleContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORERechargeTitleContentType(struct soap*, const char*, int, const ns1__MTC_USCORERechargeTitleContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORERechargeTitleContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCORERechargeTitleContentType(struct soap*, const char*, ns1__MTC_USCORERechargeTitleContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORERechargeTitleContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORERechargeTitleContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORERechargeTitleContentType * soap_new_ns1__MTC_USCORERechargeTitleContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORERechargeTitleContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORERechargeTitleContentType * soap_new_req_ns1__MTC_USCORERechargeTitleContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__ProductIdType *titleId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETitleInfoType *titleInfo,
	int __sizequantity,
	ns1__MTC_USCOREQuantityType **quantity,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCORERechargeTitleContentType *_p = soap_new_ns1__MTC_USCORERechargeTitleContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORERechargeTitleContentType::susId = susId;
		_p->ns1__MTC_USCORERechargeTitleContentType::appId = appId;
		_p->ns1__MTC_USCORERechargeTitleContentType::titleId = titleId;
		_p->ns1__MTC_USCORERechargeTitleContentType::appInfo = appInfo;
		_p->ns1__MTC_USCORERechargeTitleContentType::titleInfo = titleInfo;
		_p->ns1__MTC_USCORERechargeTitleContentType::__sizequantity = __sizequantity;
		_p->ns1__MTC_USCORERechargeTitleContentType::quantity = quantity;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCORERechargeTitleContentType * soap_new_set_ns1__MTC_USCORERechargeTitleContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__ProductIdType *titleId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETitleInfoType *titleInfo,
	int __sizequantity,
	ns1__MTC_USCOREQuantityType **quantity,
	ns1__ActionIdType *action,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCORERechargeTitleContentType *_p = soap_new_ns1__MTC_USCORERechargeTitleContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORERechargeTitleContentType::susId = susId;
		_p->ns1__MTC_USCORERechargeTitleContentType::appId = appId;
		_p->ns1__MTC_USCORERechargeTitleContentType::titleId = titleId;
		_p->ns1__MTC_USCORERechargeTitleContentType::appInfo = appInfo;
		_p->ns1__MTC_USCORERechargeTitleContentType::titleInfo = titleInfo;
		_p->ns1__MTC_USCORERechargeTitleContentType::__sizequantity = __sizequantity;
		_p->ns1__MTC_USCORERechargeTitleContentType::quantity = quantity;
		_p->ns1__MTC_USCORERechargeTitleContentType::action = action;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORERechargeTitleContentType(struct soap *soap, ns1__MTC_USCORERechargeTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RechargeTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERechargeTitleContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORERechargeTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCORERechargeTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RechargeTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERechargeTitleContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORERechargeTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCORERechargeTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RechargeTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERechargeTitleContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORERechargeTitleContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCORERechargeTitleContentType(struct soap*, ns1__MTC_USCORERechargeTitleContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORERechargeTitleContentType(struct soap *soap, ns1__MTC_USCORERechargeTitleContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORERechargeTitleContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORERechargeTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCORERechargeTitleContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORERechargeTitleContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORERechargeTitleContentType(struct soap *soap, ns1__MTC_USCORERechargeTitleContentType *p)
{
	if (soap_read_ns1__MTC_USCORERechargeTitleContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREQuantityType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREQuantityType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREQuantityType(struct soap*, const char*, int, const ns1__MTC_USCOREQuantityType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREQuantityType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREQuantityType(struct soap*, const char*, ns1__MTC_USCOREQuantityType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREQuantityType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREQuantityType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREQuantityType * soap_new_ns1__MTC_USCOREQuantityType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREQuantityType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREQuantityType * soap_new_req_ns1__MTC_USCOREQuantityType(
	struct soap *soap,
	char *units,
	unsigned int quantity)
{
	ns1__MTC_USCOREQuantityType *_p = soap_new_ns1__MTC_USCOREQuantityType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREQuantityType::units = units;
		_p->ns1__MTC_USCOREQuantityType::quantity = quantity;
	}
	return _p;
}

inline ns1__MTC_USCOREQuantityType * soap_new_set_ns1__MTC_USCOREQuantityType(
	struct soap *soap,
	char *units,
	unsigned int quantity,
	char *__item__1)
{
	ns1__MTC_USCOREQuantityType *_p = soap_new_ns1__MTC_USCOREQuantityType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREQuantityType::units = units;
		_p->ns1__MTC_USCOREQuantityType::quantity = quantity;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREQuantityType(struct soap *soap, ns1__MTC_USCOREQuantityType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_QuantityType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREQuantityType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREQuantityType(struct soap *soap, const char *URL, ns1__MTC_USCOREQuantityType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_QuantityType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREQuantityType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREQuantityType(struct soap *soap, const char *URL, ns1__MTC_USCOREQuantityType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_QuantityType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREQuantityType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREQuantityType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREQuantityType(struct soap*, ns1__MTC_USCOREQuantityType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREQuantityType(struct soap *soap, ns1__MTC_USCOREQuantityType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREQuantityType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREQuantityType(struct soap *soap, const char *URL, ns1__MTC_USCOREQuantityType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREQuantityType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREQuantityType(struct soap *soap, ns1__MTC_USCOREQuantityType *p)
{
	if (soap_read_ns1__MTC_USCOREQuantityType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORETitleLoadContainerInfoType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORETitleLoadContainerInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap*, const char*, int, const ns1__MTC_USCORETitleLoadContainerInfoType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORETitleLoadContainerInfoType * SOAP_FMAC4 soap_in_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap*, const char*, ns1__MTC_USCORETitleLoadContainerInfoType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORETitleLoadContainerInfoType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORETitleLoadContainerInfoType * soap_new_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORETitleLoadContainerInfoType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORETitleLoadContainerInfoType * soap_new_req_ns1__MTC_USCORETitleLoadContainerInfoType(
	struct soap *soap,
	bool isActived,
	char *loadDate,
	ns1__MTC_USCOREQuantityType *totalAmount,
	ns1__MTC_USCORERangeDateType *firstUse,
	ns1__MTC_USCORERangeDateType *validity)
{
	ns1__MTC_USCORETitleLoadContainerInfoType *_p = soap_new_ns1__MTC_USCORETitleLoadContainerInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORETitleLoadContainerInfoType::isActived = isActived;
		_p->ns1__MTC_USCORETitleLoadContainerInfoType::loadDate = loadDate;
		_p->ns1__MTC_USCORETitleLoadContainerInfoType::totalAmount = totalAmount;
		_p->ns1__MTC_USCORETitleLoadContainerInfoType::firstUse = firstUse;
		_p->ns1__MTC_USCORETitleLoadContainerInfoType::validity = validity;
	}
	return _p;
}

inline ns1__MTC_USCORETitleLoadContainerInfoType * soap_new_set_ns1__MTC_USCORETitleLoadContainerInfoType(
	struct soap *soap,
	bool isActived,
	char *loadDate,
	ns1__MTC_USCOREQuantityType *totalAmount,
	ns1__MTC_USCORERangeDateType *firstUse,
	ns1__MTC_USCORERangeDateType *validity,
	char *__item__1)
{
	ns1__MTC_USCORETitleLoadContainerInfoType *_p = soap_new_ns1__MTC_USCORETitleLoadContainerInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORETitleLoadContainerInfoType::isActived = isActived;
		_p->ns1__MTC_USCORETitleLoadContainerInfoType::loadDate = loadDate;
		_p->ns1__MTC_USCORETitleLoadContainerInfoType::totalAmount = totalAmount;
		_p->ns1__MTC_USCORETitleLoadContainerInfoType::firstUse = firstUse;
		_p->ns1__MTC_USCORETitleLoadContainerInfoType::validity = validity;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap *soap, ns1__MTC_USCORETitleLoadContainerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TitleLoadContainerInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETitleLoadContainerInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap *soap, const char *URL, ns1__MTC_USCORETitleLoadContainerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TitleLoadContainerInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETitleLoadContainerInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap *soap, const char *URL, ns1__MTC_USCORETitleLoadContainerInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TitleLoadContainerInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETitleLoadContainerInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORETitleLoadContainerInfoType * SOAP_FMAC4 soap_get_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap *soap, ns1__MTC_USCORETitleLoadContainerInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORETitleLoadContainerInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap *soap, const char *URL, ns1__MTC_USCORETitleLoadContainerInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORETitleLoadContainerInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORETitleLoadContainerInfoType(struct soap *soap, ns1__MTC_USCORETitleLoadContainerInfoType *p)
{
	if (soap_read_ns1__MTC_USCORETitleLoadContainerInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORETitleLoadContainerInfoListType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORETitleLoadContainerInfoListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap*, const char*, int, const ns1__MTC_USCORETitleLoadContainerInfoListType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORETitleLoadContainerInfoListType * SOAP_FMAC4 soap_in_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap*, const char*, ns1__MTC_USCORETitleLoadContainerInfoListType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORETitleLoadContainerInfoListType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORETitleLoadContainerInfoListType * soap_new_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORETitleLoadContainerInfoListType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORETitleLoadContainerInfoListType * soap_new_req_ns1__MTC_USCORETitleLoadContainerInfoListType(
	struct soap *soap,
	int __sizecarga,
	ns1__MTC_USCORETitleLoadContainerInfoType **carga)
{
	ns1__MTC_USCORETitleLoadContainerInfoListType *_p = soap_new_ns1__MTC_USCORETitleLoadContainerInfoListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORETitleLoadContainerInfoListType::__sizecarga = __sizecarga;
		_p->ns1__MTC_USCORETitleLoadContainerInfoListType::carga = carga;
	}
	return _p;
}

inline ns1__MTC_USCORETitleLoadContainerInfoListType * soap_new_set_ns1__MTC_USCORETitleLoadContainerInfoListType(
	struct soap *soap,
	int __sizecarga,
	ns1__MTC_USCORETitleLoadContainerInfoType **carga,
	char *__item__1)
{
	ns1__MTC_USCORETitleLoadContainerInfoListType *_p = soap_new_ns1__MTC_USCORETitleLoadContainerInfoListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORETitleLoadContainerInfoListType::__sizecarga = __sizecarga;
		_p->ns1__MTC_USCORETitleLoadContainerInfoListType::carga = carga;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap *soap, ns1__MTC_USCORETitleLoadContainerInfoListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TitleLoadContainerInfoListType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETitleLoadContainerInfoListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap *soap, const char *URL, ns1__MTC_USCORETitleLoadContainerInfoListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TitleLoadContainerInfoListType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETitleLoadContainerInfoListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap *soap, const char *URL, ns1__MTC_USCORETitleLoadContainerInfoListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TitleLoadContainerInfoListType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETitleLoadContainerInfoListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORETitleLoadContainerInfoListType * SOAP_FMAC4 soap_get_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoListType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap *soap, ns1__MTC_USCORETitleLoadContainerInfoListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORETitleLoadContainerInfoListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap *soap, const char *URL, ns1__MTC_USCORETitleLoadContainerInfoListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORETitleLoadContainerInfoListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORETitleLoadContainerInfoListType(struct soap *soap, ns1__MTC_USCORETitleLoadContainerInfoListType *p)
{
	if (soap_read_ns1__MTC_USCORETitleLoadContainerInfoListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORETitleInfoType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORETitleInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORETitleInfoType(struct soap*, const char*, int, const ns1__MTC_USCORETitleInfoType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORETitleInfoType * SOAP_FMAC4 soap_in_ns1__MTC_USCORETitleInfoType(struct soap*, const char*, ns1__MTC_USCORETitleInfoType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORETitleInfoType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORETitleInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORETitleInfoType * soap_new_ns1__MTC_USCORETitleInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORETitleInfoType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORETitleInfoType * soap_new_req_ns1__MTC_USCORETitleInfoType(
	struct soap *soap,
	unsigned short status,
	ns1__MTC_USCORETitleLoadContainerInfoListType *cargas)
{
	ns1__MTC_USCORETitleInfoType *_p = soap_new_ns1__MTC_USCORETitleInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORETitleInfoType::status = status;
		_p->ns1__MTC_USCORETitleInfoType::cargas = cargas;
	}
	return _p;
}

inline ns1__MTC_USCORETitleInfoType * soap_new_set_ns1__MTC_USCORETitleInfoType(
	struct soap *soap,
	unsigned short status,
	ns1__MTC_USCORETitleLoadContainerInfoListType *cargas,
	char *__item__1)
{
	ns1__MTC_USCORETitleInfoType *_p = soap_new_ns1__MTC_USCORETitleInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORETitleInfoType::status = status;
		_p->ns1__MTC_USCORETitleInfoType::cargas = cargas;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORETitleInfoType(struct soap *soap, ns1__MTC_USCORETitleInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TitleInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETitleInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORETitleInfoType(struct soap *soap, const char *URL, ns1__MTC_USCORETitleInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TitleInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETitleInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORETitleInfoType(struct soap *soap, const char *URL, ns1__MTC_USCORETitleInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TitleInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETitleInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORETitleInfoType * SOAP_FMAC4 soap_get_ns1__MTC_USCORETitleInfoType(struct soap*, ns1__MTC_USCORETitleInfoType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORETitleInfoType(struct soap *soap, ns1__MTC_USCORETitleInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORETitleInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORETitleInfoType(struct soap *soap, const char *URL, ns1__MTC_USCORETitleInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORETitleInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORETitleInfoType(struct soap *soap, ns1__MTC_USCORETitleInfoType *p)
{
	if (soap_read_ns1__MTC_USCORETitleInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ProductIdType_DEFINED
#define SOAP_TYPE_ns1__ProductIdType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ProductIdType(struct soap*, const char*, int, const ns1__ProductIdType *, const char*);
SOAP_FMAC3 ns1__ProductIdType * SOAP_FMAC4 soap_in_ns1__ProductIdType(struct soap*, const char*, ns1__ProductIdType *, const char*);
SOAP_FMAC1 ns1__ProductIdType * SOAP_FMAC2 soap_instantiate_ns1__ProductIdType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ProductIdType * soap_new_ns1__ProductIdType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ProductIdType(soap, n, NULL, NULL, NULL);
}

inline ns1__ProductIdType * soap_new_req_ns1__ProductIdType(
	struct soap *soap,
	unsigned int Owner,
	unsigned int Code)
{
	ns1__ProductIdType *_p = soap_new_ns1__ProductIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ProductIdType::Owner = Owner;
		_p->ns1__ProductIdType::Code = Code;
	}
	return _p;
}

inline ns1__ProductIdType * soap_new_set_ns1__ProductIdType(
	struct soap *soap,
	unsigned int Owner,
	unsigned int Code,
	char *__item__1)
{
	ns1__ProductIdType *_p = soap_new_ns1__ProductIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ProductIdType::Owner = Owner;
		_p->ns1__ProductIdType::Code = Code;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ProductIdType(struct soap *soap, ns1__ProductIdType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProductIdType", p->soap_type() == SOAP_TYPE_ns1__ProductIdType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ProductIdType(struct soap *soap, const char *URL, ns1__ProductIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProductIdType", p->soap_type() == SOAP_TYPE_ns1__ProductIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ProductIdType(struct soap *soap, const char *URL, ns1__ProductIdType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ProductIdType", p->soap_type() == SOAP_TYPE_ns1__ProductIdType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ProductIdType * SOAP_FMAC4 soap_get_ns1__ProductIdType(struct soap*, ns1__ProductIdType *, const char*, const char*);

inline int soap_read_ns1__ProductIdType(struct soap *soap, ns1__ProductIdType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ProductIdType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ProductIdType(struct soap *soap, const char *URL, ns1__ProductIdType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ProductIdType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ProductIdType(struct soap *soap, ns1__ProductIdType *p)
{
	if (soap_read_ns1__ProductIdType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREInstanceTitleContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREInstanceTitleContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREInstanceTitleContentType(struct soap*, const char*, int, const ns1__MTC_USCOREInstanceTitleContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREInstanceTitleContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREInstanceTitleContentType(struct soap*, const char*, ns1__MTC_USCOREInstanceTitleContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREInstanceTitleContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREInstanceTitleContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREInstanceTitleContentType * soap_new_ns1__MTC_USCOREInstanceTitleContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREInstanceTitleContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREInstanceTitleContentType * soap_new_req_ns1__MTC_USCOREInstanceTitleContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__ProductIdType *titleId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETitleInfoType *titleInfo,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREInstanceTitleContentType *_p = soap_new_ns1__MTC_USCOREInstanceTitleContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREInstanceTitleContentType::susId = susId;
		_p->ns1__MTC_USCOREInstanceTitleContentType::appId = appId;
		_p->ns1__MTC_USCOREInstanceTitleContentType::titleId = titleId;
		_p->ns1__MTC_USCOREInstanceTitleContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREInstanceTitleContentType::titleInfo = titleInfo;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREInstanceTitleContentType * soap_new_set_ns1__MTC_USCOREInstanceTitleContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__ProductIdType *titleId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETitleInfoType *titleInfo,
	ns1__ActionIdType *action,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREInstanceTitleContentType *_p = soap_new_ns1__MTC_USCOREInstanceTitleContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREInstanceTitleContentType::susId = susId;
		_p->ns1__MTC_USCOREInstanceTitleContentType::appId = appId;
		_p->ns1__MTC_USCOREInstanceTitleContentType::titleId = titleId;
		_p->ns1__MTC_USCOREInstanceTitleContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREInstanceTitleContentType::titleInfo = titleInfo;
		_p->ns1__MTC_USCOREInstanceTitleContentType::action = action;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREInstanceTitleContentType(struct soap *soap, ns1__MTC_USCOREInstanceTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InstanceTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInstanceTitleContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREInstanceTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInstanceTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InstanceTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInstanceTitleContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREInstanceTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInstanceTitleContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InstanceTitleContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInstanceTitleContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREInstanceTitleContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREInstanceTitleContentType(struct soap*, ns1__MTC_USCOREInstanceTitleContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREInstanceTitleContentType(struct soap *soap, ns1__MTC_USCOREInstanceTitleContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREInstanceTitleContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREInstanceTitleContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInstanceTitleContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREInstanceTitleContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREInstanceTitleContentType(struct soap *soap, ns1__MTC_USCOREInstanceTitleContentType *p)
{
	if (soap_read_ns1__MTC_USCOREInstanceTitleContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREDeleteProfileContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREDeleteProfileContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREDeleteProfileContentType(struct soap*, const char*, int, const ns1__MTC_USCOREDeleteProfileContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREDeleteProfileContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREDeleteProfileContentType(struct soap*, const char*, ns1__MTC_USCOREDeleteProfileContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREDeleteProfileContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREDeleteProfileContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREDeleteProfileContentType * soap_new_ns1__MTC_USCOREDeleteProfileContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREDeleteProfileContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREDeleteProfileContentType * soap_new_req_ns1__MTC_USCOREDeleteProfileContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	unsigned int profileId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREDeleteProfileContentType *_p = soap_new_ns1__MTC_USCOREDeleteProfileContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREDeleteProfileContentType::susId = susId;
		_p->ns1__MTC_USCOREDeleteProfileContentType::appId = appId;
		_p->ns1__MTC_USCOREDeleteProfileContentType::profileId = profileId;
		_p->ns1__MTC_USCOREDeleteProfileContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREDeleteProfileContentType * soap_new_set_ns1__MTC_USCOREDeleteProfileContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	unsigned int profileId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__ActionIdType *action,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREDeleteProfileContentType *_p = soap_new_ns1__MTC_USCOREDeleteProfileContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREDeleteProfileContentType::susId = susId;
		_p->ns1__MTC_USCOREDeleteProfileContentType::appId = appId;
		_p->ns1__MTC_USCOREDeleteProfileContentType::profileId = profileId;
		_p->ns1__MTC_USCOREDeleteProfileContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREDeleteProfileContentType::action = action;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREDeleteProfileContentType(struct soap *soap, ns1__MTC_USCOREDeleteProfileContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_DeleteProfileContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREDeleteProfileContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREDeleteProfileContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREDeleteProfileContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_DeleteProfileContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREDeleteProfileContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREDeleteProfileContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREDeleteProfileContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_DeleteProfileContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREDeleteProfileContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREDeleteProfileContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREDeleteProfileContentType(struct soap*, ns1__MTC_USCOREDeleteProfileContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREDeleteProfileContentType(struct soap *soap, ns1__MTC_USCOREDeleteProfileContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREDeleteProfileContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREDeleteProfileContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREDeleteProfileContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREDeleteProfileContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREDeleteProfileContentType(struct soap *soap, ns1__MTC_USCOREDeleteProfileContentType *p)
{
	if (soap_read_ns1__MTC_USCOREDeleteProfileContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREEditProfileContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREEditProfileContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREEditProfileContentType(struct soap*, const char*, int, const ns1__MTC_USCOREEditProfileContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREEditProfileContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREEditProfileContentType(struct soap*, const char*, ns1__MTC_USCOREEditProfileContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREEditProfileContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREEditProfileContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREEditProfileContentType * soap_new_ns1__MTC_USCOREEditProfileContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREEditProfileContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREEditProfileContentType * soap_new_req_ns1__MTC_USCOREEditProfileContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	unsigned int profileId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCOREProfileInfoType *profileInfo,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREEditProfileContentType *_p = soap_new_ns1__MTC_USCOREEditProfileContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREEditProfileContentType::susId = susId;
		_p->ns1__MTC_USCOREEditProfileContentType::appId = appId;
		_p->ns1__MTC_USCOREEditProfileContentType::profileId = profileId;
		_p->ns1__MTC_USCOREEditProfileContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREEditProfileContentType::profileInfo = profileInfo;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREEditProfileContentType * soap_new_set_ns1__MTC_USCOREEditProfileContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	unsigned int profileId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCOREProfileInfoType *profileInfo,
	unsigned short *status,
	ns1__MTC_USCORERangeDateType *validity,
	ns1__ActionIdType *action,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREEditProfileContentType *_p = soap_new_ns1__MTC_USCOREEditProfileContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREEditProfileContentType::susId = susId;
		_p->ns1__MTC_USCOREEditProfileContentType::appId = appId;
		_p->ns1__MTC_USCOREEditProfileContentType::profileId = profileId;
		_p->ns1__MTC_USCOREEditProfileContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREEditProfileContentType::profileInfo = profileInfo;
		_p->ns1__MTC_USCOREEditProfileContentType::status = status;
		_p->ns1__MTC_USCOREEditProfileContentType::validity = validity;
		_p->ns1__MTC_USCOREEditProfileContentType::action = action;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREEditProfileContentType(struct soap *soap, ns1__MTC_USCOREEditProfileContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EditProfileContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEditProfileContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREEditProfileContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREEditProfileContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EditProfileContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEditProfileContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREEditProfileContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREEditProfileContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EditProfileContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEditProfileContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREEditProfileContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREEditProfileContentType(struct soap*, ns1__MTC_USCOREEditProfileContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREEditProfileContentType(struct soap *soap, ns1__MTC_USCOREEditProfileContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREEditProfileContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREEditProfileContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREEditProfileContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREEditProfileContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREEditProfileContentType(struct soap *soap, ns1__MTC_USCOREEditProfileContentType *p)
{
	if (soap_read_ns1__MTC_USCOREEditProfileContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREProfileInfoType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREProfileInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREProfileInfoType(struct soap*, const char*, int, const ns1__MTC_USCOREProfileInfoType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREProfileInfoType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREProfileInfoType(struct soap*, const char*, ns1__MTC_USCOREProfileInfoType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREProfileInfoType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREProfileInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREProfileInfoType * soap_new_ns1__MTC_USCOREProfileInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREProfileInfoType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREProfileInfoType * soap_new_req_ns1__MTC_USCOREProfileInfoType(
	struct soap *soap,
	unsigned short status,
	ns1__MTC_USCORERangeDateType *validity,
	unsigned int position)
{
	ns1__MTC_USCOREProfileInfoType *_p = soap_new_ns1__MTC_USCOREProfileInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREProfileInfoType::status = status;
		_p->ns1__MTC_USCOREProfileInfoType::validity = validity;
		_p->ns1__MTC_USCOREProfileInfoType::position = position;
	}
	return _p;
}

inline ns1__MTC_USCOREProfileInfoType * soap_new_set_ns1__MTC_USCOREProfileInfoType(
	struct soap *soap,
	unsigned short status,
	ns1__MTC_USCORERangeDateType *validity,
	unsigned int position,
	char *__item__1)
{
	ns1__MTC_USCOREProfileInfoType *_p = soap_new_ns1__MTC_USCOREProfileInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREProfileInfoType::status = status;
		_p->ns1__MTC_USCOREProfileInfoType::validity = validity;
		_p->ns1__MTC_USCOREProfileInfoType::position = position;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREProfileInfoType(struct soap *soap, ns1__MTC_USCOREProfileInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ProfileInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREProfileInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREProfileInfoType(struct soap *soap, const char *URL, ns1__MTC_USCOREProfileInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ProfileInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREProfileInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREProfileInfoType(struct soap *soap, const char *URL, ns1__MTC_USCOREProfileInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ProfileInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREProfileInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREProfileInfoType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREProfileInfoType(struct soap*, ns1__MTC_USCOREProfileInfoType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREProfileInfoType(struct soap *soap, ns1__MTC_USCOREProfileInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREProfileInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREProfileInfoType(struct soap *soap, const char *URL, ns1__MTC_USCOREProfileInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREProfileInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREProfileInfoType(struct soap *soap, ns1__MTC_USCOREProfileInfoType *p)
{
	if (soap_read_ns1__MTC_USCOREProfileInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREInstanceProfileContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREInstanceProfileContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREInstanceProfileContentType(struct soap*, const char*, int, const ns1__MTC_USCOREInstanceProfileContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREInstanceProfileContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREInstanceProfileContentType(struct soap*, const char*, ns1__MTC_USCOREInstanceProfileContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREInstanceProfileContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREInstanceProfileContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREInstanceProfileContentType * soap_new_ns1__MTC_USCOREInstanceProfileContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREInstanceProfileContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREInstanceProfileContentType * soap_new_req_ns1__MTC_USCOREInstanceProfileContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	unsigned int profileId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCOREProfileInfoType *profileInfo,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREInstanceProfileContentType *_p = soap_new_ns1__MTC_USCOREInstanceProfileContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREInstanceProfileContentType::susId = susId;
		_p->ns1__MTC_USCOREInstanceProfileContentType::appId = appId;
		_p->ns1__MTC_USCOREInstanceProfileContentType::profileId = profileId;
		_p->ns1__MTC_USCOREInstanceProfileContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREInstanceProfileContentType::profileInfo = profileInfo;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREInstanceProfileContentType * soap_new_set_ns1__MTC_USCOREInstanceProfileContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	unsigned int profileId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCOREProfileInfoType *profileInfo,
	ns1__ActionIdType *action,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREInstanceProfileContentType *_p = soap_new_ns1__MTC_USCOREInstanceProfileContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREInstanceProfileContentType::susId = susId;
		_p->ns1__MTC_USCOREInstanceProfileContentType::appId = appId;
		_p->ns1__MTC_USCOREInstanceProfileContentType::profileId = profileId;
		_p->ns1__MTC_USCOREInstanceProfileContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREInstanceProfileContentType::profileInfo = profileInfo;
		_p->ns1__MTC_USCOREInstanceProfileContentType::action = action;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREInstanceProfileContentType(struct soap *soap, ns1__MTC_USCOREInstanceProfileContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InstanceProfileContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInstanceProfileContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREInstanceProfileContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInstanceProfileContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InstanceProfileContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInstanceProfileContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREInstanceProfileContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInstanceProfileContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InstanceProfileContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInstanceProfileContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREInstanceProfileContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREInstanceProfileContentType(struct soap*, ns1__MTC_USCOREInstanceProfileContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREInstanceProfileContentType(struct soap *soap, ns1__MTC_USCOREInstanceProfileContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREInstanceProfileContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREInstanceProfileContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInstanceProfileContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREInstanceProfileContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREInstanceProfileContentType(struct soap *soap, ns1__MTC_USCOREInstanceProfileContentType *p)
{
	if (soap_read_ns1__MTC_USCOREInstanceProfileContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREEditAppContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREEditAppContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREEditAppContentType(struct soap*, const char*, int, const ns1__MTC_USCOREEditAppContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREEditAppContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREEditAppContentType(struct soap*, const char*, ns1__MTC_USCOREEditAppContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREEditAppContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREEditAppContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREEditAppContentType * soap_new_ns1__MTC_USCOREEditAppContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREEditAppContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREEditAppContentType * soap_new_req_ns1__MTC_USCOREEditAppContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREEditAppContentType *_p = soap_new_ns1__MTC_USCOREEditAppContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREEditAppContentType::susId = susId;
		_p->ns1__MTC_USCOREEditAppContentType::appId = appId;
		_p->ns1__MTC_USCOREEditAppContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREEditAppContentType * soap_new_set_ns1__MTC_USCOREEditAppContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	unsigned short *status,
	unsigned short *userType,
	ns1__MTC_USCORERangeDateType *validity,
	ns1__ActionIdType *action,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREEditAppContentType *_p = soap_new_ns1__MTC_USCOREEditAppContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREEditAppContentType::susId = susId;
		_p->ns1__MTC_USCOREEditAppContentType::appId = appId;
		_p->ns1__MTC_USCOREEditAppContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREEditAppContentType::status = status;
		_p->ns1__MTC_USCOREEditAppContentType::userType = userType;
		_p->ns1__MTC_USCOREEditAppContentType::validity = validity;
		_p->ns1__MTC_USCOREEditAppContentType::action = action;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREEditAppContentType(struct soap *soap, ns1__MTC_USCOREEditAppContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EditAppContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEditAppContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREEditAppContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREEditAppContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EditAppContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEditAppContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREEditAppContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREEditAppContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EditAppContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEditAppContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREEditAppContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREEditAppContentType(struct soap*, ns1__MTC_USCOREEditAppContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREEditAppContentType(struct soap *soap, ns1__MTC_USCOREEditAppContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREEditAppContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREEditAppContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREEditAppContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREEditAppContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREEditAppContentType(struct soap *soap, ns1__MTC_USCOREEditAppContentType *p)
{
	if (soap_read_ns1__MTC_USCOREEditAppContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ActionIdType_DEFINED
#define SOAP_TYPE_ns1__ActionIdType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ActionIdType(struct soap*, const char*, int, const ns1__ActionIdType *, const char*);
SOAP_FMAC3 ns1__ActionIdType * SOAP_FMAC4 soap_in_ns1__ActionIdType(struct soap*, const char*, ns1__ActionIdType *, const char*);
SOAP_FMAC1 ns1__ActionIdType * SOAP_FMAC2 soap_instantiate_ns1__ActionIdType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ActionIdType * soap_new_ns1__ActionIdType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ActionIdType(soap, n, NULL, NULL, NULL);
}

inline ns1__ActionIdType * soap_new_req_ns1__ActionIdType(
	struct soap *soap)
{
	ns1__ActionIdType *_p = soap_new_ns1__ActionIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ActionIdType * soap_new_set_ns1__ActionIdType(
	struct soap *soap,
	char *class_,
	ULONG64 *sequence,
	char *__item__1)
{
	ns1__ActionIdType *_p = soap_new_ns1__ActionIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionIdType::class_ = class_;
		_p->ns1__ActionIdType::sequence = sequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ActionIdType(struct soap *soap, ns1__ActionIdType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionIdType", p->soap_type() == SOAP_TYPE_ns1__ActionIdType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ActionIdType(struct soap *soap, const char *URL, ns1__ActionIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionIdType", p->soap_type() == SOAP_TYPE_ns1__ActionIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ActionIdType(struct soap *soap, const char *URL, ns1__ActionIdType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionIdType", p->soap_type() == SOAP_TYPE_ns1__ActionIdType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ActionIdType * SOAP_FMAC4 soap_get_ns1__ActionIdType(struct soap*, ns1__ActionIdType *, const char*, const char*);

inline int soap_read_ns1__ActionIdType(struct soap *soap, ns1__ActionIdType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ActionIdType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ActionIdType(struct soap *soap, const char *URL, ns1__ActionIdType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ActionIdType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ActionIdType(struct soap *soap, ns1__ActionIdType *p)
{
	if (soap_read_ns1__ActionIdType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORERangeDateType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORERangeDateType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORERangeDateType(struct soap*, const char*, int, const ns1__MTC_USCORERangeDateType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORERangeDateType * SOAP_FMAC4 soap_in_ns1__MTC_USCORERangeDateType(struct soap*, const char*, ns1__MTC_USCORERangeDateType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORERangeDateType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORERangeDateType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORERangeDateType * soap_new_ns1__MTC_USCORERangeDateType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORERangeDateType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORERangeDateType * soap_new_req_ns1__MTC_USCORERangeDateType(
	struct soap *soap,
	char *start,
	char *end)
{
	ns1__MTC_USCORERangeDateType *_p = soap_new_ns1__MTC_USCORERangeDateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORERangeDateType::start = start;
		_p->ns1__MTC_USCORERangeDateType::end = end;
	}
	return _p;
}

inline ns1__MTC_USCORERangeDateType * soap_new_set_ns1__MTC_USCORERangeDateType(
	struct soap *soap,
	char *start,
	char *end,
	char *__item__1)
{
	ns1__MTC_USCORERangeDateType *_p = soap_new_ns1__MTC_USCORERangeDateType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORERangeDateType::start = start;
		_p->ns1__MTC_USCORERangeDateType::end = end;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORERangeDateType(struct soap *soap, ns1__MTC_USCORERangeDateType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RangeDateType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERangeDateType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORERangeDateType(struct soap *soap, const char *URL, ns1__MTC_USCORERangeDateType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RangeDateType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERangeDateType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORERangeDateType(struct soap *soap, const char *URL, ns1__MTC_USCORERangeDateType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_RangeDateType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORERangeDateType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORERangeDateType * SOAP_FMAC4 soap_get_ns1__MTC_USCORERangeDateType(struct soap*, ns1__MTC_USCORERangeDateType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORERangeDateType(struct soap *soap, ns1__MTC_USCORERangeDateType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORERangeDateType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORERangeDateType(struct soap *soap, const char *URL, ns1__MTC_USCORERangeDateType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORERangeDateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORERangeDateType(struct soap *soap, ns1__MTC_USCORERangeDateType *p)
{
	if (soap_read_ns1__MTC_USCORERangeDateType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREApplicationInfoType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREApplicationInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREApplicationInfoType(struct soap*, const char*, int, const ns1__MTC_USCOREApplicationInfoType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREApplicationInfoType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREApplicationInfoType(struct soap*, const char*, ns1__MTC_USCOREApplicationInfoType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREApplicationInfoType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREApplicationInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREApplicationInfoType * soap_new_ns1__MTC_USCOREApplicationInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREApplicationInfoType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREApplicationInfoType * soap_new_req_ns1__MTC_USCOREApplicationInfoType(
	struct soap *soap,
	unsigned int version,
	unsigned short status,
	unsigned short userType,
	ns1__MTC_USCORERangeDateType *validity,
	ULONG64 numTransac,
	bool isCommited)
{
	ns1__MTC_USCOREApplicationInfoType *_p = soap_new_ns1__MTC_USCOREApplicationInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREApplicationInfoType::version = version;
		_p->ns1__MTC_USCOREApplicationInfoType::status = status;
		_p->ns1__MTC_USCOREApplicationInfoType::userType = userType;
		_p->ns1__MTC_USCOREApplicationInfoType::validity = validity;
		_p->ns1__MTC_USCOREApplicationInfoType::numTransac = numTransac;
		_p->ns1__MTC_USCOREApplicationInfoType::isCommited = isCommited;
	}
	return _p;
}

inline ns1__MTC_USCOREApplicationInfoType * soap_new_set_ns1__MTC_USCOREApplicationInfoType(
	struct soap *soap,
	unsigned int version,
	unsigned short status,
	unsigned short userType,
	ns1__MTC_USCORERangeDateType *validity,
	ULONG64 numTransac,
	bool isCommited,
	char *__item__1)
{
	ns1__MTC_USCOREApplicationInfoType *_p = soap_new_ns1__MTC_USCOREApplicationInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREApplicationInfoType::version = version;
		_p->ns1__MTC_USCOREApplicationInfoType::status = status;
		_p->ns1__MTC_USCOREApplicationInfoType::userType = userType;
		_p->ns1__MTC_USCOREApplicationInfoType::validity = validity;
		_p->ns1__MTC_USCOREApplicationInfoType::numTransac = numTransac;
		_p->ns1__MTC_USCOREApplicationInfoType::isCommited = isCommited;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREApplicationInfoType(struct soap *soap, ns1__MTC_USCOREApplicationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ApplicationInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREApplicationInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREApplicationInfoType(struct soap *soap, const char *URL, ns1__MTC_USCOREApplicationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ApplicationInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREApplicationInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREApplicationInfoType(struct soap *soap, const char *URL, ns1__MTC_USCOREApplicationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ApplicationInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREApplicationInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREApplicationInfoType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREApplicationInfoType(struct soap*, ns1__MTC_USCOREApplicationInfoType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREApplicationInfoType(struct soap *soap, ns1__MTC_USCOREApplicationInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREApplicationInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREApplicationInfoType(struct soap *soap, const char *URL, ns1__MTC_USCOREApplicationInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREApplicationInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREApplicationInfoType(struct soap *soap, ns1__MTC_USCOREApplicationInfoType *p)
{
	if (soap_read_ns1__MTC_USCOREApplicationInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREInstanceAppContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREInstanceAppContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREInstanceAppContentType(struct soap*, const char*, int, const ns1__MTC_USCOREInstanceAppContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREInstanceAppContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREInstanceAppContentType(struct soap*, const char*, ns1__MTC_USCOREInstanceAppContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREInstanceAppContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREInstanceAppContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREInstanceAppContentType * soap_new_ns1__MTC_USCOREInstanceAppContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREInstanceAppContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREInstanceAppContentType * soap_new_req_ns1__MTC_USCOREInstanceAppContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREInstanceAppContentType *_p = soap_new_ns1__MTC_USCOREInstanceAppContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREInstanceAppContentType::susId = susId;
		_p->ns1__MTC_USCOREInstanceAppContentType::appId = appId;
		_p->ns1__MTC_USCOREInstanceAppContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREInstanceAppContentType * soap_new_set_ns1__MTC_USCOREInstanceAppContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned int appId,
	ns1__MTC_USCOREApplicationInfoType *appInfo,
	ns1__ActionIdType *action,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREInstanceAppContentType *_p = soap_new_ns1__MTC_USCOREInstanceAppContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREInstanceAppContentType::susId = susId;
		_p->ns1__MTC_USCOREInstanceAppContentType::appId = appId;
		_p->ns1__MTC_USCOREInstanceAppContentType::appInfo = appInfo;
		_p->ns1__MTC_USCOREInstanceAppContentType::action = action;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREInstanceAppContentType(struct soap *soap, ns1__MTC_USCOREInstanceAppContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InstanceAppContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInstanceAppContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREInstanceAppContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInstanceAppContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InstanceAppContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInstanceAppContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREInstanceAppContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInstanceAppContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InstanceAppContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInstanceAppContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREInstanceAppContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREInstanceAppContentType(struct soap*, ns1__MTC_USCOREInstanceAppContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREInstanceAppContentType(struct soap *soap, ns1__MTC_USCOREInstanceAppContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREInstanceAppContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREInstanceAppContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInstanceAppContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREInstanceAppContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREInstanceAppContentType(struct soap *soap, ns1__MTC_USCOREInstanceAppContentType *p)
{
	if (soap_read_ns1__MTC_USCOREInstanceAppContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREInitializationSusContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREInitializationSusContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREInitializationSusContentType(struct soap*, const char*, int, const ns1__MTC_USCOREInitializationSusContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREInitializationSusContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREInitializationSusContentType(struct soap*, const char*, ns1__MTC_USCOREInitializationSusContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREInitializationSusContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREInitializationSusContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREInitializationSusContentType * soap_new_ns1__MTC_USCOREInitializationSusContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREInitializationSusContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREInitializationSusContentType * soap_new_req_ns1__MTC_USCOREInitializationSusContentType(
	struct soap *soap,
	ULONG64 susId,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREInitializationSusContentType *_p = soap_new_ns1__MTC_USCOREInitializationSusContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREInitializationSusContentType::susId = susId;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREInitializationSusContentType * soap_new_set_ns1__MTC_USCOREInitializationSusContentType(
	struct soap *soap,
	ULONG64 susId,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREInitializationSusContentType *_p = soap_new_ns1__MTC_USCOREInitializationSusContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREInitializationSusContentType::susId = susId;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREInitializationSusContentType(struct soap *soap, ns1__MTC_USCOREInitializationSusContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InitializationSusContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInitializationSusContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREInitializationSusContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInitializationSusContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InitializationSusContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInitializationSusContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREInitializationSusContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInitializationSusContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_InitializationSusContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREInitializationSusContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREInitializationSusContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREInitializationSusContentType(struct soap*, ns1__MTC_USCOREInitializationSusContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREInitializationSusContentType(struct soap *soap, ns1__MTC_USCOREInitializationSusContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREInitializationSusContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREInitializationSusContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREInitializationSusContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREInitializationSusContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREInitializationSusContentType(struct soap *soap, ns1__MTC_USCOREInitializationSusContentType *p)
{
	if (soap_read_ns1__MTC_USCOREInitializationSusContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORELogValueType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORELogValueType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORELogValueType(struct soap*, const char*, int, const ns1__MTC_USCORELogValueType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORELogValueType * SOAP_FMAC4 soap_in_ns1__MTC_USCORELogValueType(struct soap*, const char*, ns1__MTC_USCORELogValueType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORELogValueType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORELogValueType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORELogValueType * soap_new_ns1__MTC_USCORELogValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORELogValueType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORELogValueType * soap_new_req_ns1__MTC_USCORELogValueType(
	struct soap *soap,
	unsigned int field,
	ns1__ValueType *value)
{
	ns1__MTC_USCORELogValueType *_p = soap_new_ns1__MTC_USCORELogValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORELogValueType::field = field;
		_p->ns1__MTC_USCORELogValueType::value = value;
	}
	return _p;
}

inline ns1__MTC_USCORELogValueType * soap_new_set_ns1__MTC_USCORELogValueType(
	struct soap *soap,
	unsigned int field,
	ns1__ValueType *value,
	char *__item__1)
{
	ns1__MTC_USCORELogValueType *_p = soap_new_ns1__MTC_USCORELogValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORELogValueType::field = field;
		_p->ns1__MTC_USCORELogValueType::value = value;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORELogValueType(struct soap *soap, ns1__MTC_USCORELogValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_LogValueType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORELogValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORELogValueType(struct soap *soap, const char *URL, ns1__MTC_USCORELogValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_LogValueType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORELogValueType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORELogValueType(struct soap *soap, const char *URL, ns1__MTC_USCORELogValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_LogValueType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORELogValueType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORELogValueType * SOAP_FMAC4 soap_get_ns1__MTC_USCORELogValueType(struct soap*, ns1__MTC_USCORELogValueType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORELogValueType(struct soap *soap, ns1__MTC_USCORELogValueType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORELogValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORELogValueType(struct soap *soap, const char *URL, ns1__MTC_USCORELogValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORELogValueType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORELogValueType(struct soap *soap, ns1__MTC_USCORELogValueType *p)
{
	if (soap_read_ns1__MTC_USCORELogValueType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREEquipmentInfoType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREEquipmentInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREEquipmentInfoType(struct soap*, const char*, int, const ns1__MTC_USCOREEquipmentInfoType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREEquipmentInfoType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREEquipmentInfoType(struct soap*, const char*, ns1__MTC_USCOREEquipmentInfoType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREEquipmentInfoType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREEquipmentInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREEquipmentInfoType * soap_new_ns1__MTC_USCOREEquipmentInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREEquipmentInfoType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREEquipmentInfoType * soap_new_req_ns1__MTC_USCOREEquipmentInfoType(
	struct soap *soap,
	unsigned int cctiuId,
	unsigned int operationId,
	unsigned int session_USCOREid)
{
	ns1__MTC_USCOREEquipmentInfoType *_p = soap_new_ns1__MTC_USCOREEquipmentInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREEquipmentInfoType::cctiuId = cctiuId;
		_p->ns1__MTC_USCOREEquipmentInfoType::operationId = operationId;
		_p->ns1__MTC_USCOREEquipmentInfoType::session_USCOREid = session_USCOREid;
	}
	return _p;
}

inline ns1__MTC_USCOREEquipmentInfoType * soap_new_set_ns1__MTC_USCOREEquipmentInfoType(
	struct soap *soap,
	unsigned int cctiuId,
	unsigned int operationId,
	unsigned int session_USCOREid,
	char *__item__1)
{
	ns1__MTC_USCOREEquipmentInfoType *_p = soap_new_ns1__MTC_USCOREEquipmentInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREEquipmentInfoType::cctiuId = cctiuId;
		_p->ns1__MTC_USCOREEquipmentInfoType::operationId = operationId;
		_p->ns1__MTC_USCOREEquipmentInfoType::session_USCOREid = session_USCOREid;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREEquipmentInfoType(struct soap *soap, ns1__MTC_USCOREEquipmentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EquipmentInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEquipmentInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREEquipmentInfoType(struct soap *soap, const char *URL, ns1__MTC_USCOREEquipmentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EquipmentInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEquipmentInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREEquipmentInfoType(struct soap *soap, const char *URL, ns1__MTC_USCOREEquipmentInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_EquipmentInfoType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREEquipmentInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREEquipmentInfoType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREEquipmentInfoType(struct soap*, ns1__MTC_USCOREEquipmentInfoType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREEquipmentInfoType(struct soap *soap, ns1__MTC_USCOREEquipmentInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREEquipmentInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREEquipmentInfoType(struct soap *soap, const char *URL, ns1__MTC_USCOREEquipmentInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREEquipmentInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREEquipmentInfoType(struct soap *soap, ns1__MTC_USCOREEquipmentInfoType *p)
{
	if (soap_read_ns1__MTC_USCOREEquipmentInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREConfigVersionType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREConfigVersionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREConfigVersionType(struct soap*, const char*, int, const ns1__MTC_USCOREConfigVersionType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREConfigVersionType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREConfigVersionType(struct soap*, const char*, ns1__MTC_USCOREConfigVersionType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREConfigVersionType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREConfigVersionType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREConfigVersionType * soap_new_ns1__MTC_USCOREConfigVersionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREConfigVersionType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREConfigVersionType * soap_new_req_ns1__MTC_USCOREConfigVersionType(
	struct soap *soap,
	unsigned int id,
	unsigned int v)
{
	ns1__MTC_USCOREConfigVersionType *_p = soap_new_ns1__MTC_USCOREConfigVersionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREConfigVersionType::id = id;
		_p->ns1__MTC_USCOREConfigVersionType::v = v;
	}
	return _p;
}

inline ns1__MTC_USCOREConfigVersionType * soap_new_set_ns1__MTC_USCOREConfigVersionType(
	struct soap *soap,
	unsigned int id,
	unsigned int v,
	char *__item__1)
{
	ns1__MTC_USCOREConfigVersionType *_p = soap_new_ns1__MTC_USCOREConfigVersionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREConfigVersionType::id = id;
		_p->ns1__MTC_USCOREConfigVersionType::v = v;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREConfigVersionType(struct soap *soap, ns1__MTC_USCOREConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREConfigVersionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREConfigVersionType(struct soap *soap, const char *URL, ns1__MTC_USCOREConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREConfigVersionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREConfigVersionType(struct soap *soap, const char *URL, ns1__MTC_USCOREConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREConfigVersionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREConfigVersionType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREConfigVersionType(struct soap*, ns1__MTC_USCOREConfigVersionType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREConfigVersionType(struct soap *soap, ns1__MTC_USCOREConfigVersionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREConfigVersionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREConfigVersionType(struct soap *soap, const char *URL, ns1__MTC_USCOREConfigVersionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREConfigVersionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREConfigVersionType(struct soap *soap, ns1__MTC_USCOREConfigVersionType *p)
{
	if (soap_read_ns1__MTC_USCOREConfigVersionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREConfigVersionTypeList_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREConfigVersionTypeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREConfigVersionTypeList(struct soap*, const char*, int, const ns1__MTC_USCOREConfigVersionTypeList *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREConfigVersionTypeList * SOAP_FMAC4 soap_in_ns1__MTC_USCOREConfigVersionTypeList(struct soap*, const char*, ns1__MTC_USCOREConfigVersionTypeList *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREConfigVersionTypeList * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREConfigVersionTypeList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREConfigVersionTypeList * soap_new_ns1__MTC_USCOREConfigVersionTypeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREConfigVersionTypeList(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREConfigVersionTypeList * soap_new_req_ns1__MTC_USCOREConfigVersionTypeList(
	struct soap *soap,
	int __sizecv,
	ns1__MTC_USCOREConfigVersionType **cv)
{
	ns1__MTC_USCOREConfigVersionTypeList *_p = soap_new_ns1__MTC_USCOREConfigVersionTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREConfigVersionTypeList::__sizecv = __sizecv;
		_p->ns1__MTC_USCOREConfigVersionTypeList::cv = cv;
	}
	return _p;
}

inline ns1__MTC_USCOREConfigVersionTypeList * soap_new_set_ns1__MTC_USCOREConfigVersionTypeList(
	struct soap *soap,
	int __sizecv,
	ns1__MTC_USCOREConfigVersionType **cv,
	char *__item__1)
{
	ns1__MTC_USCOREConfigVersionTypeList *_p = soap_new_ns1__MTC_USCOREConfigVersionTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREConfigVersionTypeList::__sizecv = __sizecv;
		_p->ns1__MTC_USCOREConfigVersionTypeList::cv = cv;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREConfigVersionTypeList(struct soap *soap, ns1__MTC_USCOREConfigVersionTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ConfigVersionTypeList", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREConfigVersionTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREConfigVersionTypeList(struct soap *soap, const char *URL, ns1__MTC_USCOREConfigVersionTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ConfigVersionTypeList", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREConfigVersionTypeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREConfigVersionTypeList(struct soap *soap, const char *URL, ns1__MTC_USCOREConfigVersionTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_ConfigVersionTypeList", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREConfigVersionTypeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREConfigVersionTypeList * SOAP_FMAC4 soap_get_ns1__MTC_USCOREConfigVersionTypeList(struct soap*, ns1__MTC_USCOREConfigVersionTypeList *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREConfigVersionTypeList(struct soap *soap, ns1__MTC_USCOREConfigVersionTypeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREConfigVersionTypeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREConfigVersionTypeList(struct soap *soap, const char *URL, ns1__MTC_USCOREConfigVersionTypeList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREConfigVersionTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREConfigVersionTypeList(struct soap *soap, ns1__MTC_USCOREConfigVersionTypeList *p)
{
	if (soap_read_ns1__MTC_USCOREConfigVersionTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREOtherPoint_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREOtherPoint_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREOtherPoint(struct soap*, const char*, int, const ns1__MTC_USCOREOtherPoint *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREOtherPoint * SOAP_FMAC4 soap_in_ns1__MTC_USCOREOtherPoint(struct soap*, const char*, ns1__MTC_USCOREOtherPoint *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREOtherPoint * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREOtherPoint(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREOtherPoint * soap_new_ns1__MTC_USCOREOtherPoint(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREOtherPoint(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREOtherPoint * soap_new_req_ns1__MTC_USCOREOtherPoint(
	struct soap *soap,
	unsigned short pointType,
	unsigned int pointId)
{
	ns1__MTC_USCOREOtherPoint *_p = soap_new_ns1__MTC_USCOREOtherPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREOtherPoint::pointType = pointType;
		_p->ns1__MTC_USCOREOtherPoint::pointId = pointId;
	}
	return _p;
}

inline ns1__MTC_USCOREOtherPoint * soap_new_set_ns1__MTC_USCOREOtherPoint(
	struct soap *soap,
	unsigned short pointType,
	unsigned int pointId,
	char *__item__1)
{
	ns1__MTC_USCOREOtherPoint *_p = soap_new_ns1__MTC_USCOREOtherPoint(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREOtherPoint::pointType = pointType;
		_p->ns1__MTC_USCOREOtherPoint::pointId = pointId;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREOtherPoint(struct soap *soap, ns1__MTC_USCOREOtherPoint const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OtherPoint", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOtherPoint ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREOtherPoint(struct soap *soap, const char *URL, ns1__MTC_USCOREOtherPoint const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OtherPoint", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOtherPoint ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREOtherPoint(struct soap *soap, const char *URL, ns1__MTC_USCOREOtherPoint const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OtherPoint", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOtherPoint ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREOtherPoint * SOAP_FMAC4 soap_get_ns1__MTC_USCOREOtherPoint(struct soap*, ns1__MTC_USCOREOtherPoint *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREOtherPoint(struct soap *soap, ns1__MTC_USCOREOtherPoint *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREOtherPoint(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREOtherPoint(struct soap *soap, const char *URL, ns1__MTC_USCOREOtherPoint *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREOtherPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREOtherPoint(struct soap *soap, ns1__MTC_USCOREOtherPoint *p)
{
	if (soap_read_ns1__MTC_USCOREOtherPoint(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREOnBoardSellPointType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREOnBoardSellPointType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREOnBoardSellPointType(struct soap*, const char*, int, const ns1__MTC_USCOREOnBoardSellPointType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREOnBoardSellPointType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREOnBoardSellPointType(struct soap*, const char*, ns1__MTC_USCOREOnBoardSellPointType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREOnBoardSellPointType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREOnBoardSellPointType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREOnBoardSellPointType * soap_new_ns1__MTC_USCOREOnBoardSellPointType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREOnBoardSellPointType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREOnBoardSellPointType * soap_new_req_ns1__MTC_USCOREOnBoardSellPointType(
	struct soap *soap,
	unsigned int line,
	unsigned int itinerary,
	unsigned int way,
	unsigned int stop)
{
	ns1__MTC_USCOREOnBoardSellPointType *_p = soap_new_ns1__MTC_USCOREOnBoardSellPointType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREOnBoardSellPointType::line = line;
		_p->ns1__MTC_USCOREOnBoardSellPointType::itinerary = itinerary;
		_p->ns1__MTC_USCOREOnBoardSellPointType::way = way;
		_p->ns1__MTC_USCOREOnBoardSellPointType::stop = stop;
	}
	return _p;
}

inline ns1__MTC_USCOREOnBoardSellPointType * soap_new_set_ns1__MTC_USCOREOnBoardSellPointType(
	struct soap *soap,
	unsigned int line,
	unsigned int itinerary,
	unsigned int way,
	unsigned int stop,
	char *__item__1)
{
	ns1__MTC_USCOREOnBoardSellPointType *_p = soap_new_ns1__MTC_USCOREOnBoardSellPointType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREOnBoardSellPointType::line = line;
		_p->ns1__MTC_USCOREOnBoardSellPointType::itinerary = itinerary;
		_p->ns1__MTC_USCOREOnBoardSellPointType::way = way;
		_p->ns1__MTC_USCOREOnBoardSellPointType::stop = stop;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREOnBoardSellPointType(struct soap *soap, ns1__MTC_USCOREOnBoardSellPointType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnBoardSellPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnBoardSellPointType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREOnBoardSellPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnBoardSellPointType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnBoardSellPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnBoardSellPointType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREOnBoardSellPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnBoardSellPointType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnBoardSellPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnBoardSellPointType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREOnBoardSellPointType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREOnBoardSellPointType(struct soap*, ns1__MTC_USCOREOnBoardSellPointType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREOnBoardSellPointType(struct soap *soap, ns1__MTC_USCOREOnBoardSellPointType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREOnBoardSellPointType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREOnBoardSellPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnBoardSellPointType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREOnBoardSellPointType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREOnBoardSellPointType(struct soap *soap, ns1__MTC_USCOREOnBoardSellPointType *p)
{
	if (soap_read_ns1__MTC_USCOREOnBoardSellPointType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREOnStationSellPointType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREOnStationSellPointType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREOnStationSellPointType(struct soap*, const char*, int, const ns1__MTC_USCOREOnStationSellPointType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREOnStationSellPointType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREOnStationSellPointType(struct soap*, const char*, ns1__MTC_USCOREOnStationSellPointType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREOnStationSellPointType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREOnStationSellPointType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREOnStationSellPointType * soap_new_ns1__MTC_USCOREOnStationSellPointType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREOnStationSellPointType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREOnStationSellPointType * soap_new_req_ns1__MTC_USCOREOnStationSellPointType(
	struct soap *soap,
	unsigned int station,
	unsigned int hall,
	unsigned int position)
{
	ns1__MTC_USCOREOnStationSellPointType *_p = soap_new_ns1__MTC_USCOREOnStationSellPointType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREOnStationSellPointType::station = station;
		_p->ns1__MTC_USCOREOnStationSellPointType::hall = hall;
		_p->ns1__MTC_USCOREOnStationSellPointType::position = position;
	}
	return _p;
}

inline ns1__MTC_USCOREOnStationSellPointType * soap_new_set_ns1__MTC_USCOREOnStationSellPointType(
	struct soap *soap,
	unsigned int station,
	unsigned int hall,
	unsigned int position,
	char *__item__1)
{
	ns1__MTC_USCOREOnStationSellPointType *_p = soap_new_ns1__MTC_USCOREOnStationSellPointType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREOnStationSellPointType::station = station;
		_p->ns1__MTC_USCOREOnStationSellPointType::hall = hall;
		_p->ns1__MTC_USCOREOnStationSellPointType::position = position;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREOnStationSellPointType(struct soap *soap, ns1__MTC_USCOREOnStationSellPointType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnStationSellPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnStationSellPointType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREOnStationSellPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnStationSellPointType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnStationSellPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnStationSellPointType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREOnStationSellPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnStationSellPointType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnStationSellPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnStationSellPointType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREOnStationSellPointType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREOnStationSellPointType(struct soap*, ns1__MTC_USCOREOnStationSellPointType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREOnStationSellPointType(struct soap *soap, ns1__MTC_USCOREOnStationSellPointType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREOnStationSellPointType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREOnStationSellPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnStationSellPointType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREOnStationSellPointType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREOnStationSellPointType(struct soap *soap, ns1__MTC_USCOREOnStationSellPointType *p)
{
	if (soap_read_ns1__MTC_USCOREOnStationSellPointType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREOnBoardAccessPointType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREOnBoardAccessPointType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREOnBoardAccessPointType(struct soap*, const char*, int, const ns1__MTC_USCOREOnBoardAccessPointType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREOnBoardAccessPointType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREOnBoardAccessPointType(struct soap*, const char*, ns1__MTC_USCOREOnBoardAccessPointType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREOnBoardAccessPointType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREOnBoardAccessPointType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREOnBoardAccessPointType * soap_new_ns1__MTC_USCOREOnBoardAccessPointType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREOnBoardAccessPointType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREOnBoardAccessPointType * soap_new_req_ns1__MTC_USCOREOnBoardAccessPointType(
	struct soap *soap,
	unsigned int line,
	unsigned int itinerary,
	unsigned int way,
	unsigned int stop)
{
	ns1__MTC_USCOREOnBoardAccessPointType *_p = soap_new_ns1__MTC_USCOREOnBoardAccessPointType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREOnBoardAccessPointType::line = line;
		_p->ns1__MTC_USCOREOnBoardAccessPointType::itinerary = itinerary;
		_p->ns1__MTC_USCOREOnBoardAccessPointType::way = way;
		_p->ns1__MTC_USCOREOnBoardAccessPointType::stop = stop;
	}
	return _p;
}

inline ns1__MTC_USCOREOnBoardAccessPointType * soap_new_set_ns1__MTC_USCOREOnBoardAccessPointType(
	struct soap *soap,
	unsigned int line,
	unsigned int itinerary,
	unsigned int way,
	unsigned int stop,
	char *__item__1)
{
	ns1__MTC_USCOREOnBoardAccessPointType *_p = soap_new_ns1__MTC_USCOREOnBoardAccessPointType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREOnBoardAccessPointType::line = line;
		_p->ns1__MTC_USCOREOnBoardAccessPointType::itinerary = itinerary;
		_p->ns1__MTC_USCOREOnBoardAccessPointType::way = way;
		_p->ns1__MTC_USCOREOnBoardAccessPointType::stop = stop;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREOnBoardAccessPointType(struct soap *soap, ns1__MTC_USCOREOnBoardAccessPointType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnBoardAccessPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnBoardAccessPointType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREOnBoardAccessPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnBoardAccessPointType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnBoardAccessPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnBoardAccessPointType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREOnBoardAccessPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnBoardAccessPointType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnBoardAccessPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnBoardAccessPointType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREOnBoardAccessPointType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREOnBoardAccessPointType(struct soap*, ns1__MTC_USCOREOnBoardAccessPointType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREOnBoardAccessPointType(struct soap *soap, ns1__MTC_USCOREOnBoardAccessPointType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREOnBoardAccessPointType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREOnBoardAccessPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnBoardAccessPointType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREOnBoardAccessPointType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREOnBoardAccessPointType(struct soap *soap, ns1__MTC_USCOREOnBoardAccessPointType *p)
{
	if (soap_read_ns1__MTC_USCOREOnBoardAccessPointType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREOnStationAccessPointType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREOnStationAccessPointType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREOnStationAccessPointType(struct soap*, const char*, int, const ns1__MTC_USCOREOnStationAccessPointType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREOnStationAccessPointType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREOnStationAccessPointType(struct soap*, const char*, ns1__MTC_USCOREOnStationAccessPointType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREOnStationAccessPointType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREOnStationAccessPointType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREOnStationAccessPointType * soap_new_ns1__MTC_USCOREOnStationAccessPointType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREOnStationAccessPointType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREOnStationAccessPointType * soap_new_req_ns1__MTC_USCOREOnStationAccessPointType(
	struct soap *soap,
	unsigned int station,
	unsigned int hall,
	unsigned int position)
{
	ns1__MTC_USCOREOnStationAccessPointType *_p = soap_new_ns1__MTC_USCOREOnStationAccessPointType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREOnStationAccessPointType::station = station;
		_p->ns1__MTC_USCOREOnStationAccessPointType::hall = hall;
		_p->ns1__MTC_USCOREOnStationAccessPointType::position = position;
	}
	return _p;
}

inline ns1__MTC_USCOREOnStationAccessPointType * soap_new_set_ns1__MTC_USCOREOnStationAccessPointType(
	struct soap *soap,
	unsigned int station,
	unsigned int hall,
	unsigned int position,
	char *__item__1)
{
	ns1__MTC_USCOREOnStationAccessPointType *_p = soap_new_ns1__MTC_USCOREOnStationAccessPointType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREOnStationAccessPointType::station = station;
		_p->ns1__MTC_USCOREOnStationAccessPointType::hall = hall;
		_p->ns1__MTC_USCOREOnStationAccessPointType::position = position;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREOnStationAccessPointType(struct soap *soap, ns1__MTC_USCOREOnStationAccessPointType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnStationAccessPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnStationAccessPointType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREOnStationAccessPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnStationAccessPointType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnStationAccessPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnStationAccessPointType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREOnStationAccessPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnStationAccessPointType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_OnStationAccessPointType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREOnStationAccessPointType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREOnStationAccessPointType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREOnStationAccessPointType(struct soap*, ns1__MTC_USCOREOnStationAccessPointType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREOnStationAccessPointType(struct soap *soap, ns1__MTC_USCOREOnStationAccessPointType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREOnStationAccessPointType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREOnStationAccessPointType(struct soap *soap, const char *URL, ns1__MTC_USCOREOnStationAccessPointType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREOnStationAccessPointType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREOnStationAccessPointType(struct soap *soap, ns1__MTC_USCOREOnStationAccessPointType *p)
{
	if (soap_read_ns1__MTC_USCOREOnStationAccessPointType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORENetworkLocationType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORENetworkLocationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORENetworkLocationType(struct soap*, const char*, int, const ns1__MTC_USCORENetworkLocationType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORENetworkLocationType * SOAP_FMAC4 soap_in_ns1__MTC_USCORENetworkLocationType(struct soap*, const char*, ns1__MTC_USCORENetworkLocationType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORENetworkLocationType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORENetworkLocationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORENetworkLocationType * soap_new_ns1__MTC_USCORENetworkLocationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORENetworkLocationType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORENetworkLocationType * soap_new_req_ns1__MTC_USCORENetworkLocationType(
	struct soap *soap,
	unsigned int logicalZone,
	unsigned int company)
{
	ns1__MTC_USCORENetworkLocationType *_p = soap_new_ns1__MTC_USCORENetworkLocationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORENetworkLocationType::logicalZone = logicalZone;
		_p->ns1__MTC_USCORENetworkLocationType::company = company;
	}
	return _p;
}

inline ns1__MTC_USCORENetworkLocationType * soap_new_set_ns1__MTC_USCORENetworkLocationType(
	struct soap *soap,
	unsigned int logicalZone,
	unsigned int company,
	ns1__MTC_USCOREOnStationAccessPointType *accessOnStation,
	ns1__MTC_USCOREOnBoardAccessPointType *accessOnBoard,
	ns1__MTC_USCOREOnStationSellPointType *sellOnStation,
	ns1__MTC_USCOREOnBoardSellPointType *sellOnBoard,
	char *__item__1)
{
	ns1__MTC_USCORENetworkLocationType *_p = soap_new_ns1__MTC_USCORENetworkLocationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORENetworkLocationType::logicalZone = logicalZone;
		_p->ns1__MTC_USCORENetworkLocationType::company = company;
		_p->ns1__MTC_USCORENetworkLocationType::accessOnStation = accessOnStation;
		_p->ns1__MTC_USCORENetworkLocationType::accessOnBoard = accessOnBoard;
		_p->ns1__MTC_USCORENetworkLocationType::sellOnStation = sellOnStation;
		_p->ns1__MTC_USCORENetworkLocationType::sellOnBoard = sellOnBoard;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORENetworkLocationType(struct soap *soap, ns1__MTC_USCORENetworkLocationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_NetworkLocationType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORENetworkLocationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORENetworkLocationType(struct soap *soap, const char *URL, ns1__MTC_USCORENetworkLocationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_NetworkLocationType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORENetworkLocationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORENetworkLocationType(struct soap *soap, const char *URL, ns1__MTC_USCORENetworkLocationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_NetworkLocationType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORENetworkLocationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORENetworkLocationType * SOAP_FMAC4 soap_get_ns1__MTC_USCORENetworkLocationType(struct soap*, ns1__MTC_USCORENetworkLocationType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORENetworkLocationType(struct soap *soap, ns1__MTC_USCORENetworkLocationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORENetworkLocationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORENetworkLocationType(struct soap *soap, const char *URL, ns1__MTC_USCORENetworkLocationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORENetworkLocationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORENetworkLocationType(struct soap *soap, ns1__MTC_USCORENetworkLocationType *p)
{
	if (soap_read_ns1__MTC_USCORENetworkLocationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORELocationType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORELocationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORELocationType(struct soap*, const char*, int, const ns1__MTC_USCORELocationType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORELocationType * SOAP_FMAC4 soap_in_ns1__MTC_USCORELocationType(struct soap*, const char*, ns1__MTC_USCORELocationType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORELocationType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORELocationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORELocationType * soap_new_ns1__MTC_USCORELocationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORELocationType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORELocationType * soap_new_req_ns1__MTC_USCORELocationType(
	struct soap *soap)
{
	ns1__MTC_USCORELocationType *_p = soap_new_ns1__MTC_USCORELocationType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__MTC_USCORELocationType * soap_new_set_ns1__MTC_USCORELocationType(
	struct soap *soap,
	ns1__MTC_USCORENetworkLocationType *network,
	ns1__MTC_USCOREOtherPoint *other,
	char *__item__1)
{
	ns1__MTC_USCORELocationType *_p = soap_new_ns1__MTC_USCORELocationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORELocationType::network = network;
		_p->ns1__MTC_USCORELocationType::other = other;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORELocationType(struct soap *soap, ns1__MTC_USCORELocationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_LocationType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORELocationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORELocationType(struct soap *soap, const char *URL, ns1__MTC_USCORELocationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_LocationType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORELocationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORELocationType(struct soap *soap, const char *URL, ns1__MTC_USCORELocationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_LocationType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORELocationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORELocationType * SOAP_FMAC4 soap_get_ns1__MTC_USCORELocationType(struct soap*, ns1__MTC_USCORELocationType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORELocationType(struct soap *soap, ns1__MTC_USCORELocationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORELocationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORELocationType(struct soap *soap, const char *URL, ns1__MTC_USCORELocationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORELocationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORELocationType(struct soap *soap, ns1__MTC_USCORELocationType *p)
{
	if (soap_read_ns1__MTC_USCORELocationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREBaseTransactionType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREBaseTransactionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREBaseTransactionType(struct soap*, const char*, int, const ns1__MTC_USCOREBaseTransactionType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREBaseTransactionType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREBaseTransactionType(struct soap*, const char*, ns1__MTC_USCOREBaseTransactionType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREBaseTransactionType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREBaseTransactionType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREBaseTransactionType * soap_new_ns1__MTC_USCOREBaseTransactionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREBaseTransactionType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREBaseTransactionType * soap_new_req_ns1__MTC_USCOREBaseTransactionType(
	struct soap *soap,
	ns1__MTC_USCORETransactionIdType *id,
	time_t date_USCOREtime,
	ns1__MTC_USCORELocationType *loc,
	ULONG64 od_USCOREid,
	int __sizelog,
	ns1__MTC_USCORELogValueType **log)
{
	ns1__MTC_USCOREBaseTransactionType *_p = soap_new_ns1__MTC_USCOREBaseTransactionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREBaseTransactionType::id = id;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log;
	}
	return _p;
}

inline ns1__MTC_USCOREBaseTransactionType * soap_new_set_ns1__MTC_USCOREBaseTransactionType(
	struct soap *soap,
	ns1__MTC_USCORETransactionIdType *id,
	time_t date_USCOREtime,
	ns1__MTC_USCORELocationType *loc,
	ULONG64 od_USCOREid,
	ns1__MTC_USCOREConfigVersionTypeList *cv,
	ns1__MTC_USCOREEquipmentInfoType *equip,
	int __sizelog,
	ns1__MTC_USCORELogValueType **log,
	char *__item__1)
{
	ns1__MTC_USCOREBaseTransactionType *_p = soap_new_ns1__MTC_USCOREBaseTransactionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREBaseTransactionType::id = id;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREBaseTransactionType(struct soap *soap, ns1__MTC_USCOREBaseTransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_BaseTransactionType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREBaseTransactionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREBaseTransactionType(struct soap *soap, const char *URL, ns1__MTC_USCOREBaseTransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_BaseTransactionType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREBaseTransactionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREBaseTransactionType(struct soap *soap, const char *URL, ns1__MTC_USCOREBaseTransactionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_BaseTransactionType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREBaseTransactionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREBaseTransactionType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREBaseTransactionType(struct soap*, ns1__MTC_USCOREBaseTransactionType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREBaseTransactionType(struct soap *soap, ns1__MTC_USCOREBaseTransactionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREBaseTransactionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREBaseTransactionType(struct soap *soap, const char *URL, ns1__MTC_USCOREBaseTransactionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREBaseTransactionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREBaseTransactionType(struct soap *soap, ns1__MTC_USCOREBaseTransactionType *p)
{
	if (soap_read_ns1__MTC_USCOREBaseTransactionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREFabricationSusContentType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREFabricationSusContentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREFabricationSusContentType(struct soap*, const char*, int, const ns1__MTC_USCOREFabricationSusContentType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREFabricationSusContentType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREFabricationSusContentType(struct soap*, const char*, ns1__MTC_USCOREFabricationSusContentType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREFabricationSusContentType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREFabricationSusContentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREFabricationSusContentType * soap_new_ns1__MTC_USCOREFabricationSusContentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREFabricationSusContentType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREFabricationSusContentType * soap_new_req_ns1__MTC_USCOREFabricationSusContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned short susType,
	unsigned int hsn,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1)
{
	ns1__MTC_USCOREFabricationSusContentType *_p = soap_new_ns1__MTC_USCOREFabricationSusContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREFabricationSusContentType::susId = susId;
		_p->ns1__MTC_USCOREFabricationSusContentType::susType = susType;
		_p->ns1__MTC_USCOREFabricationSusContentType::hsn = hsn;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
	}
	return _p;
}

inline ns1__MTC_USCOREFabricationSusContentType * soap_new_set_ns1__MTC_USCOREFabricationSusContentType(
	struct soap *soap,
	ULONG64 susId,
	unsigned short susType,
	unsigned int hsn,
	ns1__MTC_USCORETransactionIdType *id__1,
	time_t date_USCOREtime__1,
	ns1__MTC_USCORELocationType *loc__1,
	ULONG64 od_USCOREid__1,
	ns1__MTC_USCOREConfigVersionTypeList *cv__1,
	ns1__MTC_USCOREEquipmentInfoType *equip__1,
	int __sizelog__1,
	ns1__MTC_USCORELogValueType **log__1,
	char *__item__2)
{
	ns1__MTC_USCOREFabricationSusContentType *_p = soap_new_ns1__MTC_USCOREFabricationSusContentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREFabricationSusContentType::susId = susId;
		_p->ns1__MTC_USCOREFabricationSusContentType::susType = susType;
		_p->ns1__MTC_USCOREFabricationSusContentType::hsn = hsn;
		_p->ns1__MTC_USCOREBaseTransactionType::id = id__1;
		_p->ns1__MTC_USCOREBaseTransactionType::date_USCOREtime = date_USCOREtime__1;
		_p->ns1__MTC_USCOREBaseTransactionType::loc = loc__1;
		_p->ns1__MTC_USCOREBaseTransactionType::od_USCOREid = od_USCOREid__1;
		_p->ns1__MTC_USCOREBaseTransactionType::cv = cv__1;
		_p->ns1__MTC_USCOREBaseTransactionType::equip = equip__1;
		_p->ns1__MTC_USCOREBaseTransactionType::__sizelog = __sizelog__1;
		_p->ns1__MTC_USCOREBaseTransactionType::log = log__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREFabricationSusContentType(struct soap *soap, ns1__MTC_USCOREFabricationSusContentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_FabricationSusContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREFabricationSusContentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREFabricationSusContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREFabricationSusContentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_FabricationSusContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREFabricationSusContentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREFabricationSusContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREFabricationSusContentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_FabricationSusContentType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREFabricationSusContentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREFabricationSusContentType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREFabricationSusContentType(struct soap*, ns1__MTC_USCOREFabricationSusContentType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREFabricationSusContentType(struct soap *soap, ns1__MTC_USCOREFabricationSusContentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREFabricationSusContentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREFabricationSusContentType(struct soap *soap, const char *URL, ns1__MTC_USCOREFabricationSusContentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREFabricationSusContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREFabricationSusContentType(struct soap *soap, ns1__MTC_USCOREFabricationSusContentType *p)
{
	if (soap_read_ns1__MTC_USCOREFabricationSusContentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCOREUnsignedTransactionRegType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCOREUnsignedTransactionRegType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap*, const char*, int, const ns1__MTC_USCOREUnsignedTransactionRegType *, const char*);
SOAP_FMAC3 ns1__MTC_USCOREUnsignedTransactionRegType * SOAP_FMAC4 soap_in_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap*, const char*, ns1__MTC_USCOREUnsignedTransactionRegType *, const char*);
SOAP_FMAC1 ns1__MTC_USCOREUnsignedTransactionRegType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCOREUnsignedTransactionRegType * soap_new_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCOREUnsignedTransactionRegType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCOREUnsignedTransactionRegType * soap_new_req_ns1__MTC_USCOREUnsignedTransactionRegType(
	struct soap *soap,
	const union _ns1__union_MTC_USCOREUnsignedTransactionRegType& union_MTC_USCOREUnsignedTransactionRegType)
{
	ns1__MTC_USCOREUnsignedTransactionRegType *_p = soap_new_ns1__MTC_USCOREUnsignedTransactionRegType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREUnsignedTransactionRegType::union_MTC_USCOREUnsignedTransactionRegType = union_MTC_USCOREUnsignedTransactionRegType;
	}
	return _p;
}

inline ns1__MTC_USCOREUnsignedTransactionRegType * soap_new_set_ns1__MTC_USCOREUnsignedTransactionRegType(
	struct soap *soap,
	int __union_MTC_USCOREUnsignedTransactionRegType,
	const union _ns1__union_MTC_USCOREUnsignedTransactionRegType& union_MTC_USCOREUnsignedTransactionRegType,
	char *__item__1)
{
	ns1__MTC_USCOREUnsignedTransactionRegType *_p = soap_new_ns1__MTC_USCOREUnsignedTransactionRegType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCOREUnsignedTransactionRegType::__union_MTC_USCOREUnsignedTransactionRegType = __union_MTC_USCOREUnsignedTransactionRegType;
		_p->ns1__MTC_USCOREUnsignedTransactionRegType::union_MTC_USCOREUnsignedTransactionRegType = union_MTC_USCOREUnsignedTransactionRegType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap *soap, ns1__MTC_USCOREUnsignedTransactionRegType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_UnsignedTransactionRegType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREUnsignedTransactionRegType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap *soap, const char *URL, ns1__MTC_USCOREUnsignedTransactionRegType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_UnsignedTransactionRegType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREUnsignedTransactionRegType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap *soap, const char *URL, ns1__MTC_USCOREUnsignedTransactionRegType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_UnsignedTransactionRegType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCOREUnsignedTransactionRegType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCOREUnsignedTransactionRegType * SOAP_FMAC4 soap_get_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap*, ns1__MTC_USCOREUnsignedTransactionRegType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap *soap, ns1__MTC_USCOREUnsignedTransactionRegType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCOREUnsignedTransactionRegType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap *soap, const char *URL, ns1__MTC_USCOREUnsignedTransactionRegType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCOREUnsignedTransactionRegType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCOREUnsignedTransactionRegType(struct soap *soap, ns1__MTC_USCOREUnsignedTransactionRegType *p)
{
	if (soap_read_ns1__MTC_USCOREUnsignedTransactionRegType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TransactionMTCRegType_DEFINED
#define SOAP_TYPE_ns1__TransactionMTCRegType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransactionMTCRegType(struct soap*, const char*, int, const ns1__TransactionMTCRegType *, const char*);
SOAP_FMAC3 ns1__TransactionMTCRegType * SOAP_FMAC4 soap_in_ns1__TransactionMTCRegType(struct soap*, const char*, ns1__TransactionMTCRegType *, const char*);
SOAP_FMAC1 ns1__TransactionMTCRegType * SOAP_FMAC2 soap_instantiate_ns1__TransactionMTCRegType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransactionMTCRegType * soap_new_ns1__TransactionMTCRegType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TransactionMTCRegType(soap, n, NULL, NULL, NULL);
}

inline ns1__TransactionMTCRegType * soap_new_req_ns1__TransactionMTCRegType(
	struct soap *soap)
{
	ns1__TransactionMTCRegType *_p = soap_new_ns1__TransactionMTCRegType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__TransactionMTCRegType * soap_new_set_ns1__TransactionMTCRegType(
	struct soap *soap,
	xsd__base64Binary *unsignedReg,
	ns1__MTC_USCOREUnsignedTransactionRegType *unsignedRegType,
	ns1__SignedTransactionMTCRegType *signedReg,
	char *__item__1)
{
	ns1__TransactionMTCRegType *_p = soap_new_ns1__TransactionMTCRegType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCRegType::unsignedReg = unsignedReg;
		_p->ns1__TransactionMTCRegType::unsignedRegType = unsignedRegType;
		_p->ns1__TransactionMTCRegType::signedReg = signedReg;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__TransactionMTCRegType(struct soap *soap, ns1__TransactionMTCRegType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCRegType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCRegType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TransactionMTCRegType(struct soap *soap, const char *URL, ns1__TransactionMTCRegType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCRegType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCRegType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TransactionMTCRegType(struct soap *soap, const char *URL, ns1__TransactionMTCRegType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCRegType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCRegType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TransactionMTCRegType * SOAP_FMAC4 soap_get_ns1__TransactionMTCRegType(struct soap*, ns1__TransactionMTCRegType *, const char*, const char*);

inline int soap_read_ns1__TransactionMTCRegType(struct soap *soap, ns1__TransactionMTCRegType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TransactionMTCRegType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TransactionMTCRegType(struct soap *soap, const char *URL, ns1__TransactionMTCRegType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TransactionMTCRegType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TransactionMTCRegType(struct soap *soap, ns1__TransactionMTCRegType *p)
{
	if (soap_read_ns1__TransactionMTCRegType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TransactionMTCRegTypeList_DEFINED
#define SOAP_TYPE_ns1__TransactionMTCRegTypeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransactionMTCRegTypeList(struct soap*, const char*, int, const ns1__TransactionMTCRegTypeList *, const char*);
SOAP_FMAC3 ns1__TransactionMTCRegTypeList * SOAP_FMAC4 soap_in_ns1__TransactionMTCRegTypeList(struct soap*, const char*, ns1__TransactionMTCRegTypeList *, const char*);
SOAP_FMAC1 ns1__TransactionMTCRegTypeList * SOAP_FMAC2 soap_instantiate_ns1__TransactionMTCRegTypeList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransactionMTCRegTypeList * soap_new_ns1__TransactionMTCRegTypeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TransactionMTCRegTypeList(soap, n, NULL, NULL, NULL);
}

inline ns1__TransactionMTCRegTypeList * soap_new_req_ns1__TransactionMTCRegTypeList(
	struct soap *soap,
	int __sizeitems,
	ns1__TransactionMTCRegType **items)
{
	ns1__TransactionMTCRegTypeList *_p = soap_new_ns1__TransactionMTCRegTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCRegTypeList::__sizeitems = __sizeitems;
		_p->ns1__TransactionMTCRegTypeList::items = items;
	}
	return _p;
}

inline ns1__TransactionMTCRegTypeList * soap_new_set_ns1__TransactionMTCRegTypeList(
	struct soap *soap,
	int __sizeitems,
	ns1__TransactionMTCRegType **items,
	char *__item__1)
{
	ns1__TransactionMTCRegTypeList *_p = soap_new_ns1__TransactionMTCRegTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCRegTypeList::__sizeitems = __sizeitems;
		_p->ns1__TransactionMTCRegTypeList::items = items;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__TransactionMTCRegTypeList(struct soap *soap, ns1__TransactionMTCRegTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCRegTypeList", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCRegTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TransactionMTCRegTypeList(struct soap *soap, const char *URL, ns1__TransactionMTCRegTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCRegTypeList", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCRegTypeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TransactionMTCRegTypeList(struct soap *soap, const char *URL, ns1__TransactionMTCRegTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCRegTypeList", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCRegTypeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TransactionMTCRegTypeList * SOAP_FMAC4 soap_get_ns1__TransactionMTCRegTypeList(struct soap*, ns1__TransactionMTCRegTypeList *, const char*, const char*);

inline int soap_read_ns1__TransactionMTCRegTypeList(struct soap *soap, ns1__TransactionMTCRegTypeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TransactionMTCRegTypeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TransactionMTCRegTypeList(struct soap *soap, const char *URL, ns1__TransactionMTCRegTypeList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TransactionMTCRegTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TransactionMTCRegTypeList(struct soap *soap, ns1__TransactionMTCRegTypeList *p)
{
	if (soap_read_ns1__TransactionMTCRegTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCORETransactionResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCORETransactionResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCORETransactionResponseType(struct soap*, const char*, int, const ns1__SrvMTC_USCORETransactionResponseType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionResponseType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCORETransactionResponseType(struct soap*, const char*, ns1__SrvMTC_USCORETransactionResponseType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCORETransactionResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCORETransactionResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCORETransactionResponseType * soap_new_ns1__SrvMTC_USCORETransactionResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCORETransactionResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCORETransactionResponseType * soap_new_req_ns1__SrvMTC_USCORETransactionResponseType(
	struct soap *soap,
	ns1__TransactionMTCRegTypeList *transacList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvMTC_USCORETransactionResponseType *_p = soap_new_ns1__SrvMTC_USCORETransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORETransactionResponseType::transacList = transacList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCORETransactionResponseType * soap_new_set_ns1__SrvMTC_USCORETransactionResponseType(
	struct soap *soap,
	ns1__TransactionMTCRegTypeList *transacList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvMTC_USCORETransactionResponseType *_p = soap_new_ns1__SrvMTC_USCORETransactionResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORETransactionResponseType::transacList = transacList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCORETransactionResponseType(struct soap *soap, ns1__SrvMTC_USCORETransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCORETransactionResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCORETransactionResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionResponseType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCORETransactionResponseType(struct soap*, ns1__SrvMTC_USCORETransactionResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCORETransactionResponseType(struct soap *soap, ns1__SrvMTC_USCORETransactionResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCORETransactionResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCORETransactionResponseType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCORETransactionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCORETransactionResponseType(struct soap *soap, ns1__SrvMTC_USCORETransactionResponseType *p)
{
	if (soap_read_ns1__SrvMTC_USCORETransactionResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SignedRecordType_DEFINED
#define SOAP_TYPE_ns1__SignedRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SignedRecordType(struct soap*, const char*, int, const ns1__SignedRecordType *, const char*);
SOAP_FMAC3 ns1__SignedRecordType * SOAP_FMAC4 soap_in_ns1__SignedRecordType(struct soap*, const char*, ns1__SignedRecordType *, const char*);
SOAP_FMAC1 ns1__SignedRecordType * SOAP_FMAC2 soap_instantiate_ns1__SignedRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SignedRecordType * soap_new_ns1__SignedRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SignedRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__SignedRecordType * soap_new_req_ns1__SignedRecordType(
	struct soap *soap,
	ns1__UnsignedRecordType *record,
	xsd__anyType *signature)
{
	ns1__SignedRecordType *_p = soap_new_ns1__SignedRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SignedRecordType::record = record;
		_p->ns1__SignedRecordType::signature = signature;
	}
	return _p;
}

inline ns1__SignedRecordType * soap_new_set_ns1__SignedRecordType(
	struct soap *soap,
	ns1__UnsignedRecordType *record,
	xsd__anyType *signature,
	char *__item__1)
{
	ns1__SignedRecordType *_p = soap_new_ns1__SignedRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SignedRecordType::record = record;
		_p->ns1__SignedRecordType::signature = signature;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SignedRecordType(struct soap *soap, ns1__SignedRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignedRecordType", p->soap_type() == SOAP_TYPE_ns1__SignedRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SignedRecordType(struct soap *soap, const char *URL, ns1__SignedRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignedRecordType", p->soap_type() == SOAP_TYPE_ns1__SignedRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SignedRecordType(struct soap *soap, const char *URL, ns1__SignedRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SignedRecordType", p->soap_type() == SOAP_TYPE_ns1__SignedRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SignedRecordType * SOAP_FMAC4 soap_get_ns1__SignedRecordType(struct soap*, ns1__SignedRecordType *, const char*, const char*);

inline int soap_read_ns1__SignedRecordType(struct soap *soap, ns1__SignedRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SignedRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SignedRecordType(struct soap *soap, const char *URL, ns1__SignedRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SignedRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SignedRecordType(struct soap *soap, ns1__SignedRecordType *p)
{
	if (soap_read_ns1__SignedRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SamQuotaUpdateRecordType_DEFINED
#define SOAP_TYPE_ns1__SamQuotaUpdateRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SamQuotaUpdateRecordType(struct soap*, const char*, int, const ns1__SamQuotaUpdateRecordType *, const char*);
SOAP_FMAC3 ns1__SamQuotaUpdateRecordType * SOAP_FMAC4 soap_in_ns1__SamQuotaUpdateRecordType(struct soap*, const char*, ns1__SamQuotaUpdateRecordType *, const char*);
SOAP_FMAC1 ns1__SamQuotaUpdateRecordType * SOAP_FMAC2 soap_instantiate_ns1__SamQuotaUpdateRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SamQuotaUpdateRecordType * soap_new_ns1__SamQuotaUpdateRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SamQuotaUpdateRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__SamQuotaUpdateRecordType * soap_new_req_ns1__SamQuotaUpdateRecordType(
	struct soap *soap,
	LONG64 samId,
	LONG64 quota,
	LONG64 oldQuota,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__SamQuotaUpdateRecordType *_p = soap_new_ns1__SamQuotaUpdateRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SamQuotaUpdateRecordType::samId = samId;
		_p->ns1__SamQuotaUpdateRecordType::quota = quota;
		_p->ns1__SamQuotaUpdateRecordType::oldQuota = oldQuota;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__SamQuotaUpdateRecordType * soap_new_set_ns1__SamQuotaUpdateRecordType(
	struct soap *soap,
	LONG64 samId,
	LONG64 quota,
	LONG64 oldQuota,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__SamQuotaUpdateRecordType *_p = soap_new_ns1__SamQuotaUpdateRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SamQuotaUpdateRecordType::samId = samId;
		_p->ns1__SamQuotaUpdateRecordType::quota = quota;
		_p->ns1__SamQuotaUpdateRecordType::oldQuota = oldQuota;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SamQuotaUpdateRecordType(struct soap *soap, ns1__SamQuotaUpdateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SamQuotaUpdateRecordType", p->soap_type() == SOAP_TYPE_ns1__SamQuotaUpdateRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SamQuotaUpdateRecordType(struct soap *soap, const char *URL, ns1__SamQuotaUpdateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SamQuotaUpdateRecordType", p->soap_type() == SOAP_TYPE_ns1__SamQuotaUpdateRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SamQuotaUpdateRecordType(struct soap *soap, const char *URL, ns1__SamQuotaUpdateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SamQuotaUpdateRecordType", p->soap_type() == SOAP_TYPE_ns1__SamQuotaUpdateRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SamQuotaUpdateRecordType * SOAP_FMAC4 soap_get_ns1__SamQuotaUpdateRecordType(struct soap*, ns1__SamQuotaUpdateRecordType *, const char*, const char*);

inline int soap_read_ns1__SamQuotaUpdateRecordType(struct soap *soap, ns1__SamQuotaUpdateRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SamQuotaUpdateRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SamQuotaUpdateRecordType(struct soap *soap, const char *URL, ns1__SamQuotaUpdateRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SamQuotaUpdateRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SamQuotaUpdateRecordType(struct soap *soap, ns1__SamQuotaUpdateRecordType *p)
{
	if (soap_read_ns1__SamQuotaUpdateRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Vehicle_DEFINED
#define SOAP_TYPE_ns1__Vehicle_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Vehicle(struct soap*, const char*, int, const ns1__Vehicle *, const char*);
SOAP_FMAC3 ns1__Vehicle * SOAP_FMAC4 soap_in_ns1__Vehicle(struct soap*, const char*, ns1__Vehicle *, const char*);
SOAP_FMAC1 ns1__Vehicle * SOAP_FMAC2 soap_instantiate_ns1__Vehicle(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Vehicle * soap_new_ns1__Vehicle(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Vehicle(soap, n, NULL, NULL, NULL);
}

inline ns1__Vehicle * soap_new_req_ns1__Vehicle(
	struct soap *soap,
	unsigned int type)
{
	ns1__Vehicle *_p = soap_new_ns1__Vehicle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Vehicle::type = type;
	}
	return _p;
}

inline ns1__Vehicle * soap_new_set_ns1__Vehicle(
	struct soap *soap,
	unsigned int type,
	char *plate,
	char *__item__1)
{
	ns1__Vehicle *_p = soap_new_ns1__Vehicle(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Vehicle::type = type;
		_p->ns1__Vehicle::plate = plate;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__Vehicle(struct soap *soap, ns1__Vehicle const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Vehicle", p->soap_type() == SOAP_TYPE_ns1__Vehicle ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Vehicle(struct soap *soap, const char *URL, ns1__Vehicle const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Vehicle", p->soap_type() == SOAP_TYPE_ns1__Vehicle ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Vehicle(struct soap *soap, const char *URL, ns1__Vehicle const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Vehicle", p->soap_type() == SOAP_TYPE_ns1__Vehicle ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Vehicle * SOAP_FMAC4 soap_get_ns1__Vehicle(struct soap*, ns1__Vehicle *, const char*, const char*);

inline int soap_read_ns1__Vehicle(struct soap *soap, ns1__Vehicle *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Vehicle(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Vehicle(struct soap *soap, const char *URL, ns1__Vehicle *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Vehicle(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Vehicle(struct soap *soap, ns1__Vehicle *p)
{
	if (soap_read_ns1__Vehicle(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ParkingValidationInfo_DEFINED
#define SOAP_TYPE_ns1__ParkingValidationInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ParkingValidationInfo(struct soap*, const char*, int, const ns1__ParkingValidationInfo *, const char*);
SOAP_FMAC3 ns1__ParkingValidationInfo * SOAP_FMAC4 soap_in_ns1__ParkingValidationInfo(struct soap*, const char*, ns1__ParkingValidationInfo *, const char*);
SOAP_FMAC1 ns1__ParkingValidationInfo * SOAP_FMAC2 soap_instantiate_ns1__ParkingValidationInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ParkingValidationInfo * soap_new_ns1__ParkingValidationInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ParkingValidationInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__ParkingValidationInfo * soap_new_req_ns1__ParkingValidationInfo(
	struct soap *soap,
	unsigned int type,
	unsigned int rslt,
	ns1__Vehicle *veh)
{
	ns1__ParkingValidationInfo *_p = soap_new_ns1__ParkingValidationInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ParkingValidationInfo::type = type;
		_p->ns1__ParkingValidationInfo::rslt = rslt;
		_p->ns1__ParkingValidationInfo::veh = veh;
	}
	return _p;
}

inline ns1__ParkingValidationInfo * soap_new_set_ns1__ParkingValidationInfo(
	struct soap *soap,
	unsigned int type,
	unsigned int rslt,
	ns1__Vehicle *veh,
	bool *test,
	char *__item__1)
{
	ns1__ParkingValidationInfo *_p = soap_new_ns1__ParkingValidationInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ParkingValidationInfo::type = type;
		_p->ns1__ParkingValidationInfo::rslt = rslt;
		_p->ns1__ParkingValidationInfo::veh = veh;
		_p->ns1__ParkingValidationInfo::test = test;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ParkingValidationInfo(struct soap *soap, ns1__ParkingValidationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParkingValidationInfo", p->soap_type() == SOAP_TYPE_ns1__ParkingValidationInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ParkingValidationInfo(struct soap *soap, const char *URL, ns1__ParkingValidationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParkingValidationInfo", p->soap_type() == SOAP_TYPE_ns1__ParkingValidationInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ParkingValidationInfo(struct soap *soap, const char *URL, ns1__ParkingValidationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParkingValidationInfo", p->soap_type() == SOAP_TYPE_ns1__ParkingValidationInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ParkingValidationInfo * SOAP_FMAC4 soap_get_ns1__ParkingValidationInfo(struct soap*, ns1__ParkingValidationInfo *, const char*, const char*);

inline int soap_read_ns1__ParkingValidationInfo(struct soap *soap, ns1__ParkingValidationInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ParkingValidationInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ParkingValidationInfo(struct soap *soap, const char *URL, ns1__ParkingValidationInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ParkingValidationInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ParkingValidationInfo(struct soap *soap, ns1__ParkingValidationInfo *p)
{
	if (soap_read_ns1__ParkingValidationInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ParkingValidationRecord_DEFINED
#define SOAP_TYPE_ns1__ParkingValidationRecord_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ParkingValidationRecord(struct soap*, const char*, int, const ns1__ParkingValidationRecord *, const char*);
SOAP_FMAC3 ns1__ParkingValidationRecord * SOAP_FMAC4 soap_in_ns1__ParkingValidationRecord(struct soap*, const char*, ns1__ParkingValidationRecord *, const char*);
SOAP_FMAC1 ns1__ParkingValidationRecord * SOAP_FMAC2 soap_instantiate_ns1__ParkingValidationRecord(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ParkingValidationRecord * soap_new_ns1__ParkingValidationRecord(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ParkingValidationRecord(soap, n, NULL, NULL, NULL);
}

inline ns1__ParkingValidationRecord * soap_new_req_ns1__ParkingValidationRecord(
	struct soap *soap,
	ns1__ParkingValidationInfo *valInfo,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__ParkingValidationRecord *_p = soap_new_ns1__ParkingValidationRecord(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ParkingValidationRecord::valInfo = valInfo;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__ParkingValidationRecord * soap_new_set_ns1__ParkingValidationRecord(
	struct soap *soap,
	ns1__shiftType *shift,
	ns1__FareInfo *fareInfo,
	ns1__ParkingValidationInfo *valInfo,
	ULONG64 *sam,
	ns1__cardIdentificationType *card,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	ns1__RecordIdType *relTrans,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__ParkingValidationRecord *_p = soap_new_ns1__ParkingValidationRecord(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ParkingValidationRecord::shift = shift;
		_p->ns1__ParkingValidationRecord::fareInfo = fareInfo;
		_p->ns1__ParkingValidationRecord::valInfo = valInfo;
		_p->ns1__ParkingValidationRecord::sam = sam;
		_p->ns1__ParkingValidationRecord::card = card;
		_p->ns1__ParkingValidationRecord::ctlInfo = ctlInfo;
		_p->ns1__ParkingValidationRecord::ctlData = ctlData;
		_p->ns1__ParkingValidationRecord::cData = cData;
		_p->ns1__ParkingValidationRecord::rawData = rawData;
		_p->ns1__ParkingValidationRecord::relTrans = relTrans;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__ParkingValidationRecord(struct soap *soap, ns1__ParkingValidationRecord const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParkingValidationRecord", p->soap_type() == SOAP_TYPE_ns1__ParkingValidationRecord ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ParkingValidationRecord(struct soap *soap, const char *URL, ns1__ParkingValidationRecord const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParkingValidationRecord", p->soap_type() == SOAP_TYPE_ns1__ParkingValidationRecord ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ParkingValidationRecord(struct soap *soap, const char *URL, ns1__ParkingValidationRecord const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParkingValidationRecord", p->soap_type() == SOAP_TYPE_ns1__ParkingValidationRecord ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ParkingValidationRecord * SOAP_FMAC4 soap_get_ns1__ParkingValidationRecord(struct soap*, ns1__ParkingValidationRecord *, const char*, const char*);

inline int soap_read_ns1__ParkingValidationRecord(struct soap *soap, ns1__ParkingValidationRecord *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ParkingValidationRecord(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ParkingValidationRecord(struct soap *soap, const char *URL, ns1__ParkingValidationRecord *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ParkingValidationRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ParkingValidationRecord(struct soap *soap, ns1__ParkingValidationRecord *p)
{
	if (soap_read_ns1__ParkingValidationRecord(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__IncidenceRecordType_DEFINED
#define SOAP_TYPE_ns1__IncidenceRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__IncidenceRecordType(struct soap*, const char*, int, const ns1__IncidenceRecordType *, const char*);
SOAP_FMAC3 ns1__IncidenceRecordType * SOAP_FMAC4 soap_in_ns1__IncidenceRecordType(struct soap*, const char*, ns1__IncidenceRecordType *, const char*);
SOAP_FMAC1 ns1__IncidenceRecordType * SOAP_FMAC2 soap_instantiate_ns1__IncidenceRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__IncidenceRecordType * soap_new_ns1__IncidenceRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__IncidenceRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__IncidenceRecordType * soap_new_req_ns1__IncidenceRecordType(
	struct soap *soap,
	int incidenceId,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__IncidenceRecordType *_p = soap_new_ns1__IncidenceRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__IncidenceRecordType::incidenceId = incidenceId;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__IncidenceRecordType * soap_new_set_ns1__IncidenceRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	int incidenceId,
	int *outComeId,
	char *desc,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__IncidenceRecordType *_p = soap_new_ns1__IncidenceRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__IncidenceRecordType::shift = shift;
		_p->ns1__IncidenceRecordType::incidenceId = incidenceId;
		_p->ns1__IncidenceRecordType::outComeId = outComeId;
		_p->ns1__IncidenceRecordType::desc = desc;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__IncidenceRecordType(struct soap *soap, ns1__IncidenceRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IncidenceRecordType", p->soap_type() == SOAP_TYPE_ns1__IncidenceRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__IncidenceRecordType(struct soap *soap, const char *URL, ns1__IncidenceRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IncidenceRecordType", p->soap_type() == SOAP_TYPE_ns1__IncidenceRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__IncidenceRecordType(struct soap *soap, const char *URL, ns1__IncidenceRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IncidenceRecordType", p->soap_type() == SOAP_TYPE_ns1__IncidenceRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__IncidenceRecordType * SOAP_FMAC4 soap_get_ns1__IncidenceRecordType(struct soap*, ns1__IncidenceRecordType *, const char*, const char*);

inline int soap_read_ns1__IncidenceRecordType(struct soap *soap, ns1__IncidenceRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__IncidenceRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__IncidenceRecordType(struct soap *soap, const char *URL, ns1__IncidenceRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__IncidenceRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__IncidenceRecordType(struct soap *soap, ns1__IncidenceRecordType *p)
{
	if (soap_read_ns1__IncidenceRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__EndTripRecordType_DEFINED
#define SOAP_TYPE_ns1__EndTripRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EndTripRecordType(struct soap*, const char*, int, const ns1__EndTripRecordType *, const char*);
SOAP_FMAC3 ns1__EndTripRecordType * SOAP_FMAC4 soap_in_ns1__EndTripRecordType(struct soap*, const char*, ns1__EndTripRecordType *, const char*);
SOAP_FMAC1 ns1__EndTripRecordType * SOAP_FMAC2 soap_instantiate_ns1__EndTripRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EndTripRecordType * soap_new_ns1__EndTripRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EndTripRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__EndTripRecordType * soap_new_req_ns1__EndTripRecordType(
	struct soap *soap,
	time_t realEndTime,
	LONG64 totalAmount,
	ns1__dataReportListType *drL,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__EndTripRecordType *_p = soap_new_ns1__EndTripRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EndTripRecordType::realEndTime = realEndTime;
		_p->ns1__EndTripRecordType::totalAmount = totalAmount;
		_p->ns1__EndTripRecordType::drL = drL;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__EndTripRecordType * soap_new_set_ns1__EndTripRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	time_t realEndTime,
	LONG64 totalAmount,
	ns1__dataReportListType *drL,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__EndTripRecordType *_p = soap_new_ns1__EndTripRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EndTripRecordType::shift = shift;
		_p->ns1__EndTripRecordType::realEndTime = realEndTime;
		_p->ns1__EndTripRecordType::totalAmount = totalAmount;
		_p->ns1__EndTripRecordType::drL = drL;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__EndTripRecordType(struct soap *soap, ns1__EndTripRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndTripRecordType", p->soap_type() == SOAP_TYPE_ns1__EndTripRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EndTripRecordType(struct soap *soap, const char *URL, ns1__EndTripRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndTripRecordType", p->soap_type() == SOAP_TYPE_ns1__EndTripRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EndTripRecordType(struct soap *soap, const char *URL, ns1__EndTripRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndTripRecordType", p->soap_type() == SOAP_TYPE_ns1__EndTripRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EndTripRecordType * SOAP_FMAC4 soap_get_ns1__EndTripRecordType(struct soap*, ns1__EndTripRecordType *, const char*, const char*);

inline int soap_read_ns1__EndTripRecordType(struct soap *soap, ns1__EndTripRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__EndTripRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EndTripRecordType(struct soap *soap, const char *URL, ns1__EndTripRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__EndTripRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__EndTripRecordType(struct soap *soap, ns1__EndTripRecordType *p)
{
	if (soap_read_ns1__EndTripRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StartTripRecordType_DEFINED
#define SOAP_TYPE_ns1__StartTripRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StartTripRecordType(struct soap*, const char*, int, const ns1__StartTripRecordType *, const char*);
SOAP_FMAC3 ns1__StartTripRecordType * SOAP_FMAC4 soap_in_ns1__StartTripRecordType(struct soap*, const char*, ns1__StartTripRecordType *, const char*);
SOAP_FMAC1 ns1__StartTripRecordType * SOAP_FMAC2 soap_instantiate_ns1__StartTripRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StartTripRecordType * soap_new_ns1__StartTripRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StartTripRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__StartTripRecordType * soap_new_req_ns1__StartTripRecordType(
	struct soap *soap,
	LONG64 effortNum,
	time_t thExitTime,
	time_t realExitTime,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__StartTripRecordType *_p = soap_new_ns1__StartTripRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StartTripRecordType::effortNum = effortNum;
		_p->ns1__StartTripRecordType::thExitTime = thExitTime;
		_p->ns1__StartTripRecordType::realExitTime = realExitTime;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__StartTripRecordType * soap_new_set_ns1__StartTripRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 effortNum,
	time_t thExitTime,
	time_t realExitTime,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__StartTripRecordType *_p = soap_new_ns1__StartTripRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StartTripRecordType::shift = shift;
		_p->ns1__StartTripRecordType::effortNum = effortNum;
		_p->ns1__StartTripRecordType::thExitTime = thExitTime;
		_p->ns1__StartTripRecordType::realExitTime = realExitTime;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__StartTripRecordType(struct soap *soap, ns1__StartTripRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartTripRecordType", p->soap_type() == SOAP_TYPE_ns1__StartTripRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StartTripRecordType(struct soap *soap, const char *URL, ns1__StartTripRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartTripRecordType", p->soap_type() == SOAP_TYPE_ns1__StartTripRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StartTripRecordType(struct soap *soap, const char *URL, ns1__StartTripRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartTripRecordType", p->soap_type() == SOAP_TYPE_ns1__StartTripRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StartTripRecordType * SOAP_FMAC4 soap_get_ns1__StartTripRecordType(struct soap*, ns1__StartTripRecordType *, const char*, const char*);

inline int soap_read_ns1__StartTripRecordType(struct soap *soap, ns1__StartTripRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__StartTripRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StartTripRecordType(struct soap *soap, const char *URL, ns1__StartTripRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StartTripRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StartTripRecordType(struct soap *soap, ns1__StartTripRecordType *p)
{
	if (soap_read_ns1__StartTripRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StationModeChangeRecordType_DEFINED
#define SOAP_TYPE_ns1__StationModeChangeRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StationModeChangeRecordType(struct soap*, const char*, int, const ns1__StationModeChangeRecordType *, const char*);
SOAP_FMAC3 ns1__StationModeChangeRecordType * SOAP_FMAC4 soap_in_ns1__StationModeChangeRecordType(struct soap*, const char*, ns1__StationModeChangeRecordType *, const char*);
SOAP_FMAC1 ns1__StationModeChangeRecordType * SOAP_FMAC2 soap_instantiate_ns1__StationModeChangeRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StationModeChangeRecordType * soap_new_ns1__StationModeChangeRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StationModeChangeRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__StationModeChangeRecordType * soap_new_req_ns1__StationModeChangeRecordType(
	struct soap *soap,
	LONG64 cs,
	LONG64 h,
	LONG64 sm,
	LONG64 osm,
	LONG64 userId,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__StationModeChangeRecordType *_p = soap_new_ns1__StationModeChangeRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StationModeChangeRecordType::cs = cs;
		_p->ns1__StationModeChangeRecordType::h = h;
		_p->ns1__StationModeChangeRecordType::sm = sm;
		_p->ns1__StationModeChangeRecordType::osm = osm;
		_p->ns1__StationModeChangeRecordType::userId = userId;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__StationModeChangeRecordType * soap_new_set_ns1__StationModeChangeRecordType(
	struct soap *soap,
	LONG64 cs,
	LONG64 h,
	LONG64 sm,
	LONG64 osm,
	LONG64 userId,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__StationModeChangeRecordType *_p = soap_new_ns1__StationModeChangeRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StationModeChangeRecordType::cs = cs;
		_p->ns1__StationModeChangeRecordType::h = h;
		_p->ns1__StationModeChangeRecordType::sm = sm;
		_p->ns1__StationModeChangeRecordType::osm = osm;
		_p->ns1__StationModeChangeRecordType::userId = userId;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__StationModeChangeRecordType(struct soap *soap, ns1__StationModeChangeRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StationModeChangeRecordType", p->soap_type() == SOAP_TYPE_ns1__StationModeChangeRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StationModeChangeRecordType(struct soap *soap, const char *URL, ns1__StationModeChangeRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StationModeChangeRecordType", p->soap_type() == SOAP_TYPE_ns1__StationModeChangeRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StationModeChangeRecordType(struct soap *soap, const char *URL, ns1__StationModeChangeRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StationModeChangeRecordType", p->soap_type() == SOAP_TYPE_ns1__StationModeChangeRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StationModeChangeRecordType * SOAP_FMAC4 soap_get_ns1__StationModeChangeRecordType(struct soap*, ns1__StationModeChangeRecordType *, const char*, const char*);

inline int soap_read_ns1__StationModeChangeRecordType(struct soap *soap, ns1__StationModeChangeRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__StationModeChangeRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StationModeChangeRecordType(struct soap *soap, const char *URL, ns1__StationModeChangeRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StationModeChangeRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StationModeChangeRecordType(struct soap *soap, ns1__StationModeChangeRecordType *p)
{
	if (soap_read_ns1__StationModeChangeRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MaintenanceAccessRecordType_DEFINED
#define SOAP_TYPE_ns1__MaintenanceAccessRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MaintenanceAccessRecordType(struct soap*, const char*, int, const ns1__MaintenanceAccessRecordType *, const char*);
SOAP_FMAC3 ns1__MaintenanceAccessRecordType * SOAP_FMAC4 soap_in_ns1__MaintenanceAccessRecordType(struct soap*, const char*, ns1__MaintenanceAccessRecordType *, const char*);
SOAP_FMAC1 ns1__MaintenanceAccessRecordType * SOAP_FMAC2 soap_instantiate_ns1__MaintenanceAccessRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MaintenanceAccessRecordType * soap_new_ns1__MaintenanceAccessRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MaintenanceAccessRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__MaintenanceAccessRecordType * soap_new_req_ns1__MaintenanceAccessRecordType(
	struct soap *soap,
	int idT,
	int op,
	LONG64 mainteUser,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__MaintenanceAccessRecordType *_p = soap_new_ns1__MaintenanceAccessRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MaintenanceAccessRecordType::idT = idT;
		_p->ns1__MaintenanceAccessRecordType::op = op;
		_p->ns1__MaintenanceAccessRecordType::mainteUser = mainteUser;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__MaintenanceAccessRecordType * soap_new_set_ns1__MaintenanceAccessRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	int idT,
	int op,
	LONG64 mainteUser,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__MaintenanceAccessRecordType *_p = soap_new_ns1__MaintenanceAccessRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MaintenanceAccessRecordType::shift = shift;
		_p->ns1__MaintenanceAccessRecordType::idT = idT;
		_p->ns1__MaintenanceAccessRecordType::op = op;
		_p->ns1__MaintenanceAccessRecordType::mainteUser = mainteUser;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MaintenanceAccessRecordType(struct soap *soap, ns1__MaintenanceAccessRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MaintenanceAccessRecordType", p->soap_type() == SOAP_TYPE_ns1__MaintenanceAccessRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MaintenanceAccessRecordType(struct soap *soap, const char *URL, ns1__MaintenanceAccessRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MaintenanceAccessRecordType", p->soap_type() == SOAP_TYPE_ns1__MaintenanceAccessRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MaintenanceAccessRecordType(struct soap *soap, const char *URL, ns1__MaintenanceAccessRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MaintenanceAccessRecordType", p->soap_type() == SOAP_TYPE_ns1__MaintenanceAccessRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MaintenanceAccessRecordType * SOAP_FMAC4 soap_get_ns1__MaintenanceAccessRecordType(struct soap*, ns1__MaintenanceAccessRecordType *, const char*, const char*);

inline int soap_read_ns1__MaintenanceAccessRecordType(struct soap *soap, ns1__MaintenanceAccessRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MaintenanceAccessRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MaintenanceAccessRecordType(struct soap *soap, const char *URL, ns1__MaintenanceAccessRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MaintenanceAccessRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MaintenanceAccessRecordType(struct soap *soap, ns1__MaintenanceAccessRecordType *p)
{
	if (soap_read_ns1__MaintenanceAccessRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LoginFailureRecordType_DEFINED
#define SOAP_TYPE_ns1__LoginFailureRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LoginFailureRecordType(struct soap*, const char*, int, const ns1__LoginFailureRecordType *, const char*);
SOAP_FMAC3 ns1__LoginFailureRecordType * SOAP_FMAC4 soap_in_ns1__LoginFailureRecordType(struct soap*, const char*, ns1__LoginFailureRecordType *, const char*);
SOAP_FMAC1 ns1__LoginFailureRecordType * SOAP_FMAC2 soap_instantiate_ns1__LoginFailureRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LoginFailureRecordType * soap_new_ns1__LoginFailureRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LoginFailureRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__LoginFailureRecordType * soap_new_req_ns1__LoginFailureRecordType(
	struct soap *soap,
	int idT,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__LoginFailureRecordType *_p = soap_new_ns1__LoginFailureRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LoginFailureRecordType::idT = idT;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__LoginFailureRecordType * soap_new_set_ns1__LoginFailureRecordType(
	struct soap *soap,
	char *login,
	LONG64 *userId,
	int idT,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__LoginFailureRecordType *_p = soap_new_ns1__LoginFailureRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LoginFailureRecordType::login = login;
		_p->ns1__LoginFailureRecordType::userId = userId;
		_p->ns1__LoginFailureRecordType::idT = idT;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__LoginFailureRecordType(struct soap *soap, ns1__LoginFailureRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginFailureRecordType", p->soap_type() == SOAP_TYPE_ns1__LoginFailureRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LoginFailureRecordType(struct soap *soap, const char *URL, ns1__LoginFailureRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginFailureRecordType", p->soap_type() == SOAP_TYPE_ns1__LoginFailureRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LoginFailureRecordType(struct soap *soap, const char *URL, ns1__LoginFailureRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LoginFailureRecordType", p->soap_type() == SOAP_TYPE_ns1__LoginFailureRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LoginFailureRecordType * SOAP_FMAC4 soap_get_ns1__LoginFailureRecordType(struct soap*, ns1__LoginFailureRecordType *, const char*, const char*);

inline int soap_read_ns1__LoginFailureRecordType(struct soap *soap, ns1__LoginFailureRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LoginFailureRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LoginFailureRecordType(struct soap *soap, const char *URL, ns1__LoginFailureRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LoginFailureRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LoginFailureRecordType(struct soap *soap, ns1__LoginFailureRecordType *p)
{
	if (soap_read_ns1__LoginFailureRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LocationChangeRecordType_DEFINED
#define SOAP_TYPE_ns1__LocationChangeRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LocationChangeRecordType(struct soap*, const char*, int, const ns1__LocationChangeRecordType *, const char*);
SOAP_FMAC3 ns1__LocationChangeRecordType * SOAP_FMAC4 soap_in_ns1__LocationChangeRecordType(struct soap*, const char*, ns1__LocationChangeRecordType *, const char*);
SOAP_FMAC1 ns1__LocationChangeRecordType * SOAP_FMAC2 soap_instantiate_ns1__LocationChangeRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LocationChangeRecordType * soap_new_ns1__LocationChangeRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LocationChangeRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__LocationChangeRecordType * soap_new_req_ns1__LocationChangeRecordType(
	struct soap *soap,
	LONG64 pS,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__LocationChangeRecordType *_p = soap_new_ns1__LocationChangeRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LocationChangeRecordType::pS = pS;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__LocationChangeRecordType * soap_new_set_ns1__LocationChangeRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 pS,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__LocationChangeRecordType *_p = soap_new_ns1__LocationChangeRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LocationChangeRecordType::shift = shift;
		_p->ns1__LocationChangeRecordType::pS = pS;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__LocationChangeRecordType(struct soap *soap, ns1__LocationChangeRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationChangeRecordType", p->soap_type() == SOAP_TYPE_ns1__LocationChangeRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LocationChangeRecordType(struct soap *soap, const char *URL, ns1__LocationChangeRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationChangeRecordType", p->soap_type() == SOAP_TYPE_ns1__LocationChangeRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LocationChangeRecordType(struct soap *soap, const char *URL, ns1__LocationChangeRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationChangeRecordType", p->soap_type() == SOAP_TYPE_ns1__LocationChangeRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LocationChangeRecordType * SOAP_FMAC4 soap_get_ns1__LocationChangeRecordType(struct soap*, ns1__LocationChangeRecordType *, const char*, const char*);

inline int soap_read_ns1__LocationChangeRecordType(struct soap *soap, ns1__LocationChangeRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LocationChangeRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LocationChangeRecordType(struct soap *soap, const char *URL, ns1__LocationChangeRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LocationChangeRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LocationChangeRecordType(struct soap *soap, ns1__LocationChangeRecordType *p)
{
	if (soap_read_ns1__LocationChangeRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CsmInitializationRecordType_DEFINED
#define SOAP_TYPE_ns1__CsmInitializationRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CsmInitializationRecordType(struct soap*, const char*, int, const ns1__CsmInitializationRecordType *, const char*);
SOAP_FMAC3 ns1__CsmInitializationRecordType * SOAP_FMAC4 soap_in_ns1__CsmInitializationRecordType(struct soap*, const char*, ns1__CsmInitializationRecordType *, const char*);
SOAP_FMAC1 ns1__CsmInitializationRecordType * SOAP_FMAC2 soap_instantiate_ns1__CsmInitializationRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CsmInitializationRecordType * soap_new_ns1__CsmInitializationRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CsmInitializationRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CsmInitializationRecordType * soap_new_req_ns1__CsmInitializationRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CsmInitializationRecordType *_p = soap_new_ns1__CsmInitializationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CsmInitializationRecordType * soap_new_set_ns1__CsmInitializationRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 *mediaType,
	LONG64 *mediaId,
	LONG64 *swSerialNumber,
	LONG64 *hwSerialNumber,
	ns1__SamType *sam,
	int *result,
	unsigned int *opType,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CsmInitializationRecordType *_p = soap_new_ns1__CsmInitializationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CsmInitializationRecordType::shift = shift;
		_p->ns1__CsmInitializationRecordType::mediaType = mediaType;
		_p->ns1__CsmInitializationRecordType::mediaId = mediaId;
		_p->ns1__CsmInitializationRecordType::swSerialNumber = swSerialNumber;
		_p->ns1__CsmInitializationRecordType::hwSerialNumber = hwSerialNumber;
		_p->ns1__CsmInitializationRecordType::sam = sam;
		_p->ns1__CsmInitializationRecordType::result = result;
		_p->ns1__CsmInitializationRecordType::opType = opType;
		_p->ns1__CsmInitializationRecordType::ctlInfo = ctlInfo;
		_p->ns1__CsmInitializationRecordType::ctlData = ctlData;
		_p->ns1__CsmInitializationRecordType::cData = cData;
		_p->ns1__CsmInitializationRecordType::rawData = rawData;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CsmInitializationRecordType(struct soap *soap, ns1__CsmInitializationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CsmInitializationRecordType", p->soap_type() == SOAP_TYPE_ns1__CsmInitializationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CsmInitializationRecordType(struct soap *soap, const char *URL, ns1__CsmInitializationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CsmInitializationRecordType", p->soap_type() == SOAP_TYPE_ns1__CsmInitializationRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CsmInitializationRecordType(struct soap *soap, const char *URL, ns1__CsmInitializationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CsmInitializationRecordType", p->soap_type() == SOAP_TYPE_ns1__CsmInitializationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CsmInitializationRecordType * SOAP_FMAC4 soap_get_ns1__CsmInitializationRecordType(struct soap*, ns1__CsmInitializationRecordType *, const char*, const char*);

inline int soap_read_ns1__CsmInitializationRecordType(struct soap *soap, ns1__CsmInitializationRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CsmInitializationRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CsmInitializationRecordType(struct soap *soap, const char *URL, ns1__CsmInitializationRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CsmInitializationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CsmInitializationRecordType(struct soap *soap, ns1__CsmInitializationRecordType *p)
{
	if (soap_read_ns1__CsmInitializationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CsmUnblockingRecordType_DEFINED
#define SOAP_TYPE_ns1__CsmUnblockingRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CsmUnblockingRecordType(struct soap*, const char*, int, const ns1__CsmUnblockingRecordType *, const char*);
SOAP_FMAC3 ns1__CsmUnblockingRecordType * SOAP_FMAC4 soap_in_ns1__CsmUnblockingRecordType(struct soap*, const char*, ns1__CsmUnblockingRecordType *, const char*);
SOAP_FMAC1 ns1__CsmUnblockingRecordType * SOAP_FMAC2 soap_instantiate_ns1__CsmUnblockingRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CsmUnblockingRecordType * soap_new_ns1__CsmUnblockingRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CsmUnblockingRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CsmUnblockingRecordType * soap_new_req_ns1__CsmUnblockingRecordType(
	struct soap *soap,
	LONG64 csmSN,
	unsigned short reason,
	LONG64 mT,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CsmUnblockingRecordType *_p = soap_new_ns1__CsmUnblockingRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CsmUnblockingRecordType::csmSN = csmSN;
		_p->ns1__CsmUnblockingRecordType::reason = reason;
		_p->ns1__CsmUnblockingRecordType::mT = mT;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CsmUnblockingRecordType * soap_new_set_ns1__CsmUnblockingRecordType(
	struct soap *soap,
	LONG64 csmSN,
	unsigned short reason,
	LONG64 mT,
	ns1__SamType *sam,
	unsigned int *opType,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CsmUnblockingRecordType *_p = soap_new_ns1__CsmUnblockingRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CsmUnblockingRecordType::csmSN = csmSN;
		_p->ns1__CsmUnblockingRecordType::reason = reason;
		_p->ns1__CsmUnblockingRecordType::mT = mT;
		_p->ns1__CsmUnblockingRecordType::sam = sam;
		_p->ns1__CsmUnblockingRecordType::opType = opType;
		_p->ns1__CsmUnblockingRecordType::ctlInfo = ctlInfo;
		_p->ns1__CsmUnblockingRecordType::ctlData = ctlData;
		_p->ns1__CsmUnblockingRecordType::cData = cData;
		_p->ns1__CsmUnblockingRecordType::rawData = rawData;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CsmUnblockingRecordType(struct soap *soap, ns1__CsmUnblockingRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CsmUnblockingRecordType", p->soap_type() == SOAP_TYPE_ns1__CsmUnblockingRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CsmUnblockingRecordType(struct soap *soap, const char *URL, ns1__CsmUnblockingRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CsmUnblockingRecordType", p->soap_type() == SOAP_TYPE_ns1__CsmUnblockingRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CsmUnblockingRecordType(struct soap *soap, const char *URL, ns1__CsmUnblockingRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CsmUnblockingRecordType", p->soap_type() == SOAP_TYPE_ns1__CsmUnblockingRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CsmUnblockingRecordType * SOAP_FMAC4 soap_get_ns1__CsmUnblockingRecordType(struct soap*, ns1__CsmUnblockingRecordType *, const char*, const char*);

inline int soap_read_ns1__CsmUnblockingRecordType(struct soap *soap, ns1__CsmUnblockingRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CsmUnblockingRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CsmUnblockingRecordType(struct soap *soap, const char *URL, ns1__CsmUnblockingRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CsmUnblockingRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CsmUnblockingRecordType(struct soap *soap, ns1__CsmUnblockingRecordType *p)
{
	if (soap_read_ns1__CsmUnblockingRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CsmBlockingRecordType_DEFINED
#define SOAP_TYPE_ns1__CsmBlockingRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CsmBlockingRecordType(struct soap*, const char*, int, const ns1__CsmBlockingRecordType *, const char*);
SOAP_FMAC3 ns1__CsmBlockingRecordType * SOAP_FMAC4 soap_in_ns1__CsmBlockingRecordType(struct soap*, const char*, ns1__CsmBlockingRecordType *, const char*);
SOAP_FMAC1 ns1__CsmBlockingRecordType * SOAP_FMAC2 soap_instantiate_ns1__CsmBlockingRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CsmBlockingRecordType * soap_new_ns1__CsmBlockingRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CsmBlockingRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CsmBlockingRecordType * soap_new_req_ns1__CsmBlockingRecordType(
	struct soap *soap,
	LONG64 csmSN,
	unsigned short reason,
	LONG64 mT,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CsmBlockingRecordType *_p = soap_new_ns1__CsmBlockingRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CsmBlockingRecordType::csmSN = csmSN;
		_p->ns1__CsmBlockingRecordType::reason = reason;
		_p->ns1__CsmBlockingRecordType::mT = mT;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CsmBlockingRecordType * soap_new_set_ns1__CsmBlockingRecordType(
	struct soap *soap,
	LONG64 csmSN,
	unsigned short reason,
	unsigned short *blR,
	LONG64 mT,
	ns1__SamType *sam,
	unsigned int *opType,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CsmBlockingRecordType *_p = soap_new_ns1__CsmBlockingRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CsmBlockingRecordType::csmSN = csmSN;
		_p->ns1__CsmBlockingRecordType::reason = reason;
		_p->ns1__CsmBlockingRecordType::blR = blR;
		_p->ns1__CsmBlockingRecordType::mT = mT;
		_p->ns1__CsmBlockingRecordType::sam = sam;
		_p->ns1__CsmBlockingRecordType::opType = opType;
		_p->ns1__CsmBlockingRecordType::ctlInfo = ctlInfo;
		_p->ns1__CsmBlockingRecordType::ctlData = ctlData;
		_p->ns1__CsmBlockingRecordType::cData = cData;
		_p->ns1__CsmBlockingRecordType::rawData = rawData;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CsmBlockingRecordType(struct soap *soap, ns1__CsmBlockingRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CsmBlockingRecordType", p->soap_type() == SOAP_TYPE_ns1__CsmBlockingRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CsmBlockingRecordType(struct soap *soap, const char *URL, ns1__CsmBlockingRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CsmBlockingRecordType", p->soap_type() == SOAP_TYPE_ns1__CsmBlockingRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CsmBlockingRecordType(struct soap *soap, const char *URL, ns1__CsmBlockingRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CsmBlockingRecordType", p->soap_type() == SOAP_TYPE_ns1__CsmBlockingRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CsmBlockingRecordType * SOAP_FMAC4 soap_get_ns1__CsmBlockingRecordType(struct soap*, ns1__CsmBlockingRecordType *, const char*, const char*);

inline int soap_read_ns1__CsmBlockingRecordType(struct soap *soap, ns1__CsmBlockingRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CsmBlockingRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CsmBlockingRecordType(struct soap *soap, const char *URL, ns1__CsmBlockingRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CsmBlockingRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CsmBlockingRecordType(struct soap *soap, ns1__CsmBlockingRecordType *p)
{
	if (soap_read_ns1__CsmBlockingRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CommandReportRecordType_DEFINED
#define SOAP_TYPE_ns1__CommandReportRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CommandReportRecordType(struct soap*, const char*, int, const ns1__CommandReportRecordType *, const char*);
SOAP_FMAC3 ns1__CommandReportRecordType * SOAP_FMAC4 soap_in_ns1__CommandReportRecordType(struct soap*, const char*, ns1__CommandReportRecordType *, const char*);
SOAP_FMAC1 ns1__CommandReportRecordType * SOAP_FMAC2 soap_instantiate_ns1__CommandReportRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CommandReportRecordType * soap_new_ns1__CommandReportRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CommandReportRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CommandReportRecordType * soap_new_req_ns1__CommandReportRecordType(
	struct soap *soap,
	LONG64 idR,
	int ct,
	LONG64 dc,
	LONG64 cc,
	int sendE,
	time_t sd,
	time_t rd,
	LONG64 userId,
	LONG64 uv,
	int r,
	ns1__EquipmentReferenceType *dest,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CommandReportRecordType *_p = soap_new_ns1__CommandReportRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CommandReportRecordType::idR = idR;
		_p->ns1__CommandReportRecordType::ct = ct;
		_p->ns1__CommandReportRecordType::dc = dc;
		_p->ns1__CommandReportRecordType::cc = cc;
		_p->ns1__CommandReportRecordType::sendE = sendE;
		_p->ns1__CommandReportRecordType::sd = sd;
		_p->ns1__CommandReportRecordType::rd = rd;
		_p->ns1__CommandReportRecordType::userId = userId;
		_p->ns1__CommandReportRecordType::uv = uv;
		_p->ns1__CommandReportRecordType::r = r;
		_p->ns1__CommandReportRecordType::dest = dest;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CommandReportRecordType * soap_new_set_ns1__CommandReportRecordType(
	struct soap *soap,
	LONG64 idR,
	int ct,
	LONG64 dc,
	LONG64 cc,
	int sendE,
	time_t sd,
	time_t rd,
	LONG64 userId,
	LONG64 uv,
	int r,
	ns1__EquipmentReferenceType *dest,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CommandReportRecordType *_p = soap_new_ns1__CommandReportRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CommandReportRecordType::idR = idR;
		_p->ns1__CommandReportRecordType::ct = ct;
		_p->ns1__CommandReportRecordType::dc = dc;
		_p->ns1__CommandReportRecordType::cc = cc;
		_p->ns1__CommandReportRecordType::sendE = sendE;
		_p->ns1__CommandReportRecordType::sd = sd;
		_p->ns1__CommandReportRecordType::rd = rd;
		_p->ns1__CommandReportRecordType::userId = userId;
		_p->ns1__CommandReportRecordType::uv = uv;
		_p->ns1__CommandReportRecordType::r = r;
		_p->ns1__CommandReportRecordType::dest = dest;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CommandReportRecordType(struct soap *soap, ns1__CommandReportRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandReportRecordType", p->soap_type() == SOAP_TYPE_ns1__CommandReportRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CommandReportRecordType(struct soap *soap, const char *URL, ns1__CommandReportRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandReportRecordType", p->soap_type() == SOAP_TYPE_ns1__CommandReportRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CommandReportRecordType(struct soap *soap, const char *URL, ns1__CommandReportRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandReportRecordType", p->soap_type() == SOAP_TYPE_ns1__CommandReportRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CommandReportRecordType * SOAP_FMAC4 soap_get_ns1__CommandReportRecordType(struct soap*, ns1__CommandReportRecordType *, const char*, const char*);

inline int soap_read_ns1__CommandReportRecordType(struct soap *soap, ns1__CommandReportRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CommandReportRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CommandReportRecordType(struct soap *soap, const char *URL, ns1__CommandReportRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CommandReportRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CommandReportRecordType(struct soap *soap, ns1__CommandReportRecordType *p)
{
	if (soap_read_ns1__CommandReportRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ActionType_DEFINED
#define SOAP_TYPE_ns1__ActionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ActionType(struct soap*, const char*, int, const ns1__ActionType *, const char*);
SOAP_FMAC3 ns1__ActionType * SOAP_FMAC4 soap_in_ns1__ActionType(struct soap*, const char*, ns1__ActionType *, const char*);
SOAP_FMAC1 ns1__ActionType * SOAP_FMAC2 soap_instantiate_ns1__ActionType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ActionType * soap_new_ns1__ActionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ActionType(soap, n, NULL, NULL, NULL);
}

inline ns1__ActionType * soap_new_req_ns1__ActionType(
	struct soap *soap,
	LONG64 idL)
{
	ns1__ActionType *_p = soap_new_ns1__ActionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionType::idL = idL;
	}
	return _p;
}

inline ns1__ActionType * soap_new_set_ns1__ActionType(
	struct soap *soap,
	LONG64 idL,
	LONG64 *idTarget,
	LONG64 *idEntry,
	LONG64 *idSequence,
	LONG64 *idSelector,
	time_t *dRun,
	unsigned int *reasonId,
	unsigned int *actionType,
	ns1__RecordIdType *relTrans,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	char *__item__1)
{
	ns1__ActionType *_p = soap_new_ns1__ActionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionType::idL = idL;
		_p->ns1__ActionType::idTarget = idTarget;
		_p->ns1__ActionType::idEntry = idEntry;
		_p->ns1__ActionType::idSequence = idSequence;
		_p->ns1__ActionType::idSelector = idSelector;
		_p->ns1__ActionType::dRun = dRun;
		_p->ns1__ActionType::reasonId = reasonId;
		_p->ns1__ActionType::actionType = actionType;
		_p->ns1__ActionType::relTrans = relTrans;
		_p->ns1__ActionType::ctlInfo = ctlInfo;
		_p->ns1__ActionType::ctlData = ctlData;
		_p->ns1__ActionType::cData = cData;
		_p->ns1__ActionType::rawData = rawData;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ActionType(struct soap *soap, ns1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionType", p->soap_type() == SOAP_TYPE_ns1__ActionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ActionType(struct soap *soap, const char *URL, ns1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionType", p->soap_type() == SOAP_TYPE_ns1__ActionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ActionType(struct soap *soap, const char *URL, ns1__ActionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionType", p->soap_type() == SOAP_TYPE_ns1__ActionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ActionType * SOAP_FMAC4 soap_get_ns1__ActionType(struct soap*, ns1__ActionType *, const char*, const char*);

inline int soap_read_ns1__ActionType(struct soap *soap, ns1__ActionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ActionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ActionType(struct soap *soap, const char *URL, ns1__ActionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ActionType(struct soap *soap, ns1__ActionType *p)
{
	if (soap_read_ns1__ActionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ActionListType_DEFINED
#define SOAP_TYPE_ns1__ActionListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ActionListType(struct soap*, const char*, int, const ns1__ActionListType *, const char*);
SOAP_FMAC3 ns1__ActionListType * SOAP_FMAC4 soap_in_ns1__ActionListType(struct soap*, const char*, ns1__ActionListType *, const char*);
SOAP_FMAC1 ns1__ActionListType * SOAP_FMAC2 soap_instantiate_ns1__ActionListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ActionListType * soap_new_ns1__ActionListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ActionListType(soap, n, NULL, NULL, NULL);
}

inline ns1__ActionListType * soap_new_req_ns1__ActionListType(
	struct soap *soap,
	int __sizeaction,
	ns1__ActionType **action)
{
	ns1__ActionListType *_p = soap_new_ns1__ActionListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionListType::__sizeaction = __sizeaction;
		_p->ns1__ActionListType::action = action;
	}
	return _p;
}

inline ns1__ActionListType * soap_new_set_ns1__ActionListType(
	struct soap *soap,
	int __sizeaction,
	ns1__ActionType **action,
	char *__item__1)
{
	ns1__ActionListType *_p = soap_new_ns1__ActionListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionListType::__sizeaction = __sizeaction;
		_p->ns1__ActionListType::action = action;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ActionListType(struct soap *soap, ns1__ActionListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionListType", p->soap_type() == SOAP_TYPE_ns1__ActionListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ActionListType(struct soap *soap, const char *URL, ns1__ActionListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionListType", p->soap_type() == SOAP_TYPE_ns1__ActionListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ActionListType(struct soap *soap, const char *URL, ns1__ActionListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionListType", p->soap_type() == SOAP_TYPE_ns1__ActionListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ActionListType * SOAP_FMAC4 soap_get_ns1__ActionListType(struct soap*, ns1__ActionListType *, const char*, const char*);

inline int soap_read_ns1__ActionListType(struct soap *soap, ns1__ActionListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ActionListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ActionListType(struct soap *soap, const char *URL, ns1__ActionListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ActionListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ActionListType(struct soap *soap, ns1__ActionListType *p)
{
	if (soap_read_ns1__ActionListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ActionListRecordType_DEFINED
#define SOAP_TYPE_ns1__ActionListRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ActionListRecordType(struct soap*, const char*, int, const ns1__ActionListRecordType *, const char*);
SOAP_FMAC3 ns1__ActionListRecordType * SOAP_FMAC4 soap_in_ns1__ActionListRecordType(struct soap*, const char*, ns1__ActionListRecordType *, const char*);
SOAP_FMAC1 ns1__ActionListRecordType * SOAP_FMAC2 soap_instantiate_ns1__ActionListRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ActionListRecordType * soap_new_ns1__ActionListRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ActionListRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__ActionListRecordType * soap_new_req_ns1__ActionListRecordType(
	struct soap *soap,
	ns1__ActionListType *actionList,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__ActionListRecordType *_p = soap_new_ns1__ActionListRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionListRecordType::actionList = actionList;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__ActionListRecordType * soap_new_set_ns1__ActionListRecordType(
	struct soap *soap,
	ns1__ActionListType *actionList,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__ActionListRecordType *_p = soap_new_ns1__ActionListRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ActionListRecordType::actionList = actionList;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__ActionListRecordType(struct soap *soap, ns1__ActionListRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionListRecordType", p->soap_type() == SOAP_TYPE_ns1__ActionListRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ActionListRecordType(struct soap *soap, const char *URL, ns1__ActionListRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionListRecordType", p->soap_type() == SOAP_TYPE_ns1__ActionListRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ActionListRecordType(struct soap *soap, const char *URL, ns1__ActionListRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ActionListRecordType", p->soap_type() == SOAP_TYPE_ns1__ActionListRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ActionListRecordType * SOAP_FMAC4 soap_get_ns1__ActionListRecordType(struct soap*, ns1__ActionListRecordType *, const char*, const char*);

inline int soap_read_ns1__ActionListRecordType(struct soap *soap, ns1__ActionListRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ActionListRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ActionListRecordType(struct soap *soap, const char *URL, ns1__ActionListRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ActionListRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ActionListRecordType(struct soap *soap, ns1__ActionListRecordType *p)
{
	if (soap_read_ns1__ActionListRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OpenWideAisleGateRecordType_DEFINED
#define SOAP_TYPE_ns1__OpenWideAisleGateRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OpenWideAisleGateRecordType(struct soap*, const char*, int, const ns1__OpenWideAisleGateRecordType *, const char*);
SOAP_FMAC3 ns1__OpenWideAisleGateRecordType * SOAP_FMAC4 soap_in_ns1__OpenWideAisleGateRecordType(struct soap*, const char*, ns1__OpenWideAisleGateRecordType *, const char*);
SOAP_FMAC1 ns1__OpenWideAisleGateRecordType * SOAP_FMAC2 soap_instantiate_ns1__OpenWideAisleGateRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OpenWideAisleGateRecordType * soap_new_ns1__OpenWideAisleGateRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OpenWideAisleGateRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__OpenWideAisleGateRecordType * soap_new_req_ns1__OpenWideAisleGateRecordType(
	struct soap *soap,
	LONG64 gateId,
	int command,
	int result,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__OpenWideAisleGateRecordType *_p = soap_new_ns1__OpenWideAisleGateRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OpenWideAisleGateRecordType::gateId = gateId;
		_p->ns1__OpenWideAisleGateRecordType::command = command;
		_p->ns1__OpenWideAisleGateRecordType::result = result;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__OpenWideAisleGateRecordType * soap_new_set_ns1__OpenWideAisleGateRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 gateId,
	int command,
	int result,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__OpenWideAisleGateRecordType *_p = soap_new_ns1__OpenWideAisleGateRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OpenWideAisleGateRecordType::shift = shift;
		_p->ns1__OpenWideAisleGateRecordType::gateId = gateId;
		_p->ns1__OpenWideAisleGateRecordType::command = command;
		_p->ns1__OpenWideAisleGateRecordType::result = result;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__OpenWideAisleGateRecordType(struct soap *soap, ns1__OpenWideAisleGateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenWideAisleGateRecordType", p->soap_type() == SOAP_TYPE_ns1__OpenWideAisleGateRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OpenWideAisleGateRecordType(struct soap *soap, const char *URL, ns1__OpenWideAisleGateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenWideAisleGateRecordType", p->soap_type() == SOAP_TYPE_ns1__OpenWideAisleGateRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OpenWideAisleGateRecordType(struct soap *soap, const char *URL, ns1__OpenWideAisleGateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenWideAisleGateRecordType", p->soap_type() == SOAP_TYPE_ns1__OpenWideAisleGateRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OpenWideAisleGateRecordType * SOAP_FMAC4 soap_get_ns1__OpenWideAisleGateRecordType(struct soap*, ns1__OpenWideAisleGateRecordType *, const char*, const char*);

inline int soap_read_ns1__OpenWideAisleGateRecordType(struct soap *soap, ns1__OpenWideAisleGateRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OpenWideAisleGateRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OpenWideAisleGateRecordType(struct soap *soap, const char *URL, ns1__OpenWideAisleGateRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OpenWideAisleGateRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OpenWideAisleGateRecordType(struct soap *soap, ns1__OpenWideAisleGateRecordType *p)
{
	if (soap_read_ns1__OpenWideAisleGateRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OpenGatePsmRecordType_DEFINED
#define SOAP_TYPE_ns1__OpenGatePsmRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OpenGatePsmRecordType(struct soap*, const char*, int, const ns1__OpenGatePsmRecordType *, const char*);
SOAP_FMAC3 ns1__OpenGatePsmRecordType * SOAP_FMAC4 soap_in_ns1__OpenGatePsmRecordType(struct soap*, const char*, ns1__OpenGatePsmRecordType *, const char*);
SOAP_FMAC1 ns1__OpenGatePsmRecordType * SOAP_FMAC2 soap_instantiate_ns1__OpenGatePsmRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OpenGatePsmRecordType * soap_new_ns1__OpenGatePsmRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OpenGatePsmRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__OpenGatePsmRecordType * soap_new_req_ns1__OpenGatePsmRecordType(
	struct soap *soap,
	LONG64 psmId,
	int command,
	int result,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__OpenGatePsmRecordType *_p = soap_new_ns1__OpenGatePsmRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OpenGatePsmRecordType::psmId = psmId;
		_p->ns1__OpenGatePsmRecordType::command = command;
		_p->ns1__OpenGatePsmRecordType::result = result;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__OpenGatePsmRecordType * soap_new_set_ns1__OpenGatePsmRecordType(
	struct soap *soap,
	LONG64 psmId,
	ns1__shiftType *shift,
	int command,
	int result,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__OpenGatePsmRecordType *_p = soap_new_ns1__OpenGatePsmRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OpenGatePsmRecordType::psmId = psmId;
		_p->ns1__OpenGatePsmRecordType::shift = shift;
		_p->ns1__OpenGatePsmRecordType::command = command;
		_p->ns1__OpenGatePsmRecordType::result = result;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__OpenGatePsmRecordType(struct soap *soap, ns1__OpenGatePsmRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenGatePsmRecordType", p->soap_type() == SOAP_TYPE_ns1__OpenGatePsmRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OpenGatePsmRecordType(struct soap *soap, const char *URL, ns1__OpenGatePsmRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenGatePsmRecordType", p->soap_type() == SOAP_TYPE_ns1__OpenGatePsmRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OpenGatePsmRecordType(struct soap *soap, const char *URL, ns1__OpenGatePsmRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpenGatePsmRecordType", p->soap_type() == SOAP_TYPE_ns1__OpenGatePsmRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OpenGatePsmRecordType * SOAP_FMAC4 soap_get_ns1__OpenGatePsmRecordType(struct soap*, ns1__OpenGatePsmRecordType *, const char*, const char*);

inline int soap_read_ns1__OpenGatePsmRecordType(struct soap *soap, ns1__OpenGatePsmRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OpenGatePsmRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OpenGatePsmRecordType(struct soap *soap, const char *URL, ns1__OpenGatePsmRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OpenGatePsmRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OpenGatePsmRecordType(struct soap *soap, ns1__OpenGatePsmRecordType *p)
{
	if (soap_read_ns1__OpenGatePsmRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AdvancedPurchaseRecordType_DEFINED
#define SOAP_TYPE_ns1__AdvancedPurchaseRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AdvancedPurchaseRecordType(struct soap*, const char*, int, const ns1__AdvancedPurchaseRecordType *, const char*);
SOAP_FMAC3 ns1__AdvancedPurchaseRecordType * SOAP_FMAC4 soap_in_ns1__AdvancedPurchaseRecordType(struct soap*, const char*, ns1__AdvancedPurchaseRecordType *, const char*);
SOAP_FMAC1 ns1__AdvancedPurchaseRecordType * SOAP_FMAC2 soap_instantiate_ns1__AdvancedPurchaseRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AdvancedPurchaseRecordType * soap_new_ns1__AdvancedPurchaseRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AdvancedPurchaseRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__AdvancedPurchaseRecordType * soap_new_req_ns1__AdvancedPurchaseRecordType(
	struct soap *soap,
	LONG64 mSN,
	char *pCod,
	ns1__AccountingUnitListType *Units,
	LONG64 tp,
	LONG64 pd,
	LONG64 returned,
	LONG64 tR,
	ns1__PaymentModeListType *payments,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__AdvancedPurchaseRecordType *_p = soap_new_ns1__AdvancedPurchaseRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AdvancedPurchaseRecordType::mSN = mSN;
		_p->ns1__AdvancedPurchaseRecordType::pCod = pCod;
		_p->ns1__AdvancedPurchaseRecordType::Units = Units;
		_p->ns1__AdvancedPurchaseRecordType::tp = tp;
		_p->ns1__AdvancedPurchaseRecordType::pd = pd;
		_p->ns1__AdvancedPurchaseRecordType::returned = returned;
		_p->ns1__AdvancedPurchaseRecordType::tR = tR;
		_p->ns1__AdvancedPurchaseRecordType::payments = payments;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__AdvancedPurchaseRecordType * soap_new_set_ns1__AdvancedPurchaseRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 mSN,
	char *pCod,
	ns1__AccountingUnitListType *Units,
	LONG64 tp,
	LONG64 pd,
	LONG64 returned,
	LONG64 tR,
	LONG64 *nReq,
	LONG64 *nSucc,
	ns1__PaymentModeListType *payments,
	ns1__AwardListType *awards,
	ns1__CoinNoteInsertedListType *coinNoteIns,
	ns1__CoinNoteReturnedListType *coinNoteRet,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__AdvancedPurchaseRecordType *_p = soap_new_ns1__AdvancedPurchaseRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AdvancedPurchaseRecordType::shift = shift;
		_p->ns1__AdvancedPurchaseRecordType::mSN = mSN;
		_p->ns1__AdvancedPurchaseRecordType::pCod = pCod;
		_p->ns1__AdvancedPurchaseRecordType::Units = Units;
		_p->ns1__AdvancedPurchaseRecordType::tp = tp;
		_p->ns1__AdvancedPurchaseRecordType::pd = pd;
		_p->ns1__AdvancedPurchaseRecordType::returned = returned;
		_p->ns1__AdvancedPurchaseRecordType::tR = tR;
		_p->ns1__AdvancedPurchaseRecordType::nReq = nReq;
		_p->ns1__AdvancedPurchaseRecordType::nSucc = nSucc;
		_p->ns1__AdvancedPurchaseRecordType::payments = payments;
		_p->ns1__AdvancedPurchaseRecordType::awards = awards;
		_p->ns1__AdvancedPurchaseRecordType::coinNoteIns = coinNoteIns;
		_p->ns1__AdvancedPurchaseRecordType::coinNoteRet = coinNoteRet;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__AdvancedPurchaseRecordType(struct soap *soap, ns1__AdvancedPurchaseRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdvancedPurchaseRecordType", p->soap_type() == SOAP_TYPE_ns1__AdvancedPurchaseRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AdvancedPurchaseRecordType(struct soap *soap, const char *URL, ns1__AdvancedPurchaseRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdvancedPurchaseRecordType", p->soap_type() == SOAP_TYPE_ns1__AdvancedPurchaseRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AdvancedPurchaseRecordType(struct soap *soap, const char *URL, ns1__AdvancedPurchaseRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AdvancedPurchaseRecordType", p->soap_type() == SOAP_TYPE_ns1__AdvancedPurchaseRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AdvancedPurchaseRecordType * SOAP_FMAC4 soap_get_ns1__AdvancedPurchaseRecordType(struct soap*, ns1__AdvancedPurchaseRecordType *, const char*, const char*);

inline int soap_read_ns1__AdvancedPurchaseRecordType(struct soap *soap, ns1__AdvancedPurchaseRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AdvancedPurchaseRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AdvancedPurchaseRecordType(struct soap *soap, const char *URL, ns1__AdvancedPurchaseRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AdvancedPurchaseRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AdvancedPurchaseRecordType(struct soap *soap, ns1__AdvancedPurchaseRecordType *p)
{
	if (soap_read_ns1__AdvancedPurchaseRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MaintenanceOperationRecordType_DEFINED
#define SOAP_TYPE_ns1__MaintenanceOperationRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MaintenanceOperationRecordType(struct soap*, const char*, int, const ns1__MaintenanceOperationRecordType *, const char*);
SOAP_FMAC3 ns1__MaintenanceOperationRecordType * SOAP_FMAC4 soap_in_ns1__MaintenanceOperationRecordType(struct soap*, const char*, ns1__MaintenanceOperationRecordType *, const char*);
SOAP_FMAC1 ns1__MaintenanceOperationRecordType * SOAP_FMAC2 soap_instantiate_ns1__MaintenanceOperationRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MaintenanceOperationRecordType * soap_new_ns1__MaintenanceOperationRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MaintenanceOperationRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__MaintenanceOperationRecordType * soap_new_req_ns1__MaintenanceOperationRecordType(
	struct soap *soap,
	LONG64 testCode,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__MaintenanceOperationRecordType *_p = soap_new_ns1__MaintenanceOperationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MaintenanceOperationRecordType::testCode = testCode;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__MaintenanceOperationRecordType * soap_new_set_ns1__MaintenanceOperationRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 testCode,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__MaintenanceOperationRecordType *_p = soap_new_ns1__MaintenanceOperationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MaintenanceOperationRecordType::shift = shift;
		_p->ns1__MaintenanceOperationRecordType::testCode = testCode;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MaintenanceOperationRecordType(struct soap *soap, ns1__MaintenanceOperationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MaintenanceOperationRecordType", p->soap_type() == SOAP_TYPE_ns1__MaintenanceOperationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MaintenanceOperationRecordType(struct soap *soap, const char *URL, ns1__MaintenanceOperationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MaintenanceOperationRecordType", p->soap_type() == SOAP_TYPE_ns1__MaintenanceOperationRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MaintenanceOperationRecordType(struct soap *soap, const char *URL, ns1__MaintenanceOperationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MaintenanceOperationRecordType", p->soap_type() == SOAP_TYPE_ns1__MaintenanceOperationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MaintenanceOperationRecordType * SOAP_FMAC4 soap_get_ns1__MaintenanceOperationRecordType(struct soap*, ns1__MaintenanceOperationRecordType *, const char*, const char*);

inline int soap_read_ns1__MaintenanceOperationRecordType(struct soap *soap, ns1__MaintenanceOperationRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MaintenanceOperationRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MaintenanceOperationRecordType(struct soap *soap, const char *URL, ns1__MaintenanceOperationRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MaintenanceOperationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MaintenanceOperationRecordType(struct soap *soap, ns1__MaintenanceOperationRecordType *p)
{
	if (soap_read_ns1__MaintenanceOperationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PenaltyType_DEFINED
#define SOAP_TYPE_ns1__PenaltyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PenaltyType(struct soap*, const char*, int, const ns1__PenaltyType *, const char*);
SOAP_FMAC3 ns1__PenaltyType * SOAP_FMAC4 soap_in_ns1__PenaltyType(struct soap*, const char*, ns1__PenaltyType *, const char*);
SOAP_FMAC1 ns1__PenaltyType * SOAP_FMAC2 soap_instantiate_ns1__PenaltyType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PenaltyType * soap_new_ns1__PenaltyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PenaltyType(soap, n, NULL, NULL, NULL);
}

inline ns1__PenaltyType * soap_new_req_ns1__PenaltyType(
	struct soap *soap,
	LONG64 reason,
	char *desc,
	LONG64 amount,
	LONG64 mT,
	ns1__AccountingUnitType *unit)
{
	ns1__PenaltyType *_p = soap_new_ns1__PenaltyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PenaltyType::reason = reason;
		_p->ns1__PenaltyType::desc = desc;
		_p->ns1__PenaltyType::amount = amount;
		_p->ns1__PenaltyType::mT = mT;
		_p->ns1__PenaltyType::unit = unit;
	}
	return _p;
}

inline ns1__PenaltyType * soap_new_set_ns1__PenaltyType(
	struct soap *soap,
	LONG64 reason,
	char *desc,
	LONG64 amount,
	LONG64 mT,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	ns1__AccountingUnitType *unit,
	char *__item__1)
{
	ns1__PenaltyType *_p = soap_new_ns1__PenaltyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PenaltyType::reason = reason;
		_p->ns1__PenaltyType::desc = desc;
		_p->ns1__PenaltyType::amount = amount;
		_p->ns1__PenaltyType::mT = mT;
		_p->ns1__PenaltyType::ctlInfo = ctlInfo;
		_p->ns1__PenaltyType::ctlData = ctlData;
		_p->ns1__PenaltyType::cData = cData;
		_p->ns1__PenaltyType::rawData = rawData;
		_p->ns1__PenaltyType::unit = unit;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PenaltyType(struct soap *soap, ns1__PenaltyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PenaltyType", p->soap_type() == SOAP_TYPE_ns1__PenaltyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PenaltyType(struct soap *soap, const char *URL, ns1__PenaltyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PenaltyType", p->soap_type() == SOAP_TYPE_ns1__PenaltyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PenaltyType(struct soap *soap, const char *URL, ns1__PenaltyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PenaltyType", p->soap_type() == SOAP_TYPE_ns1__PenaltyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PenaltyType * SOAP_FMAC4 soap_get_ns1__PenaltyType(struct soap*, ns1__PenaltyType *, const char*, const char*);

inline int soap_read_ns1__PenaltyType(struct soap *soap, ns1__PenaltyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PenaltyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PenaltyType(struct soap *soap, const char *URL, ns1__PenaltyType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PenaltyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PenaltyType(struct soap *soap, ns1__PenaltyType *p)
{
	if (soap_read_ns1__PenaltyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__GateRejectionAnalysisRecordType_DEFINED
#define SOAP_TYPE_ns1__GateRejectionAnalysisRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__GateRejectionAnalysisRecordType(struct soap*, const char*, int, const ns1__GateRejectionAnalysisRecordType *, const char*);
SOAP_FMAC3 ns1__GateRejectionAnalysisRecordType * SOAP_FMAC4 soap_in_ns1__GateRejectionAnalysisRecordType(struct soap*, const char*, ns1__GateRejectionAnalysisRecordType *, const char*);
SOAP_FMAC1 ns1__GateRejectionAnalysisRecordType * SOAP_FMAC2 soap_instantiate_ns1__GateRejectionAnalysisRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__GateRejectionAnalysisRecordType * soap_new_ns1__GateRejectionAnalysisRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__GateRejectionAnalysisRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__GateRejectionAnalysisRecordType * soap_new_req_ns1__GateRejectionAnalysisRecordType(
	struct soap *soap,
	LONG64 mT,
	LONG64 amount,
	LONG64 reason,
	ns1__AccountingUnitType *unit,
	ns1__PenaltyType *penalty,
	LONG64 tp,
	LONG64 pd,
	LONG64 returned,
	LONG64 tR,
	ns1__PaymentModeListType *payments,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__GateRejectionAnalysisRecordType *_p = soap_new_ns1__GateRejectionAnalysisRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GateRejectionAnalysisRecordType::mT = mT;
		_p->ns1__GateRejectionAnalysisRecordType::amount = amount;
		_p->ns1__GateRejectionAnalysisRecordType::reason = reason;
		_p->ns1__GateRejectionAnalysisRecordType::unit = unit;
		_p->ns1__GateRejectionAnalysisRecordType::penalty = penalty;
		_p->ns1__GateRejectionAnalysisRecordType::tp = tp;
		_p->ns1__GateRejectionAnalysisRecordType::pd = pd;
		_p->ns1__GateRejectionAnalysisRecordType::returned = returned;
		_p->ns1__GateRejectionAnalysisRecordType::tR = tR;
		_p->ns1__GateRejectionAnalysisRecordType::payments = payments;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__GateRejectionAnalysisRecordType * soap_new_set_ns1__GateRejectionAnalysisRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 mT,
	xsd__base64Binary *iniCtlData,
	ns1__CardDataMagType *iniCData,
	xsd__base64Binary *iniRawData,
	xsd__base64Binary *updCtlData,
	ns1__CardDataMagType *updCData,
	xsd__base64Binary *updRawData,
	LONG64 amount,
	LONG64 reason,
	ns1__AccountingUnitType *unit,
	ns1__PenaltyType *penalty,
	LONG64 tp,
	LONG64 pd,
	LONG64 returned,
	LONG64 tR,
	ns1__PaymentModeListType *payments,
	ns1__AwardListType *awards,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__GateRejectionAnalysisRecordType *_p = soap_new_ns1__GateRejectionAnalysisRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__GateRejectionAnalysisRecordType::shift = shift;
		_p->ns1__GateRejectionAnalysisRecordType::mT = mT;
		_p->ns1__GateRejectionAnalysisRecordType::iniCtlData = iniCtlData;
		_p->ns1__GateRejectionAnalysisRecordType::iniCData = iniCData;
		_p->ns1__GateRejectionAnalysisRecordType::iniRawData = iniRawData;
		_p->ns1__GateRejectionAnalysisRecordType::updCtlData = updCtlData;
		_p->ns1__GateRejectionAnalysisRecordType::updCData = updCData;
		_p->ns1__GateRejectionAnalysisRecordType::updRawData = updRawData;
		_p->ns1__GateRejectionAnalysisRecordType::amount = amount;
		_p->ns1__GateRejectionAnalysisRecordType::reason = reason;
		_p->ns1__GateRejectionAnalysisRecordType::unit = unit;
		_p->ns1__GateRejectionAnalysisRecordType::penalty = penalty;
		_p->ns1__GateRejectionAnalysisRecordType::tp = tp;
		_p->ns1__GateRejectionAnalysisRecordType::pd = pd;
		_p->ns1__GateRejectionAnalysisRecordType::returned = returned;
		_p->ns1__GateRejectionAnalysisRecordType::tR = tR;
		_p->ns1__GateRejectionAnalysisRecordType::payments = payments;
		_p->ns1__GateRejectionAnalysisRecordType::awards = awards;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__GateRejectionAnalysisRecordType(struct soap *soap, ns1__GateRejectionAnalysisRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GateRejectionAnalysisRecordType", p->soap_type() == SOAP_TYPE_ns1__GateRejectionAnalysisRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__GateRejectionAnalysisRecordType(struct soap *soap, const char *URL, ns1__GateRejectionAnalysisRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GateRejectionAnalysisRecordType", p->soap_type() == SOAP_TYPE_ns1__GateRejectionAnalysisRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__GateRejectionAnalysisRecordType(struct soap *soap, const char *URL, ns1__GateRejectionAnalysisRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GateRejectionAnalysisRecordType", p->soap_type() == SOAP_TYPE_ns1__GateRejectionAnalysisRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__GateRejectionAnalysisRecordType * SOAP_FMAC4 soap_get_ns1__GateRejectionAnalysisRecordType(struct soap*, ns1__GateRejectionAnalysisRecordType *, const char*, const char*);

inline int soap_read_ns1__GateRejectionAnalysisRecordType(struct soap *soap, ns1__GateRejectionAnalysisRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__GateRejectionAnalysisRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__GateRejectionAnalysisRecordType(struct soap *soap, const char *URL, ns1__GateRejectionAnalysisRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__GateRejectionAnalysisRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__GateRejectionAnalysisRecordType(struct soap *soap, ns1__GateRejectionAnalysisRecordType *p)
{
	if (soap_read_ns1__GateRejectionAnalysisRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PendingPaymentBalanceType_DEFINED
#define SOAP_TYPE_ns1__PendingPaymentBalanceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PendingPaymentBalanceType(struct soap*, const char*, int, const ns1__PendingPaymentBalanceType *, const char*);
SOAP_FMAC3 ns1__PendingPaymentBalanceType * SOAP_FMAC4 soap_in_ns1__PendingPaymentBalanceType(struct soap*, const char*, ns1__PendingPaymentBalanceType *, const char*);
SOAP_FMAC1 ns1__PendingPaymentBalanceType * SOAP_FMAC2 soap_instantiate_ns1__PendingPaymentBalanceType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PendingPaymentBalanceType * soap_new_ns1__PendingPaymentBalanceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PendingPaymentBalanceType(soap, n, NULL, NULL, NULL);
}

inline ns1__PendingPaymentBalanceType * soap_new_req_ns1__PendingPaymentBalanceType(
	struct soap *soap,
	LONG64 amount)
{
	ns1__PendingPaymentBalanceType *_p = soap_new_ns1__PendingPaymentBalanceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PendingPaymentBalanceType::amount = amount;
	}
	return _p;
}

inline ns1__PendingPaymentBalanceType * soap_new_set_ns1__PendingPaymentBalanceType(
	struct soap *soap,
	LONG64 amount,
	ns1__cardIdentificationType *card,
	unsigned int *type,
	char *__item__1)
{
	ns1__PendingPaymentBalanceType *_p = soap_new_ns1__PendingPaymentBalanceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PendingPaymentBalanceType::amount = amount;
		_p->ns1__PendingPaymentBalanceType::card = card;
		_p->ns1__PendingPaymentBalanceType::type = type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PendingPaymentBalanceType(struct soap *soap, ns1__PendingPaymentBalanceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PendingPaymentBalanceType", p->soap_type() == SOAP_TYPE_ns1__PendingPaymentBalanceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PendingPaymentBalanceType(struct soap *soap, const char *URL, ns1__PendingPaymentBalanceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PendingPaymentBalanceType", p->soap_type() == SOAP_TYPE_ns1__PendingPaymentBalanceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PendingPaymentBalanceType(struct soap *soap, const char *URL, ns1__PendingPaymentBalanceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PendingPaymentBalanceType", p->soap_type() == SOAP_TYPE_ns1__PendingPaymentBalanceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PendingPaymentBalanceType * SOAP_FMAC4 soap_get_ns1__PendingPaymentBalanceType(struct soap*, ns1__PendingPaymentBalanceType *, const char*, const char*);

inline int soap_read_ns1__PendingPaymentBalanceType(struct soap *soap, ns1__PendingPaymentBalanceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PendingPaymentBalanceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PendingPaymentBalanceType(struct soap *soap, const char *URL, ns1__PendingPaymentBalanceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PendingPaymentBalanceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PendingPaymentBalanceType(struct soap *soap, ns1__PendingPaymentBalanceType *p)
{
	if (soap_read_ns1__PendingPaymentBalanceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PendingPaymentType_DEFINED
#define SOAP_TYPE_ns1__PendingPaymentType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PendingPaymentType(struct soap*, const char*, int, const ns1__PendingPaymentType *, const char*);
SOAP_FMAC3 ns1__PendingPaymentType * SOAP_FMAC4 soap_in_ns1__PendingPaymentType(struct soap*, const char*, ns1__PendingPaymentType *, const char*);
SOAP_FMAC1 ns1__PendingPaymentType * SOAP_FMAC2 soap_instantiate_ns1__PendingPaymentType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PendingPaymentType * soap_new_ns1__PendingPaymentType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PendingPaymentType(soap, n, NULL, NULL, NULL);
}

inline ns1__PendingPaymentType * soap_new_req_ns1__PendingPaymentType(
	struct soap *soap,
	char *entryCode,
	ns1__PendingPaymentBalanceType *balance)
{
	ns1__PendingPaymentType *_p = soap_new_ns1__PendingPaymentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PendingPaymentType::entryCode = entryCode;
		_p->ns1__PendingPaymentType::balance = balance;
	}
	return _p;
}

inline ns1__PendingPaymentType * soap_new_set_ns1__PendingPaymentType(
	struct soap *soap,
	char *entryCode,
	ns1__PendingPaymentBalanceType *balance,
	char *__item__1)
{
	ns1__PendingPaymentType *_p = soap_new_ns1__PendingPaymentType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PendingPaymentType::entryCode = entryCode;
		_p->ns1__PendingPaymentType::balance = balance;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PendingPaymentType(struct soap *soap, ns1__PendingPaymentType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PendingPaymentType", p->soap_type() == SOAP_TYPE_ns1__PendingPaymentType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PendingPaymentType(struct soap *soap, const char *URL, ns1__PendingPaymentType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PendingPaymentType", p->soap_type() == SOAP_TYPE_ns1__PendingPaymentType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PendingPaymentType(struct soap *soap, const char *URL, ns1__PendingPaymentType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PendingPaymentType", p->soap_type() == SOAP_TYPE_ns1__PendingPaymentType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PendingPaymentType * SOAP_FMAC4 soap_get_ns1__PendingPaymentType(struct soap*, ns1__PendingPaymentType *, const char*, const char*);

inline int soap_read_ns1__PendingPaymentType(struct soap *soap, ns1__PendingPaymentType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PendingPaymentType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PendingPaymentType(struct soap *soap, const char *URL, ns1__PendingPaymentType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PendingPaymentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PendingPaymentType(struct soap *soap, ns1__PendingPaymentType *p)
{
	if (soap_read_ns1__PendingPaymentType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__FareMediumType_DEFINED
#define SOAP_TYPE_ns1__FareMediumType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FareMediumType(struct soap*, const char*, int, const ns1__FareMediumType *, const char*);
SOAP_FMAC3 ns1__FareMediumType * SOAP_FMAC4 soap_in_ns1__FareMediumType(struct soap*, const char*, ns1__FareMediumType *, const char*);
SOAP_FMAC1 ns1__FareMediumType * SOAP_FMAC2 soap_instantiate_ns1__FareMediumType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FareMediumType * soap_new_ns1__FareMediumType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FareMediumType(soap, n, NULL, NULL, NULL);
}

inline ns1__FareMediumType * soap_new_req_ns1__FareMediumType(
	struct soap *soap)
{
	ns1__FareMediumType *_p = soap_new_ns1__FareMediumType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__FareMediumType * soap_new_set_ns1__FareMediumType(
	struct soap *soap,
	xsd__base64Binary *cscData,
	ns1__CardDataMagType *mgnData,
	xsd__base64Binary *rawData,
	unsigned int *type,
	ULONG64 *sn,
	ULONG64 *uid,
	char *__item__1)
{
	ns1__FareMediumType *_p = soap_new_ns1__FareMediumType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareMediumType::cscData = cscData;
		_p->ns1__FareMediumType::mgnData = mgnData;
		_p->ns1__FareMediumType::rawData = rawData;
		_p->ns1__FareMediumType::type = type;
		_p->ns1__FareMediumType::sn = sn;
		_p->ns1__FareMediumType::uid = uid;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__FareMediumType(struct soap *soap, ns1__FareMediumType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareMediumType", p->soap_type() == SOAP_TYPE_ns1__FareMediumType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FareMediumType(struct soap *soap, const char *URL, ns1__FareMediumType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareMediumType", p->soap_type() == SOAP_TYPE_ns1__FareMediumType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FareMediumType(struct soap *soap, const char *URL, ns1__FareMediumType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareMediumType", p->soap_type() == SOAP_TYPE_ns1__FareMediumType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FareMediumType * SOAP_FMAC4 soap_get_ns1__FareMediumType(struct soap*, ns1__FareMediumType *, const char*, const char*);

inline int soap_read_ns1__FareMediumType(struct soap *soap, ns1__FareMediumType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__FareMediumType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FareMediumType(struct soap *soap, const char *URL, ns1__FareMediumType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__FareMediumType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__FareMediumType(struct soap *soap, ns1__FareMediumType *p)
{
	if (soap_read_ns1__FareMediumType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Penalty_DEFINED
#define SOAP_TYPE_ns1__Penalty_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Penalty(struct soap*, const char*, int, const ns1__Penalty *, const char*);
SOAP_FMAC3 ns1__Penalty * SOAP_FMAC4 soap_in_ns1__Penalty(struct soap*, const char*, ns1__Penalty *, const char*);
SOAP_FMAC1 ns1__Penalty * SOAP_FMAC2 soap_instantiate_ns1__Penalty(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Penalty * soap_new_ns1__Penalty(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Penalty(soap, n, NULL, NULL, NULL);
}

inline ns1__Penalty * soap_new_req_ns1__Penalty(
	struct soap *soap,
	ULONG64 amount)
{
	ns1__Penalty *_p = soap_new_ns1__Penalty(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Penalty::amount = amount;
	}
	return _p;
}

inline ns1__Penalty * soap_new_set_ns1__Penalty(
	struct soap *soap,
	ULONG64 amount,
	char *code,
	char *desc,
	ns1__FareMediumType *medium,
	char *invoiceNum,
	unsigned int *id,
	char *__item__1)
{
	ns1__Penalty *_p = soap_new_ns1__Penalty(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Penalty::amount = amount;
		_p->ns1__Penalty::code = code;
		_p->ns1__Penalty::desc = desc;
		_p->ns1__Penalty::medium = medium;
		_p->ns1__Penalty::invoiceNum = invoiceNum;
		_p->ns1__Penalty::id = id;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__Penalty(struct soap *soap, ns1__Penalty const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Penalty", p->soap_type() == SOAP_TYPE_ns1__Penalty ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Penalty(struct soap *soap, const char *URL, ns1__Penalty const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Penalty", p->soap_type() == SOAP_TYPE_ns1__Penalty ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Penalty(struct soap *soap, const char *URL, ns1__Penalty const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Penalty", p->soap_type() == SOAP_TYPE_ns1__Penalty ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Penalty * SOAP_FMAC4 soap_get_ns1__Penalty(struct soap*, ns1__Penalty *, const char*, const char*);

inline int soap_read_ns1__Penalty(struct soap *soap, ns1__Penalty *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Penalty(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Penalty(struct soap *soap, const char *URL, ns1__Penalty *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Penalty(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Penalty(struct soap *soap, ns1__Penalty *p)
{
	if (soap_read_ns1__Penalty(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PenaltyRecordType_DEFINED
#define SOAP_TYPE_ns1__PenaltyRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PenaltyRecordType(struct soap*, const char*, int, const ns1__PenaltyRecordType *, const char*);
SOAP_FMAC3 ns1__PenaltyRecordType * SOAP_FMAC4 soap_in_ns1__PenaltyRecordType(struct soap*, const char*, ns1__PenaltyRecordType *, const char*);
SOAP_FMAC1 ns1__PenaltyRecordType * SOAP_FMAC2 soap_instantiate_ns1__PenaltyRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PenaltyRecordType * soap_new_ns1__PenaltyRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PenaltyRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__PenaltyRecordType * soap_new_req_ns1__PenaltyRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__PenaltyRecordType *_p = soap_new_ns1__PenaltyRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__PenaltyRecordType * soap_new_set_ns1__PenaltyRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	ns1__Penalty *penalty,
	LONG64 *reason,
	char *desc,
	LONG64 *amount,
	LONG64 *mT,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	char *invoiceNum,
	ns1__AccountingOperationInfo *acc,
	ns1__AccountingUnit *accUnit,
	ns1__AccountingUnitType *unit,
	LONG64 *tp,
	LONG64 *pd,
	LONG64 *returned,
	LONG64 *tR,
	ns1__PaymentModeListType *payments,
	ns1__AwardListType *awards,
	ns1__PendingPaymentType *pendingPayment,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__PenaltyRecordType *_p = soap_new_ns1__PenaltyRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PenaltyRecordType::shift = shift;
		_p->ns1__PenaltyRecordType::penalty = penalty;
		_p->ns1__PenaltyRecordType::reason = reason;
		_p->ns1__PenaltyRecordType::desc = desc;
		_p->ns1__PenaltyRecordType::amount = amount;
		_p->ns1__PenaltyRecordType::mT = mT;
		_p->ns1__PenaltyRecordType::ctlInfo = ctlInfo;
		_p->ns1__PenaltyRecordType::ctlData = ctlData;
		_p->ns1__PenaltyRecordType::cData = cData;
		_p->ns1__PenaltyRecordType::rawData = rawData;
		_p->ns1__PenaltyRecordType::invoiceNum = invoiceNum;
		_p->ns1__PenaltyRecordType::acc = acc;
		_p->ns1__PenaltyRecordType::accUnit = accUnit;
		_p->ns1__PenaltyRecordType::unit = unit;
		_p->ns1__PenaltyRecordType::tp = tp;
		_p->ns1__PenaltyRecordType::pd = pd;
		_p->ns1__PenaltyRecordType::returned = returned;
		_p->ns1__PenaltyRecordType::tR = tR;
		_p->ns1__PenaltyRecordType::payments = payments;
		_p->ns1__PenaltyRecordType::awards = awards;
		_p->ns1__PenaltyRecordType::pendingPayment = pendingPayment;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__PenaltyRecordType(struct soap *soap, ns1__PenaltyRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PenaltyRecordType", p->soap_type() == SOAP_TYPE_ns1__PenaltyRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PenaltyRecordType(struct soap *soap, const char *URL, ns1__PenaltyRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PenaltyRecordType", p->soap_type() == SOAP_TYPE_ns1__PenaltyRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PenaltyRecordType(struct soap *soap, const char *URL, ns1__PenaltyRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PenaltyRecordType", p->soap_type() == SOAP_TYPE_ns1__PenaltyRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PenaltyRecordType * SOAP_FMAC4 soap_get_ns1__PenaltyRecordType(struct soap*, ns1__PenaltyRecordType *, const char*, const char*);

inline int soap_read_ns1__PenaltyRecordType(struct soap *soap, ns1__PenaltyRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PenaltyRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PenaltyRecordType(struct soap *soap, const char *URL, ns1__PenaltyRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PenaltyRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PenaltyRecordType(struct soap *soap, ns1__PenaltyRecordType *p)
{
	if (soap_read_ns1__PenaltyRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InternalCoinFlowRecordType_DEFINED
#define SOAP_TYPE_ns1__InternalCoinFlowRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InternalCoinFlowRecordType(struct soap*, const char*, int, const ns1__InternalCoinFlowRecordType *, const char*);
SOAP_FMAC3 ns1__InternalCoinFlowRecordType * SOAP_FMAC4 soap_in_ns1__InternalCoinFlowRecordType(struct soap*, const char*, ns1__InternalCoinFlowRecordType *, const char*);
SOAP_FMAC1 ns1__InternalCoinFlowRecordType * SOAP_FMAC2 soap_instantiate_ns1__InternalCoinFlowRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InternalCoinFlowRecordType * soap_new_ns1__InternalCoinFlowRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InternalCoinFlowRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__InternalCoinFlowRecordType * soap_new_req_ns1__InternalCoinFlowRecordType(
	struct soap *soap,
	LONG64 bN,
	unsigned short bT,
	LONG64 val,
	LONG64 qtt,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__InternalCoinFlowRecordType *_p = soap_new_ns1__InternalCoinFlowRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InternalCoinFlowRecordType::bN = bN;
		_p->ns1__InternalCoinFlowRecordType::bT = bT;
		_p->ns1__InternalCoinFlowRecordType::val = val;
		_p->ns1__InternalCoinFlowRecordType::qtt = qtt;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__InternalCoinFlowRecordType * soap_new_set_ns1__InternalCoinFlowRecordType(
	struct soap *soap,
	LONG64 bN,
	unsigned short bT,
	LONG64 val,
	LONG64 qtt,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__InternalCoinFlowRecordType *_p = soap_new_ns1__InternalCoinFlowRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InternalCoinFlowRecordType::bN = bN;
		_p->ns1__InternalCoinFlowRecordType::bT = bT;
		_p->ns1__InternalCoinFlowRecordType::val = val;
		_p->ns1__InternalCoinFlowRecordType::qtt = qtt;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__InternalCoinFlowRecordType(struct soap *soap, ns1__InternalCoinFlowRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InternalCoinFlowRecordType", p->soap_type() == SOAP_TYPE_ns1__InternalCoinFlowRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InternalCoinFlowRecordType(struct soap *soap, const char *URL, ns1__InternalCoinFlowRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InternalCoinFlowRecordType", p->soap_type() == SOAP_TYPE_ns1__InternalCoinFlowRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InternalCoinFlowRecordType(struct soap *soap, const char *URL, ns1__InternalCoinFlowRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InternalCoinFlowRecordType", p->soap_type() == SOAP_TYPE_ns1__InternalCoinFlowRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InternalCoinFlowRecordType * SOAP_FMAC4 soap_get_ns1__InternalCoinFlowRecordType(struct soap*, ns1__InternalCoinFlowRecordType *, const char*, const char*);

inline int soap_read_ns1__InternalCoinFlowRecordType(struct soap *soap, ns1__InternalCoinFlowRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__InternalCoinFlowRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InternalCoinFlowRecordType(struct soap *soap, const char *URL, ns1__InternalCoinFlowRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__InternalCoinFlowRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InternalCoinFlowRecordType(struct soap *soap, ns1__InternalCoinFlowRecordType *p)
{
	if (soap_read_ns1__InternalCoinFlowRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CoinNoteRefillAdjustmentRecordType_DEFINED
#define SOAP_TYPE_ns1__CoinNoteRefillAdjustmentRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CoinNoteRefillAdjustmentRecordType(struct soap*, const char*, int, const ns1__CoinNoteRefillAdjustmentRecordType *, const char*);
SOAP_FMAC3 ns1__CoinNoteRefillAdjustmentRecordType * SOAP_FMAC4 soap_in_ns1__CoinNoteRefillAdjustmentRecordType(struct soap*, const char*, ns1__CoinNoteRefillAdjustmentRecordType *, const char*);
SOAP_FMAC1 ns1__CoinNoteRefillAdjustmentRecordType * SOAP_FMAC2 soap_instantiate_ns1__CoinNoteRefillAdjustmentRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CoinNoteRefillAdjustmentRecordType * soap_new_ns1__CoinNoteRefillAdjustmentRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CoinNoteRefillAdjustmentRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CoinNoteRefillAdjustmentRecordType * soap_new_req_ns1__CoinNoteRefillAdjustmentRecordType(
	struct soap *soap,
	LONG64 refillNum,
	LONG64 userId,
	LONG64 bN,
	unsigned short bT,
	char *date,
	LONG64 val,
	LONG64 qtt,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CoinNoteRefillAdjustmentRecordType *_p = soap_new_ns1__CoinNoteRefillAdjustmentRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CoinNoteRefillAdjustmentRecordType::refillNum = refillNum;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::userId = userId;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::bN = bN;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::bT = bT;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::date = date;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::val = val;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::qtt = qtt;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CoinNoteRefillAdjustmentRecordType * soap_new_set_ns1__CoinNoteRefillAdjustmentRecordType(
	struct soap *soap,
	LONG64 refillNum,
	LONG64 userId,
	LONG64 bN,
	unsigned short bT,
	char *date,
	LONG64 val,
	LONG64 qtt,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CoinNoteRefillAdjustmentRecordType *_p = soap_new_ns1__CoinNoteRefillAdjustmentRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CoinNoteRefillAdjustmentRecordType::refillNum = refillNum;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::userId = userId;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::bN = bN;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::bT = bT;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::date = date;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::val = val;
		_p->ns1__CoinNoteRefillAdjustmentRecordType::qtt = qtt;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CoinNoteRefillAdjustmentRecordType(struct soap *soap, ns1__CoinNoteRefillAdjustmentRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteRefillAdjustmentRecordType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteRefillAdjustmentRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CoinNoteRefillAdjustmentRecordType(struct soap *soap, const char *URL, ns1__CoinNoteRefillAdjustmentRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteRefillAdjustmentRecordType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteRefillAdjustmentRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CoinNoteRefillAdjustmentRecordType(struct soap *soap, const char *URL, ns1__CoinNoteRefillAdjustmentRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteRefillAdjustmentRecordType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteRefillAdjustmentRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CoinNoteRefillAdjustmentRecordType * SOAP_FMAC4 soap_get_ns1__CoinNoteRefillAdjustmentRecordType(struct soap*, ns1__CoinNoteRefillAdjustmentRecordType *, const char*, const char*);

inline int soap_read_ns1__CoinNoteRefillAdjustmentRecordType(struct soap *soap, ns1__CoinNoteRefillAdjustmentRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CoinNoteRefillAdjustmentRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CoinNoteRefillAdjustmentRecordType(struct soap *soap, const char *URL, ns1__CoinNoteRefillAdjustmentRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CoinNoteRefillAdjustmentRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CoinNoteRefillAdjustmentRecordType(struct soap *soap, ns1__CoinNoteRefillAdjustmentRecordType *p)
{
	if (soap_read_ns1__CoinNoteRefillAdjustmentRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CoinNoteRefillRecordType_DEFINED
#define SOAP_TYPE_ns1__CoinNoteRefillRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CoinNoteRefillRecordType(struct soap*, const char*, int, const ns1__CoinNoteRefillRecordType *, const char*);
SOAP_FMAC3 ns1__CoinNoteRefillRecordType * SOAP_FMAC4 soap_in_ns1__CoinNoteRefillRecordType(struct soap*, const char*, ns1__CoinNoteRefillRecordType *, const char*);
SOAP_FMAC1 ns1__CoinNoteRefillRecordType * SOAP_FMAC2 soap_instantiate_ns1__CoinNoteRefillRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CoinNoteRefillRecordType * soap_new_ns1__CoinNoteRefillRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CoinNoteRefillRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CoinNoteRefillRecordType * soap_new_req_ns1__CoinNoteRefillRecordType(
	struct soap *soap,
	LONG64 refillNum,
	LONG64 userId,
	LONG64 bN,
	unsigned short bT,
	LONG64 val,
	LONG64 qtt,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CoinNoteRefillRecordType *_p = soap_new_ns1__CoinNoteRefillRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CoinNoteRefillRecordType::refillNum = refillNum;
		_p->ns1__CoinNoteRefillRecordType::userId = userId;
		_p->ns1__CoinNoteRefillRecordType::bN = bN;
		_p->ns1__CoinNoteRefillRecordType::bT = bT;
		_p->ns1__CoinNoteRefillRecordType::val = val;
		_p->ns1__CoinNoteRefillRecordType::qtt = qtt;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CoinNoteRefillRecordType * soap_new_set_ns1__CoinNoteRefillRecordType(
	struct soap *soap,
	LONG64 refillNum,
	LONG64 userId,
	LONG64 bN,
	unsigned short bT,
	LONG64 val,
	LONG64 qtt,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CoinNoteRefillRecordType *_p = soap_new_ns1__CoinNoteRefillRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CoinNoteRefillRecordType::refillNum = refillNum;
		_p->ns1__CoinNoteRefillRecordType::userId = userId;
		_p->ns1__CoinNoteRefillRecordType::bN = bN;
		_p->ns1__CoinNoteRefillRecordType::bT = bT;
		_p->ns1__CoinNoteRefillRecordType::val = val;
		_p->ns1__CoinNoteRefillRecordType::qtt = qtt;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CoinNoteRefillRecordType(struct soap *soap, ns1__CoinNoteRefillRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteRefillRecordType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteRefillRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CoinNoteRefillRecordType(struct soap *soap, const char *URL, ns1__CoinNoteRefillRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteRefillRecordType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteRefillRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CoinNoteRefillRecordType(struct soap *soap, const char *URL, ns1__CoinNoteRefillRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteRefillRecordType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteRefillRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CoinNoteRefillRecordType * SOAP_FMAC4 soap_get_ns1__CoinNoteRefillRecordType(struct soap*, ns1__CoinNoteRefillRecordType *, const char*, const char*);

inline int soap_read_ns1__CoinNoteRefillRecordType(struct soap *soap, ns1__CoinNoteRefillRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CoinNoteRefillRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CoinNoteRefillRecordType(struct soap *soap, const char *URL, ns1__CoinNoteRefillRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CoinNoteRefillRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CoinNoteRefillRecordType(struct soap *soap, ns1__CoinNoteRefillRecordType *p)
{
	if (soap_read_ns1__CoinNoteRefillRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MediaStockAdjustRecordType_DEFINED
#define SOAP_TYPE_ns1__MediaStockAdjustRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaStockAdjustRecordType(struct soap*, const char*, int, const ns1__MediaStockAdjustRecordType *, const char*);
SOAP_FMAC3 ns1__MediaStockAdjustRecordType * SOAP_FMAC4 soap_in_ns1__MediaStockAdjustRecordType(struct soap*, const char*, ns1__MediaStockAdjustRecordType *, const char*);
SOAP_FMAC1 ns1__MediaStockAdjustRecordType * SOAP_FMAC2 soap_instantiate_ns1__MediaStockAdjustRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MediaStockAdjustRecordType * soap_new_ns1__MediaStockAdjustRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MediaStockAdjustRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__MediaStockAdjustRecordType * soap_new_req_ns1__MediaStockAdjustRecordType(
	struct soap *soap,
	ns1__mediaStockType *Stock,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__MediaStockAdjustRecordType *_p = soap_new_ns1__MediaStockAdjustRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaStockAdjustRecordType::Stock = Stock;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__MediaStockAdjustRecordType * soap_new_set_ns1__MediaStockAdjustRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	ns1__mediaStockType *Stock,
	LONG64 *updNum,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__MediaStockAdjustRecordType *_p = soap_new_ns1__MediaStockAdjustRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaStockAdjustRecordType::shift = shift;
		_p->ns1__MediaStockAdjustRecordType::Stock = Stock;
		_p->ns1__MediaStockAdjustRecordType::updNum = updNum;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MediaStockAdjustRecordType(struct soap *soap, ns1__MediaStockAdjustRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaStockAdjustRecordType", p->soap_type() == SOAP_TYPE_ns1__MediaStockAdjustRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MediaStockAdjustRecordType(struct soap *soap, const char *URL, ns1__MediaStockAdjustRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaStockAdjustRecordType", p->soap_type() == SOAP_TYPE_ns1__MediaStockAdjustRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MediaStockAdjustRecordType(struct soap *soap, const char *URL, ns1__MediaStockAdjustRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaStockAdjustRecordType", p->soap_type() == SOAP_TYPE_ns1__MediaStockAdjustRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MediaStockAdjustRecordType * SOAP_FMAC4 soap_get_ns1__MediaStockAdjustRecordType(struct soap*, ns1__MediaStockAdjustRecordType *, const char*, const char*);

inline int soap_read_ns1__MediaStockAdjustRecordType(struct soap *soap, ns1__MediaStockAdjustRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MediaStockAdjustRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MediaStockAdjustRecordType(struct soap *soap, const char *URL, ns1__MediaStockAdjustRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MediaStockAdjustRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MediaStockAdjustRecordType(struct soap *soap, ns1__MediaStockAdjustRecordType *p)
{
	if (soap_read_ns1__MediaStockAdjustRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__mediaStockType_DEFINED
#define SOAP_TYPE_ns1__mediaStockType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__mediaStockType(struct soap*, const char*, int, const ns1__mediaStockType *, const char*);
SOAP_FMAC3 ns1__mediaStockType * SOAP_FMAC4 soap_in_ns1__mediaStockType(struct soap*, const char*, ns1__mediaStockType *, const char*);
SOAP_FMAC1 ns1__mediaStockType * SOAP_FMAC2 soap_instantiate_ns1__mediaStockType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__mediaStockType * soap_new_ns1__mediaStockType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__mediaStockType(soap, n, NULL, NULL, NULL);
}

inline ns1__mediaStockType * soap_new_req_ns1__mediaStockType(
	struct soap *soap)
{
	ns1__mediaStockType *_p = soap_new_ns1__mediaStockType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__mediaStockType * soap_new_set_ns1__mediaStockType(
	struct soap *soap,
	LONG64 *mT,
	LONG64 *dT,
	LONG64 *dId,
	LONG64 *lotId,
	LONG64 *qtt,
	char *__item__1)
{
	ns1__mediaStockType *_p = soap_new_ns1__mediaStockType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__mediaStockType::mT = mT;
		_p->ns1__mediaStockType::dT = dT;
		_p->ns1__mediaStockType::dId = dId;
		_p->ns1__mediaStockType::lotId = lotId;
		_p->ns1__mediaStockType::qtt = qtt;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__mediaStockType(struct soap *soap, ns1__mediaStockType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:mediaStockType", p->soap_type() == SOAP_TYPE_ns1__mediaStockType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__mediaStockType(struct soap *soap, const char *URL, ns1__mediaStockType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:mediaStockType", p->soap_type() == SOAP_TYPE_ns1__mediaStockType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__mediaStockType(struct soap *soap, const char *URL, ns1__mediaStockType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:mediaStockType", p->soap_type() == SOAP_TYPE_ns1__mediaStockType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__mediaStockType * SOAP_FMAC4 soap_get_ns1__mediaStockType(struct soap*, ns1__mediaStockType *, const char*, const char*);

inline int soap_read_ns1__mediaStockType(struct soap *soap, ns1__mediaStockType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__mediaStockType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__mediaStockType(struct soap *soap, const char *URL, ns1__mediaStockType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__mediaStockType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__mediaStockType(struct soap *soap, ns1__mediaStockType *p)
{
	if (soap_read_ns1__mediaStockType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MediaStockListType_DEFINED
#define SOAP_TYPE_ns1__MediaStockListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaStockListType(struct soap*, const char*, int, const ns1__MediaStockListType *, const char*);
SOAP_FMAC3 ns1__MediaStockListType * SOAP_FMAC4 soap_in_ns1__MediaStockListType(struct soap*, const char*, ns1__MediaStockListType *, const char*);
SOAP_FMAC1 ns1__MediaStockListType * SOAP_FMAC2 soap_instantiate_ns1__MediaStockListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MediaStockListType * soap_new_ns1__MediaStockListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MediaStockListType(soap, n, NULL, NULL, NULL);
}

inline ns1__MediaStockListType * soap_new_req_ns1__MediaStockListType(
	struct soap *soap,
	int __sizestock,
	ns1__mediaStockType **stock)
{
	ns1__MediaStockListType *_p = soap_new_ns1__MediaStockListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaStockListType::__sizestock = __sizestock;
		_p->ns1__MediaStockListType::stock = stock;
	}
	return _p;
}

inline ns1__MediaStockListType * soap_new_set_ns1__MediaStockListType(
	struct soap *soap,
	int __sizestock,
	ns1__mediaStockType **stock,
	char *__item__1)
{
	ns1__MediaStockListType *_p = soap_new_ns1__MediaStockListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaStockListType::__sizestock = __sizestock;
		_p->ns1__MediaStockListType::stock = stock;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MediaStockListType(struct soap *soap, ns1__MediaStockListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaStockListType", p->soap_type() == SOAP_TYPE_ns1__MediaStockListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MediaStockListType(struct soap *soap, const char *URL, ns1__MediaStockListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaStockListType", p->soap_type() == SOAP_TYPE_ns1__MediaStockListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MediaStockListType(struct soap *soap, const char *URL, ns1__MediaStockListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaStockListType", p->soap_type() == SOAP_TYPE_ns1__MediaStockListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MediaStockListType * SOAP_FMAC4 soap_get_ns1__MediaStockListType(struct soap*, ns1__MediaStockListType *, const char*, const char*);

inline int soap_read_ns1__MediaStockListType(struct soap *soap, ns1__MediaStockListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MediaStockListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MediaStockListType(struct soap *soap, const char *URL, ns1__MediaStockListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MediaStockListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MediaStockListType(struct soap *soap, ns1__MediaStockListType *p)
{
	if (soap_read_ns1__MediaStockListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MediaStockUpdateRecordType_DEFINED
#define SOAP_TYPE_ns1__MediaStockUpdateRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaStockUpdateRecordType(struct soap*, const char*, int, const ns1__MediaStockUpdateRecordType *, const char*);
SOAP_FMAC3 ns1__MediaStockUpdateRecordType * SOAP_FMAC4 soap_in_ns1__MediaStockUpdateRecordType(struct soap*, const char*, ns1__MediaStockUpdateRecordType *, const char*);
SOAP_FMAC1 ns1__MediaStockUpdateRecordType * SOAP_FMAC2 soap_instantiate_ns1__MediaStockUpdateRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MediaStockUpdateRecordType * soap_new_ns1__MediaStockUpdateRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MediaStockUpdateRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__MediaStockUpdateRecordType * soap_new_req_ns1__MediaStockUpdateRecordType(
	struct soap *soap,
	ns1__MediaStockListType *Stocks,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__MediaStockUpdateRecordType *_p = soap_new_ns1__MediaStockUpdateRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaStockUpdateRecordType::Stocks = Stocks;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__MediaStockUpdateRecordType * soap_new_set_ns1__MediaStockUpdateRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	ns1__MediaStockListType *Stocks,
	LONG64 *updNum,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__MediaStockUpdateRecordType *_p = soap_new_ns1__MediaStockUpdateRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaStockUpdateRecordType::shift = shift;
		_p->ns1__MediaStockUpdateRecordType::Stocks = Stocks;
		_p->ns1__MediaStockUpdateRecordType::updNum = updNum;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MediaStockUpdateRecordType(struct soap *soap, ns1__MediaStockUpdateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaStockUpdateRecordType", p->soap_type() == SOAP_TYPE_ns1__MediaStockUpdateRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MediaStockUpdateRecordType(struct soap *soap, const char *URL, ns1__MediaStockUpdateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaStockUpdateRecordType", p->soap_type() == SOAP_TYPE_ns1__MediaStockUpdateRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MediaStockUpdateRecordType(struct soap *soap, const char *URL, ns1__MediaStockUpdateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaStockUpdateRecordType", p->soap_type() == SOAP_TYPE_ns1__MediaStockUpdateRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MediaStockUpdateRecordType * SOAP_FMAC4 soap_get_ns1__MediaStockUpdateRecordType(struct soap*, ns1__MediaStockUpdateRecordType *, const char*, const char*);

inline int soap_read_ns1__MediaStockUpdateRecordType(struct soap *soap, ns1__MediaStockUpdateRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MediaStockUpdateRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MediaStockUpdateRecordType(struct soap *soap, const char *URL, ns1__MediaStockUpdateRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MediaStockUpdateRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MediaStockUpdateRecordType(struct soap *soap, ns1__MediaStockUpdateRecordType *p)
{
	if (soap_read_ns1__MediaStockUpdateRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CoinsAndNotesCollectionRecordType_DEFINED
#define SOAP_TYPE_ns1__CoinsAndNotesCollectionRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CoinsAndNotesCollectionRecordType(struct soap*, const char*, int, const ns1__CoinsAndNotesCollectionRecordType *, const char*);
SOAP_FMAC3 ns1__CoinsAndNotesCollectionRecordType * SOAP_FMAC4 soap_in_ns1__CoinsAndNotesCollectionRecordType(struct soap*, const char*, ns1__CoinsAndNotesCollectionRecordType *, const char*);
SOAP_FMAC1 ns1__CoinsAndNotesCollectionRecordType * SOAP_FMAC2 soap_instantiate_ns1__CoinsAndNotesCollectionRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CoinsAndNotesCollectionRecordType * soap_new_ns1__CoinsAndNotesCollectionRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CoinsAndNotesCollectionRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CoinsAndNotesCollectionRecordType * soap_new_req_ns1__CoinsAndNotesCollectionRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CoinsAndNotesCollectionRecordType *_p = soap_new_ns1__CoinsAndNotesCollectionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CoinsAndNotesCollectionRecordType * soap_new_set_ns1__CoinsAndNotesCollectionRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	ns1__monetaryUnitListType *units,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CoinsAndNotesCollectionRecordType *_p = soap_new_ns1__CoinsAndNotesCollectionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CoinsAndNotesCollectionRecordType::shift = shift;
		_p->ns1__CoinsAndNotesCollectionRecordType::units = units;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CoinsAndNotesCollectionRecordType(struct soap *soap, ns1__CoinsAndNotesCollectionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinsAndNotesCollectionRecordType", p->soap_type() == SOAP_TYPE_ns1__CoinsAndNotesCollectionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CoinsAndNotesCollectionRecordType(struct soap *soap, const char *URL, ns1__CoinsAndNotesCollectionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinsAndNotesCollectionRecordType", p->soap_type() == SOAP_TYPE_ns1__CoinsAndNotesCollectionRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CoinsAndNotesCollectionRecordType(struct soap *soap, const char *URL, ns1__CoinsAndNotesCollectionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinsAndNotesCollectionRecordType", p->soap_type() == SOAP_TYPE_ns1__CoinsAndNotesCollectionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CoinsAndNotesCollectionRecordType * SOAP_FMAC4 soap_get_ns1__CoinsAndNotesCollectionRecordType(struct soap*, ns1__CoinsAndNotesCollectionRecordType *, const char*, const char*);

inline int soap_read_ns1__CoinsAndNotesCollectionRecordType(struct soap *soap, ns1__CoinsAndNotesCollectionRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CoinsAndNotesCollectionRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CoinsAndNotesCollectionRecordType(struct soap *soap, const char *URL, ns1__CoinsAndNotesCollectionRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CoinsAndNotesCollectionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CoinsAndNotesCollectionRecordType(struct soap *soap, ns1__CoinsAndNotesCollectionRecordType *p)
{
	if (soap_read_ns1__CoinsAndNotesCollectionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CollectionRecordType_DEFINED
#define SOAP_TYPE_ns1__CollectionRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CollectionRecordType(struct soap*, const char*, int, const ns1__CollectionRecordType *, const char*);
SOAP_FMAC3 ns1__CollectionRecordType * SOAP_FMAC4 soap_in_ns1__CollectionRecordType(struct soap*, const char*, ns1__CollectionRecordType *, const char*);
SOAP_FMAC1 ns1__CollectionRecordType * SOAP_FMAC2 soap_instantiate_ns1__CollectionRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CollectionRecordType * soap_new_ns1__CollectionRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CollectionRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CollectionRecordType * soap_new_req_ns1__CollectionRecordType(
	struct soap *soap,
	LONG64 collectNum,
	LONG64 userId,
	LONG64 bN,
	unsigned short bT,
	LONG64 sN,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CollectionRecordType *_p = soap_new_ns1__CollectionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CollectionRecordType::collectNum = collectNum;
		_p->ns1__CollectionRecordType::userId = userId;
		_p->ns1__CollectionRecordType::bN = bN;
		_p->ns1__CollectionRecordType::bT = bT;
		_p->ns1__CollectionRecordType::sN = sN;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CollectionRecordType * soap_new_set_ns1__CollectionRecordType(
	struct soap *soap,
	LONG64 collectNum,
	LONG64 userId,
	LONG64 bN,
	unsigned short bT,
	LONG64 sN,
	ns1__monetaryUnitListType *Units,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CollectionRecordType *_p = soap_new_ns1__CollectionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CollectionRecordType::collectNum = collectNum;
		_p->ns1__CollectionRecordType::userId = userId;
		_p->ns1__CollectionRecordType::bN = bN;
		_p->ns1__CollectionRecordType::bT = bT;
		_p->ns1__CollectionRecordType::sN = sN;
		_p->ns1__CollectionRecordType::Units = Units;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CollectionRecordType(struct soap *soap, ns1__CollectionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CollectionRecordType", p->soap_type() == SOAP_TYPE_ns1__CollectionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CollectionRecordType(struct soap *soap, const char *URL, ns1__CollectionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CollectionRecordType", p->soap_type() == SOAP_TYPE_ns1__CollectionRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CollectionRecordType(struct soap *soap, const char *URL, ns1__CollectionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CollectionRecordType", p->soap_type() == SOAP_TYPE_ns1__CollectionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CollectionRecordType * SOAP_FMAC4 soap_get_ns1__CollectionRecordType(struct soap*, ns1__CollectionRecordType *, const char*, const char*);

inline int soap_read_ns1__CollectionRecordType(struct soap *soap, ns1__CollectionRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CollectionRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CollectionRecordType(struct soap *soap, const char *URL, ns1__CollectionRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CollectionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CollectionRecordType(struct soap *soap, ns1__CollectionRecordType *p)
{
	if (soap_read_ns1__CollectionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CashMaintenanceRecordType_DEFINED
#define SOAP_TYPE_ns1__CashMaintenanceRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CashMaintenanceRecordType(struct soap*, const char*, int, const ns1__CashMaintenanceRecordType *, const char*);
SOAP_FMAC3 ns1__CashMaintenanceRecordType * SOAP_FMAC4 soap_in_ns1__CashMaintenanceRecordType(struct soap*, const char*, ns1__CashMaintenanceRecordType *, const char*);
SOAP_FMAC1 ns1__CashMaintenanceRecordType * SOAP_FMAC2 soap_instantiate_ns1__CashMaintenanceRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CashMaintenanceRecordType * soap_new_ns1__CashMaintenanceRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CashMaintenanceRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CashMaintenanceRecordType * soap_new_req_ns1__CashMaintenanceRecordType(
	struct soap *soap,
	LONG64 userId,
	LONG64 bN,
	unsigned short bT,
	LONG64 val,
	LONG64 qtt,
	LONG64 cash,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CashMaintenanceRecordType *_p = soap_new_ns1__CashMaintenanceRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashMaintenanceRecordType::userId = userId;
		_p->ns1__CashMaintenanceRecordType::bN = bN;
		_p->ns1__CashMaintenanceRecordType::bT = bT;
		_p->ns1__CashMaintenanceRecordType::val = val;
		_p->ns1__CashMaintenanceRecordType::qtt = qtt;
		_p->ns1__CashMaintenanceRecordType::cash = cash;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CashMaintenanceRecordType * soap_new_set_ns1__CashMaintenanceRecordType(
	struct soap *soap,
	LONG64 userId,
	LONG64 bN,
	unsigned short bT,
	LONG64 val,
	LONG64 qtt,
	LONG64 cash,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CashMaintenanceRecordType *_p = soap_new_ns1__CashMaintenanceRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashMaintenanceRecordType::userId = userId;
		_p->ns1__CashMaintenanceRecordType::bN = bN;
		_p->ns1__CashMaintenanceRecordType::bT = bT;
		_p->ns1__CashMaintenanceRecordType::val = val;
		_p->ns1__CashMaintenanceRecordType::qtt = qtt;
		_p->ns1__CashMaintenanceRecordType::cash = cash;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CashMaintenanceRecordType(struct soap *soap, ns1__CashMaintenanceRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashMaintenanceRecordType", p->soap_type() == SOAP_TYPE_ns1__CashMaintenanceRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CashMaintenanceRecordType(struct soap *soap, const char *URL, ns1__CashMaintenanceRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashMaintenanceRecordType", p->soap_type() == SOAP_TYPE_ns1__CashMaintenanceRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CashMaintenanceRecordType(struct soap *soap, const char *URL, ns1__CashMaintenanceRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashMaintenanceRecordType", p->soap_type() == SOAP_TYPE_ns1__CashMaintenanceRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CashMaintenanceRecordType * SOAP_FMAC4 soap_get_ns1__CashMaintenanceRecordType(struct soap*, ns1__CashMaintenanceRecordType *, const char*, const char*);

inline int soap_read_ns1__CashMaintenanceRecordType(struct soap *soap, ns1__CashMaintenanceRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CashMaintenanceRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CashMaintenanceRecordType(struct soap *soap, const char *URL, ns1__CashMaintenanceRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CashMaintenanceRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CashMaintenanceRecordType(struct soap *soap, ns1__CashMaintenanceRecordType *p)
{
	if (soap_read_ns1__CashMaintenanceRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CashCountingRecordType_DEFINED
#define SOAP_TYPE_ns1__CashCountingRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CashCountingRecordType(struct soap*, const char*, int, const ns1__CashCountingRecordType *, const char*);
SOAP_FMAC3 ns1__CashCountingRecordType * SOAP_FMAC4 soap_in_ns1__CashCountingRecordType(struct soap*, const char*, ns1__CashCountingRecordType *, const char*);
SOAP_FMAC1 ns1__CashCountingRecordType * SOAP_FMAC2 soap_instantiate_ns1__CashCountingRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CashCountingRecordType * soap_new_ns1__CashCountingRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CashCountingRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CashCountingRecordType * soap_new_req_ns1__CashCountingRecordType(
	struct soap *soap,
	LONG64 cashContNum,
	LONG64 userId,
	int opT,
	LONG64 totAmnt,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CashCountingRecordType *_p = soap_new_ns1__CashCountingRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashCountingRecordType::cashContNum = cashContNum;
		_p->ns1__CashCountingRecordType::userId = userId;
		_p->ns1__CashCountingRecordType::opT = opT;
		_p->ns1__CashCountingRecordType::totAmnt = totAmnt;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CashCountingRecordType * soap_new_set_ns1__CashCountingRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 cashContNum,
	LONG64 userId,
	int opT,
	ns1__monetaryUnitListType *units,
	LONG64 totAmnt,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CashCountingRecordType *_p = soap_new_ns1__CashCountingRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashCountingRecordType::shift = shift;
		_p->ns1__CashCountingRecordType::cashContNum = cashContNum;
		_p->ns1__CashCountingRecordType::userId = userId;
		_p->ns1__CashCountingRecordType::opT = opT;
		_p->ns1__CashCountingRecordType::units = units;
		_p->ns1__CashCountingRecordType::totAmnt = totAmnt;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CashCountingRecordType(struct soap *soap, ns1__CashCountingRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashCountingRecordType", p->soap_type() == SOAP_TYPE_ns1__CashCountingRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CashCountingRecordType(struct soap *soap, const char *URL, ns1__CashCountingRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashCountingRecordType", p->soap_type() == SOAP_TYPE_ns1__CashCountingRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CashCountingRecordType(struct soap *soap, const char *URL, ns1__CashCountingRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashCountingRecordType", p->soap_type() == SOAP_TYPE_ns1__CashCountingRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CashCountingRecordType * SOAP_FMAC4 soap_get_ns1__CashCountingRecordType(struct soap*, ns1__CashCountingRecordType *, const char*, const char*);

inline int soap_read_ns1__CashCountingRecordType(struct soap *soap, ns1__CashCountingRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CashCountingRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CashCountingRecordType(struct soap *soap, const char *URL, ns1__CashCountingRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CashCountingRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CashCountingRecordType(struct soap *soap, ns1__CashCountingRecordType *p)
{
	if (soap_read_ns1__CashCountingRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__monetaryUnit_DEFINED
#define SOAP_TYPE_ns1__monetaryUnit_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__monetaryUnit(struct soap*, const char*, int, const ns1__monetaryUnit *, const char*);
SOAP_FMAC3 ns1__monetaryUnit * SOAP_FMAC4 soap_in_ns1__monetaryUnit(struct soap*, const char*, ns1__monetaryUnit *, const char*);
SOAP_FMAC1 ns1__monetaryUnit * SOAP_FMAC2 soap_instantiate_ns1__monetaryUnit(struct soap*, int, const char*, const char*, size_t*);

inline ns1__monetaryUnit * soap_new_ns1__monetaryUnit(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__monetaryUnit(soap, n, NULL, NULL, NULL);
}

inline ns1__monetaryUnit * soap_new_req_ns1__monetaryUnit(
	struct soap *soap)
{
	ns1__monetaryUnit *_p = soap_new_ns1__monetaryUnit(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__monetaryUnit * soap_new_set_ns1__monetaryUnit(
	struct soap *soap,
	LONG64 *value,
	LONG64 *quantity,
	int *type,
	char *__item__1)
{
	ns1__monetaryUnit *_p = soap_new_ns1__monetaryUnit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__monetaryUnit::value = value;
		_p->ns1__monetaryUnit::quantity = quantity;
		_p->ns1__monetaryUnit::type = type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__monetaryUnit(struct soap *soap, ns1__monetaryUnit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:monetaryUnit", p->soap_type() == SOAP_TYPE_ns1__monetaryUnit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__monetaryUnit(struct soap *soap, const char *URL, ns1__monetaryUnit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:monetaryUnit", p->soap_type() == SOAP_TYPE_ns1__monetaryUnit ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__monetaryUnit(struct soap *soap, const char *URL, ns1__monetaryUnit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:monetaryUnit", p->soap_type() == SOAP_TYPE_ns1__monetaryUnit ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__monetaryUnit * SOAP_FMAC4 soap_get_ns1__monetaryUnit(struct soap*, ns1__monetaryUnit *, const char*, const char*);

inline int soap_read_ns1__monetaryUnit(struct soap *soap, ns1__monetaryUnit *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__monetaryUnit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__monetaryUnit(struct soap *soap, const char *URL, ns1__monetaryUnit *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__monetaryUnit(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__monetaryUnit(struct soap *soap, ns1__monetaryUnit *p)
{
	if (soap_read_ns1__monetaryUnit(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__monetaryUnitListType_DEFINED
#define SOAP_TYPE_ns1__monetaryUnitListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__monetaryUnitListType(struct soap*, const char*, int, const ns1__monetaryUnitListType *, const char*);
SOAP_FMAC3 ns1__monetaryUnitListType * SOAP_FMAC4 soap_in_ns1__monetaryUnitListType(struct soap*, const char*, ns1__monetaryUnitListType *, const char*);
SOAP_FMAC1 ns1__monetaryUnitListType * SOAP_FMAC2 soap_instantiate_ns1__monetaryUnitListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__monetaryUnitListType * soap_new_ns1__monetaryUnitListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__monetaryUnitListType(soap, n, NULL, NULL, NULL);
}

inline ns1__monetaryUnitListType * soap_new_req_ns1__monetaryUnitListType(
	struct soap *soap,
	int __sizeunit,
	ns1__monetaryUnit **unit)
{
	ns1__monetaryUnitListType *_p = soap_new_ns1__monetaryUnitListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__monetaryUnitListType::__sizeunit = __sizeunit;
		_p->ns1__monetaryUnitListType::unit = unit;
	}
	return _p;
}

inline ns1__monetaryUnitListType * soap_new_set_ns1__monetaryUnitListType(
	struct soap *soap,
	int __sizeunit,
	ns1__monetaryUnit **unit,
	int *length,
	char *__item__1)
{
	ns1__monetaryUnitListType *_p = soap_new_ns1__monetaryUnitListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__monetaryUnitListType::__sizeunit = __sizeunit;
		_p->ns1__monetaryUnitListType::unit = unit;
		_p->ns1__monetaryUnitListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__monetaryUnitListType(struct soap *soap, ns1__monetaryUnitListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:monetaryUnitListType", p->soap_type() == SOAP_TYPE_ns1__monetaryUnitListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__monetaryUnitListType(struct soap *soap, const char *URL, ns1__monetaryUnitListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:monetaryUnitListType", p->soap_type() == SOAP_TYPE_ns1__monetaryUnitListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__monetaryUnitListType(struct soap *soap, const char *URL, ns1__monetaryUnitListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:monetaryUnitListType", p->soap_type() == SOAP_TYPE_ns1__monetaryUnitListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__monetaryUnitListType * SOAP_FMAC4 soap_get_ns1__monetaryUnitListType(struct soap*, ns1__monetaryUnitListType *, const char*, const char*);

inline int soap_read_ns1__monetaryUnitListType(struct soap *soap, ns1__monetaryUnitListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__monetaryUnitListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__monetaryUnitListType(struct soap *soap, const char *URL, ns1__monetaryUnitListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__monetaryUnitListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__monetaryUnitListType(struct soap *soap, ns1__monetaryUnitListType *p)
{
	if (soap_read_ns1__monetaryUnitListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CashCountingAdjustRecordType_DEFINED
#define SOAP_TYPE_ns1__CashCountingAdjustRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CashCountingAdjustRecordType(struct soap*, const char*, int, const ns1__CashCountingAdjustRecordType *, const char*);
SOAP_FMAC3 ns1__CashCountingAdjustRecordType * SOAP_FMAC4 soap_in_ns1__CashCountingAdjustRecordType(struct soap*, const char*, ns1__CashCountingAdjustRecordType *, const char*);
SOAP_FMAC1 ns1__CashCountingAdjustRecordType * SOAP_FMAC2 soap_instantiate_ns1__CashCountingAdjustRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CashCountingAdjustRecordType * soap_new_ns1__CashCountingAdjustRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CashCountingAdjustRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CashCountingAdjustRecordType * soap_new_req_ns1__CashCountingAdjustRecordType(
	struct soap *soap,
	LONG64 cashContNum,
	LONG64 userId,
	int opT,
	LONG64 totAmnt,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CashCountingAdjustRecordType *_p = soap_new_ns1__CashCountingAdjustRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashCountingAdjustRecordType::cashContNum = cashContNum;
		_p->ns1__CashCountingAdjustRecordType::userId = userId;
		_p->ns1__CashCountingAdjustRecordType::opT = opT;
		_p->ns1__CashCountingAdjustRecordType::totAmnt = totAmnt;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CashCountingAdjustRecordType * soap_new_set_ns1__CashCountingAdjustRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 cashContNum,
	LONG64 userId,
	int opT,
	ns1__monetaryUnitListType *units,
	LONG64 totAmnt,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CashCountingAdjustRecordType *_p = soap_new_ns1__CashCountingAdjustRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CashCountingAdjustRecordType::shift = shift;
		_p->ns1__CashCountingAdjustRecordType::cashContNum = cashContNum;
		_p->ns1__CashCountingAdjustRecordType::userId = userId;
		_p->ns1__CashCountingAdjustRecordType::opT = opT;
		_p->ns1__CashCountingAdjustRecordType::units = units;
		_p->ns1__CashCountingAdjustRecordType::totAmnt = totAmnt;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CashCountingAdjustRecordType(struct soap *soap, ns1__CashCountingAdjustRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashCountingAdjustRecordType", p->soap_type() == SOAP_TYPE_ns1__CashCountingAdjustRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CashCountingAdjustRecordType(struct soap *soap, const char *URL, ns1__CashCountingAdjustRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashCountingAdjustRecordType", p->soap_type() == SOAP_TYPE_ns1__CashCountingAdjustRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CashCountingAdjustRecordType(struct soap *soap, const char *URL, ns1__CashCountingAdjustRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CashCountingAdjustRecordType", p->soap_type() == SOAP_TYPE_ns1__CashCountingAdjustRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CashCountingAdjustRecordType * SOAP_FMAC4 soap_get_ns1__CashCountingAdjustRecordType(struct soap*, ns1__CashCountingAdjustRecordType *, const char*, const char*);

inline int soap_read_ns1__CashCountingAdjustRecordType(struct soap *soap, ns1__CashCountingAdjustRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CashCountingAdjustRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CashCountingAdjustRecordType(struct soap *soap, const char *URL, ns1__CashCountingAdjustRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CashCountingAdjustRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CashCountingAdjustRecordType(struct soap *soap, ns1__CashCountingAdjustRecordType *p)
{
	if (soap_read_ns1__CashCountingAdjustRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TicketExchangeRecordType_DEFINED
#define SOAP_TYPE_ns1__TicketExchangeRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TicketExchangeRecordType(struct soap*, const char*, int, const ns1__TicketExchangeRecordType *, const char*);
SOAP_FMAC3 ns1__TicketExchangeRecordType * SOAP_FMAC4 soap_in_ns1__TicketExchangeRecordType(struct soap*, const char*, ns1__TicketExchangeRecordType *, const char*);
SOAP_FMAC1 ns1__TicketExchangeRecordType * SOAP_FMAC2 soap_instantiate_ns1__TicketExchangeRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TicketExchangeRecordType * soap_new_ns1__TicketExchangeRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TicketExchangeRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__TicketExchangeRecordType * soap_new_req_ns1__TicketExchangeRecordType(
	struct soap *soap,
	LONG64 origPassCod,
	LONG64 origZVal,
	LONG64 origNOfTrips,
	time_t origEOfVal,
	LONG64 origAmnt,
	LONG64 newPassCod,
	LONG64 newZVal,
	LONG64 newNOfTrips,
	time_t newEOfVal,
	LONG64 newAmnt,
	LONG64 finalAmntToPaid,
	LONG64 result,
	LONG64 tp,
	LONG64 pd,
	LONG64 returned,
	LONG64 tR,
	ns1__PaymentModeListType *payments,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__TicketExchangeRecordType *_p = soap_new_ns1__TicketExchangeRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TicketExchangeRecordType::origPassCod = origPassCod;
		_p->ns1__TicketExchangeRecordType::origZVal = origZVal;
		_p->ns1__TicketExchangeRecordType::origNOfTrips = origNOfTrips;
		_p->ns1__TicketExchangeRecordType::origEOfVal = origEOfVal;
		_p->ns1__TicketExchangeRecordType::origAmnt = origAmnt;
		_p->ns1__TicketExchangeRecordType::newPassCod = newPassCod;
		_p->ns1__TicketExchangeRecordType::newZVal = newZVal;
		_p->ns1__TicketExchangeRecordType::newNOfTrips = newNOfTrips;
		_p->ns1__TicketExchangeRecordType::newEOfVal = newEOfVal;
		_p->ns1__TicketExchangeRecordType::newAmnt = newAmnt;
		_p->ns1__TicketExchangeRecordType::finalAmntToPaid = finalAmntToPaid;
		_p->ns1__TicketExchangeRecordType::result = result;
		_p->ns1__TicketExchangeRecordType::tp = tp;
		_p->ns1__TicketExchangeRecordType::pd = pd;
		_p->ns1__TicketExchangeRecordType::returned = returned;
		_p->ns1__TicketExchangeRecordType::tR = tR;
		_p->ns1__TicketExchangeRecordType::payments = payments;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__TicketExchangeRecordType * soap_new_set_ns1__TicketExchangeRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 origPassCod,
	LONG64 origZVal,
	LONG64 origNOfTrips,
	time_t origEOfVal,
	LONG64 origAmnt,
	LONG64 newPassCod,
	LONG64 newZVal,
	LONG64 newNOfTrips,
	time_t newEOfVal,
	LONG64 newAmnt,
	LONG64 finalAmntToPaid,
	xsd__base64Binary *origCtlData,
	ns1__CardDataMagType *origCData,
	xsd__base64Binary *origRawData,
	xsd__base64Binary *newCtlData,
	ns1__CardDataMagType *newCData,
	xsd__base64Binary *newRawData,
	LONG64 result,
	LONG64 tp,
	LONG64 pd,
	LONG64 returned,
	LONG64 tR,
	ns1__PaymentModeListType *payments,
	ns1__AwardListType *awards,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__TicketExchangeRecordType *_p = soap_new_ns1__TicketExchangeRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TicketExchangeRecordType::shift = shift;
		_p->ns1__TicketExchangeRecordType::origPassCod = origPassCod;
		_p->ns1__TicketExchangeRecordType::origZVal = origZVal;
		_p->ns1__TicketExchangeRecordType::origNOfTrips = origNOfTrips;
		_p->ns1__TicketExchangeRecordType::origEOfVal = origEOfVal;
		_p->ns1__TicketExchangeRecordType::origAmnt = origAmnt;
		_p->ns1__TicketExchangeRecordType::newPassCod = newPassCod;
		_p->ns1__TicketExchangeRecordType::newZVal = newZVal;
		_p->ns1__TicketExchangeRecordType::newNOfTrips = newNOfTrips;
		_p->ns1__TicketExchangeRecordType::newEOfVal = newEOfVal;
		_p->ns1__TicketExchangeRecordType::newAmnt = newAmnt;
		_p->ns1__TicketExchangeRecordType::finalAmntToPaid = finalAmntToPaid;
		_p->ns1__TicketExchangeRecordType::origCtlData = origCtlData;
		_p->ns1__TicketExchangeRecordType::origCData = origCData;
		_p->ns1__TicketExchangeRecordType::origRawData = origRawData;
		_p->ns1__TicketExchangeRecordType::newCtlData = newCtlData;
		_p->ns1__TicketExchangeRecordType::newCData = newCData;
		_p->ns1__TicketExchangeRecordType::newRawData = newRawData;
		_p->ns1__TicketExchangeRecordType::result = result;
		_p->ns1__TicketExchangeRecordType::tp = tp;
		_p->ns1__TicketExchangeRecordType::pd = pd;
		_p->ns1__TicketExchangeRecordType::returned = returned;
		_p->ns1__TicketExchangeRecordType::tR = tR;
		_p->ns1__TicketExchangeRecordType::payments = payments;
		_p->ns1__TicketExchangeRecordType::awards = awards;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__TicketExchangeRecordType(struct soap *soap, ns1__TicketExchangeRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TicketExchangeRecordType", p->soap_type() == SOAP_TYPE_ns1__TicketExchangeRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TicketExchangeRecordType(struct soap *soap, const char *URL, ns1__TicketExchangeRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TicketExchangeRecordType", p->soap_type() == SOAP_TYPE_ns1__TicketExchangeRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TicketExchangeRecordType(struct soap *soap, const char *URL, ns1__TicketExchangeRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TicketExchangeRecordType", p->soap_type() == SOAP_TYPE_ns1__TicketExchangeRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TicketExchangeRecordType * SOAP_FMAC4 soap_get_ns1__TicketExchangeRecordType(struct soap*, ns1__TicketExchangeRecordType *, const char*, const char*);

inline int soap_read_ns1__TicketExchangeRecordType(struct soap *soap, ns1__TicketExchangeRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TicketExchangeRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TicketExchangeRecordType(struct soap *soap, const char *URL, ns1__TicketExchangeRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TicketExchangeRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TicketExchangeRecordType(struct soap *soap, ns1__TicketExchangeRecordType *p)
{
	if (soap_read_ns1__TicketExchangeRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SamType_DEFINED
#define SOAP_TYPE_ns1__SamType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SamType(struct soap*, const char*, int, const ns1__SamType *, const char*);
SOAP_FMAC3 ns1__SamType * SOAP_FMAC4 soap_in_ns1__SamType(struct soap*, const char*, ns1__SamType *, const char*);
SOAP_FMAC1 ns1__SamType * SOAP_FMAC2 soap_instantiate_ns1__SamType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SamType * soap_new_ns1__SamType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SamType(soap, n, NULL, NULL, NULL);
}

inline ns1__SamType * soap_new_req_ns1__SamType(
	struct soap *soap)
{
	ns1__SamType *_p = soap_new_ns1__SamType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__SamType * soap_new_set_ns1__SamType(
	struct soap *soap,
	LONG64 *id,
	LONG64 *sN,
	char *__item__1)
{
	ns1__SamType *_p = soap_new_ns1__SamType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SamType::id = id;
		_p->ns1__SamType::sN = sN;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SamType(struct soap *soap, ns1__SamType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SamType", p->soap_type() == SOAP_TYPE_ns1__SamType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SamType(struct soap *soap, const char *URL, ns1__SamType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SamType", p->soap_type() == SOAP_TYPE_ns1__SamType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SamType(struct soap *soap, const char *URL, ns1__SamType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SamType", p->soap_type() == SOAP_TYPE_ns1__SamType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SamType * SOAP_FMAC4 soap_get_ns1__SamType(struct soap*, ns1__SamType *, const char*, const char*);

inline int soap_read_ns1__SamType(struct soap *soap, ns1__SamType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SamType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SamType(struct soap *soap, const char *URL, ns1__SamType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SamType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SamType(struct soap *soap, ns1__SamType *p)
{
	if (soap_read_ns1__SamType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__IssueOperationRecordType_DEFINED
#define SOAP_TYPE_ns1__IssueOperationRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__IssueOperationRecordType(struct soap*, const char*, int, const ns1__IssueOperationRecordType *, const char*);
SOAP_FMAC3 ns1__IssueOperationRecordType * SOAP_FMAC4 soap_in_ns1__IssueOperationRecordType(struct soap*, const char*, ns1__IssueOperationRecordType *, const char*);
SOAP_FMAC1 ns1__IssueOperationRecordType * SOAP_FMAC2 soap_instantiate_ns1__IssueOperationRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__IssueOperationRecordType * soap_new_ns1__IssueOperationRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__IssueOperationRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__IssueOperationRecordType * soap_new_req_ns1__IssueOperationRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__IssueOperationRecordType *_p = soap_new_ns1__IssueOperationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__IssueOperationRecordType * soap_new_set_ns1__IssueOperationRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 *mediaType,
	LONG64 *mediaId,
	LONG64 *swSerialNumber,
	LONG64 *hwSerialNumber,
	ns1__AccountingUnitType *unit,
	LONG64 *tp,
	LONG64 *pd,
	LONG64 *returned,
	LONG64 *tR,
	ns1__PaymentModeListType *payments,
	ns1__AwardListType *awards,
	time_t *issueDate,
	ns1__SamType *sam,
	int *result,
	unsigned int *opType,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__IssueOperationRecordType *_p = soap_new_ns1__IssueOperationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__IssueOperationRecordType::shift = shift;
		_p->ns1__IssueOperationRecordType::mediaType = mediaType;
		_p->ns1__IssueOperationRecordType::mediaId = mediaId;
		_p->ns1__IssueOperationRecordType::swSerialNumber = swSerialNumber;
		_p->ns1__IssueOperationRecordType::hwSerialNumber = hwSerialNumber;
		_p->ns1__IssueOperationRecordType::unit = unit;
		_p->ns1__IssueOperationRecordType::tp = tp;
		_p->ns1__IssueOperationRecordType::pd = pd;
		_p->ns1__IssueOperationRecordType::returned = returned;
		_p->ns1__IssueOperationRecordType::tR = tR;
		_p->ns1__IssueOperationRecordType::payments = payments;
		_p->ns1__IssueOperationRecordType::awards = awards;
		_p->ns1__IssueOperationRecordType::issueDate = issueDate;
		_p->ns1__IssueOperationRecordType::sam = sam;
		_p->ns1__IssueOperationRecordType::result = result;
		_p->ns1__IssueOperationRecordType::opType = opType;
		_p->ns1__IssueOperationRecordType::ctlInfo = ctlInfo;
		_p->ns1__IssueOperationRecordType::ctlData = ctlData;
		_p->ns1__IssueOperationRecordType::cData = cData;
		_p->ns1__IssueOperationRecordType::rawData = rawData;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__IssueOperationRecordType(struct soap *soap, ns1__IssueOperationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IssueOperationRecordType", p->soap_type() == SOAP_TYPE_ns1__IssueOperationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__IssueOperationRecordType(struct soap *soap, const char *URL, ns1__IssueOperationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IssueOperationRecordType", p->soap_type() == SOAP_TYPE_ns1__IssueOperationRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__IssueOperationRecordType(struct soap *soap, const char *URL, ns1__IssueOperationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IssueOperationRecordType", p->soap_type() == SOAP_TYPE_ns1__IssueOperationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__IssueOperationRecordType * SOAP_FMAC4 soap_get_ns1__IssueOperationRecordType(struct soap*, ns1__IssueOperationRecordType *, const char*, const char*);

inline int soap_read_ns1__IssueOperationRecordType(struct soap *soap, ns1__IssueOperationRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__IssueOperationRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__IssueOperationRecordType(struct soap *soap, const char *URL, ns1__IssueOperationRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__IssueOperationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__IssueOperationRecordType(struct soap *soap, ns1__IssueOperationRecordType *p)
{
	if (soap_read_ns1__IssueOperationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CscReplacementRecordType_DEFINED
#define SOAP_TYPE_ns1__CscReplacementRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CscReplacementRecordType(struct soap*, const char*, int, const ns1__CscReplacementRecordType *, const char*);
SOAP_FMAC3 ns1__CscReplacementRecordType * SOAP_FMAC4 soap_in_ns1__CscReplacementRecordType(struct soap*, const char*, ns1__CscReplacementRecordType *, const char*);
SOAP_FMAC1 ns1__CscReplacementRecordType * SOAP_FMAC2 soap_instantiate_ns1__CscReplacementRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CscReplacementRecordType * soap_new_ns1__CscReplacementRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CscReplacementRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CscReplacementRecordType * soap_new_req_ns1__CscReplacementRecordType(
	struct soap *soap,
	int reason,
	LONG64 mT,
	time_t expDate,
	LONG64 suppAmnt,
	ns1__PaymentModeListType *payments,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CscReplacementRecordType *_p = soap_new_ns1__CscReplacementRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CscReplacementRecordType::reason = reason;
		_p->ns1__CscReplacementRecordType::mT = mT;
		_p->ns1__CscReplacementRecordType::expDate = expDate;
		_p->ns1__CscReplacementRecordType::suppAmnt = suppAmnt;
		_p->ns1__CscReplacementRecordType::payments = payments;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CscReplacementRecordType * soap_new_set_ns1__CscReplacementRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	int reason,
	LONG64 mT,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	LONG64 *oSN,
	LONG64 *oSW,
	LONG64 *nSN,
	LONG64 *nSW,
	LONG64 *rplcmntAmnt,
	LONG64 *dpstAmnt,
	time_t expDate,
	LONG64 suppAmnt,
	ns1__AccountingOperationInfo *acc,
	ns1__AccountingUnit *accUnit,
	ns1__PaymentModeListType *payments,
	ns1__AwardListType *awards,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CscReplacementRecordType *_p = soap_new_ns1__CscReplacementRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CscReplacementRecordType::shift = shift;
		_p->ns1__CscReplacementRecordType::reason = reason;
		_p->ns1__CscReplacementRecordType::mT = mT;
		_p->ns1__CscReplacementRecordType::ctlInfo = ctlInfo;
		_p->ns1__CscReplacementRecordType::ctlData = ctlData;
		_p->ns1__CscReplacementRecordType::cData = cData;
		_p->ns1__CscReplacementRecordType::rawData = rawData;
		_p->ns1__CscReplacementRecordType::oSN = oSN;
		_p->ns1__CscReplacementRecordType::oSW = oSW;
		_p->ns1__CscReplacementRecordType::nSN = nSN;
		_p->ns1__CscReplacementRecordType::nSW = nSW;
		_p->ns1__CscReplacementRecordType::rplcmntAmnt = rplcmntAmnt;
		_p->ns1__CscReplacementRecordType::dpstAmnt = dpstAmnt;
		_p->ns1__CscReplacementRecordType::expDate = expDate;
		_p->ns1__CscReplacementRecordType::suppAmnt = suppAmnt;
		_p->ns1__CscReplacementRecordType::acc = acc;
		_p->ns1__CscReplacementRecordType::accUnit = accUnit;
		_p->ns1__CscReplacementRecordType::payments = payments;
		_p->ns1__CscReplacementRecordType::awards = awards;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CscReplacementRecordType(struct soap *soap, ns1__CscReplacementRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscReplacementRecordType", p->soap_type() == SOAP_TYPE_ns1__CscReplacementRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CscReplacementRecordType(struct soap *soap, const char *URL, ns1__CscReplacementRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscReplacementRecordType", p->soap_type() == SOAP_TYPE_ns1__CscReplacementRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CscReplacementRecordType(struct soap *soap, const char *URL, ns1__CscReplacementRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscReplacementRecordType", p->soap_type() == SOAP_TYPE_ns1__CscReplacementRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CscReplacementRecordType * SOAP_FMAC4 soap_get_ns1__CscReplacementRecordType(struct soap*, ns1__CscReplacementRecordType *, const char*, const char*);

inline int soap_read_ns1__CscReplacementRecordType(struct soap *soap, ns1__CscReplacementRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CscReplacementRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CscReplacementRecordType(struct soap *soap, const char *URL, ns1__CscReplacementRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CscReplacementRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CscReplacementRecordType(struct soap *soap, ns1__CscReplacementRecordType *p)
{
	if (soap_read_ns1__CscReplacementRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CscRefundRecordType_DEFINED
#define SOAP_TYPE_ns1__CscRefundRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CscRefundRecordType(struct soap*, const char*, int, const ns1__CscRefundRecordType *, const char*);
SOAP_FMAC3 ns1__CscRefundRecordType * SOAP_FMAC4 soap_in_ns1__CscRefundRecordType(struct soap*, const char*, ns1__CscRefundRecordType *, const char*);
SOAP_FMAC1 ns1__CscRefundRecordType * SOAP_FMAC2 soap_instantiate_ns1__CscRefundRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CscRefundRecordType * soap_new_ns1__CscRefundRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CscRefundRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CscRefundRecordType * soap_new_req_ns1__CscRefundRecordType(
	struct soap *soap,
	unsigned short reason,
	LONG64 refunded,
	LONG64 oSN,
	int captured,
	ns1__PaymentModeListType *payments,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CscRefundRecordType *_p = soap_new_ns1__CscRefundRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CscRefundRecordType::reason = reason;
		_p->ns1__CscRefundRecordType::refunded = refunded;
		_p->ns1__CscRefundRecordType::oSN = oSN;
		_p->ns1__CscRefundRecordType::captured = captured;
		_p->ns1__CscRefundRecordType::payments = payments;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CscRefundRecordType * soap_new_set_ns1__CscRefundRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	unsigned short reason,
	LONG64 refunded,
	LONG64 oSN,
	int captured,
	ns1__AccountingOperationInfo *acc,
	ns1__AccountingUnit *accUnit,
	ns1__PaymentModeListType *payments,
	ns1__AwardListType *awards,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CscRefundRecordType *_p = soap_new_ns1__CscRefundRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CscRefundRecordType::shift = shift;
		_p->ns1__CscRefundRecordType::reason = reason;
		_p->ns1__CscRefundRecordType::refunded = refunded;
		_p->ns1__CscRefundRecordType::oSN = oSN;
		_p->ns1__CscRefundRecordType::captured = captured;
		_p->ns1__CscRefundRecordType::acc = acc;
		_p->ns1__CscRefundRecordType::accUnit = accUnit;
		_p->ns1__CscRefundRecordType::payments = payments;
		_p->ns1__CscRefundRecordType::awards = awards;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CscRefundRecordType(struct soap *soap, ns1__CscRefundRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscRefundRecordType", p->soap_type() == SOAP_TYPE_ns1__CscRefundRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CscRefundRecordType(struct soap *soap, const char *URL, ns1__CscRefundRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscRefundRecordType", p->soap_type() == SOAP_TYPE_ns1__CscRefundRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CscRefundRecordType(struct soap *soap, const char *URL, ns1__CscRefundRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscRefundRecordType", p->soap_type() == SOAP_TYPE_ns1__CscRefundRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CscRefundRecordType * SOAP_FMAC4 soap_get_ns1__CscRefundRecordType(struct soap*, ns1__CscRefundRecordType *, const char*, const char*);

inline int soap_read_ns1__CscRefundRecordType(struct soap *soap, ns1__CscRefundRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CscRefundRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CscRefundRecordType(struct soap *soap, const char *URL, ns1__CscRefundRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CscRefundRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CscRefundRecordType(struct soap *soap, ns1__CscRefundRecordType *p)
{
	if (soap_read_ns1__CscRefundRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CscDeliveryRecordType_DEFINED
#define SOAP_TYPE_ns1__CscDeliveryRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CscDeliveryRecordType(struct soap*, const char*, int, const ns1__CscDeliveryRecordType *, const char*);
SOAP_FMAC3 ns1__CscDeliveryRecordType * SOAP_FMAC4 soap_in_ns1__CscDeliveryRecordType(struct soap*, const char*, ns1__CscDeliveryRecordType *, const char*);
SOAP_FMAC1 ns1__CscDeliveryRecordType * SOAP_FMAC2 soap_instantiate_ns1__CscDeliveryRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CscDeliveryRecordType * soap_new_ns1__CscDeliveryRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CscDeliveryRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CscDeliveryRecordType * soap_new_req_ns1__CscDeliveryRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CscDeliveryRecordType *_p = soap_new_ns1__CscDeliveryRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CscDeliveryRecordType * soap_new_set_ns1__CscDeliveryRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 *mSN,
	LONG64 *pCod,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CscDeliveryRecordType *_p = soap_new_ns1__CscDeliveryRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CscDeliveryRecordType::shift = shift;
		_p->ns1__CscDeliveryRecordType::mSN = mSN;
		_p->ns1__CscDeliveryRecordType::pCod = pCod;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CscDeliveryRecordType(struct soap *soap, ns1__CscDeliveryRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscDeliveryRecordType", p->soap_type() == SOAP_TYPE_ns1__CscDeliveryRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CscDeliveryRecordType(struct soap *soap, const char *URL, ns1__CscDeliveryRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscDeliveryRecordType", p->soap_type() == SOAP_TYPE_ns1__CscDeliveryRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CscDeliveryRecordType(struct soap *soap, const char *URL, ns1__CscDeliveryRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscDeliveryRecordType", p->soap_type() == SOAP_TYPE_ns1__CscDeliveryRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CscDeliveryRecordType * SOAP_FMAC4 soap_get_ns1__CscDeliveryRecordType(struct soap*, ns1__CscDeliveryRecordType *, const char*, const char*);

inline int soap_read_ns1__CscDeliveryRecordType(struct soap *soap, ns1__CscDeliveryRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CscDeliveryRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CscDeliveryRecordType(struct soap *soap, const char *URL, ns1__CscDeliveryRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CscDeliveryRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CscDeliveryRecordType(struct soap *soap, ns1__CscDeliveryRecordType *p)
{
	if (soap_read_ns1__CscDeliveryRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CscKeyUpdateRecordType_DEFINED
#define SOAP_TYPE_ns1__CscKeyUpdateRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CscKeyUpdateRecordType(struct soap*, const char*, int, const ns1__CscKeyUpdateRecordType *, const char*);
SOAP_FMAC3 ns1__CscKeyUpdateRecordType * SOAP_FMAC4 soap_in_ns1__CscKeyUpdateRecordType(struct soap*, const char*, ns1__CscKeyUpdateRecordType *, const char*);
SOAP_FMAC1 ns1__CscKeyUpdateRecordType * SOAP_FMAC2 soap_instantiate_ns1__CscKeyUpdateRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CscKeyUpdateRecordType * soap_new_ns1__CscKeyUpdateRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CscKeyUpdateRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CscKeyUpdateRecordType * soap_new_req_ns1__CscKeyUpdateRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CscKeyUpdateRecordType *_p = soap_new_ns1__CscKeyUpdateRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CscKeyUpdateRecordType * soap_new_set_ns1__CscKeyUpdateRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 *sN,
	LONG64 *kI,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CscKeyUpdateRecordType *_p = soap_new_ns1__CscKeyUpdateRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CscKeyUpdateRecordType::shift = shift;
		_p->ns1__CscKeyUpdateRecordType::sN = sN;
		_p->ns1__CscKeyUpdateRecordType::kI = kI;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CscKeyUpdateRecordType(struct soap *soap, ns1__CscKeyUpdateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscKeyUpdateRecordType", p->soap_type() == SOAP_TYPE_ns1__CscKeyUpdateRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CscKeyUpdateRecordType(struct soap *soap, const char *URL, ns1__CscKeyUpdateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscKeyUpdateRecordType", p->soap_type() == SOAP_TYPE_ns1__CscKeyUpdateRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CscKeyUpdateRecordType(struct soap *soap, const char *URL, ns1__CscKeyUpdateRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscKeyUpdateRecordType", p->soap_type() == SOAP_TYPE_ns1__CscKeyUpdateRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CscKeyUpdateRecordType * SOAP_FMAC4 soap_get_ns1__CscKeyUpdateRecordType(struct soap*, ns1__CscKeyUpdateRecordType *, const char*, const char*);

inline int soap_read_ns1__CscKeyUpdateRecordType(struct soap *soap, ns1__CscKeyUpdateRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CscKeyUpdateRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CscKeyUpdateRecordType(struct soap *soap, const char *URL, ns1__CscKeyUpdateRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CscKeyUpdateRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CscKeyUpdateRecordType(struct soap *soap, ns1__CscKeyUpdateRecordType *p)
{
	if (soap_read_ns1__CscKeyUpdateRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CscPersonalizationRecordType_DEFINED
#define SOAP_TYPE_ns1__CscPersonalizationRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CscPersonalizationRecordType(struct soap*, const char*, int, const ns1__CscPersonalizationRecordType *, const char*);
SOAP_FMAC3 ns1__CscPersonalizationRecordType * SOAP_FMAC4 soap_in_ns1__CscPersonalizationRecordType(struct soap*, const char*, ns1__CscPersonalizationRecordType *, const char*);
SOAP_FMAC1 ns1__CscPersonalizationRecordType * SOAP_FMAC2 soap_instantiate_ns1__CscPersonalizationRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CscPersonalizationRecordType * soap_new_ns1__CscPersonalizationRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CscPersonalizationRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__CscPersonalizationRecordType * soap_new_req_ns1__CscPersonalizationRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__CscPersonalizationRecordType *_p = soap_new_ns1__CscPersonalizationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__CscPersonalizationRecordType * soap_new_set_ns1__CscPersonalizationRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 *mT,
	LONG64 *mediaId,
	LONG64 *usrProfile,
	LONG64 *swSerialNumber,
	LONG64 *hwSerialNumber,
	LONG64 *cliId,
	LONG64 *empId,
	LONG64 *prePersId,
	int *result,
	unsigned int *opType,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__CscPersonalizationRecordType *_p = soap_new_ns1__CscPersonalizationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CscPersonalizationRecordType::shift = shift;
		_p->ns1__CscPersonalizationRecordType::mT = mT;
		_p->ns1__CscPersonalizationRecordType::mediaId = mediaId;
		_p->ns1__CscPersonalizationRecordType::usrProfile = usrProfile;
		_p->ns1__CscPersonalizationRecordType::swSerialNumber = swSerialNumber;
		_p->ns1__CscPersonalizationRecordType::hwSerialNumber = hwSerialNumber;
		_p->ns1__CscPersonalizationRecordType::cliId = cliId;
		_p->ns1__CscPersonalizationRecordType::empId = empId;
		_p->ns1__CscPersonalizationRecordType::prePersId = prePersId;
		_p->ns1__CscPersonalizationRecordType::result = result;
		_p->ns1__CscPersonalizationRecordType::opType = opType;
		_p->ns1__CscPersonalizationRecordType::ctlInfo = ctlInfo;
		_p->ns1__CscPersonalizationRecordType::ctlData = ctlData;
		_p->ns1__CscPersonalizationRecordType::cData = cData;
		_p->ns1__CscPersonalizationRecordType::rawData = rawData;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__CscPersonalizationRecordType(struct soap *soap, ns1__CscPersonalizationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscPersonalizationRecordType", p->soap_type() == SOAP_TYPE_ns1__CscPersonalizationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CscPersonalizationRecordType(struct soap *soap, const char *URL, ns1__CscPersonalizationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscPersonalizationRecordType", p->soap_type() == SOAP_TYPE_ns1__CscPersonalizationRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CscPersonalizationRecordType(struct soap *soap, const char *URL, ns1__CscPersonalizationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CscPersonalizationRecordType", p->soap_type() == SOAP_TYPE_ns1__CscPersonalizationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CscPersonalizationRecordType * SOAP_FMAC4 soap_get_ns1__CscPersonalizationRecordType(struct soap*, ns1__CscPersonalizationRecordType *, const char*, const char*);

inline int soap_read_ns1__CscPersonalizationRecordType(struct soap *soap, ns1__CscPersonalizationRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CscPersonalizationRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CscPersonalizationRecordType(struct soap *soap, const char *URL, ns1__CscPersonalizationRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CscPersonalizationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CscPersonalizationRecordType(struct soap *soap, ns1__CscPersonalizationRecordType *p)
{
	if (soap_read_ns1__CscPersonalizationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MediaUpdateStatusRecordType_DEFINED
#define SOAP_TYPE_ns1__MediaUpdateStatusRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaUpdateStatusRecordType(struct soap*, const char*, int, const ns1__MediaUpdateStatusRecordType *, const char*);
SOAP_FMAC3 ns1__MediaUpdateStatusRecordType * SOAP_FMAC4 soap_in_ns1__MediaUpdateStatusRecordType(struct soap*, const char*, ns1__MediaUpdateStatusRecordType *, const char*);
SOAP_FMAC1 ns1__MediaUpdateStatusRecordType * SOAP_FMAC2 soap_instantiate_ns1__MediaUpdateStatusRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MediaUpdateStatusRecordType * soap_new_ns1__MediaUpdateStatusRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MediaUpdateStatusRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__MediaUpdateStatusRecordType * soap_new_req_ns1__MediaUpdateStatusRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__MediaUpdateStatusRecordType *_p = soap_new_ns1__MediaUpdateStatusRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__MediaUpdateStatusRecordType * soap_new_set_ns1__MediaUpdateStatusRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	unsigned int *opType,
	LONG64 *mT,
	LONG64 *mediaId,
	LONG64 *swSerialNumber,
	LONG64 *hwSerialNumber,
	int *result,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__MediaUpdateStatusRecordType *_p = soap_new_ns1__MediaUpdateStatusRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaUpdateStatusRecordType::shift = shift;
		_p->ns1__MediaUpdateStatusRecordType::opType = opType;
		_p->ns1__MediaUpdateStatusRecordType::mT = mT;
		_p->ns1__MediaUpdateStatusRecordType::mediaId = mediaId;
		_p->ns1__MediaUpdateStatusRecordType::swSerialNumber = swSerialNumber;
		_p->ns1__MediaUpdateStatusRecordType::hwSerialNumber = hwSerialNumber;
		_p->ns1__MediaUpdateStatusRecordType::result = result;
		_p->ns1__MediaUpdateStatusRecordType::ctlInfo = ctlInfo;
		_p->ns1__MediaUpdateStatusRecordType::ctlData = ctlData;
		_p->ns1__MediaUpdateStatusRecordType::cData = cData;
		_p->ns1__MediaUpdateStatusRecordType::rawData = rawData;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MediaUpdateStatusRecordType(struct soap *soap, ns1__MediaUpdateStatusRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaUpdateStatusRecordType", p->soap_type() == SOAP_TYPE_ns1__MediaUpdateStatusRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MediaUpdateStatusRecordType(struct soap *soap, const char *URL, ns1__MediaUpdateStatusRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaUpdateStatusRecordType", p->soap_type() == SOAP_TYPE_ns1__MediaUpdateStatusRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MediaUpdateStatusRecordType(struct soap *soap, const char *URL, ns1__MediaUpdateStatusRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaUpdateStatusRecordType", p->soap_type() == SOAP_TYPE_ns1__MediaUpdateStatusRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MediaUpdateStatusRecordType * SOAP_FMAC4 soap_get_ns1__MediaUpdateStatusRecordType(struct soap*, ns1__MediaUpdateStatusRecordType *, const char*, const char*);

inline int soap_read_ns1__MediaUpdateStatusRecordType(struct soap *soap, ns1__MediaUpdateStatusRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MediaUpdateStatusRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MediaUpdateStatusRecordType(struct soap *soap, const char *URL, ns1__MediaUpdateStatusRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MediaUpdateStatusRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MediaUpdateStatusRecordType(struct soap *soap, ns1__MediaUpdateStatusRecordType *p)
{
	if (soap_read_ns1__MediaUpdateStatusRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InspectionRecordType_DEFINED
#define SOAP_TYPE_ns1__InspectionRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InspectionRecordType(struct soap*, const char*, int, const ns1__InspectionRecordType *, const char*);
SOAP_FMAC3 ns1__InspectionRecordType * SOAP_FMAC4 soap_in_ns1__InspectionRecordType(struct soap*, const char*, ns1__InspectionRecordType *, const char*);
SOAP_FMAC1 ns1__InspectionRecordType * SOAP_FMAC2 soap_instantiate_ns1__InspectionRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InspectionRecordType * soap_new_ns1__InspectionRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InspectionRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__InspectionRecordType * soap_new_req_ns1__InspectionRecordType(
	struct soap *soap,
	LONG64 mT,
	ns1__TitleCodeType *prd,
	LONG64 vT,
	LONG64 RT,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__InspectionRecordType *_p = soap_new_ns1__InspectionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InspectionRecordType::mT = mT;
		_p->ns1__InspectionRecordType::prd = prd;
		_p->ns1__InspectionRecordType::vT = vT;
		_p->ns1__InspectionRecordType::RT = RT;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__InspectionRecordType * soap_new_set_ns1__InspectionRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 mT,
	unsigned int *profileId,
	ns1__cardIdentificationType *card,
	ns1__TitleCodeType *prd,
	LONG64 vT,
	LONG64 RT,
	LONG64 *counter,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__InspectionRecordType *_p = soap_new_ns1__InspectionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InspectionRecordType::shift = shift;
		_p->ns1__InspectionRecordType::mT = mT;
		_p->ns1__InspectionRecordType::profileId = profileId;
		_p->ns1__InspectionRecordType::card = card;
		_p->ns1__InspectionRecordType::prd = prd;
		_p->ns1__InspectionRecordType::vT = vT;
		_p->ns1__InspectionRecordType::RT = RT;
		_p->ns1__InspectionRecordType::counter = counter;
		_p->ns1__InspectionRecordType::ctlInfo = ctlInfo;
		_p->ns1__InspectionRecordType::ctlData = ctlData;
		_p->ns1__InspectionRecordType::cData = cData;
		_p->ns1__InspectionRecordType::rawData = rawData;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__InspectionRecordType(struct soap *soap, ns1__InspectionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InspectionRecordType", p->soap_type() == SOAP_TYPE_ns1__InspectionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InspectionRecordType(struct soap *soap, const char *URL, ns1__InspectionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InspectionRecordType", p->soap_type() == SOAP_TYPE_ns1__InspectionRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InspectionRecordType(struct soap *soap, const char *URL, ns1__InspectionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InspectionRecordType", p->soap_type() == SOAP_TYPE_ns1__InspectionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InspectionRecordType * SOAP_FMAC4 soap_get_ns1__InspectionRecordType(struct soap*, ns1__InspectionRecordType *, const char*, const char*);

inline int soap_read_ns1__InspectionRecordType(struct soap *soap, ns1__InspectionRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__InspectionRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InspectionRecordType(struct soap *soap, const char *URL, ns1__InspectionRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__InspectionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InspectionRecordType(struct soap *soap, ns1__InspectionRecordType *p)
{
	if (soap_read_ns1__InspectionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InternalFailureRecordType_DEFINED
#define SOAP_TYPE_ns1__InternalFailureRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InternalFailureRecordType(struct soap*, const char*, int, const ns1__InternalFailureRecordType *, const char*);
SOAP_FMAC3 ns1__InternalFailureRecordType * SOAP_FMAC4 soap_in_ns1__InternalFailureRecordType(struct soap*, const char*, ns1__InternalFailureRecordType *, const char*);
SOAP_FMAC1 ns1__InternalFailureRecordType * SOAP_FMAC2 soap_instantiate_ns1__InternalFailureRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InternalFailureRecordType * soap_new_ns1__InternalFailureRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InternalFailureRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__InternalFailureRecordType * soap_new_req_ns1__InternalFailureRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__InternalFailureRecordType *_p = soap_new_ns1__InternalFailureRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__InternalFailureRecordType * soap_new_set_ns1__InternalFailureRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 *pAdd,
	LONG64 *eT,
	LONG64 *dAdd,
	LONG64 *swV,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__InternalFailureRecordType *_p = soap_new_ns1__InternalFailureRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InternalFailureRecordType::shift = shift;
		_p->ns1__InternalFailureRecordType::pAdd = pAdd;
		_p->ns1__InternalFailureRecordType::eT = eT;
		_p->ns1__InternalFailureRecordType::dAdd = dAdd;
		_p->ns1__InternalFailureRecordType::swV = swV;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__InternalFailureRecordType(struct soap *soap, ns1__InternalFailureRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InternalFailureRecordType", p->soap_type() == SOAP_TYPE_ns1__InternalFailureRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InternalFailureRecordType(struct soap *soap, const char *URL, ns1__InternalFailureRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InternalFailureRecordType", p->soap_type() == SOAP_TYPE_ns1__InternalFailureRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InternalFailureRecordType(struct soap *soap, const char *URL, ns1__InternalFailureRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InternalFailureRecordType", p->soap_type() == SOAP_TYPE_ns1__InternalFailureRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InternalFailureRecordType * SOAP_FMAC4 soap_get_ns1__InternalFailureRecordType(struct soap*, ns1__InternalFailureRecordType *, const char*, const char*);

inline int soap_read_ns1__InternalFailureRecordType(struct soap *soap, ns1__InternalFailureRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__InternalFailureRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InternalFailureRecordType(struct soap *soap, const char *URL, ns1__InternalFailureRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__InternalFailureRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InternalFailureRecordType(struct soap *soap, ns1__InternalFailureRecordType *p)
{
	if (soap_read_ns1__InternalFailureRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UnlockShiftRecordType_DEFINED
#define SOAP_TYPE_ns1__UnlockShiftRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UnlockShiftRecordType(struct soap*, const char*, int, const ns1__UnlockShiftRecordType *, const char*);
SOAP_FMAC3 ns1__UnlockShiftRecordType * SOAP_FMAC4 soap_in_ns1__UnlockShiftRecordType(struct soap*, const char*, ns1__UnlockShiftRecordType *, const char*);
SOAP_FMAC1 ns1__UnlockShiftRecordType * SOAP_FMAC2 soap_instantiate_ns1__UnlockShiftRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UnlockShiftRecordType * soap_new_ns1__UnlockShiftRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UnlockShiftRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__UnlockShiftRecordType * soap_new_req_ns1__UnlockShiftRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	int idfT,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__UnlockShiftRecordType *_p = soap_new_ns1__UnlockShiftRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UnlockShiftRecordType::shift = shift;
		_p->ns1__UnlockShiftRecordType::idfT = idfT;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__UnlockShiftRecordType * soap_new_set_ns1__UnlockShiftRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	int idfT,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__UnlockShiftRecordType *_p = soap_new_ns1__UnlockShiftRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UnlockShiftRecordType::shift = shift;
		_p->ns1__UnlockShiftRecordType::idfT = idfT;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__UnlockShiftRecordType(struct soap *soap, ns1__UnlockShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnlockShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__UnlockShiftRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UnlockShiftRecordType(struct soap *soap, const char *URL, ns1__UnlockShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnlockShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__UnlockShiftRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UnlockShiftRecordType(struct soap *soap, const char *URL, ns1__UnlockShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnlockShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__UnlockShiftRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__UnlockShiftRecordType * SOAP_FMAC4 soap_get_ns1__UnlockShiftRecordType(struct soap*, ns1__UnlockShiftRecordType *, const char*, const char*);

inline int soap_read_ns1__UnlockShiftRecordType(struct soap *soap, ns1__UnlockShiftRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__UnlockShiftRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UnlockShiftRecordType(struct soap *soap, const char *URL, ns1__UnlockShiftRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__UnlockShiftRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UnlockShiftRecordType(struct soap *soap, ns1__UnlockShiftRecordType *p)
{
	if (soap_read_ns1__UnlockShiftRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LockShiftRecordType_DEFINED
#define SOAP_TYPE_ns1__LockShiftRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LockShiftRecordType(struct soap*, const char*, int, const ns1__LockShiftRecordType *, const char*);
SOAP_FMAC3 ns1__LockShiftRecordType * SOAP_FMAC4 soap_in_ns1__LockShiftRecordType(struct soap*, const char*, ns1__LockShiftRecordType *, const char*);
SOAP_FMAC1 ns1__LockShiftRecordType * SOAP_FMAC2 soap_instantiate_ns1__LockShiftRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LockShiftRecordType * soap_new_ns1__LockShiftRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LockShiftRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__LockShiftRecordType * soap_new_req_ns1__LockShiftRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	int lock,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__LockShiftRecordType *_p = soap_new_ns1__LockShiftRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LockShiftRecordType::shift = shift;
		_p->ns1__LockShiftRecordType::lock = lock;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__LockShiftRecordType * soap_new_set_ns1__LockShiftRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	int lock,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__LockShiftRecordType *_p = soap_new_ns1__LockShiftRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LockShiftRecordType::shift = shift;
		_p->ns1__LockShiftRecordType::lock = lock;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__LockShiftRecordType(struct soap *soap, ns1__LockShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LockShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__LockShiftRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LockShiftRecordType(struct soap *soap, const char *URL, ns1__LockShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LockShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__LockShiftRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LockShiftRecordType(struct soap *soap, const char *URL, ns1__LockShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LockShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__LockShiftRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LockShiftRecordType * SOAP_FMAC4 soap_get_ns1__LockShiftRecordType(struct soap*, ns1__LockShiftRecordType *, const char*, const char*);

inline int soap_read_ns1__LockShiftRecordType(struct soap *soap, ns1__LockShiftRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LockShiftRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LockShiftRecordType(struct soap *soap, const char *URL, ns1__LockShiftRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LockShiftRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LockShiftRecordType(struct soap *soap, ns1__LockShiftRecordType *p)
{
	if (soap_read_ns1__LockShiftRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OperationType_DEFINED
#define SOAP_TYPE_ns1__OperationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OperationType(struct soap*, const char*, int, const ns1__OperationType *, const char*);
SOAP_FMAC3 ns1__OperationType * SOAP_FMAC4 soap_in_ns1__OperationType(struct soap*, const char*, ns1__OperationType *, const char*);
SOAP_FMAC1 ns1__OperationType * SOAP_FMAC2 soap_instantiate_ns1__OperationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OperationType * soap_new_ns1__OperationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OperationType(soap, n, NULL, NULL, NULL);
}

inline ns1__OperationType * soap_new_req_ns1__OperationType(
	struct soap *soap,
	LONG64 opC,
	unsigned short prd,
	LONG64 perNum,
	LONG64 perAmt)
{
	ns1__OperationType *_p = soap_new_ns1__OperationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OperationType::opC = opC;
		_p->ns1__OperationType::prd = prd;
		_p->ns1__OperationType::perNum = perNum;
		_p->ns1__OperationType::perAmt = perAmt;
	}
	return _p;
}

inline ns1__OperationType * soap_new_set_ns1__OperationType(
	struct soap *soap,
	LONG64 opC,
	unsigned short prd,
	LONG64 perNum,
	LONG64 perAmt,
	char *__item__1)
{
	ns1__OperationType *_p = soap_new_ns1__OperationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OperationType::opC = opC;
		_p->ns1__OperationType::prd = prd;
		_p->ns1__OperationType::perNum = perNum;
		_p->ns1__OperationType::perAmt = perAmt;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__OperationType(struct soap *soap, ns1__OperationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationType", p->soap_type() == SOAP_TYPE_ns1__OperationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OperationType(struct soap *soap, const char *URL, ns1__OperationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationType", p->soap_type() == SOAP_TYPE_ns1__OperationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OperationType(struct soap *soap, const char *URL, ns1__OperationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationType", p->soap_type() == SOAP_TYPE_ns1__OperationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OperationType * SOAP_FMAC4 soap_get_ns1__OperationType(struct soap*, ns1__OperationType *, const char*, const char*);

inline int soap_read_ns1__OperationType(struct soap *soap, ns1__OperationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OperationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OperationType(struct soap *soap, const char *URL, ns1__OperationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OperationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OperationType(struct soap *soap, ns1__OperationType *p)
{
	if (soap_read_ns1__OperationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OperationListType_DEFINED
#define SOAP_TYPE_ns1__OperationListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OperationListType(struct soap*, const char*, int, const ns1__OperationListType *, const char*);
SOAP_FMAC3 ns1__OperationListType * SOAP_FMAC4 soap_in_ns1__OperationListType(struct soap*, const char*, ns1__OperationListType *, const char*);
SOAP_FMAC1 ns1__OperationListType * SOAP_FMAC2 soap_instantiate_ns1__OperationListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OperationListType * soap_new_ns1__OperationListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OperationListType(soap, n, NULL, NULL, NULL);
}

inline ns1__OperationListType * soap_new_req_ns1__OperationListType(
	struct soap *soap,
	int __sizeop,
	ns1__OperationType **op)
{
	ns1__OperationListType *_p = soap_new_ns1__OperationListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OperationListType::__sizeop = __sizeop;
		_p->ns1__OperationListType::op = op;
	}
	return _p;
}

inline ns1__OperationListType * soap_new_set_ns1__OperationListType(
	struct soap *soap,
	int __sizeop,
	ns1__OperationType **op,
	unsigned int *length,
	char *__item__1)
{
	ns1__OperationListType *_p = soap_new_ns1__OperationListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OperationListType::__sizeop = __sizeop;
		_p->ns1__OperationListType::op = op;
		_p->ns1__OperationListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__OperationListType(struct soap *soap, ns1__OperationListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationListType", p->soap_type() == SOAP_TYPE_ns1__OperationListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OperationListType(struct soap *soap, const char *URL, ns1__OperationListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationListType", p->soap_type() == SOAP_TYPE_ns1__OperationListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OperationListType(struct soap *soap, const char *URL, ns1__OperationListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationListType", p->soap_type() == SOAP_TYPE_ns1__OperationListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OperationListType * SOAP_FMAC4 soap_get_ns1__OperationListType(struct soap*, ns1__OperationListType *, const char*, const char*);

inline int soap_read_ns1__OperationListType(struct soap *soap, ns1__OperationListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OperationListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OperationListType(struct soap *soap, const char *URL, ns1__OperationListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OperationListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OperationListType(struct soap *soap, ns1__OperationListType *p)
{
	if (soap_read_ns1__OperationListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MediaOperationType_DEFINED
#define SOAP_TYPE_ns1__MediaOperationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaOperationType(struct soap*, const char*, int, const ns1__MediaOperationType *, const char*);
SOAP_FMAC3 ns1__MediaOperationType * SOAP_FMAC4 soap_in_ns1__MediaOperationType(struct soap*, const char*, ns1__MediaOperationType *, const char*);
SOAP_FMAC1 ns1__MediaOperationType * SOAP_FMAC2 soap_instantiate_ns1__MediaOperationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MediaOperationType * soap_new_ns1__MediaOperationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MediaOperationType(soap, n, NULL, NULL, NULL);
}

inline ns1__MediaOperationType * soap_new_req_ns1__MediaOperationType(
	struct soap *soap,
	LONG64 mT,
	ns1__OperationListType *opL)
{
	ns1__MediaOperationType *_p = soap_new_ns1__MediaOperationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaOperationType::mT = mT;
		_p->ns1__MediaOperationType::opL = opL;
	}
	return _p;
}

inline ns1__MediaOperationType * soap_new_set_ns1__MediaOperationType(
	struct soap *soap,
	LONG64 mT,
	ns1__OperationListType *opL,
	char *__item__1)
{
	ns1__MediaOperationType *_p = soap_new_ns1__MediaOperationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaOperationType::mT = mT;
		_p->ns1__MediaOperationType::opL = opL;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MediaOperationType(struct soap *soap, ns1__MediaOperationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaOperationType", p->soap_type() == SOAP_TYPE_ns1__MediaOperationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MediaOperationType(struct soap *soap, const char *URL, ns1__MediaOperationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaOperationType", p->soap_type() == SOAP_TYPE_ns1__MediaOperationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MediaOperationType(struct soap *soap, const char *URL, ns1__MediaOperationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaOperationType", p->soap_type() == SOAP_TYPE_ns1__MediaOperationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MediaOperationType * SOAP_FMAC4 soap_get_ns1__MediaOperationType(struct soap*, ns1__MediaOperationType *, const char*, const char*);

inline int soap_read_ns1__MediaOperationType(struct soap *soap, ns1__MediaOperationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MediaOperationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MediaOperationType(struct soap *soap, const char *URL, ns1__MediaOperationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MediaOperationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MediaOperationType(struct soap *soap, ns1__MediaOperationType *p)
{
	if (soap_read_ns1__MediaOperationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MediaOperationListType_DEFINED
#define SOAP_TYPE_ns1__MediaOperationListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MediaOperationListType(struct soap*, const char*, int, const ns1__MediaOperationListType *, const char*);
SOAP_FMAC3 ns1__MediaOperationListType * SOAP_FMAC4 soap_in_ns1__MediaOperationListType(struct soap*, const char*, ns1__MediaOperationListType *, const char*);
SOAP_FMAC1 ns1__MediaOperationListType * SOAP_FMAC2 soap_instantiate_ns1__MediaOperationListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MediaOperationListType * soap_new_ns1__MediaOperationListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MediaOperationListType(soap, n, NULL, NULL, NULL);
}

inline ns1__MediaOperationListType * soap_new_req_ns1__MediaOperationListType(
	struct soap *soap,
	int __sizemO,
	ns1__MediaOperationType **mO)
{
	ns1__MediaOperationListType *_p = soap_new_ns1__MediaOperationListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaOperationListType::__sizemO = __sizemO;
		_p->ns1__MediaOperationListType::mO = mO;
	}
	return _p;
}

inline ns1__MediaOperationListType * soap_new_set_ns1__MediaOperationListType(
	struct soap *soap,
	int __sizemO,
	ns1__MediaOperationType **mO,
	unsigned int *length,
	char *__item__1)
{
	ns1__MediaOperationListType *_p = soap_new_ns1__MediaOperationListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MediaOperationListType::__sizemO = __sizemO;
		_p->ns1__MediaOperationListType::mO = mO;
		_p->ns1__MediaOperationListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MediaOperationListType(struct soap *soap, ns1__MediaOperationListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaOperationListType", p->soap_type() == SOAP_TYPE_ns1__MediaOperationListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MediaOperationListType(struct soap *soap, const char *URL, ns1__MediaOperationListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaOperationListType", p->soap_type() == SOAP_TYPE_ns1__MediaOperationListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MediaOperationListType(struct soap *soap, const char *URL, ns1__MediaOperationListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MediaOperationListType", p->soap_type() == SOAP_TYPE_ns1__MediaOperationListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MediaOperationListType * SOAP_FMAC4 soap_get_ns1__MediaOperationListType(struct soap*, ns1__MediaOperationListType *, const char*, const char*);

inline int soap_read_ns1__MediaOperationListType(struct soap *soap, ns1__MediaOperationListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MediaOperationListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MediaOperationListType(struct soap *soap, const char *URL, ns1__MediaOperationListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MediaOperationListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MediaOperationListType(struct soap *soap, ns1__MediaOperationListType *p)
{
	if (soap_read_ns1__MediaOperationListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__EndShiftRecordType_DEFINED
#define SOAP_TYPE_ns1__EndShiftRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EndShiftRecordType(struct soap*, const char*, int, const ns1__EndShiftRecordType *, const char*);
SOAP_FMAC3 ns1__EndShiftRecordType * SOAP_FMAC4 soap_in_ns1__EndShiftRecordType(struct soap*, const char*, ns1__EndShiftRecordType *, const char*);
SOAP_FMAC1 ns1__EndShiftRecordType * SOAP_FMAC2 soap_instantiate_ns1__EndShiftRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EndShiftRecordType * soap_new_ns1__EndShiftRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EndShiftRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__EndShiftRecordType * soap_new_req_ns1__EndShiftRecordType(
	struct soap *soap,
	LONG64 sNum,
	LONG64 userId,
	int eST,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__EndShiftRecordType *_p = soap_new_ns1__EndShiftRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EndShiftRecordType::sNum = sNum;
		_p->ns1__EndShiftRecordType::userId = userId;
		_p->ns1__EndShiftRecordType::eST = eST;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__EndShiftRecordType * soap_new_set_ns1__EndShiftRecordType(
	struct soap *soap,
	LONG64 sNum,
	ns1__MediaOperationListType *moL,
	LONG64 userId,
	int eST,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__EndShiftRecordType *_p = soap_new_ns1__EndShiftRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EndShiftRecordType::sNum = sNum;
		_p->ns1__EndShiftRecordType::moL = moL;
		_p->ns1__EndShiftRecordType::userId = userId;
		_p->ns1__EndShiftRecordType::eST = eST;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__EndShiftRecordType(struct soap *soap, ns1__EndShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__EndShiftRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EndShiftRecordType(struct soap *soap, const char *URL, ns1__EndShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__EndShiftRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EndShiftRecordType(struct soap *soap, const char *URL, ns1__EndShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__EndShiftRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EndShiftRecordType * SOAP_FMAC4 soap_get_ns1__EndShiftRecordType(struct soap*, ns1__EndShiftRecordType *, const char*, const char*);

inline int soap_read_ns1__EndShiftRecordType(struct soap *soap, ns1__EndShiftRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__EndShiftRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EndShiftRecordType(struct soap *soap, const char *URL, ns1__EndShiftRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__EndShiftRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__EndShiftRecordType(struct soap *soap, ns1__EndShiftRecordType *p)
{
	if (soap_read_ns1__EndShiftRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BeginShiftRecordType_DEFINED
#define SOAP_TYPE_ns1__BeginShiftRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BeginShiftRecordType(struct soap*, const char*, int, const ns1__BeginShiftRecordType *, const char*);
SOAP_FMAC3 ns1__BeginShiftRecordType * SOAP_FMAC4 soap_in_ns1__BeginShiftRecordType(struct soap*, const char*, ns1__BeginShiftRecordType *, const char*);
SOAP_FMAC1 ns1__BeginShiftRecordType * SOAP_FMAC2 soap_instantiate_ns1__BeginShiftRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BeginShiftRecordType * soap_new_ns1__BeginShiftRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BeginShiftRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__BeginShiftRecordType * soap_new_req_ns1__BeginShiftRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	int idfT,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__BeginShiftRecordType *_p = soap_new_ns1__BeginShiftRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BeginShiftRecordType::shift = shift;
		_p->ns1__BeginShiftRecordType::idfT = idfT;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__BeginShiftRecordType * soap_new_set_ns1__BeginShiftRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	int idfT,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__BeginShiftRecordType *_p = soap_new_ns1__BeginShiftRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BeginShiftRecordType::shift = shift;
		_p->ns1__BeginShiftRecordType::idfT = idfT;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__BeginShiftRecordType(struct soap *soap, ns1__BeginShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BeginShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__BeginShiftRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BeginShiftRecordType(struct soap *soap, const char *URL, ns1__BeginShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BeginShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__BeginShiftRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BeginShiftRecordType(struct soap *soap, const char *URL, ns1__BeginShiftRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BeginShiftRecordType", p->soap_type() == SOAP_TYPE_ns1__BeginShiftRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BeginShiftRecordType * SOAP_FMAC4 soap_get_ns1__BeginShiftRecordType(struct soap*, ns1__BeginShiftRecordType *, const char*, const char*);

inline int soap_read_ns1__BeginShiftRecordType(struct soap *soap, ns1__BeginShiftRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BeginShiftRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BeginShiftRecordType(struct soap *soap, const char *URL, ns1__BeginShiftRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BeginShiftRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BeginShiftRecordType(struct soap *soap, ns1__BeginShiftRecordType *p)
{
	if (soap_read_ns1__BeginShiftRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__missingDataType_DEFINED
#define SOAP_TYPE_ns1__missingDataType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__missingDataType(struct soap*, const char*, int, const ns1__missingDataType *, const char*);
SOAP_FMAC3 ns1__missingDataType * SOAP_FMAC4 soap_in_ns1__missingDataType(struct soap*, const char*, ns1__missingDataType *, const char*);
SOAP_FMAC1 ns1__missingDataType * SOAP_FMAC2 soap_instantiate_ns1__missingDataType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__missingDataType * soap_new_ns1__missingDataType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__missingDataType(soap, n, NULL, NULL, NULL);
}

inline ns1__missingDataType * soap_new_req_ns1__missingDataType(
	struct soap *soap,
	LONG64 uS,
	LONG64 uSTo)
{
	ns1__missingDataType *_p = soap_new_ns1__missingDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__missingDataType::uS = uS;
		_p->ns1__missingDataType::uSTo = uSTo;
	}
	return _p;
}

inline ns1__missingDataType * soap_new_set_ns1__missingDataType(
	struct soap *soap,
	LONG64 uS,
	LONG64 uSTo,
	char *__item__1)
{
	ns1__missingDataType *_p = soap_new_ns1__missingDataType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__missingDataType::uS = uS;
		_p->ns1__missingDataType::uSTo = uSTo;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__missingDataType(struct soap *soap, ns1__missingDataType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:missingDataType", p->soap_type() == SOAP_TYPE_ns1__missingDataType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__missingDataType(struct soap *soap, const char *URL, ns1__missingDataType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:missingDataType", p->soap_type() == SOAP_TYPE_ns1__missingDataType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__missingDataType(struct soap *soap, const char *URL, ns1__missingDataType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:missingDataType", p->soap_type() == SOAP_TYPE_ns1__missingDataType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__missingDataType * SOAP_FMAC4 soap_get_ns1__missingDataType(struct soap*, ns1__missingDataType *, const char*, const char*);

inline int soap_read_ns1__missingDataType(struct soap *soap, ns1__missingDataType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__missingDataType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__missingDataType(struct soap *soap, const char *URL, ns1__missingDataType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__missingDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__missingDataType(struct soap *soap, ns1__missingDataType *p)
{
	if (soap_read_ns1__missingDataType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__missingDataListType_DEFINED
#define SOAP_TYPE_ns1__missingDataListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__missingDataListType(struct soap*, const char*, int, const ns1__missingDataListType *, const char*);
SOAP_FMAC3 ns1__missingDataListType * SOAP_FMAC4 soap_in_ns1__missingDataListType(struct soap*, const char*, ns1__missingDataListType *, const char*);
SOAP_FMAC1 ns1__missingDataListType * SOAP_FMAC2 soap_instantiate_ns1__missingDataListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__missingDataListType * soap_new_ns1__missingDataListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__missingDataListType(soap, n, NULL, NULL, NULL);
}

inline ns1__missingDataListType * soap_new_req_ns1__missingDataListType(
	struct soap *soap,
	int __sizemiss,
	ns1__missingDataType **miss)
{
	ns1__missingDataListType *_p = soap_new_ns1__missingDataListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__missingDataListType::__sizemiss = __sizemiss;
		_p->ns1__missingDataListType::miss = miss;
	}
	return _p;
}

inline ns1__missingDataListType * soap_new_set_ns1__missingDataListType(
	struct soap *soap,
	int __sizemiss,
	ns1__missingDataType **miss,
	char *__item__1)
{
	ns1__missingDataListType *_p = soap_new_ns1__missingDataListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__missingDataListType::__sizemiss = __sizemiss;
		_p->ns1__missingDataListType::miss = miss;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__missingDataListType(struct soap *soap, ns1__missingDataListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:missingDataListType", p->soap_type() == SOAP_TYPE_ns1__missingDataListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__missingDataListType(struct soap *soap, const char *URL, ns1__missingDataListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:missingDataListType", p->soap_type() == SOAP_TYPE_ns1__missingDataListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__missingDataListType(struct soap *soap, const char *URL, ns1__missingDataListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:missingDataListType", p->soap_type() == SOAP_TYPE_ns1__missingDataListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__missingDataListType * SOAP_FMAC4 soap_get_ns1__missingDataListType(struct soap*, ns1__missingDataListType *, const char*, const char*);

inline int soap_read_ns1__missingDataListType(struct soap *soap, ns1__missingDataListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__missingDataListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__missingDataListType(struct soap *soap, const char *URL, ns1__missingDataListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__missingDataListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__missingDataListType(struct soap *soap, ns1__missingDataListType *p)
{
	if (soap_read_ns1__missingDataListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OpEndOfSessionRecordType_DEFINED
#define SOAP_TYPE_ns1__OpEndOfSessionRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OpEndOfSessionRecordType(struct soap*, const char*, int, const ns1__OpEndOfSessionRecordType *, const char*);
SOAP_FMAC3 ns1__OpEndOfSessionRecordType * SOAP_FMAC4 soap_in_ns1__OpEndOfSessionRecordType(struct soap*, const char*, ns1__OpEndOfSessionRecordType *, const char*);
SOAP_FMAC1 ns1__OpEndOfSessionRecordType * SOAP_FMAC2 soap_instantiate_ns1__OpEndOfSessionRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OpEndOfSessionRecordType * soap_new_ns1__OpEndOfSessionRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OpEndOfSessionRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__OpEndOfSessionRecordType * soap_new_req_ns1__OpEndOfSessionRecordType(
	struct soap *soap,
	ns1__dataReportListType *drL,
	ns1__missingDataListType *mdL,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__OpEndOfSessionRecordType *_p = soap_new_ns1__OpEndOfSessionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OpEndOfSessionRecordType::drL = drL;
		_p->ns1__OpEndOfSessionRecordType::mdL = mdL;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__OpEndOfSessionRecordType * soap_new_set_ns1__OpEndOfSessionRecordType(
	struct soap *soap,
	ns1__dataReportListType *drL,
	ns1__missingDataListType *mdL,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__OpEndOfSessionRecordType *_p = soap_new_ns1__OpEndOfSessionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OpEndOfSessionRecordType::drL = drL;
		_p->ns1__OpEndOfSessionRecordType::mdL = mdL;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__OpEndOfSessionRecordType(struct soap *soap, ns1__OpEndOfSessionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpEndOfSessionRecordType", p->soap_type() == SOAP_TYPE_ns1__OpEndOfSessionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OpEndOfSessionRecordType(struct soap *soap, const char *URL, ns1__OpEndOfSessionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpEndOfSessionRecordType", p->soap_type() == SOAP_TYPE_ns1__OpEndOfSessionRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OpEndOfSessionRecordType(struct soap *soap, const char *URL, ns1__OpEndOfSessionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OpEndOfSessionRecordType", p->soap_type() == SOAP_TYPE_ns1__OpEndOfSessionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OpEndOfSessionRecordType * SOAP_FMAC4 soap_get_ns1__OpEndOfSessionRecordType(struct soap*, ns1__OpEndOfSessionRecordType *, const char*, const char*);

inline int soap_read_ns1__OpEndOfSessionRecordType(struct soap *soap, ns1__OpEndOfSessionRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OpEndOfSessionRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OpEndOfSessionRecordType(struct soap *soap, const char *URL, ns1__OpEndOfSessionRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OpEndOfSessionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OpEndOfSessionRecordType(struct soap *soap, ns1__OpEndOfSessionRecordType *p)
{
	if (soap_read_ns1__OpEndOfSessionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SlaveDataReportType_DEFINED
#define SOAP_TYPE_ns1__SlaveDataReportType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SlaveDataReportType(struct soap*, const char*, int, const ns1__SlaveDataReportType *, const char*);
SOAP_FMAC3 ns1__SlaveDataReportType * SOAP_FMAC4 soap_in_ns1__SlaveDataReportType(struct soap*, const char*, ns1__SlaveDataReportType *, const char*);
SOAP_FMAC1 ns1__SlaveDataReportType * SOAP_FMAC2 soap_instantiate_ns1__SlaveDataReportType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SlaveDataReportType * soap_new_ns1__SlaveDataReportType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SlaveDataReportType(soap, n, NULL, NULL, NULL);
}

inline ns1__SlaveDataReportType * soap_new_req_ns1__SlaveDataReportType(
	struct soap *soap,
	ns1__dataReportListType *drL)
{
	ns1__SlaveDataReportType *_p = soap_new_ns1__SlaveDataReportType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlaveDataReportType::drL = drL;
	}
	return _p;
}

inline ns1__SlaveDataReportType * soap_new_set_ns1__SlaveDataReportType(
	struct soap *soap,
	ns1__dataReportListType *drL,
	unsigned int *id,
	char *__item__1)
{
	ns1__SlaveDataReportType *_p = soap_new_ns1__SlaveDataReportType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlaveDataReportType::drL = drL;
		_p->ns1__SlaveDataReportType::id = id;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SlaveDataReportType(struct soap *soap, ns1__SlaveDataReportType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveDataReportType", p->soap_type() == SOAP_TYPE_ns1__SlaveDataReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SlaveDataReportType(struct soap *soap, const char *URL, ns1__SlaveDataReportType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveDataReportType", p->soap_type() == SOAP_TYPE_ns1__SlaveDataReportType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SlaveDataReportType(struct soap *soap, const char *URL, ns1__SlaveDataReportType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveDataReportType", p->soap_type() == SOAP_TYPE_ns1__SlaveDataReportType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SlaveDataReportType * SOAP_FMAC4 soap_get_ns1__SlaveDataReportType(struct soap*, ns1__SlaveDataReportType *, const char*, const char*);

inline int soap_read_ns1__SlaveDataReportType(struct soap *soap, ns1__SlaveDataReportType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SlaveDataReportType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SlaveDataReportType(struct soap *soap, const char *URL, ns1__SlaveDataReportType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SlaveDataReportType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SlaveDataReportType(struct soap *soap, ns1__SlaveDataReportType *p)
{
	if (soap_read_ns1__SlaveDataReportType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SlaveDataReportListType_DEFINED
#define SOAP_TYPE_ns1__SlaveDataReportListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SlaveDataReportListType(struct soap*, const char*, int, const ns1__SlaveDataReportListType *, const char*);
SOAP_FMAC3 ns1__SlaveDataReportListType * SOAP_FMAC4 soap_in_ns1__SlaveDataReportListType(struct soap*, const char*, ns1__SlaveDataReportListType *, const char*);
SOAP_FMAC1 ns1__SlaveDataReportListType * SOAP_FMAC2 soap_instantiate_ns1__SlaveDataReportListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SlaveDataReportListType * soap_new_ns1__SlaveDataReportListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SlaveDataReportListType(soap, n, NULL, NULL, NULL);
}

inline ns1__SlaveDataReportListType * soap_new_req_ns1__SlaveDataReportListType(
	struct soap *soap,
	int __sizeslaveReport,
	ns1__SlaveDataReportType **slaveReport)
{
	ns1__SlaveDataReportListType *_p = soap_new_ns1__SlaveDataReportListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlaveDataReportListType::__sizeslaveReport = __sizeslaveReport;
		_p->ns1__SlaveDataReportListType::slaveReport = slaveReport;
	}
	return _p;
}

inline ns1__SlaveDataReportListType * soap_new_set_ns1__SlaveDataReportListType(
	struct soap *soap,
	int __sizeslaveReport,
	ns1__SlaveDataReportType **slaveReport,
	unsigned int *length,
	char *__item__1)
{
	ns1__SlaveDataReportListType *_p = soap_new_ns1__SlaveDataReportListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlaveDataReportListType::__sizeslaveReport = __sizeslaveReport;
		_p->ns1__SlaveDataReportListType::slaveReport = slaveReport;
		_p->ns1__SlaveDataReportListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SlaveDataReportListType(struct soap *soap, ns1__SlaveDataReportListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveDataReportListType", p->soap_type() == SOAP_TYPE_ns1__SlaveDataReportListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SlaveDataReportListType(struct soap *soap, const char *URL, ns1__SlaveDataReportListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveDataReportListType", p->soap_type() == SOAP_TYPE_ns1__SlaveDataReportListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SlaveDataReportListType(struct soap *soap, const char *URL, ns1__SlaveDataReportListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveDataReportListType", p->soap_type() == SOAP_TYPE_ns1__SlaveDataReportListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SlaveDataReportListType * SOAP_FMAC4 soap_get_ns1__SlaveDataReportListType(struct soap*, ns1__SlaveDataReportListType *, const char*, const char*);

inline int soap_read_ns1__SlaveDataReportListType(struct soap *soap, ns1__SlaveDataReportListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SlaveDataReportListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SlaveDataReportListType(struct soap *soap, const char *URL, ns1__SlaveDataReportListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SlaveDataReportListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SlaveDataReportListType(struct soap *soap, ns1__SlaveDataReportListType *p)
{
	if (soap_read_ns1__SlaveDataReportListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__dataReportType_DEFINED
#define SOAP_TYPE_ns1__dataReportType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dataReportType(struct soap*, const char*, int, const ns1__dataReportType *, const char*);
SOAP_FMAC3 ns1__dataReportType * SOAP_FMAC4 soap_in_ns1__dataReportType(struct soap*, const char*, ns1__dataReportType *, const char*);
SOAP_FMAC1 ns1__dataReportType * SOAP_FMAC2 soap_instantiate_ns1__dataReportType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__dataReportType * soap_new_ns1__dataReportType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__dataReportType(soap, n, NULL, NULL, NULL);
}

inline ns1__dataReportType * soap_new_req_ns1__dataReportType(
	struct soap *soap,
	LONG64 rTId,
	LONG64 qtty)
{
	ns1__dataReportType *_p = soap_new_ns1__dataReportType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__dataReportType::rTId = rTId;
		_p->ns1__dataReportType::qtty = qtty;
	}
	return _p;
}

inline ns1__dataReportType * soap_new_set_ns1__dataReportType(
	struct soap *soap,
	LONG64 rTId,
	LONG64 qtty,
	char *__item__1)
{
	ns1__dataReportType *_p = soap_new_ns1__dataReportType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__dataReportType::rTId = rTId;
		_p->ns1__dataReportType::qtty = qtty;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__dataReportType(struct soap *soap, ns1__dataReportType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dataReportType", p->soap_type() == SOAP_TYPE_ns1__dataReportType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__dataReportType(struct soap *soap, const char *URL, ns1__dataReportType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dataReportType", p->soap_type() == SOAP_TYPE_ns1__dataReportType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__dataReportType(struct soap *soap, const char *URL, ns1__dataReportType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dataReportType", p->soap_type() == SOAP_TYPE_ns1__dataReportType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__dataReportType * SOAP_FMAC4 soap_get_ns1__dataReportType(struct soap*, ns1__dataReportType *, const char*, const char*);

inline int soap_read_ns1__dataReportType(struct soap *soap, ns1__dataReportType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__dataReportType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__dataReportType(struct soap *soap, const char *URL, ns1__dataReportType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__dataReportType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__dataReportType(struct soap *soap, ns1__dataReportType *p)
{
	if (soap_read_ns1__dataReportType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__dataReportListType_DEFINED
#define SOAP_TYPE_ns1__dataReportListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__dataReportListType(struct soap*, const char*, int, const ns1__dataReportListType *, const char*);
SOAP_FMAC3 ns1__dataReportListType * SOAP_FMAC4 soap_in_ns1__dataReportListType(struct soap*, const char*, ns1__dataReportListType *, const char*);
SOAP_FMAC1 ns1__dataReportListType * SOAP_FMAC2 soap_instantiate_ns1__dataReportListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__dataReportListType * soap_new_ns1__dataReportListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__dataReportListType(soap, n, NULL, NULL, NULL);
}

inline ns1__dataReportListType * soap_new_req_ns1__dataReportListType(
	struct soap *soap,
	int __sizedr,
	ns1__dataReportType **dr)
{
	ns1__dataReportListType *_p = soap_new_ns1__dataReportListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__dataReportListType::__sizedr = __sizedr;
		_p->ns1__dataReportListType::dr = dr;
	}
	return _p;
}

inline ns1__dataReportListType * soap_new_set_ns1__dataReportListType(
	struct soap *soap,
	int __sizedr,
	ns1__dataReportType **dr,
	char *__item__1)
{
	ns1__dataReportListType *_p = soap_new_ns1__dataReportListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__dataReportListType::__sizedr = __sizedr;
		_p->ns1__dataReportListType::dr = dr;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__dataReportListType(struct soap *soap, ns1__dataReportListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dataReportListType", p->soap_type() == SOAP_TYPE_ns1__dataReportListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__dataReportListType(struct soap *soap, const char *URL, ns1__dataReportListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dataReportListType", p->soap_type() == SOAP_TYPE_ns1__dataReportListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__dataReportListType(struct soap *soap, const char *URL, ns1__dataReportListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:dataReportListType", p->soap_type() == SOAP_TYPE_ns1__dataReportListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__dataReportListType * SOAP_FMAC4 soap_get_ns1__dataReportListType(struct soap*, ns1__dataReportListType *, const char*, const char*);

inline int soap_read_ns1__dataReportListType(struct soap *soap, ns1__dataReportListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__dataReportListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__dataReportListType(struct soap *soap, const char *URL, ns1__dataReportListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__dataReportListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__dataReportListType(struct soap *soap, ns1__dataReportListType *p)
{
	if (soap_read_ns1__dataReportListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__EndOfSessionRecordType_DEFINED
#define SOAP_TYPE_ns1__EndOfSessionRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EndOfSessionRecordType(struct soap*, const char*, int, const ns1__EndOfSessionRecordType *, const char*);
SOAP_FMAC3 ns1__EndOfSessionRecordType * SOAP_FMAC4 soap_in_ns1__EndOfSessionRecordType(struct soap*, const char*, ns1__EndOfSessionRecordType *, const char*);
SOAP_FMAC1 ns1__EndOfSessionRecordType * SOAP_FMAC2 soap_instantiate_ns1__EndOfSessionRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EndOfSessionRecordType * soap_new_ns1__EndOfSessionRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EndOfSessionRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__EndOfSessionRecordType * soap_new_req_ns1__EndOfSessionRecordType(
	struct soap *soap,
	ns1__dataReportListType *drL,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__EndOfSessionRecordType *_p = soap_new_ns1__EndOfSessionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EndOfSessionRecordType::drL = drL;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__EndOfSessionRecordType * soap_new_set_ns1__EndOfSessionRecordType(
	struct soap *soap,
	ns1__dataReportListType *drL,
	ns1__SlaveDataReportListType *slaveReports,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__EndOfSessionRecordType *_p = soap_new_ns1__EndOfSessionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EndOfSessionRecordType::drL = drL;
		_p->ns1__EndOfSessionRecordType::slaveReports = slaveReports;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__EndOfSessionRecordType(struct soap *soap, ns1__EndOfSessionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndOfSessionRecordType", p->soap_type() == SOAP_TYPE_ns1__EndOfSessionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EndOfSessionRecordType(struct soap *soap, const char *URL, ns1__EndOfSessionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndOfSessionRecordType", p->soap_type() == SOAP_TYPE_ns1__EndOfSessionRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EndOfSessionRecordType(struct soap *soap, const char *URL, ns1__EndOfSessionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EndOfSessionRecordType", p->soap_type() == SOAP_TYPE_ns1__EndOfSessionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EndOfSessionRecordType * SOAP_FMAC4 soap_get_ns1__EndOfSessionRecordType(struct soap*, ns1__EndOfSessionRecordType *, const char*, const char*);

inline int soap_read_ns1__EndOfSessionRecordType(struct soap *soap, ns1__EndOfSessionRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__EndOfSessionRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EndOfSessionRecordType(struct soap *soap, const char *URL, ns1__EndOfSessionRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__EndOfSessionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__EndOfSessionRecordType(struct soap *soap, ns1__EndOfSessionRecordType *p)
{
	if (soap_read_ns1__EndOfSessionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StartOfSessionRecordType_DEFINED
#define SOAP_TYPE_ns1__StartOfSessionRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StartOfSessionRecordType(struct soap*, const char*, int, const ns1__StartOfSessionRecordType *, const char*);
SOAP_FMAC3 ns1__StartOfSessionRecordType * SOAP_FMAC4 soap_in_ns1__StartOfSessionRecordType(struct soap*, const char*, ns1__StartOfSessionRecordType *, const char*);
SOAP_FMAC1 ns1__StartOfSessionRecordType * SOAP_FMAC2 soap_instantiate_ns1__StartOfSessionRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StartOfSessionRecordType * soap_new_ns1__StartOfSessionRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StartOfSessionRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__StartOfSessionRecordType * soap_new_req_ns1__StartOfSessionRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__StartOfSessionRecordType *_p = soap_new_ns1__StartOfSessionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__StartOfSessionRecordType * soap_new_set_ns1__StartOfSessionRecordType(
	struct soap *soap,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__StartOfSessionRecordType *_p = soap_new_ns1__StartOfSessionRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__StartOfSessionRecordType(struct soap *soap, ns1__StartOfSessionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartOfSessionRecordType", p->soap_type() == SOAP_TYPE_ns1__StartOfSessionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StartOfSessionRecordType(struct soap *soap, const char *URL, ns1__StartOfSessionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartOfSessionRecordType", p->soap_type() == SOAP_TYPE_ns1__StartOfSessionRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StartOfSessionRecordType(struct soap *soap, const char *URL, ns1__StartOfSessionRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartOfSessionRecordType", p->soap_type() == SOAP_TYPE_ns1__StartOfSessionRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StartOfSessionRecordType * SOAP_FMAC4 soap_get_ns1__StartOfSessionRecordType(struct soap*, ns1__StartOfSessionRecordType *, const char*, const char*);

inline int soap_read_ns1__StartOfSessionRecordType(struct soap *soap, ns1__StartOfSessionRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__StartOfSessionRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StartOfSessionRecordType(struct soap *soap, const char *URL, ns1__StartOfSessionRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StartOfSessionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StartOfSessionRecordType(struct soap *soap, ns1__StartOfSessionRecordType *p)
{
	if (soap_read_ns1__StartOfSessionRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__IdentificationRecordType_DEFINED
#define SOAP_TYPE_ns1__IdentificationRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__IdentificationRecordType(struct soap*, const char*, int, const ns1__IdentificationRecordType *, const char*);
SOAP_FMAC3 ns1__IdentificationRecordType * SOAP_FMAC4 soap_in_ns1__IdentificationRecordType(struct soap*, const char*, ns1__IdentificationRecordType *, const char*);
SOAP_FMAC1 ns1__IdentificationRecordType * SOAP_FMAC2 soap_instantiate_ns1__IdentificationRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__IdentificationRecordType * soap_new_ns1__IdentificationRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__IdentificationRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__IdentificationRecordType * soap_new_req_ns1__IdentificationRecordType(
	struct soap *soap,
	LONG64 userId,
	LONG64 prof,
	int rst,
	int mth,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__IdentificationRecordType *_p = soap_new_ns1__IdentificationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__IdentificationRecordType::userId = userId;
		_p->ns1__IdentificationRecordType::prof = prof;
		_p->ns1__IdentificationRecordType::rst = rst;
		_p->ns1__IdentificationRecordType::mth = mth;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__IdentificationRecordType * soap_new_set_ns1__IdentificationRecordType(
	struct soap *soap,
	LONG64 userId,
	LONG64 prof,
	int rst,
	int mth,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__IdentificationRecordType *_p = soap_new_ns1__IdentificationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__IdentificationRecordType::userId = userId;
		_p->ns1__IdentificationRecordType::prof = prof;
		_p->ns1__IdentificationRecordType::rst = rst;
		_p->ns1__IdentificationRecordType::mth = mth;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__IdentificationRecordType(struct soap *soap, ns1__IdentificationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IdentificationRecordType", p->soap_type() == SOAP_TYPE_ns1__IdentificationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__IdentificationRecordType(struct soap *soap, const char *URL, ns1__IdentificationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IdentificationRecordType", p->soap_type() == SOAP_TYPE_ns1__IdentificationRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__IdentificationRecordType(struct soap *soap, const char *URL, ns1__IdentificationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IdentificationRecordType", p->soap_type() == SOAP_TYPE_ns1__IdentificationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__IdentificationRecordType * SOAP_FMAC4 soap_get_ns1__IdentificationRecordType(struct soap*, ns1__IdentificationRecordType *, const char*, const char*);

inline int soap_read_ns1__IdentificationRecordType(struct soap *soap, ns1__IdentificationRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__IdentificationRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__IdentificationRecordType(struct soap *soap, const char *URL, ns1__IdentificationRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__IdentificationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__IdentificationRecordType(struct soap *soap, ns1__IdentificationRecordType *p)
{
	if (soap_read_ns1__IdentificationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingReceiptType_DEFINED
#define SOAP_TYPE_ns1__AccountingReceiptType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingReceiptType(struct soap*, const char*, int, const ns1__AccountingReceiptType *, const char*);
SOAP_FMAC3 ns1__AccountingReceiptType * SOAP_FMAC4 soap_in_ns1__AccountingReceiptType(struct soap*, const char*, ns1__AccountingReceiptType *, const char*);
SOAP_FMAC1 ns1__AccountingReceiptType * SOAP_FMAC2 soap_instantiate_ns1__AccountingReceiptType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingReceiptType * soap_new_ns1__AccountingReceiptType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingReceiptType(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingReceiptType * soap_new_req_ns1__AccountingReceiptType(
	struct soap *soap,
	ns1__InvoiceReceiptType *receipt)
{
	ns1__AccountingReceiptType *_p = soap_new_ns1__AccountingReceiptType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingReceiptType::receipt = receipt;
	}
	return _p;
}

inline ns1__AccountingReceiptType * soap_new_set_ns1__AccountingReceiptType(
	struct soap *soap,
	ns1__InvoiceReceiptType *receipt,
	char *hash,
	char *__item__1)
{
	ns1__AccountingReceiptType *_p = soap_new_ns1__AccountingReceiptType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingReceiptType::receipt = receipt;
		_p->ns1__AccountingReceiptType::hash = hash;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingReceiptType(struct soap *soap, ns1__AccountingReceiptType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingReceiptType", p->soap_type() == SOAP_TYPE_ns1__AccountingReceiptType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingReceiptType(struct soap *soap, const char *URL, ns1__AccountingReceiptType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingReceiptType", p->soap_type() == SOAP_TYPE_ns1__AccountingReceiptType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingReceiptType(struct soap *soap, const char *URL, ns1__AccountingReceiptType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingReceiptType", p->soap_type() == SOAP_TYPE_ns1__AccountingReceiptType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingReceiptType * SOAP_FMAC4 soap_get_ns1__AccountingReceiptType(struct soap*, ns1__AccountingReceiptType *, const char*, const char*);

inline int soap_read_ns1__AccountingReceiptType(struct soap *soap, ns1__AccountingReceiptType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingReceiptType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingReceiptType(struct soap *soap, const char *URL, ns1__AccountingReceiptType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingReceiptType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingReceiptType(struct soap *soap, ns1__AccountingReceiptType *p)
{
	if (soap_read_ns1__AccountingReceiptType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MoneyReturnedFlow_DEFINED
#define SOAP_TYPE_ns1__MoneyReturnedFlow_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MoneyReturnedFlow(struct soap*, const char*, int, const ns1__MoneyReturnedFlow *, const char*);
SOAP_FMAC3 ns1__MoneyReturnedFlow * SOAP_FMAC4 soap_in_ns1__MoneyReturnedFlow(struct soap*, const char*, ns1__MoneyReturnedFlow *, const char*);
SOAP_FMAC1 ns1__MoneyReturnedFlow * SOAP_FMAC2 soap_instantiate_ns1__MoneyReturnedFlow(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MoneyReturnedFlow * soap_new_ns1__MoneyReturnedFlow(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MoneyReturnedFlow(soap, n, NULL, NULL, NULL);
}

inline ns1__MoneyReturnedFlow * soap_new_req_ns1__MoneyReturnedFlow(
	struct soap *soap,
	LONG64 fVal,
	LONG64 amnt,
	int type,
	LONG64 hprO)
{
	ns1__MoneyReturnedFlow *_p = soap_new_ns1__MoneyReturnedFlow(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MoneyReturnedFlow::fVal = fVal;
		_p->ns1__MoneyReturnedFlow::amnt = amnt;
		_p->ns1__MoneyReturnedFlow::type = type;
		_p->ns1__MoneyReturnedFlow::hprO = hprO;
	}
	return _p;
}

inline ns1__MoneyReturnedFlow * soap_new_set_ns1__MoneyReturnedFlow(
	struct soap *soap,
	LONG64 fVal,
	LONG64 amnt,
	int type,
	LONG64 hprO,
	char *__item__1)
{
	ns1__MoneyReturnedFlow *_p = soap_new_ns1__MoneyReturnedFlow(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MoneyReturnedFlow::fVal = fVal;
		_p->ns1__MoneyReturnedFlow::amnt = amnt;
		_p->ns1__MoneyReturnedFlow::type = type;
		_p->ns1__MoneyReturnedFlow::hprO = hprO;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MoneyReturnedFlow(struct soap *soap, ns1__MoneyReturnedFlow const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MoneyReturnedFlow", p->soap_type() == SOAP_TYPE_ns1__MoneyReturnedFlow ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MoneyReturnedFlow(struct soap *soap, const char *URL, ns1__MoneyReturnedFlow const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MoneyReturnedFlow", p->soap_type() == SOAP_TYPE_ns1__MoneyReturnedFlow ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MoneyReturnedFlow(struct soap *soap, const char *URL, ns1__MoneyReturnedFlow const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MoneyReturnedFlow", p->soap_type() == SOAP_TYPE_ns1__MoneyReturnedFlow ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MoneyReturnedFlow * SOAP_FMAC4 soap_get_ns1__MoneyReturnedFlow(struct soap*, ns1__MoneyReturnedFlow *, const char*, const char*);

inline int soap_read_ns1__MoneyReturnedFlow(struct soap *soap, ns1__MoneyReturnedFlow *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MoneyReturnedFlow(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MoneyReturnedFlow(struct soap *soap, const char *URL, ns1__MoneyReturnedFlow *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MoneyReturnedFlow(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MoneyReturnedFlow(struct soap *soap, ns1__MoneyReturnedFlow *p)
{
	if (soap_read_ns1__MoneyReturnedFlow(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CoinNoteReturnedListType_DEFINED
#define SOAP_TYPE_ns1__CoinNoteReturnedListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CoinNoteReturnedListType(struct soap*, const char*, int, const ns1__CoinNoteReturnedListType *, const char*);
SOAP_FMAC3 ns1__CoinNoteReturnedListType * SOAP_FMAC4 soap_in_ns1__CoinNoteReturnedListType(struct soap*, const char*, ns1__CoinNoteReturnedListType *, const char*);
SOAP_FMAC1 ns1__CoinNoteReturnedListType * SOAP_FMAC2 soap_instantiate_ns1__CoinNoteReturnedListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CoinNoteReturnedListType * soap_new_ns1__CoinNoteReturnedListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CoinNoteReturnedListType(soap, n, NULL, NULL, NULL);
}

inline ns1__CoinNoteReturnedListType * soap_new_req_ns1__CoinNoteReturnedListType(
	struct soap *soap,
	int __sizecnr,
	ns1__MoneyReturnedFlow **cnr)
{
	ns1__CoinNoteReturnedListType *_p = soap_new_ns1__CoinNoteReturnedListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CoinNoteReturnedListType::__sizecnr = __sizecnr;
		_p->ns1__CoinNoteReturnedListType::cnr = cnr;
	}
	return _p;
}

inline ns1__CoinNoteReturnedListType * soap_new_set_ns1__CoinNoteReturnedListType(
	struct soap *soap,
	int __sizecnr,
	ns1__MoneyReturnedFlow **cnr,
	char *__item__1)
{
	ns1__CoinNoteReturnedListType *_p = soap_new_ns1__CoinNoteReturnedListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CoinNoteReturnedListType::__sizecnr = __sizecnr;
		_p->ns1__CoinNoteReturnedListType::cnr = cnr;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__CoinNoteReturnedListType(struct soap *soap, ns1__CoinNoteReturnedListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteReturnedListType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteReturnedListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CoinNoteReturnedListType(struct soap *soap, const char *URL, ns1__CoinNoteReturnedListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteReturnedListType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteReturnedListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CoinNoteReturnedListType(struct soap *soap, const char *URL, ns1__CoinNoteReturnedListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteReturnedListType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteReturnedListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CoinNoteReturnedListType * SOAP_FMAC4 soap_get_ns1__CoinNoteReturnedListType(struct soap*, ns1__CoinNoteReturnedListType *, const char*, const char*);

inline int soap_read_ns1__CoinNoteReturnedListType(struct soap *soap, ns1__CoinNoteReturnedListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CoinNoteReturnedListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CoinNoteReturnedListType(struct soap *soap, const char *URL, ns1__CoinNoteReturnedListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CoinNoteReturnedListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CoinNoteReturnedListType(struct soap *soap, ns1__CoinNoteReturnedListType *p)
{
	if (soap_read_ns1__CoinNoteReturnedListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MoneyInsertedFlow_DEFINED
#define SOAP_TYPE_ns1__MoneyInsertedFlow_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MoneyInsertedFlow(struct soap*, const char*, int, const ns1__MoneyInsertedFlow *, const char*);
SOAP_FMAC3 ns1__MoneyInsertedFlow * SOAP_FMAC4 soap_in_ns1__MoneyInsertedFlow(struct soap*, const char*, ns1__MoneyInsertedFlow *, const char*);
SOAP_FMAC1 ns1__MoneyInsertedFlow * SOAP_FMAC2 soap_instantiate_ns1__MoneyInsertedFlow(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MoneyInsertedFlow * soap_new_ns1__MoneyInsertedFlow(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MoneyInsertedFlow(soap, n, NULL, NULL, NULL);
}

inline ns1__MoneyInsertedFlow * soap_new_req_ns1__MoneyInsertedFlow(
	struct soap *soap,
	LONG64 fVal,
	LONG64 amnt,
	int type)
{
	ns1__MoneyInsertedFlow *_p = soap_new_ns1__MoneyInsertedFlow(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MoneyInsertedFlow::fVal = fVal;
		_p->ns1__MoneyInsertedFlow::amnt = amnt;
		_p->ns1__MoneyInsertedFlow::type = type;
	}
	return _p;
}

inline ns1__MoneyInsertedFlow * soap_new_set_ns1__MoneyInsertedFlow(
	struct soap *soap,
	LONG64 fVal,
	LONG64 amnt,
	int type,
	LONG64 *hprD,
	LONG64 *bxD,
	char *__item__1)
{
	ns1__MoneyInsertedFlow *_p = soap_new_ns1__MoneyInsertedFlow(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MoneyInsertedFlow::fVal = fVal;
		_p->ns1__MoneyInsertedFlow::amnt = amnt;
		_p->ns1__MoneyInsertedFlow::type = type;
		_p->ns1__MoneyInsertedFlow::hprD = hprD;
		_p->ns1__MoneyInsertedFlow::bxD = bxD;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MoneyInsertedFlow(struct soap *soap, ns1__MoneyInsertedFlow const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MoneyInsertedFlow", p->soap_type() == SOAP_TYPE_ns1__MoneyInsertedFlow ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MoneyInsertedFlow(struct soap *soap, const char *URL, ns1__MoneyInsertedFlow const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MoneyInsertedFlow", p->soap_type() == SOAP_TYPE_ns1__MoneyInsertedFlow ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MoneyInsertedFlow(struct soap *soap, const char *URL, ns1__MoneyInsertedFlow const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MoneyInsertedFlow", p->soap_type() == SOAP_TYPE_ns1__MoneyInsertedFlow ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MoneyInsertedFlow * SOAP_FMAC4 soap_get_ns1__MoneyInsertedFlow(struct soap*, ns1__MoneyInsertedFlow *, const char*, const char*);

inline int soap_read_ns1__MoneyInsertedFlow(struct soap *soap, ns1__MoneyInsertedFlow *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MoneyInsertedFlow(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MoneyInsertedFlow(struct soap *soap, const char *URL, ns1__MoneyInsertedFlow *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MoneyInsertedFlow(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MoneyInsertedFlow(struct soap *soap, ns1__MoneyInsertedFlow *p)
{
	if (soap_read_ns1__MoneyInsertedFlow(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CoinNoteInsertedListType_DEFINED
#define SOAP_TYPE_ns1__CoinNoteInsertedListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CoinNoteInsertedListType(struct soap*, const char*, int, const ns1__CoinNoteInsertedListType *, const char*);
SOAP_FMAC3 ns1__CoinNoteInsertedListType * SOAP_FMAC4 soap_in_ns1__CoinNoteInsertedListType(struct soap*, const char*, ns1__CoinNoteInsertedListType *, const char*);
SOAP_FMAC1 ns1__CoinNoteInsertedListType * SOAP_FMAC2 soap_instantiate_ns1__CoinNoteInsertedListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CoinNoteInsertedListType * soap_new_ns1__CoinNoteInsertedListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CoinNoteInsertedListType(soap, n, NULL, NULL, NULL);
}

inline ns1__CoinNoteInsertedListType * soap_new_req_ns1__CoinNoteInsertedListType(
	struct soap *soap,
	int __sizecni,
	ns1__MoneyInsertedFlow **cni)
{
	ns1__CoinNoteInsertedListType *_p = soap_new_ns1__CoinNoteInsertedListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CoinNoteInsertedListType::__sizecni = __sizecni;
		_p->ns1__CoinNoteInsertedListType::cni = cni;
	}
	return _p;
}

inline ns1__CoinNoteInsertedListType * soap_new_set_ns1__CoinNoteInsertedListType(
	struct soap *soap,
	int __sizecni,
	ns1__MoneyInsertedFlow **cni,
	char *__item__1)
{
	ns1__CoinNoteInsertedListType *_p = soap_new_ns1__CoinNoteInsertedListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CoinNoteInsertedListType::__sizecni = __sizecni;
		_p->ns1__CoinNoteInsertedListType::cni = cni;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__CoinNoteInsertedListType(struct soap *soap, ns1__CoinNoteInsertedListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteInsertedListType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteInsertedListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CoinNoteInsertedListType(struct soap *soap, const char *URL, ns1__CoinNoteInsertedListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteInsertedListType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteInsertedListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CoinNoteInsertedListType(struct soap *soap, const char *URL, ns1__CoinNoteInsertedListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CoinNoteInsertedListType", p->soap_type() == SOAP_TYPE_ns1__CoinNoteInsertedListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CoinNoteInsertedListType * SOAP_FMAC4 soap_get_ns1__CoinNoteInsertedListType(struct soap*, ns1__CoinNoteInsertedListType *, const char*, const char*);

inline int soap_read_ns1__CoinNoteInsertedListType(struct soap *soap, ns1__CoinNoteInsertedListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CoinNoteInsertedListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CoinNoteInsertedListType(struct soap *soap, const char *URL, ns1__CoinNoteInsertedListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CoinNoteInsertedListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CoinNoteInsertedListType(struct soap *soap, ns1__CoinNoteInsertedListType *p)
{
	if (soap_read_ns1__CoinNoteInsertedListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AwardType_DEFINED
#define SOAP_TYPE_ns1__AwardType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AwardType(struct soap*, const char*, int, const ns1__AwardType *, const char*);
SOAP_FMAC3 ns1__AwardType * SOAP_FMAC4 soap_in_ns1__AwardType(struct soap*, const char*, ns1__AwardType *, const char*);
SOAP_FMAC1 ns1__AwardType * SOAP_FMAC2 soap_instantiate_ns1__AwardType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AwardType * soap_new_ns1__AwardType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AwardType(soap, n, NULL, NULL, NULL);
}

inline ns1__AwardType * soap_new_req_ns1__AwardType(
	struct soap *soap,
	LONG64 id,
	LONG64 ownr,
	LONG64 value)
{
	ns1__AwardType *_p = soap_new_ns1__AwardType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AwardType::id = id;
		_p->ns1__AwardType::ownr = ownr;
		_p->ns1__AwardType::value = value;
	}
	return _p;
}

inline ns1__AwardType * soap_new_set_ns1__AwardType(
	struct soap *soap,
	LONG64 id,
	LONG64 ownr,
	LONG64 value,
	char *__item__1)
{
	ns1__AwardType *_p = soap_new_ns1__AwardType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AwardType::id = id;
		_p->ns1__AwardType::ownr = ownr;
		_p->ns1__AwardType::value = value;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AwardType(struct soap *soap, ns1__AwardType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AwardType", p->soap_type() == SOAP_TYPE_ns1__AwardType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AwardType(struct soap *soap, const char *URL, ns1__AwardType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AwardType", p->soap_type() == SOAP_TYPE_ns1__AwardType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AwardType(struct soap *soap, const char *URL, ns1__AwardType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AwardType", p->soap_type() == SOAP_TYPE_ns1__AwardType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AwardType * SOAP_FMAC4 soap_get_ns1__AwardType(struct soap*, ns1__AwardType *, const char*, const char*);

inline int soap_read_ns1__AwardType(struct soap *soap, ns1__AwardType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AwardType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AwardType(struct soap *soap, const char *URL, ns1__AwardType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AwardType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AwardType(struct soap *soap, ns1__AwardType *p)
{
	if (soap_read_ns1__AwardType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AwardListType_DEFINED
#define SOAP_TYPE_ns1__AwardListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AwardListType(struct soap*, const char*, int, const ns1__AwardListType *, const char*);
SOAP_FMAC3 ns1__AwardListType * SOAP_FMAC4 soap_in_ns1__AwardListType(struct soap*, const char*, ns1__AwardListType *, const char*);
SOAP_FMAC1 ns1__AwardListType * SOAP_FMAC2 soap_instantiate_ns1__AwardListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AwardListType * soap_new_ns1__AwardListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AwardListType(soap, n, NULL, NULL, NULL);
}

inline ns1__AwardListType * soap_new_req_ns1__AwardListType(
	struct soap *soap,
	int __sizeaward,
	ns1__AwardType **award)
{
	ns1__AwardListType *_p = soap_new_ns1__AwardListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AwardListType::__sizeaward = __sizeaward;
		_p->ns1__AwardListType::award = award;
	}
	return _p;
}

inline ns1__AwardListType * soap_new_set_ns1__AwardListType(
	struct soap *soap,
	int __sizeaward,
	ns1__AwardType **award,
	char *__item__1)
{
	ns1__AwardListType *_p = soap_new_ns1__AwardListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AwardListType::__sizeaward = __sizeaward;
		_p->ns1__AwardListType::award = award;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AwardListType(struct soap *soap, ns1__AwardListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AwardListType", p->soap_type() == SOAP_TYPE_ns1__AwardListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AwardListType(struct soap *soap, const char *URL, ns1__AwardListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AwardListType", p->soap_type() == SOAP_TYPE_ns1__AwardListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AwardListType(struct soap *soap, const char *URL, ns1__AwardListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AwardListType", p->soap_type() == SOAP_TYPE_ns1__AwardListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AwardListType * SOAP_FMAC4 soap_get_ns1__AwardListType(struct soap*, ns1__AwardListType *, const char*, const char*);

inline int soap_read_ns1__AwardListType(struct soap *soap, ns1__AwardListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AwardListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AwardListType(struct soap *soap, const char *URL, ns1__AwardListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AwardListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AwardListType(struct soap *soap, ns1__AwardListType *p)
{
	if (soap_read_ns1__AwardListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PaymentModeType_DEFINED
#define SOAP_TYPE_ns1__PaymentModeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PaymentModeType(struct soap*, const char*, int, const ns1__PaymentModeType *, const char*);
SOAP_FMAC3 ns1__PaymentModeType * SOAP_FMAC4 soap_in_ns1__PaymentModeType(struct soap*, const char*, ns1__PaymentModeType *, const char*);
SOAP_FMAC1 ns1__PaymentModeType * SOAP_FMAC2 soap_instantiate_ns1__PaymentModeType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PaymentModeType * soap_new_ns1__PaymentModeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PaymentModeType(soap, n, NULL, NULL, NULL);
}

inline ns1__PaymentModeType * soap_new_req_ns1__PaymentModeType(
	struct soap *soap,
	LONG64 mId,
	LONG64 amnt,
	char *ref)
{
	ns1__PaymentModeType *_p = soap_new_ns1__PaymentModeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentModeType::mId = mId;
		_p->ns1__PaymentModeType::amnt = amnt;
		_p->ns1__PaymentModeType::ref = ref;
	}
	return _p;
}

inline ns1__PaymentModeType * soap_new_set_ns1__PaymentModeType(
	struct soap *soap,
	LONG64 mId,
	LONG64 amnt,
	char *ref,
	char *__item__1)
{
	ns1__PaymentModeType *_p = soap_new_ns1__PaymentModeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentModeType::mId = mId;
		_p->ns1__PaymentModeType::amnt = amnt;
		_p->ns1__PaymentModeType::ref = ref;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PaymentModeType(struct soap *soap, ns1__PaymentModeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentModeType", p->soap_type() == SOAP_TYPE_ns1__PaymentModeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PaymentModeType(struct soap *soap, const char *URL, ns1__PaymentModeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentModeType", p->soap_type() == SOAP_TYPE_ns1__PaymentModeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PaymentModeType(struct soap *soap, const char *URL, ns1__PaymentModeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentModeType", p->soap_type() == SOAP_TYPE_ns1__PaymentModeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PaymentModeType * SOAP_FMAC4 soap_get_ns1__PaymentModeType(struct soap*, ns1__PaymentModeType *, const char*, const char*);

inline int soap_read_ns1__PaymentModeType(struct soap *soap, ns1__PaymentModeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PaymentModeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PaymentModeType(struct soap *soap, const char *URL, ns1__PaymentModeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PaymentModeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PaymentModeType(struct soap *soap, ns1__PaymentModeType *p)
{
	if (soap_read_ns1__PaymentModeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PaymentModeListType_DEFINED
#define SOAP_TYPE_ns1__PaymentModeListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PaymentModeListType(struct soap*, const char*, int, const ns1__PaymentModeListType *, const char*);
SOAP_FMAC3 ns1__PaymentModeListType * SOAP_FMAC4 soap_in_ns1__PaymentModeListType(struct soap*, const char*, ns1__PaymentModeListType *, const char*);
SOAP_FMAC1 ns1__PaymentModeListType * SOAP_FMAC2 soap_instantiate_ns1__PaymentModeListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PaymentModeListType * soap_new_ns1__PaymentModeListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PaymentModeListType(soap, n, NULL, NULL, NULL);
}

inline ns1__PaymentModeListType * soap_new_req_ns1__PaymentModeListType(
	struct soap *soap,
	int __sizepayment,
	ns1__PaymentModeType **payment)
{
	ns1__PaymentModeListType *_p = soap_new_ns1__PaymentModeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentModeListType::__sizepayment = __sizepayment;
		_p->ns1__PaymentModeListType::payment = payment;
	}
	return _p;
}

inline ns1__PaymentModeListType * soap_new_set_ns1__PaymentModeListType(
	struct soap *soap,
	int __sizepayment,
	ns1__PaymentModeType **payment,
	char *__item__1)
{
	ns1__PaymentModeListType *_p = soap_new_ns1__PaymentModeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PaymentModeListType::__sizepayment = __sizepayment;
		_p->ns1__PaymentModeListType::payment = payment;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PaymentModeListType(struct soap *soap, ns1__PaymentModeListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentModeListType", p->soap_type() == SOAP_TYPE_ns1__PaymentModeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PaymentModeListType(struct soap *soap, const char *URL, ns1__PaymentModeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentModeListType", p->soap_type() == SOAP_TYPE_ns1__PaymentModeListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PaymentModeListType(struct soap *soap, const char *URL, ns1__PaymentModeListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PaymentModeListType", p->soap_type() == SOAP_TYPE_ns1__PaymentModeListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PaymentModeListType * SOAP_FMAC4 soap_get_ns1__PaymentModeListType(struct soap*, ns1__PaymentModeListType *, const char*, const char*);

inline int soap_read_ns1__PaymentModeListType(struct soap *soap, ns1__PaymentModeListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PaymentModeListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PaymentModeListType(struct soap *soap, const char *URL, ns1__PaymentModeListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PaymentModeListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PaymentModeListType(struct soap *soap, ns1__PaymentModeListType *p)
{
	if (soap_read_ns1__PaymentModeListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingFailureInfo_DEFINED
#define SOAP_TYPE_ns1__AccountingFailureInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingFailureInfo(struct soap*, const char*, int, const ns1__AccountingFailureInfo *, const char*);
SOAP_FMAC3 ns1__AccountingFailureInfo * SOAP_FMAC4 soap_in_ns1__AccountingFailureInfo(struct soap*, const char*, ns1__AccountingFailureInfo *, const char*);
SOAP_FMAC1 ns1__AccountingFailureInfo * SOAP_FMAC2 soap_instantiate_ns1__AccountingFailureInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingFailureInfo * soap_new_ns1__AccountingFailureInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingFailureInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingFailureInfo * soap_new_req_ns1__AccountingFailureInfo(
	struct soap *soap,
	unsigned int cause,
	unsigned int type)
{
	ns1__AccountingFailureInfo *_p = soap_new_ns1__AccountingFailureInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingFailureInfo::cause = cause;
		_p->ns1__AccountingFailureInfo::type = type;
	}
	return _p;
}

inline ns1__AccountingFailureInfo * soap_new_set_ns1__AccountingFailureInfo(
	struct soap *soap,
	unsigned int cause,
	unsigned int type,
	bool *test,
	char *__item__1)
{
	ns1__AccountingFailureInfo *_p = soap_new_ns1__AccountingFailureInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingFailureInfo::cause = cause;
		_p->ns1__AccountingFailureInfo::type = type;
		_p->ns1__AccountingFailureInfo::test = test;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingFailureInfo(struct soap *soap, ns1__AccountingFailureInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingFailureInfo", p->soap_type() == SOAP_TYPE_ns1__AccountingFailureInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingFailureInfo(struct soap *soap, const char *URL, ns1__AccountingFailureInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingFailureInfo", p->soap_type() == SOAP_TYPE_ns1__AccountingFailureInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingFailureInfo(struct soap *soap, const char *URL, ns1__AccountingFailureInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingFailureInfo", p->soap_type() == SOAP_TYPE_ns1__AccountingFailureInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingFailureInfo * SOAP_FMAC4 soap_get_ns1__AccountingFailureInfo(struct soap*, ns1__AccountingFailureInfo *, const char*, const char*);

inline int soap_read_ns1__AccountingFailureInfo(struct soap *soap, ns1__AccountingFailureInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingFailureInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingFailureInfo(struct soap *soap, const char *URL, ns1__AccountingFailureInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingFailureInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingFailureInfo(struct soap *soap, ns1__AccountingFailureInfo *p)
{
	if (soap_read_ns1__AccountingFailureInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingFailureType_DEFINED
#define SOAP_TYPE_ns1__AccountingFailureType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingFailureType(struct soap*, const char*, int, const ns1__AccountingFailureType *, const char*);
SOAP_FMAC3 ns1__AccountingFailureType * SOAP_FMAC4 soap_in_ns1__AccountingFailureType(struct soap*, const char*, ns1__AccountingFailureType *, const char*);
SOAP_FMAC1 ns1__AccountingFailureType * SOAP_FMAC2 soap_instantiate_ns1__AccountingFailureType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingFailureType * soap_new_ns1__AccountingFailureType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingFailureType(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingFailureType * soap_new_req_ns1__AccountingFailureType(
	struct soap *soap,
	ns1__TitleCodeType *prd,
	LONG64 opT,
	LONG64 cs,
	LONG64 mtype,
	LONG64 isTest)
{
	ns1__AccountingFailureType *_p = soap_new_ns1__AccountingFailureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingFailureType::prd = prd;
		_p->ns1__AccountingFailureType::opT = opT;
		_p->ns1__AccountingFailureType::cs = cs;
		_p->ns1__AccountingFailureType::mtype = mtype;
		_p->ns1__AccountingFailureType::isTest = isTest;
	}
	return _p;
}

inline ns1__AccountingFailureType * soap_new_set_ns1__AccountingFailureType(
	struct soap *soap,
	ns1__TitleCodeType *prd,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	LONG64 opT,
	LONG64 cs,
	LONG64 mtype,
	LONG64 isTest,
	char *__item__1)
{
	ns1__AccountingFailureType *_p = soap_new_ns1__AccountingFailureType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingFailureType::prd = prd;
		_p->ns1__AccountingFailureType::ctlInfo = ctlInfo;
		_p->ns1__AccountingFailureType::ctlData = ctlData;
		_p->ns1__AccountingFailureType::cData = cData;
		_p->ns1__AccountingFailureType::rawData = rawData;
		_p->ns1__AccountingFailureType::opT = opT;
		_p->ns1__AccountingFailureType::cs = cs;
		_p->ns1__AccountingFailureType::mtype = mtype;
		_p->ns1__AccountingFailureType::isTest = isTest;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingFailureType(struct soap *soap, ns1__AccountingFailureType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingFailureType", p->soap_type() == SOAP_TYPE_ns1__AccountingFailureType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingFailureType(struct soap *soap, const char *URL, ns1__AccountingFailureType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingFailureType", p->soap_type() == SOAP_TYPE_ns1__AccountingFailureType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingFailureType(struct soap *soap, const char *URL, ns1__AccountingFailureType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingFailureType", p->soap_type() == SOAP_TYPE_ns1__AccountingFailureType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingFailureType * SOAP_FMAC4 soap_get_ns1__AccountingFailureType(struct soap*, ns1__AccountingFailureType *, const char*, const char*);

inline int soap_read_ns1__AccountingFailureType(struct soap *soap, ns1__AccountingFailureType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingFailureType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingFailureType(struct soap *soap, const char *URL, ns1__AccountingFailureType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingFailureType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingFailureType(struct soap *soap, ns1__AccountingFailureType *p)
{
	if (soap_read_ns1__AccountingFailureType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingFailureListType_DEFINED
#define SOAP_TYPE_ns1__AccountingFailureListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingFailureListType(struct soap*, const char*, int, const ns1__AccountingFailureListType *, const char*);
SOAP_FMAC3 ns1__AccountingFailureListType * SOAP_FMAC4 soap_in_ns1__AccountingFailureListType(struct soap*, const char*, ns1__AccountingFailureListType *, const char*);
SOAP_FMAC1 ns1__AccountingFailureListType * SOAP_FMAC2 soap_instantiate_ns1__AccountingFailureListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingFailureListType * soap_new_ns1__AccountingFailureListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingFailureListType(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingFailureListType * soap_new_req_ns1__AccountingFailureListType(
	struct soap *soap,
	int __sizefailure,
	ns1__AccountingFailureType **failure,
	int __sizefailInfo,
	ns1__AccountingFailureInfo **failInfo)
{
	ns1__AccountingFailureListType *_p = soap_new_ns1__AccountingFailureListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingFailureListType::__sizefailure = __sizefailure;
		_p->ns1__AccountingFailureListType::failure = failure;
		_p->ns1__AccountingFailureListType::__sizefailInfo = __sizefailInfo;
		_p->ns1__AccountingFailureListType::failInfo = failInfo;
	}
	return _p;
}

inline ns1__AccountingFailureListType * soap_new_set_ns1__AccountingFailureListType(
	struct soap *soap,
	int __sizefailure,
	ns1__AccountingFailureType **failure,
	int __sizefailInfo,
	ns1__AccountingFailureInfo **failInfo,
	char *__item__1)
{
	ns1__AccountingFailureListType *_p = soap_new_ns1__AccountingFailureListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingFailureListType::__sizefailure = __sizefailure;
		_p->ns1__AccountingFailureListType::failure = failure;
		_p->ns1__AccountingFailureListType::__sizefailInfo = __sizefailInfo;
		_p->ns1__AccountingFailureListType::failInfo = failInfo;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingFailureListType(struct soap *soap, ns1__AccountingFailureListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingFailureListType", p->soap_type() == SOAP_TYPE_ns1__AccountingFailureListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingFailureListType(struct soap *soap, const char *URL, ns1__AccountingFailureListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingFailureListType", p->soap_type() == SOAP_TYPE_ns1__AccountingFailureListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingFailureListType(struct soap *soap, const char *URL, ns1__AccountingFailureListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingFailureListType", p->soap_type() == SOAP_TYPE_ns1__AccountingFailureListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingFailureListType * SOAP_FMAC4 soap_get_ns1__AccountingFailureListType(struct soap*, ns1__AccountingFailureListType *, const char*, const char*);

inline int soap_read_ns1__AccountingFailureListType(struct soap *soap, ns1__AccountingFailureListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingFailureListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingFailureListType(struct soap *soap, const char *URL, ns1__AccountingFailureListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingFailureListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingFailureListType(struct soap *soap, ns1__AccountingFailureListType *p)
{
	if (soap_read_ns1__AccountingFailureListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingUnitInfo_DEFINED
#define SOAP_TYPE_ns1__AccountingUnitInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingUnitInfo(struct soap*, const char*, int, const ns1__AccountingUnitInfo *, const char*);
SOAP_FMAC3 ns1__AccountingUnitInfo * SOAP_FMAC4 soap_in_ns1__AccountingUnitInfo(struct soap*, const char*, ns1__AccountingUnitInfo *, const char*);
SOAP_FMAC1 ns1__AccountingUnitInfo * SOAP_FMAC2 soap_instantiate_ns1__AccountingUnitInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingUnitInfo * soap_new_ns1__AccountingUnitInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingUnitInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingUnitInfo * soap_new_req_ns1__AccountingUnitInfo(
	struct soap *soap)
{
	ns1__AccountingUnitInfo *_p = soap_new_ns1__AccountingUnitInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__AccountingUnitInfo * soap_new_set_ns1__AccountingUnitInfo(
	struct soap *soap,
	LONG64 *price,
	ULONG64 *deposit,
	ns1__taxAppliedList *taxList,
	char *entryCode,
	unsigned int *type,
	bool *test,
	char *__item__1)
{
	ns1__AccountingUnitInfo *_p = soap_new_ns1__AccountingUnitInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingUnitInfo::price = price;
		_p->ns1__AccountingUnitInfo::deposit = deposit;
		_p->ns1__AccountingUnitInfo::taxList = taxList;
		_p->ns1__AccountingUnitInfo::entryCode = entryCode;
		_p->ns1__AccountingUnitInfo::type = type;
		_p->ns1__AccountingUnitInfo::test = test;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingUnitInfo(struct soap *soap, ns1__AccountingUnitInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitInfo", p->soap_type() == SOAP_TYPE_ns1__AccountingUnitInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingUnitInfo(struct soap *soap, const char *URL, ns1__AccountingUnitInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitInfo", p->soap_type() == SOAP_TYPE_ns1__AccountingUnitInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingUnitInfo(struct soap *soap, const char *URL, ns1__AccountingUnitInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitInfo", p->soap_type() == SOAP_TYPE_ns1__AccountingUnitInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingUnitInfo * SOAP_FMAC4 soap_get_ns1__AccountingUnitInfo(struct soap*, ns1__AccountingUnitInfo *, const char*, const char*);

inline int soap_read_ns1__AccountingUnitInfo(struct soap *soap, ns1__AccountingUnitInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingUnitInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingUnitInfo(struct soap *soap, const char *URL, ns1__AccountingUnitInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingUnitInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingUnitInfo(struct soap *soap, ns1__AccountingUnitInfo *p)
{
	if (soap_read_ns1__AccountingUnitInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__IdentificationDocument_DEFINED
#define SOAP_TYPE_ns1__IdentificationDocument_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__IdentificationDocument(struct soap*, const char*, int, const ns1__IdentificationDocument *, const char*);
SOAP_FMAC3 ns1__IdentificationDocument * SOAP_FMAC4 soap_in_ns1__IdentificationDocument(struct soap*, const char*, ns1__IdentificationDocument *, const char*);
SOAP_FMAC1 ns1__IdentificationDocument * SOAP_FMAC2 soap_instantiate_ns1__IdentificationDocument(struct soap*, int, const char*, const char*, size_t*);

inline ns1__IdentificationDocument * soap_new_ns1__IdentificationDocument(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__IdentificationDocument(soap, n, NULL, NULL, NULL);
}

inline ns1__IdentificationDocument * soap_new_req_ns1__IdentificationDocument(
	struct soap *soap,
	char *name,
	char *addr,
	char *contact,
	unsigned short type,
	char *id)
{
	ns1__IdentificationDocument *_p = soap_new_ns1__IdentificationDocument(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__IdentificationDocument::name = name;
		_p->ns1__IdentificationDocument::addr = addr;
		_p->ns1__IdentificationDocument::contact = contact;
		_p->ns1__IdentificationDocument::type = type;
		_p->ns1__IdentificationDocument::id = id;
	}
	return _p;
}

inline ns1__IdentificationDocument * soap_new_set_ns1__IdentificationDocument(
	struct soap *soap,
	char *name,
	char *addr,
	char *contact,
	unsigned short type,
	char *id,
	char *__item__1)
{
	ns1__IdentificationDocument *_p = soap_new_ns1__IdentificationDocument(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__IdentificationDocument::name = name;
		_p->ns1__IdentificationDocument::addr = addr;
		_p->ns1__IdentificationDocument::contact = contact;
		_p->ns1__IdentificationDocument::type = type;
		_p->ns1__IdentificationDocument::id = id;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__IdentificationDocument(struct soap *soap, ns1__IdentificationDocument const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IdentificationDocument", p->soap_type() == SOAP_TYPE_ns1__IdentificationDocument ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__IdentificationDocument(struct soap *soap, const char *URL, ns1__IdentificationDocument const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IdentificationDocument", p->soap_type() == SOAP_TYPE_ns1__IdentificationDocument ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__IdentificationDocument(struct soap *soap, const char *URL, ns1__IdentificationDocument const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IdentificationDocument", p->soap_type() == SOAP_TYPE_ns1__IdentificationDocument ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__IdentificationDocument * SOAP_FMAC4 soap_get_ns1__IdentificationDocument(struct soap*, ns1__IdentificationDocument *, const char*, const char*);

inline int soap_read_ns1__IdentificationDocument(struct soap *soap, ns1__IdentificationDocument *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__IdentificationDocument(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__IdentificationDocument(struct soap *soap, const char *URL, ns1__IdentificationDocument *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__IdentificationDocument(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__IdentificationDocument(struct soap *soap, ns1__IdentificationDocument *p)
{
	if (soap_read_ns1__IdentificationDocument(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingUnit_DEFINED
#define SOAP_TYPE_ns1__AccountingUnit_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingUnit(struct soap*, const char*, int, const ns1__AccountingUnit *, const char*);
SOAP_FMAC3 ns1__AccountingUnit * SOAP_FMAC4 soap_in_ns1__AccountingUnit(struct soap*, const char*, ns1__AccountingUnit *, const char*);
SOAP_FMAC1 ns1__AccountingUnit * SOAP_FMAC2 soap_instantiate_ns1__AccountingUnit(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingUnit * soap_new_ns1__AccountingUnit(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingUnit(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingUnit * soap_new_req_ns1__AccountingUnit(
	struct soap *soap,
	ns1__FareInfo *fareInfo,
	ns1__AccountingUnitInfo *accInfo)
{
	ns1__AccountingUnit *_p = soap_new_ns1__AccountingUnit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingUnit::fareInfo = fareInfo;
		_p->ns1__AccountingUnit::accInfo = accInfo;
	}
	return _p;
}

inline ns1__AccountingUnit * soap_new_set_ns1__AccountingUnit(
	struct soap *soap,
	ns1__FareInfo *fareInfo,
	ns1__IdentificationDocument *doc,
	ns1__AccountingUnitInfo *accInfo,
	LONG64 *actionID,
	ULONG64 *sam,
	ns1__cardIdentificationType *card,
	ns1__OperationInfoType *opInfo,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	char *__item__1)
{
	ns1__AccountingUnit *_p = soap_new_ns1__AccountingUnit(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingUnit::fareInfo = fareInfo;
		_p->ns1__AccountingUnit::doc = doc;
		_p->ns1__AccountingUnit::accInfo = accInfo;
		_p->ns1__AccountingUnit::actionID = actionID;
		_p->ns1__AccountingUnit::sam = sam;
		_p->ns1__AccountingUnit::card = card;
		_p->ns1__AccountingUnit::opInfo = opInfo;
		_p->ns1__AccountingUnit::ctlInfo = ctlInfo;
		_p->ns1__AccountingUnit::ctlData = ctlData;
		_p->ns1__AccountingUnit::cData = cData;
		_p->ns1__AccountingUnit::rawData = rawData;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingUnit(struct soap *soap, ns1__AccountingUnit const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnit", p->soap_type() == SOAP_TYPE_ns1__AccountingUnit ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingUnit(struct soap *soap, const char *URL, ns1__AccountingUnit const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnit", p->soap_type() == SOAP_TYPE_ns1__AccountingUnit ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingUnit(struct soap *soap, const char *URL, ns1__AccountingUnit const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnit", p->soap_type() == SOAP_TYPE_ns1__AccountingUnit ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingUnit * SOAP_FMAC4 soap_get_ns1__AccountingUnit(struct soap*, ns1__AccountingUnit *, const char*, const char*);

inline int soap_read_ns1__AccountingUnit(struct soap *soap, ns1__AccountingUnit *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingUnit(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingUnit(struct soap *soap, const char *URL, ns1__AccountingUnit *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingUnit(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingUnit(struct soap *soap, ns1__AccountingUnit *p)
{
	if (soap_read_ns1__AccountingUnit(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__taxAppliedType_DEFINED
#define SOAP_TYPE_ns1__taxAppliedType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__taxAppliedType(struct soap*, const char*, int, const ns1__taxAppliedType *, const char*);
SOAP_FMAC3 ns1__taxAppliedType * SOAP_FMAC4 soap_in_ns1__taxAppliedType(struct soap*, const char*, ns1__taxAppliedType *, const char*);
SOAP_FMAC1 ns1__taxAppliedType * SOAP_FMAC2 soap_instantiate_ns1__taxAppliedType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__taxAppliedType * soap_new_ns1__taxAppliedType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__taxAppliedType(soap, n, NULL, NULL, NULL);
}

inline ns1__taxAppliedType * soap_new_req_ns1__taxAppliedType(
	struct soap *soap,
	unsigned int id,
	LONG64 amountReported)
{
	ns1__taxAppliedType *_p = soap_new_ns1__taxAppliedType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__taxAppliedType::id = id;
		_p->ns1__taxAppliedType::amountReported = amountReported;
	}
	return _p;
}

inline ns1__taxAppliedType * soap_new_set_ns1__taxAppliedType(
	struct soap *soap,
	unsigned int id,
	LONG64 amountReported,
	char *__item__1)
{
	ns1__taxAppliedType *_p = soap_new_ns1__taxAppliedType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__taxAppliedType::id = id;
		_p->ns1__taxAppliedType::amountReported = amountReported;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__taxAppliedType(struct soap *soap, ns1__taxAppliedType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:taxAppliedType", p->soap_type() == SOAP_TYPE_ns1__taxAppliedType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__taxAppliedType(struct soap *soap, const char *URL, ns1__taxAppliedType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:taxAppliedType", p->soap_type() == SOAP_TYPE_ns1__taxAppliedType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__taxAppliedType(struct soap *soap, const char *URL, ns1__taxAppliedType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:taxAppliedType", p->soap_type() == SOAP_TYPE_ns1__taxAppliedType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__taxAppliedType * SOAP_FMAC4 soap_get_ns1__taxAppliedType(struct soap*, ns1__taxAppliedType *, const char*, const char*);

inline int soap_read_ns1__taxAppliedType(struct soap *soap, ns1__taxAppliedType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__taxAppliedType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__taxAppliedType(struct soap *soap, const char *URL, ns1__taxAppliedType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__taxAppliedType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__taxAppliedType(struct soap *soap, ns1__taxAppliedType *p)
{
	if (soap_read_ns1__taxAppliedType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__taxAppliedList_DEFINED
#define SOAP_TYPE_ns1__taxAppliedList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__taxAppliedList(struct soap*, const char*, int, const ns1__taxAppliedList *, const char*);
SOAP_FMAC3 ns1__taxAppliedList * SOAP_FMAC4 soap_in_ns1__taxAppliedList(struct soap*, const char*, ns1__taxAppliedList *, const char*);
SOAP_FMAC1 ns1__taxAppliedList * SOAP_FMAC2 soap_instantiate_ns1__taxAppliedList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__taxAppliedList * soap_new_ns1__taxAppliedList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__taxAppliedList(soap, n, NULL, NULL, NULL);
}

inline ns1__taxAppliedList * soap_new_req_ns1__taxAppliedList(
	struct soap *soap,
	int __sizetax,
	ns1__taxAppliedType **tax,
	LONG64 amountBase)
{
	ns1__taxAppliedList *_p = soap_new_ns1__taxAppliedList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__taxAppliedList::__sizetax = __sizetax;
		_p->ns1__taxAppliedList::tax = tax;
		_p->ns1__taxAppliedList::amountBase = amountBase;
	}
	return _p;
}

inline ns1__taxAppliedList * soap_new_set_ns1__taxAppliedList(
	struct soap *soap,
	int __sizetax,
	ns1__taxAppliedType **tax,
	LONG64 amountBase,
	unsigned int *length,
	char *__item__1)
{
	ns1__taxAppliedList *_p = soap_new_ns1__taxAppliedList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__taxAppliedList::__sizetax = __sizetax;
		_p->ns1__taxAppliedList::tax = tax;
		_p->ns1__taxAppliedList::amountBase = amountBase;
		_p->ns1__taxAppliedList::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__taxAppliedList(struct soap *soap, ns1__taxAppliedList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:taxAppliedList", p->soap_type() == SOAP_TYPE_ns1__taxAppliedList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__taxAppliedList(struct soap *soap, const char *URL, ns1__taxAppliedList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:taxAppliedList", p->soap_type() == SOAP_TYPE_ns1__taxAppliedList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__taxAppliedList(struct soap *soap, const char *URL, ns1__taxAppliedList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:taxAppliedList", p->soap_type() == SOAP_TYPE_ns1__taxAppliedList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__taxAppliedList * SOAP_FMAC4 soap_get_ns1__taxAppliedList(struct soap*, ns1__taxAppliedList *, const char*, const char*);

inline int soap_read_ns1__taxAppliedList(struct soap *soap, ns1__taxAppliedList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__taxAppliedList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__taxAppliedList(struct soap *soap, const char *URL, ns1__taxAppliedList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__taxAppliedList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__taxAppliedList(struct soap *soap, ns1__taxAppliedList *p)
{
	if (soap_read_ns1__taxAppliedList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingUnitType_DEFINED
#define SOAP_TYPE_ns1__AccountingUnitType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingUnitType(struct soap*, const char*, int, const ns1__AccountingUnitType *, const char*);
SOAP_FMAC3 ns1__AccountingUnitType * SOAP_FMAC4 soap_in_ns1__AccountingUnitType(struct soap*, const char*, ns1__AccountingUnitType *, const char*);
SOAP_FMAC1 ns1__AccountingUnitType * SOAP_FMAC2 soap_instantiate_ns1__AccountingUnitType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingUnitType * soap_new_ns1__AccountingUnitType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingUnitType(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingUnitType * soap_new_req_ns1__AccountingUnitType(
	struct soap *soap,
	const _ns1__AccountingUnitType_doc& doc,
	const _ns1__AccountingUnitType_mda& mda,
	ns1__TitleCodeType *prd,
	const _ns1__AccountingUnitType_purse& purse,
	int idfSale,
	LONG64 smId,
	LONG64 opT,
	LONG64 prc,
	LONG64 dps,
	LONG64 isTest)
{
	ns1__AccountingUnitType *_p = soap_new_ns1__AccountingUnitType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingUnitType::doc = doc;
		_p->ns1__AccountingUnitType::mda = mda;
		_p->ns1__AccountingUnitType::prd = prd;
		_p->ns1__AccountingUnitType::purse = purse;
		_p->ns1__AccountingUnitType::idfSale = idfSale;
		_p->ns1__AccountingUnitType::smId = smId;
		_p->ns1__AccountingUnitType::opT = opT;
		_p->ns1__AccountingUnitType::prc = prc;
		_p->ns1__AccountingUnitType::dps = dps;
		_p->ns1__AccountingUnitType::isTest = isTest;
	}
	return _p;
}

inline ns1__AccountingUnitType * soap_new_set_ns1__AccountingUnitType(
	struct soap *soap,
	const _ns1__AccountingUnitType_doc& doc,
	const _ns1__AccountingUnitType_mda& mda,
	ns1__TitleCodeType *prd,
	const _ns1__AccountingUnitType_purse& purse,
	ns1__taxAppliedList *taxList,
	int idfSale,
	LONG64 smId,
	char *entryCode,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	LONG64 opT,
	LONG64 prc,
	LONG64 dps,
	LONG64 isTest,
	char *__item__1)
{
	ns1__AccountingUnitType *_p = soap_new_ns1__AccountingUnitType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingUnitType::doc = doc;
		_p->ns1__AccountingUnitType::mda = mda;
		_p->ns1__AccountingUnitType::prd = prd;
		_p->ns1__AccountingUnitType::purse = purse;
		_p->ns1__AccountingUnitType::taxList = taxList;
		_p->ns1__AccountingUnitType::idfSale = idfSale;
		_p->ns1__AccountingUnitType::smId = smId;
		_p->ns1__AccountingUnitType::entryCode = entryCode;
		_p->ns1__AccountingUnitType::ctlInfo = ctlInfo;
		_p->ns1__AccountingUnitType::ctlData = ctlData;
		_p->ns1__AccountingUnitType::cData = cData;
		_p->ns1__AccountingUnitType::rawData = rawData;
		_p->ns1__AccountingUnitType::opT = opT;
		_p->ns1__AccountingUnitType::prc = prc;
		_p->ns1__AccountingUnitType::dps = dps;
		_p->ns1__AccountingUnitType::isTest = isTest;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingUnitType(struct soap *soap, ns1__AccountingUnitType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType", p->soap_type() == SOAP_TYPE_ns1__AccountingUnitType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingUnitType(struct soap *soap, const char *URL, ns1__AccountingUnitType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType", p->soap_type() == SOAP_TYPE_ns1__AccountingUnitType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingUnitType(struct soap *soap, const char *URL, ns1__AccountingUnitType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitType", p->soap_type() == SOAP_TYPE_ns1__AccountingUnitType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingUnitType * SOAP_FMAC4 soap_get_ns1__AccountingUnitType(struct soap*, ns1__AccountingUnitType *, const char*, const char*);

inline int soap_read_ns1__AccountingUnitType(struct soap *soap, ns1__AccountingUnitType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingUnitType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingUnitType(struct soap *soap, const char *URL, ns1__AccountingUnitType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingUnitType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingUnitType(struct soap *soap, ns1__AccountingUnitType *p)
{
	if (soap_read_ns1__AccountingUnitType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingUnitListType_DEFINED
#define SOAP_TYPE_ns1__AccountingUnitListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingUnitListType(struct soap*, const char*, int, const ns1__AccountingUnitListType *, const char*);
SOAP_FMAC3 ns1__AccountingUnitListType * SOAP_FMAC4 soap_in_ns1__AccountingUnitListType(struct soap*, const char*, ns1__AccountingUnitListType *, const char*);
SOAP_FMAC1 ns1__AccountingUnitListType * SOAP_FMAC2 soap_instantiate_ns1__AccountingUnitListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingUnitListType * soap_new_ns1__AccountingUnitListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingUnitListType(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingUnitListType * soap_new_req_ns1__AccountingUnitListType(
	struct soap *soap,
	int __sizeunit,
	ns1__AccountingUnitType **unit,
	int __sizeaccUnit,
	ns1__AccountingUnit **accUnit)
{
	ns1__AccountingUnitListType *_p = soap_new_ns1__AccountingUnitListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingUnitListType::__sizeunit = __sizeunit;
		_p->ns1__AccountingUnitListType::unit = unit;
		_p->ns1__AccountingUnitListType::__sizeaccUnit = __sizeaccUnit;
		_p->ns1__AccountingUnitListType::accUnit = accUnit;
	}
	return _p;
}

inline ns1__AccountingUnitListType * soap_new_set_ns1__AccountingUnitListType(
	struct soap *soap,
	int __sizeunit,
	ns1__AccountingUnitType **unit,
	int __sizeaccUnit,
	ns1__AccountingUnit **accUnit,
	char *__item__1)
{
	ns1__AccountingUnitListType *_p = soap_new_ns1__AccountingUnitListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingUnitListType::__sizeunit = __sizeunit;
		_p->ns1__AccountingUnitListType::unit = unit;
		_p->ns1__AccountingUnitListType::__sizeaccUnit = __sizeaccUnit;
		_p->ns1__AccountingUnitListType::accUnit = accUnit;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingUnitListType(struct soap *soap, ns1__AccountingUnitListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitListType", p->soap_type() == SOAP_TYPE_ns1__AccountingUnitListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingUnitListType(struct soap *soap, const char *URL, ns1__AccountingUnitListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitListType", p->soap_type() == SOAP_TYPE_ns1__AccountingUnitListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingUnitListType(struct soap *soap, const char *URL, ns1__AccountingUnitListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingUnitListType", p->soap_type() == SOAP_TYPE_ns1__AccountingUnitListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingUnitListType * SOAP_FMAC4 soap_get_ns1__AccountingUnitListType(struct soap*, ns1__AccountingUnitListType *, const char*, const char*);

inline int soap_read_ns1__AccountingUnitListType(struct soap *soap, ns1__AccountingUnitListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingUnitListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingUnitListType(struct soap *soap, const char *URL, ns1__AccountingUnitListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingUnitListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingUnitListType(struct soap *soap, ns1__AccountingUnitListType *p)
{
	if (soap_read_ns1__AccountingUnitListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingOperationInfo_DEFINED
#define SOAP_TYPE_ns1__AccountingOperationInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingOperationInfo(struct soap*, const char*, int, const ns1__AccountingOperationInfo *, const char*);
SOAP_FMAC3 ns1__AccountingOperationInfo * SOAP_FMAC4 soap_in_ns1__AccountingOperationInfo(struct soap*, const char*, ns1__AccountingOperationInfo *, const char*);
SOAP_FMAC1 ns1__AccountingOperationInfo * SOAP_FMAC2 soap_instantiate_ns1__AccountingOperationInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingOperationInfo * soap_new_ns1__AccountingOperationInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingOperationInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingOperationInfo * soap_new_req_ns1__AccountingOperationInfo(
	struct soap *soap,
	unsigned int nReq,
	unsigned int nSuc,
	LONG64 total,
	LONG64 paid,
	LONG64 returned,
	LONG64 owed)
{
	ns1__AccountingOperationInfo *_p = soap_new_ns1__AccountingOperationInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingOperationInfo::nReq = nReq;
		_p->ns1__AccountingOperationInfo::nSuc = nSuc;
		_p->ns1__AccountingOperationInfo::total = total;
		_p->ns1__AccountingOperationInfo::paid = paid;
		_p->ns1__AccountingOperationInfo::returned = returned;
		_p->ns1__AccountingOperationInfo::owed = owed;
	}
	return _p;
}

inline ns1__AccountingOperationInfo * soap_new_set_ns1__AccountingOperationInfo(
	struct soap *soap,
	unsigned int nReq,
	unsigned int nSuc,
	LONG64 total,
	LONG64 paid,
	LONG64 returned,
	LONG64 owed,
	char *invoiceNum,
	char *num,
	char *__item__1)
{
	ns1__AccountingOperationInfo *_p = soap_new_ns1__AccountingOperationInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingOperationInfo::nReq = nReq;
		_p->ns1__AccountingOperationInfo::nSuc = nSuc;
		_p->ns1__AccountingOperationInfo::total = total;
		_p->ns1__AccountingOperationInfo::paid = paid;
		_p->ns1__AccountingOperationInfo::returned = returned;
		_p->ns1__AccountingOperationInfo::owed = owed;
		_p->ns1__AccountingOperationInfo::invoiceNum = invoiceNum;
		_p->ns1__AccountingOperationInfo::num = num;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingOperationInfo(struct soap *soap, ns1__AccountingOperationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingOperationInfo", p->soap_type() == SOAP_TYPE_ns1__AccountingOperationInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingOperationInfo(struct soap *soap, const char *URL, ns1__AccountingOperationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingOperationInfo", p->soap_type() == SOAP_TYPE_ns1__AccountingOperationInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingOperationInfo(struct soap *soap, const char *URL, ns1__AccountingOperationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingOperationInfo", p->soap_type() == SOAP_TYPE_ns1__AccountingOperationInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingOperationInfo * SOAP_FMAC4 soap_get_ns1__AccountingOperationInfo(struct soap*, ns1__AccountingOperationInfo *, const char*, const char*);

inline int soap_read_ns1__AccountingOperationInfo(struct soap *soap, ns1__AccountingOperationInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingOperationInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingOperationInfo(struct soap *soap, const char *URL, ns1__AccountingOperationInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingOperationInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingOperationInfo(struct soap *soap, ns1__AccountingOperationInfo *p)
{
	if (soap_read_ns1__AccountingOperationInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingOpType_DEFINED
#define SOAP_TYPE_ns1__AccountingOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingOpType(struct soap*, const char*, int, const ns1__AccountingOpType *, const char*);
SOAP_FMAC3 ns1__AccountingOpType * SOAP_FMAC4 soap_in_ns1__AccountingOpType(struct soap*, const char*, ns1__AccountingOpType *, const char*);
SOAP_FMAC1 ns1__AccountingOpType * SOAP_FMAC2 soap_instantiate_ns1__AccountingOpType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingOpType * soap_new_ns1__AccountingOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingOpType(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingOpType * soap_new_req_ns1__AccountingOpType(
	struct soap *soap,
	LONG64 nReq,
	LONG64 nSucc,
	LONG64 tp,
	LONG64 pd,
	LONG64 returned,
	LONG64 tR)
{
	ns1__AccountingOpType *_p = soap_new_ns1__AccountingOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingOpType::nReq = nReq;
		_p->ns1__AccountingOpType::nSucc = nSucc;
		_p->ns1__AccountingOpType::tp = tp;
		_p->ns1__AccountingOpType::pd = pd;
		_p->ns1__AccountingOpType::returned = returned;
		_p->ns1__AccountingOpType::tR = tR;
	}
	return _p;
}

inline ns1__AccountingOpType * soap_new_set_ns1__AccountingOpType(
	struct soap *soap,
	LONG64 nReq,
	LONG64 nSucc,
	LONG64 tp,
	LONG64 pd,
	LONG64 returned,
	LONG64 tR,
	char *invoiceNum,
	char *__item__1)
{
	ns1__AccountingOpType *_p = soap_new_ns1__AccountingOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingOpType::nReq = nReq;
		_p->ns1__AccountingOpType::nSucc = nSucc;
		_p->ns1__AccountingOpType::tp = tp;
		_p->ns1__AccountingOpType::pd = pd;
		_p->ns1__AccountingOpType::returned = returned;
		_p->ns1__AccountingOpType::tR = tR;
		_p->ns1__AccountingOpType::invoiceNum = invoiceNum;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AccountingOpType(struct soap *soap, ns1__AccountingOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingOpType", p->soap_type() == SOAP_TYPE_ns1__AccountingOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingOpType(struct soap *soap, const char *URL, ns1__AccountingOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingOpType", p->soap_type() == SOAP_TYPE_ns1__AccountingOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingOpType(struct soap *soap, const char *URL, ns1__AccountingOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingOpType", p->soap_type() == SOAP_TYPE_ns1__AccountingOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingOpType * SOAP_FMAC4 soap_get_ns1__AccountingOpType(struct soap*, ns1__AccountingOpType *, const char*, const char*);

inline int soap_read_ns1__AccountingOpType(struct soap *soap, ns1__AccountingOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingOpType(struct soap *soap, const char *URL, ns1__AccountingOpType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingOpType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingOpType(struct soap *soap, ns1__AccountingOpType *p)
{
	if (soap_read_ns1__AccountingOpType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AccountingOperationRecordType_DEFINED
#define SOAP_TYPE_ns1__AccountingOperationRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AccountingOperationRecordType(struct soap*, const char*, int, const ns1__AccountingOperationRecordType *, const char*);
SOAP_FMAC3 ns1__AccountingOperationRecordType * SOAP_FMAC4 soap_in_ns1__AccountingOperationRecordType(struct soap*, const char*, ns1__AccountingOperationRecordType *, const char*);
SOAP_FMAC1 ns1__AccountingOperationRecordType * SOAP_FMAC2 soap_instantiate_ns1__AccountingOperationRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AccountingOperationRecordType * soap_new_ns1__AccountingOperationRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AccountingOperationRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__AccountingOperationRecordType * soap_new_req_ns1__AccountingOperationRecordType(
	struct soap *soap,
	ns1__PaymentModeListType *payments,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__AccountingOperationRecordType *_p = soap_new_ns1__AccountingOperationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingOperationRecordType::payments = payments;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__AccountingOperationRecordType * soap_new_set_ns1__AccountingOperationRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	ns1__AccountingOpType *acop,
	ns1__AccountingOperationInfo *accinfo,
	ns1__AccountingUnitListType *units,
	ns1__AccountingFailureListType *failures,
	ns1__PaymentModeListType *payments,
	ns1__AwardListType *awards,
	ns1__CoinNoteInsertedListType *cnil,
	ns1__CoinNoteReturnedListType *cnrl,
	ns1__AccountingReceiptType *receipt,
	ns1__RecordIdType *relTrans,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__AccountingOperationRecordType *_p = soap_new_ns1__AccountingOperationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AccountingOperationRecordType::shift = shift;
		_p->ns1__AccountingOperationRecordType::acop = acop;
		_p->ns1__AccountingOperationRecordType::accinfo = accinfo;
		_p->ns1__AccountingOperationRecordType::units = units;
		_p->ns1__AccountingOperationRecordType::failures = failures;
		_p->ns1__AccountingOperationRecordType::payments = payments;
		_p->ns1__AccountingOperationRecordType::awards = awards;
		_p->ns1__AccountingOperationRecordType::cnil = cnil;
		_p->ns1__AccountingOperationRecordType::cnrl = cnrl;
		_p->ns1__AccountingOperationRecordType::receipt = receipt;
		_p->ns1__AccountingOperationRecordType::relTrans = relTrans;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__AccountingOperationRecordType(struct soap *soap, ns1__AccountingOperationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingOperationRecordType", p->soap_type() == SOAP_TYPE_ns1__AccountingOperationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AccountingOperationRecordType(struct soap *soap, const char *URL, ns1__AccountingOperationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingOperationRecordType", p->soap_type() == SOAP_TYPE_ns1__AccountingOperationRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AccountingOperationRecordType(struct soap *soap, const char *URL, ns1__AccountingOperationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AccountingOperationRecordType", p->soap_type() == SOAP_TYPE_ns1__AccountingOperationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AccountingOperationRecordType * SOAP_FMAC4 soap_get_ns1__AccountingOperationRecordType(struct soap*, ns1__AccountingOperationRecordType *, const char*, const char*);

inline int soap_read_ns1__AccountingOperationRecordType(struct soap *soap, ns1__AccountingOperationRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AccountingOperationRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AccountingOperationRecordType(struct soap *soap, const char *URL, ns1__AccountingOperationRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AccountingOperationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AccountingOperationRecordType(struct soap *soap, ns1__AccountingOperationRecordType *p)
{
	if (soap_read_ns1__AccountingOperationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReceiptItem_DEFINED
#define SOAP_TYPE_ns1__ReceiptItem_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReceiptItem(struct soap*, const char*, int, const ns1__ReceiptItem *, const char*);
SOAP_FMAC3 ns1__ReceiptItem * SOAP_FMAC4 soap_in_ns1__ReceiptItem(struct soap*, const char*, ns1__ReceiptItem *, const char*);
SOAP_FMAC1 ns1__ReceiptItem * SOAP_FMAC2 soap_instantiate_ns1__ReceiptItem(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReceiptItem * soap_new_ns1__ReceiptItem(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReceiptItem(soap, n, NULL, NULL, NULL);
}

inline ns1__ReceiptItem * soap_new_req_ns1__ReceiptItem(
	struct soap *soap)
{
	ns1__ReceiptItem *_p = soap_new_ns1__ReceiptItem(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ReceiptItem * soap_new_set_ns1__ReceiptItem(
	struct soap *soap,
	char *__item,
	unsigned int *type,
	char *__item__1)
{
	ns1__ReceiptItem *_p = soap_new_ns1__ReceiptItem(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReceiptItem::__item = __item;
		_p->ns1__ReceiptItem::type = type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ReceiptItem(struct soap *soap, ns1__ReceiptItem const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReceiptItem", p->soap_type() == SOAP_TYPE_ns1__ReceiptItem ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReceiptItem(struct soap *soap, const char *URL, ns1__ReceiptItem const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReceiptItem", p->soap_type() == SOAP_TYPE_ns1__ReceiptItem ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReceiptItem(struct soap *soap, const char *URL, ns1__ReceiptItem const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReceiptItem", p->soap_type() == SOAP_TYPE_ns1__ReceiptItem ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReceiptItem * SOAP_FMAC4 soap_get_ns1__ReceiptItem(struct soap*, ns1__ReceiptItem *, const char*, const char*);

inline int soap_read_ns1__ReceiptItem(struct soap *soap, ns1__ReceiptItem *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReceiptItem(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReceiptItem(struct soap *soap, const char *URL, ns1__ReceiptItem *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReceiptItem(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReceiptItem(struct soap *soap, ns1__ReceiptItem *p)
{
	if (soap_read_ns1__ReceiptItem(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ReceiptLine_DEFINED
#define SOAP_TYPE_ns1__ReceiptLine_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ReceiptLine(struct soap*, const char*, int, const ns1__ReceiptLine *, const char*);
SOAP_FMAC3 ns1__ReceiptLine * SOAP_FMAC4 soap_in_ns1__ReceiptLine(struct soap*, const char*, ns1__ReceiptLine *, const char*);
SOAP_FMAC1 ns1__ReceiptLine * SOAP_FMAC2 soap_instantiate_ns1__ReceiptLine(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ReceiptLine * soap_new_ns1__ReceiptLine(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ReceiptLine(soap, n, NULL, NULL, NULL);
}

inline ns1__ReceiptLine * soap_new_req_ns1__ReceiptLine(
	struct soap *soap)
{
	ns1__ReceiptLine *_p = soap_new_ns1__ReceiptLine(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ReceiptLine * soap_new_set_ns1__ReceiptLine(
	struct soap *soap,
	ns1__ReceiptItem *leftItem,
	ns1__ReceiptItem *centerItem,
	ns1__ReceiptItem *rightItem,
	unsigned int *lineNumber,
	char *__item__1)
{
	ns1__ReceiptLine *_p = soap_new_ns1__ReceiptLine(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ReceiptLine::leftItem = leftItem;
		_p->ns1__ReceiptLine::centerItem = centerItem;
		_p->ns1__ReceiptLine::rightItem = rightItem;
		_p->ns1__ReceiptLine::lineNumber = lineNumber;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ReceiptLine(struct soap *soap, ns1__ReceiptLine const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReceiptLine", p->soap_type() == SOAP_TYPE_ns1__ReceiptLine ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ReceiptLine(struct soap *soap, const char *URL, ns1__ReceiptLine const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReceiptLine", p->soap_type() == SOAP_TYPE_ns1__ReceiptLine ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ReceiptLine(struct soap *soap, const char *URL, ns1__ReceiptLine const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ReceiptLine", p->soap_type() == SOAP_TYPE_ns1__ReceiptLine ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ReceiptLine * SOAP_FMAC4 soap_get_ns1__ReceiptLine(struct soap*, ns1__ReceiptLine *, const char*, const char*);

inline int soap_read_ns1__ReceiptLine(struct soap *soap, ns1__ReceiptLine *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ReceiptLine(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ReceiptLine(struct soap *soap, const char *URL, ns1__ReceiptLine *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ReceiptLine(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ReceiptLine(struct soap *soap, ns1__ReceiptLine *p)
{
	if (soap_read_ns1__ReceiptLine(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__InvoiceReceiptType_DEFINED
#define SOAP_TYPE_ns1__InvoiceReceiptType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__InvoiceReceiptType(struct soap*, const char*, int, const ns1__InvoiceReceiptType *, const char*);
SOAP_FMAC3 ns1__InvoiceReceiptType * SOAP_FMAC4 soap_in_ns1__InvoiceReceiptType(struct soap*, const char*, ns1__InvoiceReceiptType *, const char*);
SOAP_FMAC1 ns1__InvoiceReceiptType * SOAP_FMAC2 soap_instantiate_ns1__InvoiceReceiptType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__InvoiceReceiptType * soap_new_ns1__InvoiceReceiptType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__InvoiceReceiptType(soap, n, NULL, NULL, NULL);
}

inline ns1__InvoiceReceiptType * soap_new_req_ns1__InvoiceReceiptType(
	struct soap *soap,
	int __sizeline,
	ns1__ReceiptLine **line)
{
	ns1__InvoiceReceiptType *_p = soap_new_ns1__InvoiceReceiptType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InvoiceReceiptType::__sizeline = __sizeline;
		_p->ns1__InvoiceReceiptType::line = line;
	}
	return _p;
}

inline ns1__InvoiceReceiptType * soap_new_set_ns1__InvoiceReceiptType(
	struct soap *soap,
	int __sizeline,
	ns1__ReceiptLine **line,
	unsigned int *length,
	unsigned int *type,
	unsigned int *number,
	char *__item__1)
{
	ns1__InvoiceReceiptType *_p = soap_new_ns1__InvoiceReceiptType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__InvoiceReceiptType::__sizeline = __sizeline;
		_p->ns1__InvoiceReceiptType::line = line;
		_p->ns1__InvoiceReceiptType::length = length;
		_p->ns1__InvoiceReceiptType::type = type;
		_p->ns1__InvoiceReceiptType::number = number;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__InvoiceReceiptType(struct soap *soap, ns1__InvoiceReceiptType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvoiceReceiptType", p->soap_type() == SOAP_TYPE_ns1__InvoiceReceiptType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__InvoiceReceiptType(struct soap *soap, const char *URL, ns1__InvoiceReceiptType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvoiceReceiptType", p->soap_type() == SOAP_TYPE_ns1__InvoiceReceiptType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__InvoiceReceiptType(struct soap *soap, const char *URL, ns1__InvoiceReceiptType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InvoiceReceiptType", p->soap_type() == SOAP_TYPE_ns1__InvoiceReceiptType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__InvoiceReceiptType * SOAP_FMAC4 soap_get_ns1__InvoiceReceiptType(struct soap*, ns1__InvoiceReceiptType *, const char*, const char*);

inline int soap_read_ns1__InvoiceReceiptType(struct soap *soap, ns1__InvoiceReceiptType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__InvoiceReceiptType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__InvoiceReceiptType(struct soap *soap, const char *URL, ns1__InvoiceReceiptType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__InvoiceReceiptType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__InvoiceReceiptType(struct soap *soap, ns1__InvoiceReceiptType *p)
{
	if (soap_read_ns1__InvoiceReceiptType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PrintedInvoiceRecordType_DEFINED
#define SOAP_TYPE_ns1__PrintedInvoiceRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PrintedInvoiceRecordType(struct soap*, const char*, int, const ns1__PrintedInvoiceRecordType *, const char*);
SOAP_FMAC3 ns1__PrintedInvoiceRecordType * SOAP_FMAC4 soap_in_ns1__PrintedInvoiceRecordType(struct soap*, const char*, ns1__PrintedInvoiceRecordType *, const char*);
SOAP_FMAC1 ns1__PrintedInvoiceRecordType * SOAP_FMAC2 soap_instantiate_ns1__PrintedInvoiceRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PrintedInvoiceRecordType * soap_new_ns1__PrintedInvoiceRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PrintedInvoiceRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__PrintedInvoiceRecordType * soap_new_req_ns1__PrintedInvoiceRecordType(
	struct soap *soap,
	ns1__InvoiceReceiptType *receipt,
	char *hash,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__PrintedInvoiceRecordType *_p = soap_new_ns1__PrintedInvoiceRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PrintedInvoiceRecordType::receipt = receipt;
		_p->ns1__PrintedInvoiceRecordType::hash = hash;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__PrintedInvoiceRecordType * soap_new_set_ns1__PrintedInvoiceRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	ns1__InvoiceReceiptType *receipt,
	char *hash,
	ns1__RecordIdType *relTrans,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__PrintedInvoiceRecordType *_p = soap_new_ns1__PrintedInvoiceRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PrintedInvoiceRecordType::shift = shift;
		_p->ns1__PrintedInvoiceRecordType::receipt = receipt;
		_p->ns1__PrintedInvoiceRecordType::hash = hash;
		_p->ns1__PrintedInvoiceRecordType::relTrans = relTrans;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__PrintedInvoiceRecordType(struct soap *soap, ns1__PrintedInvoiceRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PrintedInvoiceRecordType", p->soap_type() == SOAP_TYPE_ns1__PrintedInvoiceRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PrintedInvoiceRecordType(struct soap *soap, const char *URL, ns1__PrintedInvoiceRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PrintedInvoiceRecordType", p->soap_type() == SOAP_TYPE_ns1__PrintedInvoiceRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PrintedInvoiceRecordType(struct soap *soap, const char *URL, ns1__PrintedInvoiceRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PrintedInvoiceRecordType", p->soap_type() == SOAP_TYPE_ns1__PrintedInvoiceRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PrintedInvoiceRecordType * SOAP_FMAC4 soap_get_ns1__PrintedInvoiceRecordType(struct soap*, ns1__PrintedInvoiceRecordType *, const char*, const char*);

inline int soap_read_ns1__PrintedInvoiceRecordType(struct soap *soap, ns1__PrintedInvoiceRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PrintedInvoiceRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PrintedInvoiceRecordType(struct soap *soap, const char *URL, ns1__PrintedInvoiceRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PrintedInvoiceRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PrintedInvoiceRecordType(struct soap *soap, ns1__PrintedInvoiceRecordType *p)
{
	if (soap_read_ns1__PrintedInvoiceRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__valOpMagType_DEFINED
#define SOAP_TYPE_ns1__valOpMagType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__valOpMagType(struct soap*, const char*, int, const ns1__valOpMagType *, const char*);
SOAP_FMAC3 ns1__valOpMagType * SOAP_FMAC4 soap_in_ns1__valOpMagType(struct soap*, const char*, ns1__valOpMagType *, const char*);
SOAP_FMAC1 ns1__valOpMagType * SOAP_FMAC2 soap_instantiate_ns1__valOpMagType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__valOpMagType * soap_new_ns1__valOpMagType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__valOpMagType(soap, n, NULL, NULL, NULL);
}

inline ns1__valOpMagType * soap_new_req_ns1__valOpMagType(
	struct soap *soap,
	LONG64 validationType,
	LONG64 product,
	LONG64 profile,
	LONG64 stopOr,
	LONG64 stopD,
	LONG64 deductedAmount,
	LONG64 transferLine,
	LONG64 transferNum)
{
	ns1__valOpMagType *_p = soap_new_ns1__valOpMagType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__valOpMagType::validationType = validationType;
		_p->ns1__valOpMagType::product = product;
		_p->ns1__valOpMagType::profile = profile;
		_p->ns1__valOpMagType::stopOr = stopOr;
		_p->ns1__valOpMagType::stopD = stopD;
		_p->ns1__valOpMagType::deductedAmount = deductedAmount;
		_p->ns1__valOpMagType::transferLine = transferLine;
		_p->ns1__valOpMagType::transferNum = transferNum;
	}
	return _p;
}

inline ns1__valOpMagType * soap_new_set_ns1__valOpMagType(
	struct soap *soap,
	LONG64 validationType,
	LONG64 product,
	LONG64 profile,
	LONG64 stopOr,
	LONG64 stopD,
	LONG64 deductedAmount,
	LONG64 transferLine,
	LONG64 transferNum,
	LONG64 *transferDiscount,
	LONG64 *employee,
	char *__item__1)
{
	ns1__valOpMagType *_p = soap_new_ns1__valOpMagType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__valOpMagType::validationType = validationType;
		_p->ns1__valOpMagType::product = product;
		_p->ns1__valOpMagType::profile = profile;
		_p->ns1__valOpMagType::stopOr = stopOr;
		_p->ns1__valOpMagType::stopD = stopD;
		_p->ns1__valOpMagType::deductedAmount = deductedAmount;
		_p->ns1__valOpMagType::transferLine = transferLine;
		_p->ns1__valOpMagType::transferNum = transferNum;
		_p->ns1__valOpMagType::transferDiscount = transferDiscount;
		_p->ns1__valOpMagType::employee = employee;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__valOpMagType(struct soap *soap, ns1__valOpMagType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:valOpMagType", p->soap_type() == SOAP_TYPE_ns1__valOpMagType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__valOpMagType(struct soap *soap, const char *URL, ns1__valOpMagType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:valOpMagType", p->soap_type() == SOAP_TYPE_ns1__valOpMagType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__valOpMagType(struct soap *soap, const char *URL, ns1__valOpMagType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:valOpMagType", p->soap_type() == SOAP_TYPE_ns1__valOpMagType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__valOpMagType * SOAP_FMAC4 soap_get_ns1__valOpMagType(struct soap*, ns1__valOpMagType *, const char*, const char*);

inline int soap_read_ns1__valOpMagType(struct soap *soap, ns1__valOpMagType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__valOpMagType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__valOpMagType(struct soap *soap, const char *URL, ns1__valOpMagType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__valOpMagType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__valOpMagType(struct soap *soap, ns1__valOpMagType *p)
{
	if (soap_read_ns1__valOpMagType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__cardDataMagBody_DEFINED
#define SOAP_TYPE_ns1__cardDataMagBody_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cardDataMagBody(struct soap*, const char*, int, const ns1__cardDataMagBody *, const char*);
SOAP_FMAC3 ns1__cardDataMagBody * SOAP_FMAC4 soap_in_ns1__cardDataMagBody(struct soap*, const char*, ns1__cardDataMagBody *, const char*);
SOAP_FMAC1 ns1__cardDataMagBody * SOAP_FMAC2 soap_instantiate_ns1__cardDataMagBody(struct soap*, int, const char*, const char*, size_t*);

inline ns1__cardDataMagBody * soap_new_ns1__cardDataMagBody(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__cardDataMagBody(soap, n, NULL, NULL, NULL);
}

inline ns1__cardDataMagBody * soap_new_req_ns1__cardDataMagBody(
	struct soap *soap)
{
	ns1__cardDataMagBody *_p = soap_new_ns1__cardDataMagBody(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__cardDataMagBody * soap_new_set_ns1__cardDataMagBody(
	struct soap *soap,
	ns1__valOpMagType *valOp,
	char *__item__1)
{
	ns1__cardDataMagBody *_p = soap_new_ns1__cardDataMagBody(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__cardDataMagBody::valOp = valOp;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__cardDataMagBody(struct soap *soap, ns1__cardDataMagBody const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cardDataMagBody", p->soap_type() == SOAP_TYPE_ns1__cardDataMagBody ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__cardDataMagBody(struct soap *soap, const char *URL, ns1__cardDataMagBody const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cardDataMagBody", p->soap_type() == SOAP_TYPE_ns1__cardDataMagBody ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__cardDataMagBody(struct soap *soap, const char *URL, ns1__cardDataMagBody const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cardDataMagBody", p->soap_type() == SOAP_TYPE_ns1__cardDataMagBody ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__cardDataMagBody * SOAP_FMAC4 soap_get_ns1__cardDataMagBody(struct soap*, ns1__cardDataMagBody *, const char*, const char*);

inline int soap_read_ns1__cardDataMagBody(struct soap *soap, ns1__cardDataMagBody *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__cardDataMagBody(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__cardDataMagBody(struct soap *soap, const char *URL, ns1__cardDataMagBody *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__cardDataMagBody(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__cardDataMagBody(struct soap *soap, ns1__cardDataMagBody *p)
{
	if (soap_read_ns1__cardDataMagBody(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__cardDataMagHeader_DEFINED
#define SOAP_TYPE_ns1__cardDataMagHeader_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cardDataMagHeader(struct soap*, const char*, int, const ns1__cardDataMagHeader *, const char*);
SOAP_FMAC3 ns1__cardDataMagHeader * SOAP_FMAC4 soap_in_ns1__cardDataMagHeader(struct soap*, const char*, ns1__cardDataMagHeader *, const char*);
SOAP_FMAC1 ns1__cardDataMagHeader * SOAP_FMAC2 soap_instantiate_ns1__cardDataMagHeader(struct soap*, int, const char*, const char*, size_t*);

inline ns1__cardDataMagHeader * soap_new_ns1__cardDataMagHeader(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__cardDataMagHeader(soap, n, NULL, NULL, NULL);
}

inline ns1__cardDataMagHeader * soap_new_req_ns1__cardDataMagHeader(
	struct soap *soap,
	int version,
	int mediaTypeId,
	int operation,
	time_t operationDate)
{
	ns1__cardDataMagHeader *_p = soap_new_ns1__cardDataMagHeader(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__cardDataMagHeader::version = version;
		_p->ns1__cardDataMagHeader::mediaTypeId = mediaTypeId;
		_p->ns1__cardDataMagHeader::operation = operation;
		_p->ns1__cardDataMagHeader::operationDate = operationDate;
	}
	return _p;
}

inline ns1__cardDataMagHeader * soap_new_set_ns1__cardDataMagHeader(
	struct soap *soap,
	int version,
	int mediaTypeId,
	int operation,
	time_t operationDate,
	char *__item__1)
{
	ns1__cardDataMagHeader *_p = soap_new_ns1__cardDataMagHeader(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__cardDataMagHeader::version = version;
		_p->ns1__cardDataMagHeader::mediaTypeId = mediaTypeId;
		_p->ns1__cardDataMagHeader::operation = operation;
		_p->ns1__cardDataMagHeader::operationDate = operationDate;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__cardDataMagHeader(struct soap *soap, ns1__cardDataMagHeader const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cardDataMagHeader", p->soap_type() == SOAP_TYPE_ns1__cardDataMagHeader ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__cardDataMagHeader(struct soap *soap, const char *URL, ns1__cardDataMagHeader const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cardDataMagHeader", p->soap_type() == SOAP_TYPE_ns1__cardDataMagHeader ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__cardDataMagHeader(struct soap *soap, const char *URL, ns1__cardDataMagHeader const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cardDataMagHeader", p->soap_type() == SOAP_TYPE_ns1__cardDataMagHeader ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__cardDataMagHeader * SOAP_FMAC4 soap_get_ns1__cardDataMagHeader(struct soap*, ns1__cardDataMagHeader *, const char*, const char*);

inline int soap_read_ns1__cardDataMagHeader(struct soap *soap, ns1__cardDataMagHeader *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__cardDataMagHeader(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__cardDataMagHeader(struct soap *soap, const char *URL, ns1__cardDataMagHeader *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__cardDataMagHeader(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__cardDataMagHeader(struct soap *soap, ns1__cardDataMagHeader *p)
{
	if (soap_read_ns1__cardDataMagHeader(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CardDataMagType_DEFINED
#define SOAP_TYPE_ns1__CardDataMagType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CardDataMagType(struct soap*, const char*, int, const ns1__CardDataMagType *, const char*);
SOAP_FMAC3 ns1__CardDataMagType * SOAP_FMAC4 soap_in_ns1__CardDataMagType(struct soap*, const char*, ns1__CardDataMagType *, const char*);
SOAP_FMAC1 ns1__CardDataMagType * SOAP_FMAC2 soap_instantiate_ns1__CardDataMagType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CardDataMagType * soap_new_ns1__CardDataMagType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CardDataMagType(soap, n, NULL, NULL, NULL);
}

inline ns1__CardDataMagType * soap_new_req_ns1__CardDataMagType(
	struct soap *soap,
	ns1__cardDataMagHeader *header,
	ns1__cardDataMagBody *body)
{
	ns1__CardDataMagType *_p = soap_new_ns1__CardDataMagType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CardDataMagType::header = header;
		_p->ns1__CardDataMagType::body = body;
	}
	return _p;
}

inline ns1__CardDataMagType * soap_new_set_ns1__CardDataMagType(
	struct soap *soap,
	ns1__cardDataMagHeader *header,
	ns1__cardDataMagBody *body,
	char *__item__1)
{
	ns1__CardDataMagType *_p = soap_new_ns1__CardDataMagType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CardDataMagType::header = header;
		_p->ns1__CardDataMagType::body = body;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__CardDataMagType(struct soap *soap, ns1__CardDataMagType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardDataMagType", p->soap_type() == SOAP_TYPE_ns1__CardDataMagType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CardDataMagType(struct soap *soap, const char *URL, ns1__CardDataMagType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardDataMagType", p->soap_type() == SOAP_TYPE_ns1__CardDataMagType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CardDataMagType(struct soap *soap, const char *URL, ns1__CardDataMagType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardDataMagType", p->soap_type() == SOAP_TYPE_ns1__CardDataMagType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CardDataMagType * SOAP_FMAC4 soap_get_ns1__CardDataMagType(struct soap*, ns1__CardDataMagType *, const char*, const char*);

inline int soap_read_ns1__CardDataMagType(struct soap *soap, ns1__CardDataMagType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CardDataMagType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CardDataMagType(struct soap *soap, const char *URL, ns1__CardDataMagType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CardDataMagType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CardDataMagType(struct soap *soap, ns1__CardDataMagType *p)
{
	if (soap_read_ns1__CardDataMagType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CardDataInfoType_DEFINED
#define SOAP_TYPE_ns1__CardDataInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CardDataInfoType(struct soap*, const char*, int, const ns1__CardDataInfoType *, const char*);
SOAP_FMAC3 ns1__CardDataInfoType * SOAP_FMAC4 soap_in_ns1__CardDataInfoType(struct soap*, const char*, ns1__CardDataInfoType *, const char*);
SOAP_FMAC1 ns1__CardDataInfoType * SOAP_FMAC2 soap_instantiate_ns1__CardDataInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CardDataInfoType * soap_new_ns1__CardDataInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CardDataInfoType(soap, n, NULL, NULL, NULL);
}

inline ns1__CardDataInfoType * soap_new_req_ns1__CardDataInfoType(
	struct soap *soap)
{
	ns1__CardDataInfoType *_p = soap_new_ns1__CardDataInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__CardDataInfoType * soap_new_set_ns1__CardDataInfoType(
	struct soap *soap,
	unsigned int *sequenceNumber,
	int *remainingValue,
	int *transactionValue,
	xsd__hexBinary *hexHwSerialNumber,
	LONG64 *swSerialNumber,
	LONG64 *hwSerialNumber,
	char *logSerialNumber,
	LONG64 *mediumTypeId,
	char *__item__1)
{
	ns1__CardDataInfoType *_p = soap_new_ns1__CardDataInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CardDataInfoType::sequenceNumber = sequenceNumber;
		_p->ns1__CardDataInfoType::remainingValue = remainingValue;
		_p->ns1__CardDataInfoType::transactionValue = transactionValue;
		_p->ns1__CardDataInfoType::hexHwSerialNumber = hexHwSerialNumber;
		_p->ns1__CardDataInfoType::swSerialNumber = swSerialNumber;
		_p->ns1__CardDataInfoType::hwSerialNumber = hwSerialNumber;
		_p->ns1__CardDataInfoType::logSerialNumber = logSerialNumber;
		_p->ns1__CardDataInfoType::mediumTypeId = mediumTypeId;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__CardDataInfoType(struct soap *soap, ns1__CardDataInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardDataInfoType", p->soap_type() == SOAP_TYPE_ns1__CardDataInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CardDataInfoType(struct soap *soap, const char *URL, ns1__CardDataInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardDataInfoType", p->soap_type() == SOAP_TYPE_ns1__CardDataInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CardDataInfoType(struct soap *soap, const char *URL, ns1__CardDataInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CardDataInfoType", p->soap_type() == SOAP_TYPE_ns1__CardDataInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CardDataInfoType * SOAP_FMAC4 soap_get_ns1__CardDataInfoType(struct soap*, ns1__CardDataInfoType *, const char*, const char*);

inline int soap_read_ns1__CardDataInfoType(struct soap *soap, ns1__CardDataInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CardDataInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CardDataInfoType(struct soap *soap, const char *URL, ns1__CardDataInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CardDataInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CardDataInfoType(struct soap *soap, ns1__CardDataInfoType *p)
{
	if (soap_read_ns1__CardDataInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__cardIdentificationType_DEFINED
#define SOAP_TYPE_ns1__cardIdentificationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__cardIdentificationType(struct soap*, const char*, int, const ns1__cardIdentificationType *, const char*);
SOAP_FMAC3 ns1__cardIdentificationType * SOAP_FMAC4 soap_in_ns1__cardIdentificationType(struct soap*, const char*, ns1__cardIdentificationType *, const char*);
SOAP_FMAC1 ns1__cardIdentificationType * SOAP_FMAC2 soap_instantiate_ns1__cardIdentificationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__cardIdentificationType * soap_new_ns1__cardIdentificationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__cardIdentificationType(soap, n, NULL, NULL, NULL);
}

inline ns1__cardIdentificationType * soap_new_req_ns1__cardIdentificationType(
	struct soap *soap)
{
	ns1__cardIdentificationType *_p = soap_new_ns1__cardIdentificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__cardIdentificationType * soap_new_set_ns1__cardIdentificationType(
	struct soap *soap,
	LONG64 *swSerialNumber,
	LONG64 *hwSerialNumber,
	unsigned int *type,
	char *__item__1)
{
	ns1__cardIdentificationType *_p = soap_new_ns1__cardIdentificationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__cardIdentificationType::swSerialNumber = swSerialNumber;
		_p->ns1__cardIdentificationType::hwSerialNumber = hwSerialNumber;
		_p->ns1__cardIdentificationType::type = type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__cardIdentificationType(struct soap *soap, ns1__cardIdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cardIdentificationType", p->soap_type() == SOAP_TYPE_ns1__cardIdentificationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__cardIdentificationType(struct soap *soap, const char *URL, ns1__cardIdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cardIdentificationType", p->soap_type() == SOAP_TYPE_ns1__cardIdentificationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__cardIdentificationType(struct soap *soap, const char *URL, ns1__cardIdentificationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:cardIdentificationType", p->soap_type() == SOAP_TYPE_ns1__cardIdentificationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__cardIdentificationType * SOAP_FMAC4 soap_get_ns1__cardIdentificationType(struct soap*, ns1__cardIdentificationType *, const char*, const char*);

inline int soap_read_ns1__cardIdentificationType(struct soap *soap, ns1__cardIdentificationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__cardIdentificationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__cardIdentificationType(struct soap *soap, const char *URL, ns1__cardIdentificationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__cardIdentificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__cardIdentificationType(struct soap *soap, ns1__cardIdentificationType *p)
{
	if (soap_read_ns1__cardIdentificationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ValidationInfo_DEFINED
#define SOAP_TYPE_ns1__ValidationInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ValidationInfo(struct soap*, const char*, int, const ns1__ValidationInfo *, const char*);
SOAP_FMAC3 ns1__ValidationInfo * SOAP_FMAC4 soap_in_ns1__ValidationInfo(struct soap*, const char*, ns1__ValidationInfo *, const char*);
SOAP_FMAC1 ns1__ValidationInfo * SOAP_FMAC2 soap_instantiate_ns1__ValidationInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ValidationInfo * soap_new_ns1__ValidationInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ValidationInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__ValidationInfo * soap_new_req_ns1__ValidationInfo(
	struct soap *soap,
	unsigned int type,
	unsigned int rslt)
{
	ns1__ValidationInfo *_p = soap_new_ns1__ValidationInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ValidationInfo::type = type;
		_p->ns1__ValidationInfo::rslt = rslt;
	}
	return _p;
}

inline ns1__ValidationInfo * soap_new_set_ns1__ValidationInfo(
	struct soap *soap,
	unsigned int type,
	unsigned int rslt,
	LONG64 *oSt,
	LONG64 *oEq,
	LONG64 *dSt,
	bool *test,
	char *__item__1)
{
	ns1__ValidationInfo *_p = soap_new_ns1__ValidationInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ValidationInfo::type = type;
		_p->ns1__ValidationInfo::rslt = rslt;
		_p->ns1__ValidationInfo::oSt = oSt;
		_p->ns1__ValidationInfo::oEq = oEq;
		_p->ns1__ValidationInfo::dSt = dSt;
		_p->ns1__ValidationInfo::test = test;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ValidationInfo(struct soap *soap, ns1__ValidationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValidationInfo", p->soap_type() == SOAP_TYPE_ns1__ValidationInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ValidationInfo(struct soap *soap, const char *URL, ns1__ValidationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValidationInfo", p->soap_type() == SOAP_TYPE_ns1__ValidationInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ValidationInfo(struct soap *soap, const char *URL, ns1__ValidationInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValidationInfo", p->soap_type() == SOAP_TYPE_ns1__ValidationInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ValidationInfo * SOAP_FMAC4 soap_get_ns1__ValidationInfo(struct soap*, ns1__ValidationInfo *, const char*, const char*);

inline int soap_read_ns1__ValidationInfo(struct soap *soap, ns1__ValidationInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ValidationInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ValidationInfo(struct soap *soap, const char *URL, ns1__ValidationInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ValidationInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ValidationInfo(struct soap *soap, ns1__ValidationInfo *p)
{
	if (soap_read_ns1__ValidationInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ValidationOpType_DEFINED
#define SOAP_TYPE_ns1__ValidationOpType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ValidationOpType(struct soap*, const char*, int, const ns1__ValidationOpType *, const char*);
SOAP_FMAC3 ns1__ValidationOpType * SOAP_FMAC4 soap_in_ns1__ValidationOpType(struct soap*, const char*, ns1__ValidationOpType *, const char*);
SOAP_FMAC1 ns1__ValidationOpType * SOAP_FMAC2 soap_instantiate_ns1__ValidationOpType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ValidationOpType * soap_new_ns1__ValidationOpType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ValidationOpType(soap, n, NULL, NULL, NULL);
}

inline ns1__ValidationOpType * soap_new_req_ns1__ValidationOpType(
	struct soap *soap,
	LONG64 vT,
	LONG64 r,
	LONG64 iT,
	LONG64 oSt,
	LONG64 oEq)
{
	ns1__ValidationOpType *_p = soap_new_ns1__ValidationOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ValidationOpType::vT = vT;
		_p->ns1__ValidationOpType::r = r;
		_p->ns1__ValidationOpType::iT = iT;
		_p->ns1__ValidationOpType::oSt = oSt;
		_p->ns1__ValidationOpType::oEq = oEq;
	}
	return _p;
}

inline ns1__ValidationOpType * soap_new_set_ns1__ValidationOpType(
	struct soap *soap,
	LONG64 vT,
	LONG64 r,
	LONG64 iT,
	LONG64 oSt,
	LONG64 oEq,
	char *__item__1)
{
	ns1__ValidationOpType *_p = soap_new_ns1__ValidationOpType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ValidationOpType::vT = vT;
		_p->ns1__ValidationOpType::r = r;
		_p->ns1__ValidationOpType::iT = iT;
		_p->ns1__ValidationOpType::oSt = oSt;
		_p->ns1__ValidationOpType::oEq = oEq;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ValidationOpType(struct soap *soap, ns1__ValidationOpType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValidationOpType", p->soap_type() == SOAP_TYPE_ns1__ValidationOpType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ValidationOpType(struct soap *soap, const char *URL, ns1__ValidationOpType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValidationOpType", p->soap_type() == SOAP_TYPE_ns1__ValidationOpType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ValidationOpType(struct soap *soap, const char *URL, ns1__ValidationOpType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValidationOpType", p->soap_type() == SOAP_TYPE_ns1__ValidationOpType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ValidationOpType * SOAP_FMAC4 soap_get_ns1__ValidationOpType(struct soap*, ns1__ValidationOpType *, const char*, const char*);

inline int soap_read_ns1__ValidationOpType(struct soap *soap, ns1__ValidationOpType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ValidationOpType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ValidationOpType(struct soap *soap, const char *URL, ns1__ValidationOpType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ValidationOpType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ValidationOpType(struct soap *soap, ns1__ValidationOpType *p)
{
	if (soap_read_ns1__ValidationOpType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__FareMedia_DEFINED
#define SOAP_TYPE_ns1__FareMedia_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FareMedia(struct soap*, const char*, int, const ns1__FareMedia *, const char*);
SOAP_FMAC3 ns1__FareMedia * SOAP_FMAC4 soap_in_ns1__FareMedia(struct soap*, const char*, ns1__FareMedia *, const char*);
SOAP_FMAC1 ns1__FareMedia * SOAP_FMAC2 soap_instantiate_ns1__FareMedia(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FareMedia * soap_new_ns1__FareMedia(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FareMedia(soap, n, NULL, NULL, NULL);
}

inline ns1__FareMedia * soap_new_req_ns1__FareMedia(
	struct soap *soap,
	unsigned int cod,
	unsigned int agn)
{
	ns1__FareMedia *_p = soap_new_ns1__FareMedia(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareMedia::cod = cod;
		_p->ns1__FareMedia::agn = agn;
	}
	return _p;
}

inline ns1__FareMedia * soap_new_set_ns1__FareMedia(
	struct soap *soap,
	unsigned int *units,
	time_t *exp,
	unsigned int cod,
	unsigned int agn,
	unsigned int *type,
	char *__item__1)
{
	ns1__FareMedia *_p = soap_new_ns1__FareMedia(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareMedia::units = units;
		_p->ns1__FareMedia::exp = exp;
		_p->ns1__FareMedia::cod = cod;
		_p->ns1__FareMedia::agn = agn;
		_p->ns1__FareMedia::type = type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__FareMedia(struct soap *soap, ns1__FareMedia const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareMedia", p->soap_type() == SOAP_TYPE_ns1__FareMedia ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FareMedia(struct soap *soap, const char *URL, ns1__FareMedia const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareMedia", p->soap_type() == SOAP_TYPE_ns1__FareMedia ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FareMedia(struct soap *soap, const char *URL, ns1__FareMedia const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareMedia", p->soap_type() == SOAP_TYPE_ns1__FareMedia ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FareMedia * SOAP_FMAC4 soap_get_ns1__FareMedia(struct soap*, ns1__FareMedia *, const char*, const char*);

inline int soap_read_ns1__FareMedia(struct soap *soap, ns1__FareMedia *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__FareMedia(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FareMedia(struct soap *soap, const char *URL, ns1__FareMedia *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__FareMedia(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__FareMedia(struct soap *soap, ns1__FareMedia *p)
{
	if (soap_read_ns1__FareMedia(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__FareProduct_DEFINED
#define SOAP_TYPE_ns1__FareProduct_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FareProduct(struct soap*, const char*, int, const ns1__FareProduct *, const char*);
SOAP_FMAC3 ns1__FareProduct * SOAP_FMAC4 soap_in_ns1__FareProduct(struct soap*, const char*, ns1__FareProduct *, const char*);
SOAP_FMAC1 ns1__FareProduct * SOAP_FMAC2 soap_instantiate_ns1__FareProduct(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FareProduct * soap_new_ns1__FareProduct(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FareProduct(soap, n, NULL, NULL, NULL);
}

inline ns1__FareProduct * soap_new_req_ns1__FareProduct(
	struct soap *soap,
	unsigned int cod,
	unsigned int agn)
{
	ns1__FareProduct *_p = soap_new_ns1__FareProduct(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareProduct::cod = cod;
		_p->ns1__FareProduct::agn = agn;
	}
	return _p;
}

inline ns1__FareProduct * soap_new_set_ns1__FareProduct(
	struct soap *soap,
	LONG64 *uid,
	int *units,
	int *remain_USCOREunits,
	time_t *exp,
	time_t *act,
	char *purchaseNum,
	unsigned int cod,
	unsigned int agn,
	unsigned int *type,
	char *__item__1)
{
	ns1__FareProduct *_p = soap_new_ns1__FareProduct(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareProduct::uid = uid;
		_p->ns1__FareProduct::units = units;
		_p->ns1__FareProduct::remain_USCOREunits = remain_USCOREunits;
		_p->ns1__FareProduct::exp = exp;
		_p->ns1__FareProduct::act = act;
		_p->ns1__FareProduct::purchaseNum = purchaseNum;
		_p->ns1__FareProduct::cod = cod;
		_p->ns1__FareProduct::agn = agn;
		_p->ns1__FareProduct::type = type;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__FareProduct(struct soap *soap, ns1__FareProduct const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareProduct", p->soap_type() == SOAP_TYPE_ns1__FareProduct ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FareProduct(struct soap *soap, const char *URL, ns1__FareProduct const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareProduct", p->soap_type() == SOAP_TYPE_ns1__FareProduct ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FareProduct(struct soap *soap, const char *URL, ns1__FareProduct const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareProduct", p->soap_type() == SOAP_TYPE_ns1__FareProduct ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FareProduct * SOAP_FMAC4 soap_get_ns1__FareProduct(struct soap*, ns1__FareProduct *, const char*, const char*);

inline int soap_read_ns1__FareProduct(struct soap *soap, ns1__FareProduct *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__FareProduct(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FareProduct(struct soap *soap, const char *URL, ns1__FareProduct *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__FareProduct(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__FareProduct(struct soap *soap, ns1__FareProduct *p)
{
	if (soap_read_ns1__FareProduct(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__FareInfo_DEFINED
#define SOAP_TYPE_ns1__FareInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FareInfo(struct soap*, const char*, int, const ns1__FareInfo *, const char*);
SOAP_FMAC3 ns1__FareInfo * SOAP_FMAC4 soap_in_ns1__FareInfo(struct soap*, const char*, ns1__FareInfo *, const char*);
SOAP_FMAC1 ns1__FareInfo * SOAP_FMAC2 soap_instantiate_ns1__FareInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FareInfo * soap_new_ns1__FareInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FareInfo(soap, n, NULL, NULL, NULL);
}

inline ns1__FareInfo * soap_new_req_ns1__FareInfo(
	struct soap *soap,
	int __sizeprod,
	ns1__FareProduct **prod)
{
	ns1__FareInfo *_p = soap_new_ns1__FareInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareInfo::__sizeprod = __sizeprod;
		_p->ns1__FareInfo::prod = prod;
	}
	return _p;
}

inline ns1__FareInfo * soap_new_set_ns1__FareInfo(
	struct soap *soap,
	int __sizeprod,
	ns1__FareProduct **prod,
	unsigned int *fareType,
	unsigned int *prof,
	ns1__FareMedia *media,
	unsigned int *dayType,
	unsigned int *perType,
	unsigned int *class_,
	unsigned int *vehType,
	unsigned int *prvServ,
	char *__item__1)
{
	ns1__FareInfo *_p = soap_new_ns1__FareInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareInfo::__sizeprod = __sizeprod;
		_p->ns1__FareInfo::prod = prod;
		_p->ns1__FareInfo::fareType = fareType;
		_p->ns1__FareInfo::prof = prof;
		_p->ns1__FareInfo::media = media;
		_p->ns1__FareInfo::dayType = dayType;
		_p->ns1__FareInfo::perType = perType;
		_p->ns1__FareInfo::class_ = class_;
		_p->ns1__FareInfo::vehType = vehType;
		_p->ns1__FareInfo::prvServ = prvServ;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__FareInfo(struct soap *soap, ns1__FareInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareInfo", p->soap_type() == SOAP_TYPE_ns1__FareInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FareInfo(struct soap *soap, const char *URL, ns1__FareInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareInfo", p->soap_type() == SOAP_TYPE_ns1__FareInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FareInfo(struct soap *soap, const char *URL, ns1__FareInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareInfo", p->soap_type() == SOAP_TYPE_ns1__FareInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FareInfo * SOAP_FMAC4 soap_get_ns1__FareInfo(struct soap*, ns1__FareInfo *, const char*, const char*);

inline int soap_read_ns1__FareInfo(struct soap *soap, ns1__FareInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__FareInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FareInfo(struct soap *soap, const char *URL, ns1__FareInfo *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__FareInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__FareInfo(struct soap *soap, ns1__FareInfo *p)
{
	if (soap_read_ns1__FareInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__FareType_DEFINED
#define SOAP_TYPE_ns1__FareType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FareType(struct soap*, const char*, int, const ns1__FareType *, const char*);
SOAP_FMAC3 ns1__FareType * SOAP_FMAC4 soap_in_ns1__FareType(struct soap*, const char*, ns1__FareType *, const char*);
SOAP_FMAC1 ns1__FareType * SOAP_FMAC2 soap_instantiate_ns1__FareType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FareType * soap_new_ns1__FareType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FareType(soap, n, NULL, NULL, NULL);
}

inline ns1__FareType * soap_new_req_ns1__FareType(
	struct soap *soap,
	LONG64 stMod,
	unsigned int mt,
	unsigned int pf,
	int dAm)
{
	ns1__FareType *_p = soap_new_ns1__FareType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareType::stMod = stMod;
		_p->ns1__FareType::mt = mt;
		_p->ns1__FareType::pf = pf;
		_p->ns1__FareType::dAm = dAm;
	}
	return _p;
}

inline ns1__FareType * soap_new_set_ns1__FareType(
	struct soap *soap,
	LONG64 stMod,
	unsigned int mt,
	unsigned int pf,
	int dAm,
	char *__item__1)
{
	ns1__FareType *_p = soap_new_ns1__FareType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareType::stMod = stMod;
		_p->ns1__FareType::mt = mt;
		_p->ns1__FareType::pf = pf;
		_p->ns1__FareType::dAm = dAm;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__FareType(struct soap *soap, ns1__FareType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareType", p->soap_type() == SOAP_TYPE_ns1__FareType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FareType(struct soap *soap, const char *URL, ns1__FareType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareType", p->soap_type() == SOAP_TYPE_ns1__FareType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FareType(struct soap *soap, const char *URL, ns1__FareType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareType", p->soap_type() == SOAP_TYPE_ns1__FareType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FareType * SOAP_FMAC4 soap_get_ns1__FareType(struct soap*, ns1__FareType *, const char*, const char*);

inline int soap_read_ns1__FareType(struct soap *soap, ns1__FareType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__FareType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FareType(struct soap *soap, const char *URL, ns1__FareType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__FareType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__FareType(struct soap *soap, ns1__FareType *p)
{
	if (soap_read_ns1__FareType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TitleCodeType_DEFINED
#define SOAP_TYPE_ns1__TitleCodeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TitleCodeType(struct soap*, const char*, int, const ns1__TitleCodeType *, const char*);
SOAP_FMAC3 ns1__TitleCodeType * SOAP_FMAC4 soap_in_ns1__TitleCodeType(struct soap*, const char*, ns1__TitleCodeType *, const char*);
SOAP_FMAC1 ns1__TitleCodeType * SOAP_FMAC2 soap_instantiate_ns1__TitleCodeType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TitleCodeType * soap_new_ns1__TitleCodeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TitleCodeType(soap, n, NULL, NULL, NULL);
}

inline ns1__TitleCodeType * soap_new_req_ns1__TitleCodeType(
	struct soap *soap,
	unsigned int ag,
	unsigned int pCod)
{
	ns1__TitleCodeType *_p = soap_new_ns1__TitleCodeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TitleCodeType::ag = ag;
		_p->ns1__TitleCodeType::pCod = pCod;
	}
	return _p;
}

inline ns1__TitleCodeType * soap_new_set_ns1__TitleCodeType(
	struct soap *soap,
	unsigned int ag,
	unsigned int pCod,
	char *__item__1)
{
	ns1__TitleCodeType *_p = soap_new_ns1__TitleCodeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TitleCodeType::ag = ag;
		_p->ns1__TitleCodeType::pCod = pCod;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__TitleCodeType(struct soap *soap, ns1__TitleCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TitleCodeType", p->soap_type() == SOAP_TYPE_ns1__TitleCodeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TitleCodeType(struct soap *soap, const char *URL, ns1__TitleCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TitleCodeType", p->soap_type() == SOAP_TYPE_ns1__TitleCodeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TitleCodeType(struct soap *soap, const char *URL, ns1__TitleCodeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TitleCodeType", p->soap_type() == SOAP_TYPE_ns1__TitleCodeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TitleCodeType * SOAP_FMAC4 soap_get_ns1__TitleCodeType(struct soap*, ns1__TitleCodeType *, const char*, const char*);

inline int soap_read_ns1__TitleCodeType(struct soap *soap, ns1__TitleCodeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TitleCodeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TitleCodeType(struct soap *soap, const char *URL, ns1__TitleCodeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TitleCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TitleCodeType(struct soap *soap, ns1__TitleCodeType *p)
{
	if (soap_read_ns1__TitleCodeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__FareProductType_DEFINED
#define SOAP_TYPE_ns1__FareProductType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FareProductType(struct soap*, const char*, int, const ns1__FareProductType *, const char*);
SOAP_FMAC3 ns1__FareProductType * SOAP_FMAC4 soap_in_ns1__FareProductType(struct soap*, const char*, ns1__FareProductType *, const char*);
SOAP_FMAC1 ns1__FareProductType * SOAP_FMAC2 soap_instantiate_ns1__FareProductType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FareProductType * soap_new_ns1__FareProductType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FareProductType(soap, n, NULL, NULL, NULL);
}

inline ns1__FareProductType * soap_new_req_ns1__FareProductType(
	struct soap *soap,
	ns1__FareType *f,
	unsigned int ag__1,
	unsigned int pCod__1)
{
	ns1__FareProductType *_p = soap_new_ns1__FareProductType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareProductType::f = f;
		_p->ns1__TitleCodeType::ag = ag__1;
		_p->ns1__TitleCodeType::pCod = pCod__1;
	}
	return _p;
}

inline ns1__FareProductType * soap_new_set_ns1__FareProductType(
	struct soap *soap,
	ns1__FareType *f,
	unsigned int ag__1,
	unsigned int pCod__1,
	char *__item__2)
{
	ns1__FareProductType *_p = soap_new_ns1__FareProductType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FareProductType::f = f;
		_p->ns1__TitleCodeType::ag = ag__1;
		_p->ns1__TitleCodeType::pCod = pCod__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__FareProductType(struct soap *soap, ns1__FareProductType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareProductType", p->soap_type() == SOAP_TYPE_ns1__FareProductType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FareProductType(struct soap *soap, const char *URL, ns1__FareProductType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareProductType", p->soap_type() == SOAP_TYPE_ns1__FareProductType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FareProductType(struct soap *soap, const char *URL, ns1__FareProductType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FareProductType", p->soap_type() == SOAP_TYPE_ns1__FareProductType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FareProductType * SOAP_FMAC4 soap_get_ns1__FareProductType(struct soap*, ns1__FareProductType *, const char*, const char*);

inline int soap_read_ns1__FareProductType(struct soap *soap, ns1__FareProductType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__FareProductType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FareProductType(struct soap *soap, const char *URL, ns1__FareProductType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__FareProductType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__FareProductType(struct soap *soap, ns1__FareProductType *p)
{
	if (soap_read_ns1__FareProductType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__shiftType_DEFINED
#define SOAP_TYPE_ns1__shiftType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__shiftType(struct soap*, const char*, int, const ns1__shiftType *, const char*);
SOAP_FMAC3 ns1__shiftType * SOAP_FMAC4 soap_in_ns1__shiftType(struct soap*, const char*, ns1__shiftType *, const char*);
SOAP_FMAC1 ns1__shiftType * SOAP_FMAC2 soap_instantiate_ns1__shiftType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__shiftType * soap_new_ns1__shiftType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__shiftType(soap, n, NULL, NULL, NULL);
}

inline ns1__shiftType * soap_new_req_ns1__shiftType(
	struct soap *soap,
	LONG64 shN,
	LONG64 userId)
{
	ns1__shiftType *_p = soap_new_ns1__shiftType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__shiftType::shN = shN;
		_p->ns1__shiftType::userId = userId;
	}
	return _p;
}

inline ns1__shiftType * soap_new_set_ns1__shiftType(
	struct soap *soap,
	LONG64 shN,
	LONG64 userId,
	char *__item__1)
{
	ns1__shiftType *_p = soap_new_ns1__shiftType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__shiftType::shN = shN;
		_p->ns1__shiftType::userId = userId;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__shiftType(struct soap *soap, ns1__shiftType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:shiftType", p->soap_type() == SOAP_TYPE_ns1__shiftType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__shiftType(struct soap *soap, const char *URL, ns1__shiftType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:shiftType", p->soap_type() == SOAP_TYPE_ns1__shiftType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__shiftType(struct soap *soap, const char *URL, ns1__shiftType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:shiftType", p->soap_type() == SOAP_TYPE_ns1__shiftType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__shiftType * SOAP_FMAC4 soap_get_ns1__shiftType(struct soap*, ns1__shiftType *, const char*, const char*);

inline int soap_read_ns1__shiftType(struct soap *soap, ns1__shiftType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__shiftType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__shiftType(struct soap *soap, const char *URL, ns1__shiftType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__shiftType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__shiftType(struct soap *soap, ns1__shiftType *p)
{
	if (soap_read_ns1__shiftType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ValidationRecordType_DEFINED
#define SOAP_TYPE_ns1__ValidationRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ValidationRecordType(struct soap*, const char*, int, const ns1__ValidationRecordType *, const char*);
SOAP_FMAC3 ns1__ValidationRecordType * SOAP_FMAC4 soap_in_ns1__ValidationRecordType(struct soap*, const char*, ns1__ValidationRecordType *, const char*);
SOAP_FMAC1 ns1__ValidationRecordType * SOAP_FMAC2 soap_instantiate_ns1__ValidationRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ValidationRecordType * soap_new_ns1__ValidationRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ValidationRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__ValidationRecordType * soap_new_req_ns1__ValidationRecordType(
	struct soap *soap,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__ValidationRecordType *_p = soap_new_ns1__ValidationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__ValidationRecordType * soap_new_set_ns1__ValidationRecordType(
	struct soap *soap,
	ns1__shiftType *shift,
	LONG64 *sId,
	ns1__FareProductType *fare,
	ns1__FareInfo *fareInfo,
	ns1__ValidationOpType *val,
	ns1__ValidationInfo *valInfo,
	ns1__cardIdentificationType *card,
	ns1__CardDataInfoType *ctlInfo,
	xsd__base64Binary *ctlData,
	ns1__CardDataMagType *cData,
	xsd__base64Binary *rawData,
	ns1__RecordIdType *relTrans,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__ValidationRecordType *_p = soap_new_ns1__ValidationRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ValidationRecordType::shift = shift;
		_p->ns1__ValidationRecordType::sId = sId;
		_p->ns1__ValidationRecordType::fare = fare;
		_p->ns1__ValidationRecordType::fareInfo = fareInfo;
		_p->ns1__ValidationRecordType::val = val;
		_p->ns1__ValidationRecordType::valInfo = valInfo;
		_p->ns1__ValidationRecordType::card = card;
		_p->ns1__ValidationRecordType::ctlInfo = ctlInfo;
		_p->ns1__ValidationRecordType::ctlData = ctlData;
		_p->ns1__ValidationRecordType::cData = cData;
		_p->ns1__ValidationRecordType::rawData = rawData;
		_p->ns1__ValidationRecordType::relTrans = relTrans;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__ValidationRecordType(struct soap *soap, ns1__ValidationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValidationRecordType", p->soap_type() == SOAP_TYPE_ns1__ValidationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ValidationRecordType(struct soap *soap, const char *URL, ns1__ValidationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValidationRecordType", p->soap_type() == SOAP_TYPE_ns1__ValidationRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ValidationRecordType(struct soap *soap, const char *URL, ns1__ValidationRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValidationRecordType", p->soap_type() == SOAP_TYPE_ns1__ValidationRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ValidationRecordType * SOAP_FMAC4 soap_get_ns1__ValidationRecordType(struct soap*, ns1__ValidationRecordType *, const char*, const char*);

inline int soap_read_ns1__ValidationRecordType(struct soap *soap, ns1__ValidationRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ValidationRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ValidationRecordType(struct soap *soap, const char *URL, ns1__ValidationRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ValidationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ValidationRecordType(struct soap *soap, ns1__ValidationRecordType *p)
{
	if (soap_read_ns1__ValidationRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OperationInfoType_DEFINED
#define SOAP_TYPE_ns1__OperationInfoType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OperationInfoType(struct soap*, const char*, int, const ns1__OperationInfoType *, const char*);
SOAP_FMAC3 ns1__OperationInfoType * SOAP_FMAC4 soap_in_ns1__OperationInfoType(struct soap*, const char*, ns1__OperationInfoType *, const char*);
SOAP_FMAC1 ns1__OperationInfoType * SOAP_FMAC2 soap_instantiate_ns1__OperationInfoType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OperationInfoType * soap_new_ns1__OperationInfoType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OperationInfoType(soap, n, NULL, NULL, NULL);
}

inline ns1__OperationInfoType * soap_new_req_ns1__OperationInfoType(
	struct soap *soap,
	time_t opDate)
{
	ns1__OperationInfoType *_p = soap_new_ns1__OperationInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OperationInfoType::opDate = opDate;
	}
	return _p;
}

inline ns1__OperationInfoType * soap_new_set_ns1__OperationInfoType(
	struct soap *soap,
	time_t opDate,
	char *__item__1)
{
	ns1__OperationInfoType *_p = soap_new_ns1__OperationInfoType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OperationInfoType::opDate = opDate;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__OperationInfoType(struct soap *soap, ns1__OperationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationInfoType", p->soap_type() == SOAP_TYPE_ns1__OperationInfoType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OperationInfoType(struct soap *soap, const char *URL, ns1__OperationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationInfoType", p->soap_type() == SOAP_TYPE_ns1__OperationInfoType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OperationInfoType(struct soap *soap, const char *URL, ns1__OperationInfoType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationInfoType", p->soap_type() == SOAP_TYPE_ns1__OperationInfoType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OperationInfoType * SOAP_FMAC4 soap_get_ns1__OperationInfoType(struct soap*, ns1__OperationInfoType *, const char*, const char*);

inline int soap_read_ns1__OperationInfoType(struct soap *soap, ns1__OperationInfoType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OperationInfoType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OperationInfoType(struct soap *soap, const char *URL, ns1__OperationInfoType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OperationInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OperationInfoType(struct soap *soap, ns1__OperationInfoType *p)
{
	if (soap_read_ns1__OperationInfoType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LocationBoardType_DEFINED
#define SOAP_TYPE_ns1__LocationBoardType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LocationBoardType(struct soap*, const char*, int, const ns1__LocationBoardType *, const char*);
SOAP_FMAC3 ns1__LocationBoardType * SOAP_FMAC4 soap_in_ns1__LocationBoardType(struct soap*, const char*, ns1__LocationBoardType *, const char*);
SOAP_FMAC1 ns1__LocationBoardType * SOAP_FMAC2 soap_instantiate_ns1__LocationBoardType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LocationBoardType * soap_new_ns1__LocationBoardType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LocationBoardType(soap, n, NULL, NULL, NULL);
}

inline ns1__LocationBoardType * soap_new_req_ns1__LocationBoardType(
	struct soap *soap,
	unsigned int ro,
	unsigned int stop,
	unsigned int veh)
{
	ns1__LocationBoardType *_p = soap_new_ns1__LocationBoardType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LocationBoardType::ro = ro;
		_p->ns1__LocationBoardType::stop = stop;
		_p->ns1__LocationBoardType::veh = veh;
	}
	return _p;
}

inline ns1__LocationBoardType * soap_new_set_ns1__LocationBoardType(
	struct soap *soap,
	unsigned int ro,
	unsigned int *dT,
	unsigned int stop,
	unsigned int veh,
	unsigned int *blkNum,
	unsigned int *runNum,
	unsigned int *tripNum,
	unsigned int *dttyNum,
	char *__item__1)
{
	ns1__LocationBoardType *_p = soap_new_ns1__LocationBoardType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LocationBoardType::ro = ro;
		_p->ns1__LocationBoardType::dT = dT;
		_p->ns1__LocationBoardType::stop = stop;
		_p->ns1__LocationBoardType::veh = veh;
		_p->ns1__LocationBoardType::blkNum = blkNum;
		_p->ns1__LocationBoardType::runNum = runNum;
		_p->ns1__LocationBoardType::tripNum = tripNum;
		_p->ns1__LocationBoardType::dttyNum = dttyNum;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__LocationBoardType(struct soap *soap, ns1__LocationBoardType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationBoardType", p->soap_type() == SOAP_TYPE_ns1__LocationBoardType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LocationBoardType(struct soap *soap, const char *URL, ns1__LocationBoardType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationBoardType", p->soap_type() == SOAP_TYPE_ns1__LocationBoardType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LocationBoardType(struct soap *soap, const char *URL, ns1__LocationBoardType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationBoardType", p->soap_type() == SOAP_TYPE_ns1__LocationBoardType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LocationBoardType * SOAP_FMAC4 soap_get_ns1__LocationBoardType(struct soap*, ns1__LocationBoardType *, const char*, const char*);

inline int soap_read_ns1__LocationBoardType(struct soap *soap, ns1__LocationBoardType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LocationBoardType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LocationBoardType(struct soap *soap, const char *URL, ns1__LocationBoardType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LocationBoardType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LocationBoardType(struct soap *soap, ns1__LocationBoardType *p)
{
	if (soap_read_ns1__LocationBoardType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LocationStationType_DEFINED
#define SOAP_TYPE_ns1__LocationStationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LocationStationType(struct soap*, const char*, int, const ns1__LocationStationType *, const char*);
SOAP_FMAC3 ns1__LocationStationType * SOAP_FMAC4 soap_in_ns1__LocationStationType(struct soap*, const char*, ns1__LocationStationType *, const char*);
SOAP_FMAC1 ns1__LocationStationType * SOAP_FMAC2 soap_instantiate_ns1__LocationStationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LocationStationType * soap_new_ns1__LocationStationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LocationStationType(soap, n, NULL, NULL, NULL);
}

inline ns1__LocationStationType * soap_new_req_ns1__LocationStationType(
	struct soap *soap,
	unsigned int st,
	unsigned int areaId)
{
	ns1__LocationStationType *_p = soap_new_ns1__LocationStationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LocationStationType::st = st;
		_p->ns1__LocationStationType::areaId = areaId;
	}
	return _p;
}

inline ns1__LocationStationType * soap_new_set_ns1__LocationStationType(
	struct soap *soap,
	unsigned int st,
	unsigned int areaId,
	char *__item__1)
{
	ns1__LocationStationType *_p = soap_new_ns1__LocationStationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LocationStationType::st = st;
		_p->ns1__LocationStationType::areaId = areaId;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__LocationStationType(struct soap *soap, ns1__LocationStationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationStationType", p->soap_type() == SOAP_TYPE_ns1__LocationStationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LocationStationType(struct soap *soap, const char *URL, ns1__LocationStationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationStationType", p->soap_type() == SOAP_TYPE_ns1__LocationStationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LocationStationType(struct soap *soap, const char *URL, ns1__LocationStationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationStationType", p->soap_type() == SOAP_TYPE_ns1__LocationStationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LocationStationType * SOAP_FMAC4 soap_get_ns1__LocationStationType(struct soap*, ns1__LocationStationType *, const char*, const char*);

inline int soap_read_ns1__LocationStationType(struct soap *soap, ns1__LocationStationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LocationStationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LocationStationType(struct soap *soap, const char *URL, ns1__LocationStationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LocationStationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LocationStationType(struct soap *soap, ns1__LocationStationType *p)
{
	if (soap_read_ns1__LocationStationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Schedule_DEFINED
#define SOAP_TYPE_ns1__Schedule_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Schedule(struct soap*, const char*, int, const ns1__Schedule *, const char*);
SOAP_FMAC3 ns1__Schedule * SOAP_FMAC4 soap_in_ns1__Schedule(struct soap*, const char*, ns1__Schedule *, const char*);
SOAP_FMAC1 ns1__Schedule * SOAP_FMAC2 soap_instantiate_ns1__Schedule(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Schedule * soap_new_ns1__Schedule(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Schedule(soap, n, NULL, NULL, NULL);
}

inline ns1__Schedule * soap_new_req_ns1__Schedule(
	struct soap *soap,
	unsigned int block,
	unsigned int run,
	unsigned int trip)
{
	ns1__Schedule *_p = soap_new_ns1__Schedule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Schedule::block = block;
		_p->ns1__Schedule::run = run;
		_p->ns1__Schedule::trip = trip;
	}
	return _p;
}

inline ns1__Schedule * soap_new_set_ns1__Schedule(
	struct soap *soap,
	unsigned int block,
	unsigned int run,
	unsigned int trip,
	unsigned int *duty,
	char *__item__1)
{
	ns1__Schedule *_p = soap_new_ns1__Schedule(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Schedule::block = block;
		_p->ns1__Schedule::run = run;
		_p->ns1__Schedule::trip = trip;
		_p->ns1__Schedule::duty = duty;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__Schedule(struct soap *soap, ns1__Schedule const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Schedule", p->soap_type() == SOAP_TYPE_ns1__Schedule ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Schedule(struct soap *soap, const char *URL, ns1__Schedule const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Schedule", p->soap_type() == SOAP_TYPE_ns1__Schedule ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Schedule(struct soap *soap, const char *URL, ns1__Schedule const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Schedule", p->soap_type() == SOAP_TYPE_ns1__Schedule ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Schedule * SOAP_FMAC4 soap_get_ns1__Schedule(struct soap*, ns1__Schedule *, const char*, const char*);

inline int soap_read_ns1__Schedule(struct soap *soap, ns1__Schedule *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Schedule(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Schedule(struct soap *soap, const char *URL, ns1__Schedule *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Schedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Schedule(struct soap *soap, ns1__Schedule *p)
{
	if (soap_read_ns1__Schedule(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AVLocation_DEFINED
#define SOAP_TYPE_ns1__AVLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AVLocation(struct soap*, const char*, int, const ns1__AVLocation *, const char*);
SOAP_FMAC3 ns1__AVLocation * SOAP_FMAC4 soap_in_ns1__AVLocation(struct soap*, const char*, ns1__AVLocation *, const char*);
SOAP_FMAC1 ns1__AVLocation * SOAP_FMAC2 soap_instantiate_ns1__AVLocation(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AVLocation * soap_new_ns1__AVLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AVLocation(soap, n, NULL, NULL, NULL);
}

inline ns1__AVLocation * soap_new_req_ns1__AVLocation(
	struct soap *soap,
	unsigned int route,
	unsigned int stop,
	unsigned int dir)
{
	ns1__AVLocation *_p = soap_new_ns1__AVLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AVLocation::route = route;
		_p->ns1__AVLocation::stop = stop;
		_p->ns1__AVLocation::dir = dir;
	}
	return _p;
}

inline ns1__AVLocation * soap_new_set_ns1__AVLocation(
	struct soap *soap,
	unsigned int route,
	unsigned int stop,
	unsigned int dir,
	unsigned int *order,
	unsigned int *veh,
	ns1__Schedule *sched,
	unsigned int *tripNum__1,
	char *__item__2)
{
	ns1__AVLocation *_p = soap_new_ns1__AVLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AVLocation::route = route;
		_p->ns1__AVLocation::stop = stop;
		_p->ns1__AVLocation::dir = dir;
		_p->ns1__AVLocation::order = order;
		_p->ns1__AVLocation::veh = veh;
		_p->ns1__AVLocation::sched = sched;
		_p->ns1__OperationalLocationBase::tripNum = tripNum__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__AVLocation(struct soap *soap, ns1__AVLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AVLocation", p->soap_type() == SOAP_TYPE_ns1__AVLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AVLocation(struct soap *soap, const char *URL, ns1__AVLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AVLocation", p->soap_type() == SOAP_TYPE_ns1__AVLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AVLocation(struct soap *soap, const char *URL, ns1__AVLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AVLocation", p->soap_type() == SOAP_TYPE_ns1__AVLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AVLocation * SOAP_FMAC4 soap_get_ns1__AVLocation(struct soap*, ns1__AVLocation *, const char*, const char*);

inline int soap_read_ns1__AVLocation(struct soap *soap, ns1__AVLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AVLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AVLocation(struct soap *soap, const char *URL, ns1__AVLocation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AVLocation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AVLocation(struct soap *soap, ns1__AVLocation *p)
{
	if (soap_read_ns1__AVLocation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OperationalLocationBase_DEFINED
#define SOAP_TYPE_ns1__OperationalLocationBase_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OperationalLocationBase(struct soap*, const char*, int, const ns1__OperationalLocationBase *, const char*);
SOAP_FMAC3 ns1__OperationalLocationBase * SOAP_FMAC4 soap_in_ns1__OperationalLocationBase(struct soap*, const char*, ns1__OperationalLocationBase *, const char*);
SOAP_FMAC1 ns1__OperationalLocationBase * SOAP_FMAC2 soap_instantiate_ns1__OperationalLocationBase(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OperationalLocationBase * soap_new_ns1__OperationalLocationBase(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OperationalLocationBase(soap, n, NULL, NULL, NULL);
}

inline ns1__OperationalLocationBase * soap_new_req_ns1__OperationalLocationBase(
	struct soap *soap)
{
	ns1__OperationalLocationBase *_p = soap_new_ns1__OperationalLocationBase(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__OperationalLocationBase * soap_new_set_ns1__OperationalLocationBase(
	struct soap *soap,
	unsigned int *tripNum,
	char *__item__1)
{
	ns1__OperationalLocationBase *_p = soap_new_ns1__OperationalLocationBase(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OperationalLocationBase::tripNum = tripNum;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__OperationalLocationBase(struct soap *soap, ns1__OperationalLocationBase const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationalLocationBase", p->soap_type() == SOAP_TYPE_ns1__OperationalLocationBase ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OperationalLocationBase(struct soap *soap, const char *URL, ns1__OperationalLocationBase const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationalLocationBase", p->soap_type() == SOAP_TYPE_ns1__OperationalLocationBase ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OperationalLocationBase(struct soap *soap, const char *URL, ns1__OperationalLocationBase const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationalLocationBase", p->soap_type() == SOAP_TYPE_ns1__OperationalLocationBase ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OperationalLocationBase * SOAP_FMAC4 soap_get_ns1__OperationalLocationBase(struct soap*, ns1__OperationalLocationBase *, const char*, const char*);

inline int soap_read_ns1__OperationalLocationBase(struct soap *soap, ns1__OperationalLocationBase *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OperationalLocationBase(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OperationalLocationBase(struct soap *soap, const char *URL, ns1__OperationalLocationBase *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OperationalLocationBase(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OperationalLocationBase(struct soap *soap, ns1__OperationalLocationBase *p)
{
	if (soap_read_ns1__OperationalLocationBase(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OperationalLocation_DEFINED
#define SOAP_TYPE_ns1__OperationalLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OperationalLocation(struct soap*, const char*, int, const ns1__OperationalLocation *, const char*);
SOAP_FMAC3 ns1__OperationalLocation * SOAP_FMAC4 soap_in_ns1__OperationalLocation(struct soap*, const char*, ns1__OperationalLocation *, const char*);
SOAP_FMAC1 ns1__OperationalLocation * SOAP_FMAC2 soap_instantiate_ns1__OperationalLocation(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OperationalLocation * soap_new_ns1__OperationalLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OperationalLocation(soap, n, NULL, NULL, NULL);
}

inline ns1__OperationalLocation * soap_new_req_ns1__OperationalLocation(
	struct soap *soap,
	unsigned int agn,
	unsigned int srv,
	unsigned int lin,
	unsigned int stn)
{
	ns1__OperationalLocation *_p = soap_new_ns1__OperationalLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OperationalLocation::agn = agn;
		_p->ns1__OperationalLocation::srv = srv;
		_p->ns1__OperationalLocation::lin = lin;
		_p->ns1__OperationalLocation::stn = stn;
	}
	return _p;
}

inline ns1__OperationalLocation * soap_new_set_ns1__OperationalLocation(
	struct soap *soap,
	unsigned int agn,
	unsigned int srv,
	unsigned int lin,
	unsigned int stn,
	unsigned int *dir,
	unsigned int *veh,
	unsigned int *tripNum__1,
	char *__item__2)
{
	ns1__OperationalLocation *_p = soap_new_ns1__OperationalLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OperationalLocation::agn = agn;
		_p->ns1__OperationalLocation::srv = srv;
		_p->ns1__OperationalLocation::lin = lin;
		_p->ns1__OperationalLocation::stn = stn;
		_p->ns1__OperationalLocation::dir = dir;
		_p->ns1__OperationalLocation::veh = veh;
		_p->ns1__OperationalLocationBase::tripNum = tripNum__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__OperationalLocation(struct soap *soap, ns1__OperationalLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationalLocation", p->soap_type() == SOAP_TYPE_ns1__OperationalLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OperationalLocation(struct soap *soap, const char *URL, ns1__OperationalLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationalLocation", p->soap_type() == SOAP_TYPE_ns1__OperationalLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OperationalLocation(struct soap *soap, const char *URL, ns1__OperationalLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OperationalLocation", p->soap_type() == SOAP_TYPE_ns1__OperationalLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OperationalLocation * SOAP_FMAC4 soap_get_ns1__OperationalLocation(struct soap*, ns1__OperationalLocation *, const char*, const char*);

inline int soap_read_ns1__OperationalLocation(struct soap *soap, ns1__OperationalLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OperationalLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OperationalLocation(struct soap *soap, const char *URL, ns1__OperationalLocation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OperationalLocation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OperationalLocation(struct soap *soap, ns1__OperationalLocation *p)
{
	if (soap_read_ns1__OperationalLocation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__OnboardLocation_DEFINED
#define SOAP_TYPE_ns1__OnboardLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__OnboardLocation(struct soap*, const char*, int, const ns1__OnboardLocation *, const char*);
SOAP_FMAC3 ns1__OnboardLocation * SOAP_FMAC4 soap_in_ns1__OnboardLocation(struct soap*, const char*, ns1__OnboardLocation *, const char*);
SOAP_FMAC1 ns1__OnboardLocation * SOAP_FMAC2 soap_instantiate_ns1__OnboardLocation(struct soap*, int, const char*, const char*, size_t*);

inline ns1__OnboardLocation * soap_new_ns1__OnboardLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__OnboardLocation(soap, n, NULL, NULL, NULL);
}

inline ns1__OnboardLocation * soap_new_req_ns1__OnboardLocation(
	struct soap *soap,
	unsigned int veh,
	unsigned int pos,
	char *ref__1,
	unsigned int eqt__1,
	unsigned int agn__1,
	LONG64 id__1)
{
	ns1__OnboardLocation *_p = soap_new_ns1__OnboardLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OnboardLocation::veh = veh;
		_p->ns1__OnboardLocation::pos = pos;
		_p->ns1__EquipmentLocation::ref = ref__1;
		_p->ns1__EquipmentLocation::eqt = eqt__1;
		_p->ns1__EquipmentLocation::agn = agn__1;
		_p->ns1__EquipmentLocation::id = id__1;
	}
	return _p;
}

inline ns1__OnboardLocation * soap_new_set_ns1__OnboardLocation(
	struct soap *soap,
	unsigned int veh,
	unsigned int pos,
	char *ref__1,
	unsigned int eqt__1,
	unsigned int agn__1,
	LONG64 id__1,
	char *__item__2)
{
	ns1__OnboardLocation *_p = soap_new_ns1__OnboardLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__OnboardLocation::veh = veh;
		_p->ns1__OnboardLocation::pos = pos;
		_p->ns1__EquipmentLocation::ref = ref__1;
		_p->ns1__EquipmentLocation::eqt = eqt__1;
		_p->ns1__EquipmentLocation::agn = agn__1;
		_p->ns1__EquipmentLocation::id = id__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__OnboardLocation(struct soap *soap, ns1__OnboardLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OnboardLocation", p->soap_type() == SOAP_TYPE_ns1__OnboardLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__OnboardLocation(struct soap *soap, const char *URL, ns1__OnboardLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OnboardLocation", p->soap_type() == SOAP_TYPE_ns1__OnboardLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__OnboardLocation(struct soap *soap, const char *URL, ns1__OnboardLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:OnboardLocation", p->soap_type() == SOAP_TYPE_ns1__OnboardLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__OnboardLocation * SOAP_FMAC4 soap_get_ns1__OnboardLocation(struct soap*, ns1__OnboardLocation *, const char*, const char*);

inline int soap_read_ns1__OnboardLocation(struct soap *soap, ns1__OnboardLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__OnboardLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__OnboardLocation(struct soap *soap, const char *URL, ns1__OnboardLocation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__OnboardLocation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__OnboardLocation(struct soap *soap, ns1__OnboardLocation *p)
{
	if (soap_read_ns1__OnboardLocation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__EquipmentLocation_DEFINED
#define SOAP_TYPE_ns1__EquipmentLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EquipmentLocation(struct soap*, const char*, int, const ns1__EquipmentLocation *, const char*);
SOAP_FMAC3 ns1__EquipmentLocation * SOAP_FMAC4 soap_in_ns1__EquipmentLocation(struct soap*, const char*, ns1__EquipmentLocation *, const char*);
SOAP_FMAC1 ns1__EquipmentLocation * SOAP_FMAC2 soap_instantiate_ns1__EquipmentLocation(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EquipmentLocation * soap_new_ns1__EquipmentLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EquipmentLocation(soap, n, NULL, NULL, NULL);
}

inline ns1__EquipmentLocation * soap_new_req_ns1__EquipmentLocation(
	struct soap *soap,
	char *ref,
	unsigned int eqt,
	unsigned int agn,
	LONG64 id)
{
	ns1__EquipmentLocation *_p = soap_new_ns1__EquipmentLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EquipmentLocation::ref = ref;
		_p->ns1__EquipmentLocation::eqt = eqt;
		_p->ns1__EquipmentLocation::agn = agn;
		_p->ns1__EquipmentLocation::id = id;
	}
	return _p;
}

inline ns1__EquipmentLocation * soap_new_set_ns1__EquipmentLocation(
	struct soap *soap,
	char *ref,
	unsigned int eqt,
	unsigned int agn,
	LONG64 id,
	char *__item__1)
{
	ns1__EquipmentLocation *_p = soap_new_ns1__EquipmentLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EquipmentLocation::ref = ref;
		_p->ns1__EquipmentLocation::eqt = eqt;
		_p->ns1__EquipmentLocation::agn = agn;
		_p->ns1__EquipmentLocation::id = id;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__EquipmentLocation(struct soap *soap, ns1__EquipmentLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentLocation", p->soap_type() == SOAP_TYPE_ns1__EquipmentLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EquipmentLocation(struct soap *soap, const char *URL, ns1__EquipmentLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentLocation", p->soap_type() == SOAP_TYPE_ns1__EquipmentLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EquipmentLocation(struct soap *soap, const char *URL, ns1__EquipmentLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentLocation", p->soap_type() == SOAP_TYPE_ns1__EquipmentLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EquipmentLocation * SOAP_FMAC4 soap_get_ns1__EquipmentLocation(struct soap*, ns1__EquipmentLocation *, const char*, const char*);

inline int soap_read_ns1__EquipmentLocation(struct soap *soap, ns1__EquipmentLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__EquipmentLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EquipmentLocation(struct soap *soap, const char *URL, ns1__EquipmentLocation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__EquipmentLocation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__EquipmentLocation(struct soap *soap, ns1__EquipmentLocation *p)
{
	if (soap_read_ns1__EquipmentLocation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__FixedLocation_DEFINED
#define SOAP_TYPE_ns1__FixedLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FixedLocation(struct soap*, const char*, int, const ns1__FixedLocation *, const char*);
SOAP_FMAC3 ns1__FixedLocation * SOAP_FMAC4 soap_in_ns1__FixedLocation(struct soap*, const char*, ns1__FixedLocation *, const char*);
SOAP_FMAC1 ns1__FixedLocation * SOAP_FMAC2 soap_instantiate_ns1__FixedLocation(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FixedLocation * soap_new_ns1__FixedLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FixedLocation(soap, n, NULL, NULL, NULL);
}

inline ns1__FixedLocation * soap_new_req_ns1__FixedLocation(
	struct soap *soap,
	unsigned int area,
	unsigned int pos,
	char *ref__1,
	unsigned int eqt__1,
	unsigned int agn__1,
	LONG64 id__1)
{
	ns1__FixedLocation *_p = soap_new_ns1__FixedLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FixedLocation::area = area;
		_p->ns1__FixedLocation::pos = pos;
		_p->ns1__EquipmentLocation::ref = ref__1;
		_p->ns1__EquipmentLocation::eqt = eqt__1;
		_p->ns1__EquipmentLocation::agn = agn__1;
		_p->ns1__EquipmentLocation::id = id__1;
	}
	return _p;
}

inline ns1__FixedLocation * soap_new_set_ns1__FixedLocation(
	struct soap *soap,
	unsigned int area,
	unsigned int pos,
	char *ref__1,
	unsigned int eqt__1,
	unsigned int agn__1,
	LONG64 id__1,
	char *__item__2)
{
	ns1__FixedLocation *_p = soap_new_ns1__FixedLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FixedLocation::area = area;
		_p->ns1__FixedLocation::pos = pos;
		_p->ns1__EquipmentLocation::ref = ref__1;
		_p->ns1__EquipmentLocation::eqt = eqt__1;
		_p->ns1__EquipmentLocation::agn = agn__1;
		_p->ns1__EquipmentLocation::id = id__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__FixedLocation(struct soap *soap, ns1__FixedLocation const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FixedLocation", p->soap_type() == SOAP_TYPE_ns1__FixedLocation ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FixedLocation(struct soap *soap, const char *URL, ns1__FixedLocation const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FixedLocation", p->soap_type() == SOAP_TYPE_ns1__FixedLocation ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FixedLocation(struct soap *soap, const char *URL, ns1__FixedLocation const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FixedLocation", p->soap_type() == SOAP_TYPE_ns1__FixedLocation ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FixedLocation * SOAP_FMAC4 soap_get_ns1__FixedLocation(struct soap*, ns1__FixedLocation *, const char*, const char*);

inline int soap_read_ns1__FixedLocation(struct soap *soap, ns1__FixedLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__FixedLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FixedLocation(struct soap *soap, const char *URL, ns1__FixedLocation *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__FixedLocation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__FixedLocation(struct soap *soap, ns1__FixedLocation *p)
{
	if (soap_read_ns1__FixedLocation(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__LocationType_DEFINED
#define SOAP_TYPE_ns1__LocationType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__LocationType(struct soap*, const char*, int, const ns1__LocationType *, const char*);
SOAP_FMAC3 ns1__LocationType * SOAP_FMAC4 soap_in_ns1__LocationType(struct soap*, const char*, ns1__LocationType *, const char*);
SOAP_FMAC1 ns1__LocationType * SOAP_FMAC2 soap_instantiate_ns1__LocationType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__LocationType * soap_new_ns1__LocationType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__LocationType(soap, n, NULL, NULL, NULL);
}

inline ns1__LocationType * soap_new_req_ns1__LocationType(
	struct soap *soap,
	LONG64 id,
	unsigned int srv,
	unsigned int pos,
	unsigned int li)
{
	ns1__LocationType *_p = soap_new_ns1__LocationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LocationType::id = id;
		_p->ns1__LocationType::srv = srv;
		_p->ns1__LocationType::pos = pos;
		_p->ns1__LocationType::li = li;
	}
	return _p;
}

inline ns1__LocationType * soap_new_set_ns1__LocationType(
	struct soap *soap,
	ns1__FixedLocation *fxLoc,
	ns1__OnboardLocation *obLoc,
	ns1__OperationalLocation *opLoc,
	ns1__AVLocation *avLoc,
	ns1__LocationStationType *st,
	ns1__LocationBoardType *bo,
	LONG64 id,
	unsigned int srv,
	unsigned int pos,
	char *refId,
	unsigned int li,
	char *__item__1)
{
	ns1__LocationType *_p = soap_new_ns1__LocationType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__LocationType::fxLoc = fxLoc;
		_p->ns1__LocationType::obLoc = obLoc;
		_p->ns1__LocationType::opLoc = opLoc;
		_p->ns1__LocationType::avLoc = avLoc;
		_p->ns1__LocationType::st = st;
		_p->ns1__LocationType::bo = bo;
		_p->ns1__LocationType::id = id;
		_p->ns1__LocationType::srv = srv;
		_p->ns1__LocationType::pos = pos;
		_p->ns1__LocationType::refId = refId;
		_p->ns1__LocationType::li = li;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__LocationType(struct soap *soap, ns1__LocationType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationType", p->soap_type() == SOAP_TYPE_ns1__LocationType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__LocationType(struct soap *soap, const char *URL, ns1__LocationType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationType", p->soap_type() == SOAP_TYPE_ns1__LocationType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__LocationType(struct soap *soap, const char *URL, ns1__LocationType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:LocationType", p->soap_type() == SOAP_TYPE_ns1__LocationType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__LocationType * SOAP_FMAC4 soap_get_ns1__LocationType(struct soap*, ns1__LocationType *, const char*, const char*);

inline int soap_read_ns1__LocationType(struct soap *soap, ns1__LocationType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__LocationType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__LocationType(struct soap *soap, const char *URL, ns1__LocationType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__LocationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__LocationType(struct soap *soap, ns1__LocationType *p)
{
	if (soap_read_ns1__LocationType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ConfigVersionType_DEFINED
#define SOAP_TYPE_ns1__ConfigVersionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ConfigVersionType(struct soap*, const char*, int, const ns1__ConfigVersionType *, const char*);
SOAP_FMAC3 ns1__ConfigVersionType * SOAP_FMAC4 soap_in_ns1__ConfigVersionType(struct soap*, const char*, ns1__ConfigVersionType *, const char*);
SOAP_FMAC1 ns1__ConfigVersionType * SOAP_FMAC2 soap_instantiate_ns1__ConfigVersionType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ConfigVersionType * soap_new_ns1__ConfigVersionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ConfigVersionType(soap, n, NULL, NULL, NULL);
}

inline ns1__ConfigVersionType * soap_new_req_ns1__ConfigVersionType(
	struct soap *soap,
	unsigned int id,
	unsigned int v)
{
	ns1__ConfigVersionType *_p = soap_new_ns1__ConfigVersionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ConfigVersionType::id = id;
		_p->ns1__ConfigVersionType::v = v;
	}
	return _p;
}

inline ns1__ConfigVersionType * soap_new_set_ns1__ConfigVersionType(
	struct soap *soap,
	unsigned int id,
	unsigned int v,
	char *__item__1)
{
	ns1__ConfigVersionType *_p = soap_new_ns1__ConfigVersionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ConfigVersionType::id = id;
		_p->ns1__ConfigVersionType::v = v;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ConfigVersionType(struct soap *soap, ns1__ConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__ConfigVersionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ConfigVersionType(struct soap *soap, const char *URL, ns1__ConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__ConfigVersionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ConfigVersionType(struct soap *soap, const char *URL, ns1__ConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__ConfigVersionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ConfigVersionType * SOAP_FMAC4 soap_get_ns1__ConfigVersionType(struct soap*, ns1__ConfigVersionType *, const char*, const char*);

inline int soap_read_ns1__ConfigVersionType(struct soap *soap, ns1__ConfigVersionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ConfigVersionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ConfigVersionType(struct soap *soap, const char *URL, ns1__ConfigVersionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ConfigVersionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ConfigVersionType(struct soap *soap, ns1__ConfigVersionType *p)
{
	if (soap_read_ns1__ConfigVersionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ConfigVersionTypeList_DEFINED
#define SOAP_TYPE_ns1__ConfigVersionTypeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ConfigVersionTypeList(struct soap*, const char*, int, const ns1__ConfigVersionTypeList *, const char*);
SOAP_FMAC3 ns1__ConfigVersionTypeList * SOAP_FMAC4 soap_in_ns1__ConfigVersionTypeList(struct soap*, const char*, ns1__ConfigVersionTypeList *, const char*);
SOAP_FMAC1 ns1__ConfigVersionTypeList * SOAP_FMAC2 soap_instantiate_ns1__ConfigVersionTypeList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ConfigVersionTypeList * soap_new_ns1__ConfigVersionTypeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ConfigVersionTypeList(soap, n, NULL, NULL, NULL);
}

inline ns1__ConfigVersionTypeList * soap_new_req_ns1__ConfigVersionTypeList(
	struct soap *soap,
	int __sizecv,
	ns1__ConfigVersionType **cv)
{
	ns1__ConfigVersionTypeList *_p = soap_new_ns1__ConfigVersionTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ConfigVersionTypeList::__sizecv = __sizecv;
		_p->ns1__ConfigVersionTypeList::cv = cv;
	}
	return _p;
}

inline ns1__ConfigVersionTypeList * soap_new_set_ns1__ConfigVersionTypeList(
	struct soap *soap,
	int __sizecv,
	ns1__ConfigVersionType **cv,
	char *__item__1)
{
	ns1__ConfigVersionTypeList *_p = soap_new_ns1__ConfigVersionTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ConfigVersionTypeList::__sizecv = __sizecv;
		_p->ns1__ConfigVersionTypeList::cv = cv;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ConfigVersionTypeList(struct soap *soap, ns1__ConfigVersionTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigVersionTypeList", p->soap_type() == SOAP_TYPE_ns1__ConfigVersionTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ConfigVersionTypeList(struct soap *soap, const char *URL, ns1__ConfigVersionTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigVersionTypeList", p->soap_type() == SOAP_TYPE_ns1__ConfigVersionTypeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ConfigVersionTypeList(struct soap *soap, const char *URL, ns1__ConfigVersionTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigVersionTypeList", p->soap_type() == SOAP_TYPE_ns1__ConfigVersionTypeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ConfigVersionTypeList * SOAP_FMAC4 soap_get_ns1__ConfigVersionTypeList(struct soap*, ns1__ConfigVersionTypeList *, const char*, const char*);

inline int soap_read_ns1__ConfigVersionTypeList(struct soap *soap, ns1__ConfigVersionTypeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ConfigVersionTypeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ConfigVersionTypeList(struct soap *soap, const char *URL, ns1__ConfigVersionTypeList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ConfigVersionTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ConfigVersionTypeList(struct soap *soap, ns1__ConfigVersionTypeList *p)
{
	if (soap_read_ns1__ConfigVersionTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__stSWFileType_DEFINED
#define SOAP_TYPE_ns1__stSWFileType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__stSWFileType(struct soap*, const char*, int, const ns1__stSWFileType *, const char*);
SOAP_FMAC3 ns1__stSWFileType * SOAP_FMAC4 soap_in_ns1__stSWFileType(struct soap*, const char*, ns1__stSWFileType *, const char*);
SOAP_FMAC1 ns1__stSWFileType * SOAP_FMAC2 soap_instantiate_ns1__stSWFileType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__stSWFileType * soap_new_ns1__stSWFileType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__stSWFileType(soap, n, NULL, NULL, NULL);
}

inline ns1__stSWFileType * soap_new_req_ns1__stSWFileType(
	struct soap *soap,
	LONG64 fieldId,
	char *v)
{
	ns1__stSWFileType *_p = soap_new_ns1__stSWFileType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stSWFileType::fieldId = fieldId;
		_p->ns1__stSWFileType::v = v;
	}
	return _p;
}

inline ns1__stSWFileType * soap_new_set_ns1__stSWFileType(
	struct soap *soap,
	LONG64 fieldId,
	char *v,
	char *__item__1)
{
	ns1__stSWFileType *_p = soap_new_ns1__stSWFileType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stSWFileType::fieldId = fieldId;
		_p->ns1__stSWFileType::v = v;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__stSWFileType(struct soap *soap, ns1__stSWFileType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stSWFileType", p->soap_type() == SOAP_TYPE_ns1__stSWFileType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__stSWFileType(struct soap *soap, const char *URL, ns1__stSWFileType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stSWFileType", p->soap_type() == SOAP_TYPE_ns1__stSWFileType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__stSWFileType(struct soap *soap, const char *URL, ns1__stSWFileType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stSWFileType", p->soap_type() == SOAP_TYPE_ns1__stSWFileType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__stSWFileType * SOAP_FMAC4 soap_get_ns1__stSWFileType(struct soap*, ns1__stSWFileType *, const char*, const char*);

inline int soap_read_ns1__stSWFileType(struct soap *soap, ns1__stSWFileType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__stSWFileType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__stSWFileType(struct soap *soap, const char *URL, ns1__stSWFileType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__stSWFileType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__stSWFileType(struct soap *soap, ns1__stSWFileType *p)
{
	if (soap_read_ns1__stSWFileType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__stSWFileListType_DEFINED
#define SOAP_TYPE_ns1__stSWFileListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__stSWFileListType(struct soap*, const char*, int, const ns1__stSWFileListType *, const char*);
SOAP_FMAC3 ns1__stSWFileListType * SOAP_FMAC4 soap_in_ns1__stSWFileListType(struct soap*, const char*, ns1__stSWFileListType *, const char*);
SOAP_FMAC1 ns1__stSWFileListType * SOAP_FMAC2 soap_instantiate_ns1__stSWFileListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__stSWFileListType * soap_new_ns1__stSWFileListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__stSWFileListType(soap, n, NULL, NULL, NULL);
}

inline ns1__stSWFileListType * soap_new_req_ns1__stSWFileListType(
	struct soap *soap,
	int __sizeswF,
	ns1__stSWFileType **swF)
{
	ns1__stSWFileListType *_p = soap_new_ns1__stSWFileListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stSWFileListType::__sizeswF = __sizeswF;
		_p->ns1__stSWFileListType::swF = swF;
	}
	return _p;
}

inline ns1__stSWFileListType * soap_new_set_ns1__stSWFileListType(
	struct soap *soap,
	int __sizeswF,
	ns1__stSWFileType **swF,
	char *__item__1)
{
	ns1__stSWFileListType *_p = soap_new_ns1__stSWFileListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stSWFileListType::__sizeswF = __sizeswF;
		_p->ns1__stSWFileListType::swF = swF;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__stSWFileListType(struct soap *soap, ns1__stSWFileListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stSWFileListType", p->soap_type() == SOAP_TYPE_ns1__stSWFileListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__stSWFileListType(struct soap *soap, const char *URL, ns1__stSWFileListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stSWFileListType", p->soap_type() == SOAP_TYPE_ns1__stSWFileListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__stSWFileListType(struct soap *soap, const char *URL, ns1__stSWFileListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stSWFileListType", p->soap_type() == SOAP_TYPE_ns1__stSWFileListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__stSWFileListType * SOAP_FMAC4 soap_get_ns1__stSWFileListType(struct soap*, ns1__stSWFileListType *, const char*, const char*);

inline int soap_read_ns1__stSWFileListType(struct soap *soap, ns1__stSWFileListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__stSWFileListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__stSWFileListType(struct soap *soap, const char *URL, ns1__stSWFileListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__stSWFileListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__stSWFileListType(struct soap *soap, ns1__stSWFileListType *p)
{
	if (soap_read_ns1__stSWFileListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__stConfigFileType_DEFINED
#define SOAP_TYPE_ns1__stConfigFileType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__stConfigFileType(struct soap*, const char*, int, const ns1__stConfigFileType *, const char*);
SOAP_FMAC3 ns1__stConfigFileType * SOAP_FMAC4 soap_in_ns1__stConfigFileType(struct soap*, const char*, ns1__stConfigFileType *, const char*);
SOAP_FMAC1 ns1__stConfigFileType * SOAP_FMAC2 soap_instantiate_ns1__stConfigFileType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__stConfigFileType * soap_new_ns1__stConfigFileType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__stConfigFileType(soap, n, NULL, NULL, NULL);
}

inline ns1__stConfigFileType * soap_new_req_ns1__stConfigFileType(
	struct soap *soap,
	LONG64 fieldId,
	LONG64 v,
	LONG64 incV)
{
	ns1__stConfigFileType *_p = soap_new_ns1__stConfigFileType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stConfigFileType::fieldId = fieldId;
		_p->ns1__stConfigFileType::v = v;
		_p->ns1__stConfigFileType::incV = incV;
	}
	return _p;
}

inline ns1__stConfigFileType * soap_new_set_ns1__stConfigFileType(
	struct soap *soap,
	LONG64 fieldId,
	LONG64 v,
	LONG64 incV,
	char *__item__1)
{
	ns1__stConfigFileType *_p = soap_new_ns1__stConfigFileType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stConfigFileType::fieldId = fieldId;
		_p->ns1__stConfigFileType::v = v;
		_p->ns1__stConfigFileType::incV = incV;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__stConfigFileType(struct soap *soap, ns1__stConfigFileType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stConfigFileType", p->soap_type() == SOAP_TYPE_ns1__stConfigFileType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__stConfigFileType(struct soap *soap, const char *URL, ns1__stConfigFileType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stConfigFileType", p->soap_type() == SOAP_TYPE_ns1__stConfigFileType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__stConfigFileType(struct soap *soap, const char *URL, ns1__stConfigFileType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stConfigFileType", p->soap_type() == SOAP_TYPE_ns1__stConfigFileType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__stConfigFileType * SOAP_FMAC4 soap_get_ns1__stConfigFileType(struct soap*, ns1__stConfigFileType *, const char*, const char*);

inline int soap_read_ns1__stConfigFileType(struct soap *soap, ns1__stConfigFileType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__stConfigFileType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__stConfigFileType(struct soap *soap, const char *URL, ns1__stConfigFileType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__stConfigFileType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__stConfigFileType(struct soap *soap, ns1__stConfigFileType *p)
{
	if (soap_read_ns1__stConfigFileType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__stConfigFileListType_DEFINED
#define SOAP_TYPE_ns1__stConfigFileListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__stConfigFileListType(struct soap*, const char*, int, const ns1__stConfigFileListType *, const char*);
SOAP_FMAC3 ns1__stConfigFileListType * SOAP_FMAC4 soap_in_ns1__stConfigFileListType(struct soap*, const char*, ns1__stConfigFileListType *, const char*);
SOAP_FMAC1 ns1__stConfigFileListType * SOAP_FMAC2 soap_instantiate_ns1__stConfigFileListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__stConfigFileListType * soap_new_ns1__stConfigFileListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__stConfigFileListType(soap, n, NULL, NULL, NULL);
}

inline ns1__stConfigFileListType * soap_new_req_ns1__stConfigFileListType(
	struct soap *soap,
	int __sizecF,
	ns1__stConfigFileType **cF)
{
	ns1__stConfigFileListType *_p = soap_new_ns1__stConfigFileListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stConfigFileListType::__sizecF = __sizecF;
		_p->ns1__stConfigFileListType::cF = cF;
	}
	return _p;
}

inline ns1__stConfigFileListType * soap_new_set_ns1__stConfigFileListType(
	struct soap *soap,
	int __sizecF,
	ns1__stConfigFileType **cF,
	char *__item__1)
{
	ns1__stConfigFileListType *_p = soap_new_ns1__stConfigFileListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stConfigFileListType::__sizecF = __sizecF;
		_p->ns1__stConfigFileListType::cF = cF;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__stConfigFileListType(struct soap *soap, ns1__stConfigFileListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stConfigFileListType", p->soap_type() == SOAP_TYPE_ns1__stConfigFileListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__stConfigFileListType(struct soap *soap, const char *URL, ns1__stConfigFileListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stConfigFileListType", p->soap_type() == SOAP_TYPE_ns1__stConfigFileListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__stConfigFileListType(struct soap *soap, const char *URL, ns1__stConfigFileListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stConfigFileListType", p->soap_type() == SOAP_TYPE_ns1__stConfigFileListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__stConfigFileListType * SOAP_FMAC4 soap_get_ns1__stConfigFileListType(struct soap*, ns1__stConfigFileListType *, const char*, const char*);

inline int soap_read_ns1__stConfigFileListType(struct soap *soap, ns1__stConfigFileListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__stConfigFileListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__stConfigFileListType(struct soap *soap, const char *URL, ns1__stConfigFileListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__stConfigFileListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__stConfigFileListType(struct soap *soap, ns1__stConfigFileListType *p)
{
	if (soap_read_ns1__stConfigFileListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__stPackageType_DEFINED
#define SOAP_TYPE_ns1__stPackageType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__stPackageType(struct soap*, const char*, int, const ns1__stPackageType *, const char*);
SOAP_FMAC3 ns1__stPackageType * SOAP_FMAC4 soap_in_ns1__stPackageType(struct soap*, const char*, ns1__stPackageType *, const char*);
SOAP_FMAC1 ns1__stPackageType * SOAP_FMAC2 soap_instantiate_ns1__stPackageType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__stPackageType * soap_new_ns1__stPackageType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__stPackageType(soap, n, NULL, NULL, NULL);
}

inline ns1__stPackageType * soap_new_req_ns1__stPackageType(
	struct soap *soap,
	LONG64 pkgId,
	LONG64 v)
{
	ns1__stPackageType *_p = soap_new_ns1__stPackageType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stPackageType::pkgId = pkgId;
		_p->ns1__stPackageType::v = v;
	}
	return _p;
}

inline ns1__stPackageType * soap_new_set_ns1__stPackageType(
	struct soap *soap,
	ns1__stConfigFileListType *confFiles,
	ns1__stSWFileListType *swFiles,
	LONG64 pkgId,
	LONG64 v,
	char *__item__1)
{
	ns1__stPackageType *_p = soap_new_ns1__stPackageType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stPackageType::confFiles = confFiles;
		_p->ns1__stPackageType::swFiles = swFiles;
		_p->ns1__stPackageType::pkgId = pkgId;
		_p->ns1__stPackageType::v = v;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__stPackageType(struct soap *soap, ns1__stPackageType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stPackageType", p->soap_type() == SOAP_TYPE_ns1__stPackageType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__stPackageType(struct soap *soap, const char *URL, ns1__stPackageType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stPackageType", p->soap_type() == SOAP_TYPE_ns1__stPackageType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__stPackageType(struct soap *soap, const char *URL, ns1__stPackageType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stPackageType", p->soap_type() == SOAP_TYPE_ns1__stPackageType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__stPackageType * SOAP_FMAC4 soap_get_ns1__stPackageType(struct soap*, ns1__stPackageType *, const char*, const char*);

inline int soap_read_ns1__stPackageType(struct soap *soap, ns1__stPackageType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__stPackageType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__stPackageType(struct soap *soap, const char *URL, ns1__stPackageType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__stPackageType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__stPackageType(struct soap *soap, ns1__stPackageType *p)
{
	if (soap_read_ns1__stPackageType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__stPackageListType_DEFINED
#define SOAP_TYPE_ns1__stPackageListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__stPackageListType(struct soap*, const char*, int, const ns1__stPackageListType *, const char*);
SOAP_FMAC3 ns1__stPackageListType * SOAP_FMAC4 soap_in_ns1__stPackageListType(struct soap*, const char*, ns1__stPackageListType *, const char*);
SOAP_FMAC1 ns1__stPackageListType * SOAP_FMAC2 soap_instantiate_ns1__stPackageListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__stPackageListType * soap_new_ns1__stPackageListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__stPackageListType(soap, n, NULL, NULL, NULL);
}

inline ns1__stPackageListType * soap_new_req_ns1__stPackageListType(
	struct soap *soap,
	int __sizepkg,
	ns1__stPackageType **pkg)
{
	ns1__stPackageListType *_p = soap_new_ns1__stPackageListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stPackageListType::__sizepkg = __sizepkg;
		_p->ns1__stPackageListType::pkg = pkg;
	}
	return _p;
}

inline ns1__stPackageListType * soap_new_set_ns1__stPackageListType(
	struct soap *soap,
	int __sizepkg,
	ns1__stPackageType **pkg,
	char *__item__1)
{
	ns1__stPackageListType *_p = soap_new_ns1__stPackageListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__stPackageListType::__sizepkg = __sizepkg;
		_p->ns1__stPackageListType::pkg = pkg;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__stPackageListType(struct soap *soap, ns1__stPackageListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stPackageListType", p->soap_type() == SOAP_TYPE_ns1__stPackageListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__stPackageListType(struct soap *soap, const char *URL, ns1__stPackageListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stPackageListType", p->soap_type() == SOAP_TYPE_ns1__stPackageListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__stPackageListType(struct soap *soap, const char *URL, ns1__stPackageListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:stPackageListType", p->soap_type() == SOAP_TYPE_ns1__stPackageListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__stPackageListType * SOAP_FMAC4 soap_get_ns1__stPackageListType(struct soap*, ns1__stPackageListType *, const char*, const char*);

inline int soap_read_ns1__stPackageListType(struct soap *soap, ns1__stPackageListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__stPackageListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__stPackageListType(struct soap *soap, const char *URL, ns1__stPackageListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__stPackageListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__stPackageListType(struct soap *soap, ns1__stPackageListType *p)
{
	if (soap_read_ns1__stPackageListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__BaseRecordType_DEFINED
#define SOAP_TYPE_ns1__BaseRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BaseRecordType(struct soap*, const char*, int, const ns1__BaseRecordType *, const char*);
SOAP_FMAC3 ns1__BaseRecordType * SOAP_FMAC4 soap_in_ns1__BaseRecordType(struct soap*, const char*, ns1__BaseRecordType *, const char*);
SOAP_FMAC1 ns1__BaseRecordType * SOAP_FMAC2 soap_instantiate_ns1__BaseRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BaseRecordType * soap_new_ns1__BaseRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__BaseRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__BaseRecordType * soap_new_req_ns1__BaseRecordType(
	struct soap *soap,
	unsigned int eqSe,
	ns1__RecordIdType *id,
	ns1__LocationType *loc)
{
	ns1__BaseRecordType *_p = soap_new_ns1__BaseRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::eqSe = eqSe;
		_p->ns1__BaseRecordType::id = id;
		_p->ns1__BaseRecordType::loc = loc;
	}
	return _p;
}

inline ns1__BaseRecordType * soap_new_set_ns1__BaseRecordType(
	struct soap *soap,
	ns1__ConfigVersionTypeList *cv,
	unsigned int eqSe,
	char *day,
	ns1__RecordIdType *id,
	ns1__LocationType *loc,
	unsigned int *opId,
	ns1__OperationInfoType *opInfo,
	char *__item__1)
{
	ns1__BaseRecordType *_p = soap_new_ns1__BaseRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__BaseRecordType::cv = cv;
		_p->ns1__BaseRecordType::eqSe = eqSe;
		_p->ns1__BaseRecordType::day = day;
		_p->ns1__BaseRecordType::id = id;
		_p->ns1__BaseRecordType::loc = loc;
		_p->ns1__BaseRecordType::opId = opId;
		_p->ns1__BaseRecordType::opInfo = opInfo;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__BaseRecordType(struct soap *soap, ns1__BaseRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseRecordType", p->soap_type() == SOAP_TYPE_ns1__BaseRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__BaseRecordType(struct soap *soap, const char *URL, ns1__BaseRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseRecordType", p->soap_type() == SOAP_TYPE_ns1__BaseRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__BaseRecordType(struct soap *soap, const char *URL, ns1__BaseRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:BaseRecordType", p->soap_type() == SOAP_TYPE_ns1__BaseRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__BaseRecordType * SOAP_FMAC4 soap_get_ns1__BaseRecordType(struct soap*, ns1__BaseRecordType *, const char*, const char*);

inline int soap_read_ns1__BaseRecordType(struct soap *soap, ns1__BaseRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__BaseRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__BaseRecordType(struct soap *soap, const char *URL, ns1__BaseRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__BaseRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__BaseRecordType(struct soap *soap, ns1__BaseRecordType *p)
{
	if (soap_read_ns1__BaseRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__StartUpRecordType_DEFINED
#define SOAP_TYPE_ns1__StartUpRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__StartUpRecordType(struct soap*, const char*, int, const ns1__StartUpRecordType *, const char*);
SOAP_FMAC3 ns1__StartUpRecordType * SOAP_FMAC4 soap_in_ns1__StartUpRecordType(struct soap*, const char*, ns1__StartUpRecordType *, const char*);
SOAP_FMAC1 ns1__StartUpRecordType * SOAP_FMAC2 soap_instantiate_ns1__StartUpRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__StartUpRecordType * soap_new_ns1__StartUpRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__StartUpRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__StartUpRecordType * soap_new_req_ns1__StartUpRecordType(
	struct soap *soap,
	ns1__stPackageListType *pL,
	char *hN,
	char *iAdd,
	unsigned int eqSe__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1)
{
	ns1__StartUpRecordType *_p = soap_new_ns1__StartUpRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StartUpRecordType::pL = pL;
		_p->ns1__StartUpRecordType::hN = hN;
		_p->ns1__StartUpRecordType::iAdd = iAdd;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
	}
	return _p;
}

inline ns1__StartUpRecordType * soap_new_set_ns1__StartUpRecordType(
	struct soap *soap,
	ns1__stPackageListType *pL,
	char *hN,
	char *iAdd,
	ns1__ConfigVersionTypeList *cv__1,
	unsigned int eqSe__1,
	char *day__1,
	ns1__RecordIdType *id__1,
	ns1__LocationType *loc__1,
	unsigned int *opId__1,
	ns1__OperationInfoType *opInfo__1,
	char *__item__2)
{
	ns1__StartUpRecordType *_p = soap_new_ns1__StartUpRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__StartUpRecordType::pL = pL;
		_p->ns1__StartUpRecordType::hN = hN;
		_p->ns1__StartUpRecordType::iAdd = iAdd;
		_p->ns1__BaseRecordType::cv = cv__1;
		_p->ns1__BaseRecordType::eqSe = eqSe__1;
		_p->ns1__BaseRecordType::day = day__1;
		_p->ns1__BaseRecordType::id = id__1;
		_p->ns1__BaseRecordType::loc = loc__1;
		_p->ns1__BaseRecordType::opId = opId__1;
		_p->ns1__BaseRecordType::opInfo = opInfo__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__StartUpRecordType(struct soap *soap, ns1__StartUpRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartUpRecordType", p->soap_type() == SOAP_TYPE_ns1__StartUpRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__StartUpRecordType(struct soap *soap, const char *URL, ns1__StartUpRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartUpRecordType", p->soap_type() == SOAP_TYPE_ns1__StartUpRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__StartUpRecordType(struct soap *soap, const char *URL, ns1__StartUpRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:StartUpRecordType", p->soap_type() == SOAP_TYPE_ns1__StartUpRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__StartUpRecordType * SOAP_FMAC4 soap_get_ns1__StartUpRecordType(struct soap*, ns1__StartUpRecordType *, const char*, const char*);

inline int soap_read_ns1__StartUpRecordType(struct soap *soap, ns1__StartUpRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__StartUpRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__StartUpRecordType(struct soap *soap, const char *URL, ns1__StartUpRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__StartUpRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__StartUpRecordType(struct soap *soap, ns1__StartUpRecordType *p)
{
	if (soap_read_ns1__StartUpRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__UnsignedRecordType_DEFINED
#define SOAP_TYPE_ns1__UnsignedRecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__UnsignedRecordType(struct soap*, const char*, int, const ns1__UnsignedRecordType *, const char*);
SOAP_FMAC3 ns1__UnsignedRecordType * SOAP_FMAC4 soap_in_ns1__UnsignedRecordType(struct soap*, const char*, ns1__UnsignedRecordType *, const char*);
SOAP_FMAC1 ns1__UnsignedRecordType * SOAP_FMAC2 soap_instantiate_ns1__UnsignedRecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__UnsignedRecordType * soap_new_ns1__UnsignedRecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__UnsignedRecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__UnsignedRecordType * soap_new_req_ns1__UnsignedRecordType(
	struct soap *soap,
	const union _ns1__union_UnsignedRecordType& union_UnsignedRecordType)
{
	ns1__UnsignedRecordType *_p = soap_new_ns1__UnsignedRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UnsignedRecordType::union_UnsignedRecordType = union_UnsignedRecordType;
	}
	return _p;
}

inline ns1__UnsignedRecordType * soap_new_set_ns1__UnsignedRecordType(
	struct soap *soap,
	int __union_UnsignedRecordType,
	const union _ns1__union_UnsignedRecordType& union_UnsignedRecordType,
	char *__item__1)
{
	ns1__UnsignedRecordType *_p = soap_new_ns1__UnsignedRecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__UnsignedRecordType::__union_UnsignedRecordType = __union_UnsignedRecordType;
		_p->ns1__UnsignedRecordType::union_UnsignedRecordType = union_UnsignedRecordType;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__UnsignedRecordType(struct soap *soap, ns1__UnsignedRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnsignedRecordType", p->soap_type() == SOAP_TYPE_ns1__UnsignedRecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__UnsignedRecordType(struct soap *soap, const char *URL, ns1__UnsignedRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnsignedRecordType", p->soap_type() == SOAP_TYPE_ns1__UnsignedRecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__UnsignedRecordType(struct soap *soap, const char *URL, ns1__UnsignedRecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:UnsignedRecordType", p->soap_type() == SOAP_TYPE_ns1__UnsignedRecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__UnsignedRecordType * SOAP_FMAC4 soap_get_ns1__UnsignedRecordType(struct soap*, ns1__UnsignedRecordType *, const char*, const char*);

inline int soap_read_ns1__UnsignedRecordType(struct soap *soap, ns1__UnsignedRecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__UnsignedRecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__UnsignedRecordType(struct soap *soap, const char *URL, ns1__UnsignedRecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__UnsignedRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__UnsignedRecordType(struct soap *soap, ns1__UnsignedRecordType *p)
{
	if (soap_read_ns1__UnsignedRecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RecordType_DEFINED
#define SOAP_TYPE_ns1__RecordType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecordType(struct soap*, const char*, int, const ns1__RecordType *, const char*);
SOAP_FMAC3 ns1__RecordType * SOAP_FMAC4 soap_in_ns1__RecordType(struct soap*, const char*, ns1__RecordType *, const char*);
SOAP_FMAC1 ns1__RecordType * SOAP_FMAC2 soap_instantiate_ns1__RecordType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecordType * soap_new_ns1__RecordType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecordType(soap, n, NULL, NULL, NULL);
}

inline ns1__RecordType * soap_new_req_ns1__RecordType(
	struct soap *soap)
{
	ns1__RecordType *_p = soap_new_ns1__RecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__RecordType * soap_new_set_ns1__RecordType(
	struct soap *soap,
	ns1__UnsignedRecordType *unsignedReg,
	ns1__SignedRecordType *signedReg,
	char *__item__1)
{
	ns1__RecordType *_p = soap_new_ns1__RecordType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordType::unsignedReg = unsignedReg;
		_p->ns1__RecordType::signedReg = signedReg;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__RecordType(struct soap *soap, ns1__RecordType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordType", p->soap_type() == SOAP_TYPE_ns1__RecordType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecordType(struct soap *soap, const char *URL, ns1__RecordType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordType", p->soap_type() == SOAP_TYPE_ns1__RecordType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecordType(struct soap *soap, const char *URL, ns1__RecordType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordType", p->soap_type() == SOAP_TYPE_ns1__RecordType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecordType * SOAP_FMAC4 soap_get_ns1__RecordType(struct soap*, ns1__RecordType *, const char*, const char*);

inline int soap_read_ns1__RecordType(struct soap *soap, ns1__RecordType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RecordType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecordType(struct soap *soap, const char *URL, ns1__RecordType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RecordType(struct soap *soap, ns1__RecordType *p)
{
	if (soap_read_ns1__RecordType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RecordListType_DEFINED
#define SOAP_TYPE_ns1__RecordListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecordListType(struct soap*, const char*, int, const ns1__RecordListType *, const char*);
SOAP_FMAC3 ns1__RecordListType * SOAP_FMAC4 soap_in_ns1__RecordListType(struct soap*, const char*, ns1__RecordListType *, const char*);
SOAP_FMAC1 ns1__RecordListType * SOAP_FMAC2 soap_instantiate_ns1__RecordListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecordListType * soap_new_ns1__RecordListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecordListType(soap, n, NULL, NULL, NULL);
}

inline ns1__RecordListType * soap_new_req_ns1__RecordListType(
	struct soap *soap,
	int __sizeitems,
	ns1__RecordType **items)
{
	ns1__RecordListType *_p = soap_new_ns1__RecordListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordListType::__sizeitems = __sizeitems;
		_p->ns1__RecordListType::items = items;
	}
	return _p;
}

inline ns1__RecordListType * soap_new_set_ns1__RecordListType(
	struct soap *soap,
	int __sizeitems,
	ns1__RecordType **items,
	char *__item__1)
{
	ns1__RecordListType *_p = soap_new_ns1__RecordListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordListType::__sizeitems = __sizeitems;
		_p->ns1__RecordListType::items = items;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__RecordListType(struct soap *soap, ns1__RecordListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordListType", p->soap_type() == SOAP_TYPE_ns1__RecordListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecordListType(struct soap *soap, const char *URL, ns1__RecordListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordListType", p->soap_type() == SOAP_TYPE_ns1__RecordListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecordListType(struct soap *soap, const char *URL, ns1__RecordListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordListType", p->soap_type() == SOAP_TYPE_ns1__RecordListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecordListType * SOAP_FMAC4 soap_get_ns1__RecordListType(struct soap*, ns1__RecordListType *, const char*, const char*);

inline int soap_read_ns1__RecordListType(struct soap *soap, ns1__RecordListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RecordListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecordListType(struct soap *soap, const char *URL, ns1__RecordListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RecordListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RecordListType(struct soap *soap, ns1__RecordListType *p)
{
	if (soap_read_ns1__RecordListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ResultWS_DEFINED
#define SOAP_TYPE_ns1__ResultWS_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ResultWS(struct soap*, const char*, int, const ns1__ResultWS *, const char*);
SOAP_FMAC3 ns1__ResultWS * SOAP_FMAC4 soap_in_ns1__ResultWS(struct soap*, const char*, ns1__ResultWS *, const char*);
SOAP_FMAC1 ns1__ResultWS * SOAP_FMAC2 soap_instantiate_ns1__ResultWS(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ResultWS * soap_new_ns1__ResultWS(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ResultWS(soap, n, NULL, NULL, NULL);
}

inline ns1__ResultWS * soap_new_req_ns1__ResultWS(
	struct soap *soap,
	unsigned int code)
{
	ns1__ResultWS *_p = soap_new_ns1__ResultWS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ResultWS::code = code;
	}
	return _p;
}

inline ns1__ResultWS * soap_new_set_ns1__ResultWS(
	struct soap *soap,
	unsigned int code,
	char *desc,
	char *__item__1)
{
	ns1__ResultWS *_p = soap_new_ns1__ResultWS(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ResultWS::code = code;
		_p->ns1__ResultWS::desc = desc;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ResultWS(struct soap *soap, ns1__ResultWS const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResultWS", p->soap_type() == SOAP_TYPE_ns1__ResultWS ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ResultWS(struct soap *soap, const char *URL, ns1__ResultWS const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResultWS", p->soap_type() == SOAP_TYPE_ns1__ResultWS ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ResultWS(struct soap *soap, const char *URL, ns1__ResultWS const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ResultWS", p->soap_type() == SOAP_TYPE_ns1__ResultWS ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ResultWS * SOAP_FMAC4 soap_get_ns1__ResultWS(struct soap*, ns1__ResultWS *, const char*, const char*);

inline int soap_read_ns1__ResultWS(struct soap *soap, ns1__ResultWS *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ResultWS(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ResultWS(struct soap *soap, const char *URL, ns1__ResultWS *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ResultWS(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ResultWS(struct soap *soap, ns1__ResultWS *p)
{
	if (soap_read_ns1__ResultWS(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvRecordResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvRecordResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvRecordResponseType(struct soap*, const char*, int, const ns1__SrvRecordResponseType *, const char*);
SOAP_FMAC3 ns1__SrvRecordResponseType * SOAP_FMAC4 soap_in_ns1__SrvRecordResponseType(struct soap*, const char*, ns1__SrvRecordResponseType *, const char*);
SOAP_FMAC1 ns1__SrvRecordResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvRecordResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvRecordResponseType * soap_new_ns1__SrvRecordResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvRecordResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvRecordResponseType * soap_new_req_ns1__SrvRecordResponseType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvRecordResponseType *_p = soap_new_ns1__SrvRecordResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvRecordResponseType * soap_new_set_ns1__SrvRecordResponseType(
	struct soap *soap,
	ns1__ResultWS *result,
	ns1__RecordListType *recList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvRecordResponseType *_p = soap_new_ns1__SrvRecordResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvRecordResponseType::result = result;
		_p->ns1__SrvRecordResponseType::recList = recList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvRecordResponseType(struct soap *soap, ns1__SrvRecordResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvRecordResponseType(struct soap *soap, const char *URL, ns1__SrvRecordResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvRecordResponseType(struct soap *soap, const char *URL, ns1__SrvRecordResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvRecordResponseType * SOAP_FMAC4 soap_get_ns1__SrvRecordResponseType(struct soap*, ns1__SrvRecordResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvRecordResponseType(struct soap *soap, ns1__SrvRecordResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvRecordResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvRecordResponseType(struct soap *soap, const char *URL, ns1__SrvRecordResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvRecordResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvRecordResponseType(struct soap *soap, ns1__SrvRecordResponseType *p)
{
	if (soap_read_ns1__SrvRecordResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__FileConfigVersionListType_DEFINED
#define SOAP_TYPE_ns1__FileConfigVersionListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FileConfigVersionListType(struct soap*, const char*, int, const ns1__FileConfigVersionListType *, const char*);
SOAP_FMAC3 ns1__FileConfigVersionListType * SOAP_FMAC4 soap_in_ns1__FileConfigVersionListType(struct soap*, const char*, ns1__FileConfigVersionListType *, const char*);
SOAP_FMAC1 ns1__FileConfigVersionListType * SOAP_FMAC2 soap_instantiate_ns1__FileConfigVersionListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FileConfigVersionListType * soap_new_ns1__FileConfigVersionListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FileConfigVersionListType(soap, n, NULL, NULL, NULL);
}

inline ns1__FileConfigVersionListType * soap_new_req_ns1__FileConfigVersionListType(
	struct soap *soap,
	int __sizefile,
	ns1__FileConfigVersionType **file)
{
	ns1__FileConfigVersionListType *_p = soap_new_ns1__FileConfigVersionListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FileConfigVersionListType::__sizefile = __sizefile;
		_p->ns1__FileConfigVersionListType::file = file;
	}
	return _p;
}

inline ns1__FileConfigVersionListType * soap_new_set_ns1__FileConfigVersionListType(
	struct soap *soap,
	int __sizefile,
	ns1__FileConfigVersionType **file,
	char *__item__1)
{
	ns1__FileConfigVersionListType *_p = soap_new_ns1__FileConfigVersionListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FileConfigVersionListType::__sizefile = __sizefile;
		_p->ns1__FileConfigVersionListType::file = file;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__FileConfigVersionListType(struct soap *soap, ns1__FileConfigVersionListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FileConfigVersionListType", p->soap_type() == SOAP_TYPE_ns1__FileConfigVersionListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FileConfigVersionListType(struct soap *soap, const char *URL, ns1__FileConfigVersionListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FileConfigVersionListType", p->soap_type() == SOAP_TYPE_ns1__FileConfigVersionListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FileConfigVersionListType(struct soap *soap, const char *URL, ns1__FileConfigVersionListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FileConfigVersionListType", p->soap_type() == SOAP_TYPE_ns1__FileConfigVersionListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FileConfigVersionListType * SOAP_FMAC4 soap_get_ns1__FileConfigVersionListType(struct soap*, ns1__FileConfigVersionListType *, const char*, const char*);

inline int soap_read_ns1__FileConfigVersionListType(struct soap *soap, ns1__FileConfigVersionListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__FileConfigVersionListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FileConfigVersionListType(struct soap *soap, const char *URL, ns1__FileConfigVersionListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__FileConfigVersionListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__FileConfigVersionListType(struct soap *soap, ns1__FileConfigVersionListType *p)
{
	if (soap_read_ns1__FileConfigVersionListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PackageConfigVersionType_DEFINED
#define SOAP_TYPE_ns1__PackageConfigVersionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PackageConfigVersionType(struct soap*, const char*, int, const ns1__PackageConfigVersionType *, const char*);
SOAP_FMAC3 ns1__PackageConfigVersionType * SOAP_FMAC4 soap_in_ns1__PackageConfigVersionType(struct soap*, const char*, ns1__PackageConfigVersionType *, const char*);
SOAP_FMAC1 ns1__PackageConfigVersionType * SOAP_FMAC2 soap_instantiate_ns1__PackageConfigVersionType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PackageConfigVersionType * soap_new_ns1__PackageConfigVersionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PackageConfigVersionType(soap, n, NULL, NULL, NULL);
}

inline ns1__PackageConfigVersionType * soap_new_req_ns1__PackageConfigVersionType(
	struct soap *soap)
{
	ns1__PackageConfigVersionType *_p = soap_new_ns1__PackageConfigVersionType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__PackageConfigVersionType * soap_new_set_ns1__PackageConfigVersionType(
	struct soap *soap,
	ns1__FileConfigVersionListType *fileList,
	unsigned int *id,
	unsigned int *agency,
	unsigned int *version,
	unsigned int *incVersion,
	char *name,
	char *uri,
	time_t *activation,
	char *__item__1)
{
	ns1__PackageConfigVersionType *_p = soap_new_ns1__PackageConfigVersionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PackageConfigVersionType::fileList = fileList;
		_p->ns1__PackageConfigVersionType::id = id;
		_p->ns1__PackageConfigVersionType::agency = agency;
		_p->ns1__PackageConfigVersionType::version = version;
		_p->ns1__PackageConfigVersionType::incVersion = incVersion;
		_p->ns1__PackageConfigVersionType::name = name;
		_p->ns1__PackageConfigVersionType::uri = uri;
		_p->ns1__PackageConfigVersionType::activation = activation;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PackageConfigVersionType(struct soap *soap, ns1__PackageConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PackageConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__PackageConfigVersionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PackageConfigVersionType(struct soap *soap, const char *URL, ns1__PackageConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PackageConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__PackageConfigVersionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PackageConfigVersionType(struct soap *soap, const char *URL, ns1__PackageConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PackageConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__PackageConfigVersionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PackageConfigVersionType * SOAP_FMAC4 soap_get_ns1__PackageConfigVersionType(struct soap*, ns1__PackageConfigVersionType *, const char*, const char*);

inline int soap_read_ns1__PackageConfigVersionType(struct soap *soap, ns1__PackageConfigVersionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PackageConfigVersionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PackageConfigVersionType(struct soap *soap, const char *URL, ns1__PackageConfigVersionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PackageConfigVersionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PackageConfigVersionType(struct soap *soap, ns1__PackageConfigVersionType *p)
{
	if (soap_read_ns1__PackageConfigVersionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PackageConfigVersionListType_DEFINED
#define SOAP_TYPE_ns1__PackageConfigVersionListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PackageConfigVersionListType(struct soap*, const char*, int, const ns1__PackageConfigVersionListType *, const char*);
SOAP_FMAC3 ns1__PackageConfigVersionListType * SOAP_FMAC4 soap_in_ns1__PackageConfigVersionListType(struct soap*, const char*, ns1__PackageConfigVersionListType *, const char*);
SOAP_FMAC1 ns1__PackageConfigVersionListType * SOAP_FMAC2 soap_instantiate_ns1__PackageConfigVersionListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PackageConfigVersionListType * soap_new_ns1__PackageConfigVersionListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PackageConfigVersionListType(soap, n, NULL, NULL, NULL);
}

inline ns1__PackageConfigVersionListType * soap_new_req_ns1__PackageConfigVersionListType(
	struct soap *soap,
	int __sizepkg,
	ns1__PackageConfigVersionType **pkg,
	unsigned int length)
{
	ns1__PackageConfigVersionListType *_p = soap_new_ns1__PackageConfigVersionListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PackageConfigVersionListType::__sizepkg = __sizepkg;
		_p->ns1__PackageConfigVersionListType::pkg = pkg;
		_p->ns1__PackageConfigVersionListType::length = length;
	}
	return _p;
}

inline ns1__PackageConfigVersionListType * soap_new_set_ns1__PackageConfigVersionListType(
	struct soap *soap,
	int __sizepkg,
	ns1__PackageConfigVersionType **pkg,
	unsigned int length,
	char *__item__1)
{
	ns1__PackageConfigVersionListType *_p = soap_new_ns1__PackageConfigVersionListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PackageConfigVersionListType::__sizepkg = __sizepkg;
		_p->ns1__PackageConfigVersionListType::pkg = pkg;
		_p->ns1__PackageConfigVersionListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PackageConfigVersionListType(struct soap *soap, ns1__PackageConfigVersionListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PackageConfigVersionListType", p->soap_type() == SOAP_TYPE_ns1__PackageConfigVersionListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PackageConfigVersionListType(struct soap *soap, const char *URL, ns1__PackageConfigVersionListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PackageConfigVersionListType", p->soap_type() == SOAP_TYPE_ns1__PackageConfigVersionListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PackageConfigVersionListType(struct soap *soap, const char *URL, ns1__PackageConfigVersionListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PackageConfigVersionListType", p->soap_type() == SOAP_TYPE_ns1__PackageConfigVersionListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PackageConfigVersionListType * SOAP_FMAC4 soap_get_ns1__PackageConfigVersionListType(struct soap*, ns1__PackageConfigVersionListType *, const char*, const char*);

inline int soap_read_ns1__PackageConfigVersionListType(struct soap *soap, ns1__PackageConfigVersionListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PackageConfigVersionListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PackageConfigVersionListType(struct soap *soap, const char *URL, ns1__PackageConfigVersionListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PackageConfigVersionListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PackageConfigVersionListType(struct soap *soap, ns1__PackageConfigVersionListType *p)
{
	if (soap_read_ns1__PackageConfigVersionListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PatternServiceResponseType_DEFINED
#define SOAP_TYPE_ns1__PatternServiceResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PatternServiceResponseType(struct soap*, const char*, int, const ns1__PatternServiceResponseType *, const char*);
SOAP_FMAC3 ns1__PatternServiceResponseType * SOAP_FMAC4 soap_in_ns1__PatternServiceResponseType(struct soap*, const char*, ns1__PatternServiceResponseType *, const char*);
SOAP_FMAC1 ns1__PatternServiceResponseType * SOAP_FMAC2 soap_instantiate_ns1__PatternServiceResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PatternServiceResponseType * soap_new_ns1__PatternServiceResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PatternServiceResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__PatternServiceResponseType * soap_new_req_ns1__PatternServiceResponseType(
	struct soap *soap,
	time_t dateTime,
	ns1__EquipmentReferenceType *responseFrom,
	unsigned int idMessageRequest,
	bool admited)
{
	ns1__PatternServiceResponseType *_p = soap_new_ns1__PatternServiceResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest;
		_p->ns1__PatternServiceResponseType::admited = admited;
	}
	return _p;
}

inline ns1__PatternServiceResponseType * soap_new_set_ns1__PatternServiceResponseType(
	struct soap *soap,
	time_t dateTime,
	ns1__EquipmentReferenceType *responseFrom,
	ns1__EquipmentReferenceType *responseTo,
	ns1__SlaveEquipmentListType *respSlaveList,
	unsigned int idMessageRequest,
	bool admited,
	unsigned int *rejectionCode,
	char *rejectionDesc,
	char *__item__1)
{
	ns1__PatternServiceResponseType *_p = soap_new_ns1__PatternServiceResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceResponseType::dateTime = dateTime;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest;
		_p->ns1__PatternServiceResponseType::admited = admited;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PatternServiceResponseType(struct soap *soap, ns1__PatternServiceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceResponseType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PatternServiceResponseType(struct soap *soap, const char *URL, ns1__PatternServiceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceResponseType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PatternServiceResponseType(struct soap *soap, const char *URL, ns1__PatternServiceResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceResponseType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PatternServiceResponseType * SOAP_FMAC4 soap_get_ns1__PatternServiceResponseType(struct soap*, ns1__PatternServiceResponseType *, const char*, const char*);

inline int soap_read_ns1__PatternServiceResponseType(struct soap *soap, ns1__PatternServiceResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PatternServiceResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PatternServiceResponseType(struct soap *soap, const char *URL, ns1__PatternServiceResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PatternServiceResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PatternServiceResponseType(struct soap *soap, ns1__PatternServiceResponseType *p)
{
	if (soap_read_ns1__PatternServiceResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvConfigurationInfoResponseType_DEFINED
#define SOAP_TYPE_ns1__SrvConfigurationInfoResponseType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvConfigurationInfoResponseType(struct soap*, const char*, int, const ns1__SrvConfigurationInfoResponseType *, const char*);
SOAP_FMAC3 ns1__SrvConfigurationInfoResponseType * SOAP_FMAC4 soap_in_ns1__SrvConfigurationInfoResponseType(struct soap*, const char*, ns1__SrvConfigurationInfoResponseType *, const char*);
SOAP_FMAC1 ns1__SrvConfigurationInfoResponseType * SOAP_FMAC2 soap_instantiate_ns1__SrvConfigurationInfoResponseType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvConfigurationInfoResponseType * soap_new_ns1__SrvConfigurationInfoResponseType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvConfigurationInfoResponseType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvConfigurationInfoResponseType * soap_new_req_ns1__SrvConfigurationInfoResponseType(
	struct soap *soap,
	ns1__PackageConfigVersionListType *pkgList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	unsigned int idMessageRequest__1,
	bool admited__1)
{
	ns1__SrvConfigurationInfoResponseType *_p = soap_new_ns1__SrvConfigurationInfoResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvConfigurationInfoResponseType::pkgList = pkgList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
	}
	return _p;
}

inline ns1__SrvConfigurationInfoResponseType * soap_new_set_ns1__SrvConfigurationInfoResponseType(
	struct soap *soap,
	ns1__PackageConfigVersionListType *pkgList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *responseFrom__1,
	ns1__EquipmentReferenceType *responseTo__1,
	ns1__SlaveEquipmentListType *respSlaveList__1,
	unsigned int idMessageRequest__1,
	bool admited__1,
	unsigned int *rejectionCode__1,
	char *rejectionDesc__1,
	char *__item__2)
{
	ns1__SrvConfigurationInfoResponseType *_p = soap_new_ns1__SrvConfigurationInfoResponseType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvConfigurationInfoResponseType::pkgList = pkgList;
		_p->ns1__PatternServiceResponseType::dateTime = dateTime__1;
		_p->ns1__PatternServiceResponseType::responseFrom = responseFrom__1;
		_p->ns1__PatternServiceResponseType::responseTo = responseTo__1;
		_p->ns1__PatternServiceResponseType::respSlaveList = respSlaveList__1;
		_p->ns1__PatternServiceResponseType::idMessageRequest = idMessageRequest__1;
		_p->ns1__PatternServiceResponseType::admited = admited__1;
		_p->ns1__PatternServiceResponseType::rejectionCode = rejectionCode__1;
		_p->ns1__PatternServiceResponseType::rejectionDesc = rejectionDesc__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvConfigurationInfoResponseType(struct soap *soap, ns1__SrvConfigurationInfoResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationInfoResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationInfoResponseType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvConfigurationInfoResponseType(struct soap *soap, const char *URL, ns1__SrvConfigurationInfoResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationInfoResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationInfoResponseType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvConfigurationInfoResponseType(struct soap *soap, const char *URL, ns1__SrvConfigurationInfoResponseType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationInfoResponseType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationInfoResponseType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvConfigurationInfoResponseType * SOAP_FMAC4 soap_get_ns1__SrvConfigurationInfoResponseType(struct soap*, ns1__SrvConfigurationInfoResponseType *, const char*, const char*);

inline int soap_read_ns1__SrvConfigurationInfoResponseType(struct soap *soap, ns1__SrvConfigurationInfoResponseType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvConfigurationInfoResponseType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvConfigurationInfoResponseType(struct soap *soap, const char *URL, ns1__SrvConfigurationInfoResponseType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvConfigurationInfoResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvConfigurationInfoResponseType(struct soap *soap, ns1__SrvConfigurationInfoResponseType *p)
{
	if (soap_read_ns1__SrvConfigurationInfoResponseType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getVersionListResponse_DEFINED
#define SOAP_TYPE_ns1__getVersionListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getVersionListResponse(struct soap*, const char*, int, const ns1__getVersionListResponse *, const char*);
SOAP_FMAC3 ns1__getVersionListResponse * SOAP_FMAC4 soap_in_ns1__getVersionListResponse(struct soap*, const char*, ns1__getVersionListResponse *, const char*);
SOAP_FMAC1 ns1__getVersionListResponse * SOAP_FMAC2 soap_instantiate_ns1__getVersionListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getVersionListResponse * soap_new_ns1__getVersionListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getVersionListResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getVersionListResponse * soap_new_req_ns1__getVersionListResponse(
	struct soap *soap)
{
	ns1__getVersionListResponse *_p = soap_new_ns1__getVersionListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getVersionListResponse * soap_new_set_ns1__getVersionListResponse(
	struct soap *soap,
	ns1__SrvConfigurationInfoResponseType *applicationsResult,
	char *__item__1)
{
	ns1__getVersionListResponse *_p = soap_new_ns1__getVersionListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getVersionListResponse::applicationsResult = applicationsResult;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getVersionListResponse(struct soap *soap, ns1__getVersionListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersionListResponse", p->soap_type() == SOAP_TYPE_ns1__getVersionListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getVersionListResponse(struct soap *soap, const char *URL, ns1__getVersionListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersionListResponse", p->soap_type() == SOAP_TYPE_ns1__getVersionListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getVersionListResponse(struct soap *soap, const char *URL, ns1__getVersionListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersionListResponse", p->soap_type() == SOAP_TYPE_ns1__getVersionListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getVersionListResponse * SOAP_FMAC4 soap_get_ns1__getVersionListResponse(struct soap*, ns1__getVersionListResponse *, const char*, const char*);

inline int soap_read_ns1__getVersionListResponse(struct soap *soap, ns1__getVersionListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getVersionListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getVersionListResponse(struct soap *soap, const char *URL, ns1__getVersionListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getVersionListResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getVersionListResponse(struct soap *soap, ns1__getVersionListResponse *p)
{
	if (soap_read_ns1__getVersionListResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvCommandV1RequestType_DEFINED
#define SOAP_TYPE_ns1__srvCommandV1RequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvCommandV1RequestType(struct soap*, const char*, int, const ns1__srvCommandV1RequestType *, const char*);
SOAP_FMAC3 ns1__srvCommandV1RequestType * SOAP_FMAC4 soap_in_ns1__srvCommandV1RequestType(struct soap*, const char*, ns1__srvCommandV1RequestType *, const char*);
SOAP_FMAC1 ns1__srvCommandV1RequestType * SOAP_FMAC2 soap_instantiate_ns1__srvCommandV1RequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvCommandV1RequestType * soap_new_ns1__srvCommandV1RequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvCommandV1RequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvCommandV1RequestType * soap_new_req_ns1__srvCommandV1RequestType(
	struct soap *soap,
	LONG64 commandId,
	int commandType,
	LONG64 commandCode,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *requestFrom__2,
	unsigned int idMessage__2)
{
	ns1__srvCommandV1RequestType *_p = soap_new_ns1__srvCommandV1RequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__srvCommandV1RequestType::commandId = commandId;
		_p->ns1__srvCommandV1RequestType::commandType = commandType;
		_p->ns1__srvCommandV1RequestType::commandCode = commandCode;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__2;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__2;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__2;
	}
	return _p;
}

inline ns1__srvCommandV1RequestType * soap_new_set_ns1__srvCommandV1RequestType(
	struct soap *soap,
	LONG64 commandId,
	int commandType,
	LONG64 *deviceCode,
	LONG64 commandCode,
	time_t *executionDate,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *requestFrom__2,
	ns1__EquipmentReferenceType *requestTo__2,
	ns1__SlaveEquipmentListType *reqSlaveList__2,
	unsigned int idMessage__2,
	char *__item__3)
{
	ns1__srvCommandV1RequestType *_p = soap_new_ns1__srvCommandV1RequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__srvCommandV1RequestType::commandId = commandId;
		_p->ns1__srvCommandV1RequestType::commandType = commandType;
		_p->ns1__srvCommandV1RequestType::deviceCode = deviceCode;
		_p->ns1__srvCommandV1RequestType::commandCode = commandCode;
		_p->ns1__srvCommandV1RequestType::executionDate = executionDate;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__2;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__2;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__2;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__2;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ns1__srvCommandV1RequestType(struct soap *soap, ns1__srvCommandV1RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandV1RequestType", p->soap_type() == SOAP_TYPE_ns1__srvCommandV1RequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvCommandV1RequestType(struct soap *soap, const char *URL, ns1__srvCommandV1RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandV1RequestType", p->soap_type() == SOAP_TYPE_ns1__srvCommandV1RequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvCommandV1RequestType(struct soap *soap, const char *URL, ns1__srvCommandV1RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandV1RequestType", p->soap_type() == SOAP_TYPE_ns1__srvCommandV1RequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvCommandV1RequestType * SOAP_FMAC4 soap_get_ns1__srvCommandV1RequestType(struct soap*, ns1__srvCommandV1RequestType *, const char*, const char*);

inline int soap_read_ns1__srvCommandV1RequestType(struct soap *soap, ns1__srvCommandV1RequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvCommandV1RequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvCommandV1RequestType(struct soap *soap, const char *URL, ns1__srvCommandV1RequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvCommandV1RequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvCommandV1RequestType(struct soap *soap, ns1__srvCommandV1RequestType *p)
{
	if (soap_read_ns1__srvCommandV1RequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvCommandBaseRequestType_DEFINED
#define SOAP_TYPE_ns1__srvCommandBaseRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvCommandBaseRequestType(struct soap*, const char*, int, const ns1__srvCommandBaseRequestType *, const char*);
SOAP_FMAC3 ns1__srvCommandBaseRequestType * SOAP_FMAC4 soap_in_ns1__srvCommandBaseRequestType(struct soap*, const char*, ns1__srvCommandBaseRequestType *, const char*);
SOAP_FMAC1 ns1__srvCommandBaseRequestType * SOAP_FMAC2 soap_instantiate_ns1__srvCommandBaseRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvCommandBaseRequestType * soap_new_ns1__srvCommandBaseRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvCommandBaseRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvCommandBaseRequestType * soap_new_req_ns1__srvCommandBaseRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__srvCommandBaseRequestType *_p = soap_new_ns1__srvCommandBaseRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__srvCommandBaseRequestType * soap_new_set_ns1__srvCommandBaseRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__srvCommandBaseRequestType *_p = soap_new_ns1__srvCommandBaseRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__srvCommandBaseRequestType(struct soap *soap, ns1__srvCommandBaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandBaseRequestType", p->soap_type() == SOAP_TYPE_ns1__srvCommandBaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvCommandBaseRequestType(struct soap *soap, const char *URL, ns1__srvCommandBaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandBaseRequestType", p->soap_type() == SOAP_TYPE_ns1__srvCommandBaseRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvCommandBaseRequestType(struct soap *soap, const char *URL, ns1__srvCommandBaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvCommandBaseRequestType", p->soap_type() == SOAP_TYPE_ns1__srvCommandBaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvCommandBaseRequestType * SOAP_FMAC4 soap_get_ns1__srvCommandBaseRequestType(struct soap*, ns1__srvCommandBaseRequestType *, const char*, const char*);

inline int soap_read_ns1__srvCommandBaseRequestType(struct soap *soap, ns1__srvCommandBaseRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvCommandBaseRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvCommandBaseRequestType(struct soap *soap, const char *URL, ns1__srvCommandBaseRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvCommandBaseRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvCommandBaseRequestType(struct soap *soap, ns1__srvCommandBaseRequestType *p)
{
	if (soap_read_ns1__srvCommandBaseRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvConfigurationV1RequestType_DEFINED
#define SOAP_TYPE_ns1__srvConfigurationV1RequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvConfigurationV1RequestType(struct soap*, const char*, int, const ns1__srvConfigurationV1RequestType *, const char*);
SOAP_FMAC3 ns1__srvConfigurationV1RequestType * SOAP_FMAC4 soap_in_ns1__srvConfigurationV1RequestType(struct soap*, const char*, ns1__srvConfigurationV1RequestType *, const char*);
SOAP_FMAC1 ns1__srvConfigurationV1RequestType * SOAP_FMAC2 soap_instantiate_ns1__srvConfigurationV1RequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvConfigurationV1RequestType * soap_new_ns1__srvConfigurationV1RequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvConfigurationV1RequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvConfigurationV1RequestType * soap_new_req_ns1__srvConfigurationV1RequestType(
	struct soap *soap,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *requestFrom__2,
	unsigned int idMessage__2)
{
	ns1__srvConfigurationV1RequestType *_p = soap_new_ns1__srvConfigurationV1RequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__2;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__2;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__2;
	}
	return _p;
}

inline ns1__srvConfigurationV1RequestType * soap_new_set_ns1__srvConfigurationV1RequestType(
	struct soap *soap,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *requestFrom__2,
	ns1__EquipmentReferenceType *requestTo__2,
	ns1__SlaveEquipmentListType *reqSlaveList__2,
	unsigned int idMessage__2,
	char *__item__3)
{
	ns1__srvConfigurationV1RequestType *_p = soap_new_ns1__srvConfigurationV1RequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__2;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__2;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__2;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__2;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ns1__srvConfigurationV1RequestType(struct soap *soap, ns1__srvConfigurationV1RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationV1RequestType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationV1RequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvConfigurationV1RequestType(struct soap *soap, const char *URL, ns1__srvConfigurationV1RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationV1RequestType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationV1RequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvConfigurationV1RequestType(struct soap *soap, const char *URL, ns1__srvConfigurationV1RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationV1RequestType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationV1RequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvConfigurationV1RequestType * SOAP_FMAC4 soap_get_ns1__srvConfigurationV1RequestType(struct soap*, ns1__srvConfigurationV1RequestType *, const char*, const char*);

inline int soap_read_ns1__srvConfigurationV1RequestType(struct soap *soap, ns1__srvConfigurationV1RequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvConfigurationV1RequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvConfigurationV1RequestType(struct soap *soap, const char *URL, ns1__srvConfigurationV1RequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvConfigurationV1RequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvConfigurationV1RequestType(struct soap *soap, ns1__srvConfigurationV1RequestType *p)
{
	if (soap_read_ns1__srvConfigurationV1RequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvConfigurationBaseRequestType_DEFINED
#define SOAP_TYPE_ns1__srvConfigurationBaseRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvConfigurationBaseRequestType(struct soap*, const char*, int, const ns1__srvConfigurationBaseRequestType *, const char*);
SOAP_FMAC3 ns1__srvConfigurationBaseRequestType * SOAP_FMAC4 soap_in_ns1__srvConfigurationBaseRequestType(struct soap*, const char*, ns1__srvConfigurationBaseRequestType *, const char*);
SOAP_FMAC1 ns1__srvConfigurationBaseRequestType * SOAP_FMAC2 soap_instantiate_ns1__srvConfigurationBaseRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvConfigurationBaseRequestType * soap_new_ns1__srvConfigurationBaseRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvConfigurationBaseRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvConfigurationBaseRequestType * soap_new_req_ns1__srvConfigurationBaseRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__srvConfigurationBaseRequestType *_p = soap_new_ns1__srvConfigurationBaseRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__srvConfigurationBaseRequestType * soap_new_set_ns1__srvConfigurationBaseRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__srvConfigurationBaseRequestType *_p = soap_new_ns1__srvConfigurationBaseRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__srvConfigurationBaseRequestType(struct soap *soap, ns1__srvConfigurationBaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationBaseRequestType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationBaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvConfigurationBaseRequestType(struct soap *soap, const char *URL, ns1__srvConfigurationBaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationBaseRequestType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationBaseRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvConfigurationBaseRequestType(struct soap *soap, const char *URL, ns1__srvConfigurationBaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvConfigurationBaseRequestType", p->soap_type() == SOAP_TYPE_ns1__srvConfigurationBaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvConfigurationBaseRequestType * SOAP_FMAC4 soap_get_ns1__srvConfigurationBaseRequestType(struct soap*, ns1__srvConfigurationBaseRequestType *, const char*, const char*);

inline int soap_read_ns1__srvConfigurationBaseRequestType(struct soap *soap, ns1__srvConfigurationBaseRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvConfigurationBaseRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvConfigurationBaseRequestType(struct soap *soap, const char *URL, ns1__srvConfigurationBaseRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvConfigurationBaseRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvConfigurationBaseRequestType(struct soap *soap, ns1__srvConfigurationBaseRequestType *p)
{
	if (soap_read_ns1__srvConfigurationBaseRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvPresentationV1RequestType_DEFINED
#define SOAP_TYPE_ns1__srvPresentationV1RequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvPresentationV1RequestType(struct soap*, const char*, int, const ns1__srvPresentationV1RequestType *, const char*);
SOAP_FMAC3 ns1__srvPresentationV1RequestType * SOAP_FMAC4 soap_in_ns1__srvPresentationV1RequestType(struct soap*, const char*, ns1__srvPresentationV1RequestType *, const char*);
SOAP_FMAC1 ns1__srvPresentationV1RequestType * SOAP_FMAC2 soap_instantiate_ns1__srvPresentationV1RequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvPresentationV1RequestType * soap_new_ns1__srvPresentationV1RequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvPresentationV1RequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvPresentationV1RequestType * soap_new_req_ns1__srvPresentationV1RequestType(
	struct soap *soap,
	char *hostName,
	char *ipAddress,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *requestFrom__2,
	unsigned int idMessage__2)
{
	ns1__srvPresentationV1RequestType *_p = soap_new_ns1__srvPresentationV1RequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__srvPresentationV1RequestType::hostName = hostName;
		_p->ns1__srvPresentationV1RequestType::ipAddress = ipAddress;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__2;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__2;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__2;
	}
	return _p;
}

inline ns1__srvPresentationV1RequestType * soap_new_set_ns1__srvPresentationV1RequestType(
	struct soap *soap,
	char *hostName,
	char *ipAddress,
	time_t dateTime__2,
	ns1__EquipmentReferenceType *requestFrom__2,
	ns1__EquipmentReferenceType *requestTo__2,
	ns1__SlaveEquipmentListType *reqSlaveList__2,
	unsigned int idMessage__2,
	char *__item__3)
{
	ns1__srvPresentationV1RequestType *_p = soap_new_ns1__srvPresentationV1RequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__srvPresentationV1RequestType::hostName = hostName;
		_p->ns1__srvPresentationV1RequestType::ipAddress = ipAddress;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__2;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__2;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__2;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__2;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ns1__srvPresentationV1RequestType(struct soap *soap, ns1__srvPresentationV1RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationV1RequestType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationV1RequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvPresentationV1RequestType(struct soap *soap, const char *URL, ns1__srvPresentationV1RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationV1RequestType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationV1RequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvPresentationV1RequestType(struct soap *soap, const char *URL, ns1__srvPresentationV1RequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationV1RequestType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationV1RequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvPresentationV1RequestType * SOAP_FMAC4 soap_get_ns1__srvPresentationV1RequestType(struct soap*, ns1__srvPresentationV1RequestType *, const char*, const char*);

inline int soap_read_ns1__srvPresentationV1RequestType(struct soap *soap, ns1__srvPresentationV1RequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvPresentationV1RequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvPresentationV1RequestType(struct soap *soap, const char *URL, ns1__srvPresentationV1RequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvPresentationV1RequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvPresentationV1RequestType(struct soap *soap, ns1__srvPresentationV1RequestType *p)
{
	if (soap_read_ns1__srvPresentationV1RequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__srvPresentationBaseRequestType_DEFINED
#define SOAP_TYPE_ns1__srvPresentationBaseRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__srvPresentationBaseRequestType(struct soap*, const char*, int, const ns1__srvPresentationBaseRequestType *, const char*);
SOAP_FMAC3 ns1__srvPresentationBaseRequestType * SOAP_FMAC4 soap_in_ns1__srvPresentationBaseRequestType(struct soap*, const char*, ns1__srvPresentationBaseRequestType *, const char*);
SOAP_FMAC1 ns1__srvPresentationBaseRequestType * SOAP_FMAC2 soap_instantiate_ns1__srvPresentationBaseRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__srvPresentationBaseRequestType * soap_new_ns1__srvPresentationBaseRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__srvPresentationBaseRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__srvPresentationBaseRequestType * soap_new_req_ns1__srvPresentationBaseRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__srvPresentationBaseRequestType *_p = soap_new_ns1__srvPresentationBaseRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__srvPresentationBaseRequestType * soap_new_set_ns1__srvPresentationBaseRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__srvPresentationBaseRequestType *_p = soap_new_ns1__srvPresentationBaseRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__srvPresentationBaseRequestType(struct soap *soap, ns1__srvPresentationBaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationBaseRequestType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationBaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__srvPresentationBaseRequestType(struct soap *soap, const char *URL, ns1__srvPresentationBaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationBaseRequestType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationBaseRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__srvPresentationBaseRequestType(struct soap *soap, const char *URL, ns1__srvPresentationBaseRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:srvPresentationBaseRequestType", p->soap_type() == SOAP_TYPE_ns1__srvPresentationBaseRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__srvPresentationBaseRequestType * SOAP_FMAC4 soap_get_ns1__srvPresentationBaseRequestType(struct soap*, ns1__srvPresentationBaseRequestType *, const char*, const char*);

inline int soap_read_ns1__srvPresentationBaseRequestType(struct soap *soap, ns1__srvPresentationBaseRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__srvPresentationBaseRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__srvPresentationBaseRequestType(struct soap *soap, const char *URL, ns1__srvPresentationBaseRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__srvPresentationBaseRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__srvPresentationBaseRequestType(struct soap *soap, ns1__srvPresentationBaseRequestType *p)
{
	if (soap_read_ns1__srvPresentationBaseRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__FileConfigVersionType_DEFINED
#define SOAP_TYPE_ns1__FileConfigVersionType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__FileConfigVersionType(struct soap*, const char*, int, const ns1__FileConfigVersionType *, const char*);
SOAP_FMAC3 ns1__FileConfigVersionType * SOAP_FMAC4 soap_in_ns1__FileConfigVersionType(struct soap*, const char*, ns1__FileConfigVersionType *, const char*);
SOAP_FMAC1 ns1__FileConfigVersionType * SOAP_FMAC2 soap_instantiate_ns1__FileConfigVersionType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__FileConfigVersionType * soap_new_ns1__FileConfigVersionType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__FileConfigVersionType(soap, n, NULL, NULL, NULL);
}

inline ns1__FileConfigVersionType * soap_new_req_ns1__FileConfigVersionType(
	struct soap *soap)
{
	ns1__FileConfigVersionType *_p = soap_new_ns1__FileConfigVersionType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__FileConfigVersionType * soap_new_set_ns1__FileConfigVersionType(
	struct soap *soap,
	unsigned int *id,
	unsigned int *version,
	unsigned int *incVersion,
	char *name,
	char *uri,
	char *__item__1)
{
	ns1__FileConfigVersionType *_p = soap_new_ns1__FileConfigVersionType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__FileConfigVersionType::id = id;
		_p->ns1__FileConfigVersionType::version = version;
		_p->ns1__FileConfigVersionType::incVersion = incVersion;
		_p->ns1__FileConfigVersionType::name = name;
		_p->ns1__FileConfigVersionType::uri = uri;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__FileConfigVersionType(struct soap *soap, ns1__FileConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FileConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__FileConfigVersionType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__FileConfigVersionType(struct soap *soap, const char *URL, ns1__FileConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FileConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__FileConfigVersionType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__FileConfigVersionType(struct soap *soap, const char *URL, ns1__FileConfigVersionType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:FileConfigVersionType", p->soap_type() == SOAP_TYPE_ns1__FileConfigVersionType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__FileConfigVersionType * SOAP_FMAC4 soap_get_ns1__FileConfigVersionType(struct soap*, ns1__FileConfigVersionType *, const char*, const char*);

inline int soap_read_ns1__FileConfigVersionType(struct soap *soap, ns1__FileConfigVersionType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__FileConfigVersionType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__FileConfigVersionType(struct soap *soap, const char *URL, ns1__FileConfigVersionType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__FileConfigVersionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__FileConfigVersionType(struct soap *soap, ns1__FileConfigVersionType *p)
{
	if (soap_read_ns1__FileConfigVersionType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvConfigurationContentRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvConfigurationContentRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvConfigurationContentRequestType(struct soap*, const char*, int, const ns1__SrvConfigurationContentRequestType *, const char*);
SOAP_FMAC3 ns1__SrvConfigurationContentRequestType * SOAP_FMAC4 soap_in_ns1__SrvConfigurationContentRequestType(struct soap*, const char*, ns1__SrvConfigurationContentRequestType *, const char*);
SOAP_FMAC1 ns1__SrvConfigurationContentRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvConfigurationContentRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvConfigurationContentRequestType * soap_new_ns1__SrvConfigurationContentRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvConfigurationContentRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvConfigurationContentRequestType * soap_new_req_ns1__SrvConfigurationContentRequestType(
	struct soap *soap,
	ns1__FileConfigVersionType *file,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvConfigurationContentRequestType *_p = soap_new_ns1__SrvConfigurationContentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvConfigurationContentRequestType::file = file;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvConfigurationContentRequestType * soap_new_set_ns1__SrvConfigurationContentRequestType(
	struct soap *soap,
	ns1__FileConfigVersionType *file,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvConfigurationContentRequestType *_p = soap_new_ns1__SrvConfigurationContentRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvConfigurationContentRequestType::file = file;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvConfigurationContentRequestType(struct soap *soap, ns1__SrvConfigurationContentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationContentRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationContentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvConfigurationContentRequestType(struct soap *soap, const char *URL, ns1__SrvConfigurationContentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationContentRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationContentRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvConfigurationContentRequestType(struct soap *soap, const char *URL, ns1__SrvConfigurationContentRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationContentRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationContentRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvConfigurationContentRequestType * SOAP_FMAC4 soap_get_ns1__SrvConfigurationContentRequestType(struct soap*, ns1__SrvConfigurationContentRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvConfigurationContentRequestType(struct soap *soap, ns1__SrvConfigurationContentRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvConfigurationContentRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvConfigurationContentRequestType(struct soap *soap, const char *URL, ns1__SrvConfigurationContentRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvConfigurationContentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvConfigurationContentRequestType(struct soap *soap, ns1__SrvConfigurationContentRequestType *p)
{
	if (soap_read_ns1__SrvConfigurationContentRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREVersionRequestType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCOREVersionRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCOREVersionRequestType * soap_new_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCOREVersionRequestType * soap_new_req_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCOREVersionRequestType * soap_new_set_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_VersionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_VersionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_VersionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREVersionRequestType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCOREVersionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType * soap_new_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType * soap_new_req_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType * soap_new_set_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_DiagnosticRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_DiagnosticRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_DiagnosticRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusRequestType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCOREStatusRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCOREStatusRequestType * soap_new_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCOREStatusRequestType * soap_new_req_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCOREStatusRequestType * soap_new_set_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_StatusRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_StatusRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_StatusRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusRequestType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCOREStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType * soap_new_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType * soap_new_req_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType * soap_new_set_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_AlarmRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_AlarmRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_AlarmRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CommandParamCCTIUType_DEFINED
#define SOAP_TYPE_ns1__CommandParamCCTIUType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CommandParamCCTIUType(struct soap*, const char*, int, const ns1__CommandParamCCTIUType *, const char*);
SOAP_FMAC3 ns1__CommandParamCCTIUType * SOAP_FMAC4 soap_in_ns1__CommandParamCCTIUType(struct soap*, const char*, ns1__CommandParamCCTIUType *, const char*);
SOAP_FMAC1 ns1__CommandParamCCTIUType * SOAP_FMAC2 soap_instantiate_ns1__CommandParamCCTIUType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CommandParamCCTIUType * soap_new_ns1__CommandParamCCTIUType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CommandParamCCTIUType(soap, n, NULL, NULL, NULL);
}

inline ns1__CommandParamCCTIUType * soap_new_req_ns1__CommandParamCCTIUType(
	struct soap *soap,
	unsigned int code,
	ns1__ValueType *value)
{
	ns1__CommandParamCCTIUType *_p = soap_new_ns1__CommandParamCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CommandParamCCTIUType::code = code;
		_p->ns1__CommandParamCCTIUType::value = value;
	}
	return _p;
}

inline ns1__CommandParamCCTIUType * soap_new_set_ns1__CommandParamCCTIUType(
	struct soap *soap,
	unsigned int code,
	ns1__ValueType *value,
	char *__item__1)
{
	ns1__CommandParamCCTIUType *_p = soap_new_ns1__CommandParamCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CommandParamCCTIUType::code = code;
		_p->ns1__CommandParamCCTIUType::value = value;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__CommandParamCCTIUType(struct soap *soap, ns1__CommandParamCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandParamCCTIUType", p->soap_type() == SOAP_TYPE_ns1__CommandParamCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CommandParamCCTIUType(struct soap *soap, const char *URL, ns1__CommandParamCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandParamCCTIUType", p->soap_type() == SOAP_TYPE_ns1__CommandParamCCTIUType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CommandParamCCTIUType(struct soap *soap, const char *URL, ns1__CommandParamCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandParamCCTIUType", p->soap_type() == SOAP_TYPE_ns1__CommandParamCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CommandParamCCTIUType * SOAP_FMAC4 soap_get_ns1__CommandParamCCTIUType(struct soap*, ns1__CommandParamCCTIUType *, const char*, const char*);

inline int soap_read_ns1__CommandParamCCTIUType(struct soap *soap, ns1__CommandParamCCTIUType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CommandParamCCTIUType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CommandParamCCTIUType(struct soap *soap, const char *URL, ns1__CommandParamCCTIUType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CommandParamCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CommandParamCCTIUType(struct soap *soap, ns1__CommandParamCCTIUType *p)
{
	if (soap_read_ns1__CommandParamCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CommandParamCCTIUListType_DEFINED
#define SOAP_TYPE_ns1__CommandParamCCTIUListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CommandParamCCTIUListType(struct soap*, const char*, int, const ns1__CommandParamCCTIUListType *, const char*);
SOAP_FMAC3 ns1__CommandParamCCTIUListType * SOAP_FMAC4 soap_in_ns1__CommandParamCCTIUListType(struct soap*, const char*, ns1__CommandParamCCTIUListType *, const char*);
SOAP_FMAC1 ns1__CommandParamCCTIUListType * SOAP_FMAC2 soap_instantiate_ns1__CommandParamCCTIUListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CommandParamCCTIUListType * soap_new_ns1__CommandParamCCTIUListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CommandParamCCTIUListType(soap, n, NULL, NULL, NULL);
}

inline ns1__CommandParamCCTIUListType * soap_new_req_ns1__CommandParamCCTIUListType(
	struct soap *soap,
	int __sizeitems,
	ns1__CommandParamCCTIUType **items)
{
	ns1__CommandParamCCTIUListType *_p = soap_new_ns1__CommandParamCCTIUListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CommandParamCCTIUListType::__sizeitems = __sizeitems;
		_p->ns1__CommandParamCCTIUListType::items = items;
	}
	return _p;
}

inline ns1__CommandParamCCTIUListType * soap_new_set_ns1__CommandParamCCTIUListType(
	struct soap *soap,
	int __sizeitems,
	ns1__CommandParamCCTIUType **items,
	char *__item__1)
{
	ns1__CommandParamCCTIUListType *_p = soap_new_ns1__CommandParamCCTIUListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CommandParamCCTIUListType::__sizeitems = __sizeitems;
		_p->ns1__CommandParamCCTIUListType::items = items;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__CommandParamCCTIUListType(struct soap *soap, ns1__CommandParamCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandParamCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__CommandParamCCTIUListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CommandParamCCTIUListType(struct soap *soap, const char *URL, ns1__CommandParamCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandParamCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__CommandParamCCTIUListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CommandParamCCTIUListType(struct soap *soap, const char *URL, ns1__CommandParamCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandParamCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__CommandParamCCTIUListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CommandParamCCTIUListType * SOAP_FMAC4 soap_get_ns1__CommandParamCCTIUListType(struct soap*, ns1__CommandParamCCTIUListType *, const char*, const char*);

inline int soap_read_ns1__CommandParamCCTIUListType(struct soap *soap, ns1__CommandParamCCTIUListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CommandParamCCTIUListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CommandParamCCTIUListType(struct soap *soap, const char *URL, ns1__CommandParamCCTIUListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CommandParamCCTIUListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CommandParamCCTIUListType(struct soap *soap, ns1__CommandParamCCTIUListType *p)
{
	if (soap_read_ns1__CommandParamCCTIUListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CommandCCTIUType_DEFINED
#define SOAP_TYPE_ns1__CommandCCTIUType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CommandCCTIUType(struct soap*, const char*, int, const ns1__CommandCCTIUType *, const char*);
SOAP_FMAC3 ns1__CommandCCTIUType * SOAP_FMAC4 soap_in_ns1__CommandCCTIUType(struct soap*, const char*, ns1__CommandCCTIUType *, const char*);
SOAP_FMAC1 ns1__CommandCCTIUType * SOAP_FMAC2 soap_instantiate_ns1__CommandCCTIUType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CommandCCTIUType * soap_new_ns1__CommandCCTIUType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CommandCCTIUType(soap, n, NULL, NULL, NULL);
}

inline ns1__CommandCCTIUType * soap_new_req_ns1__CommandCCTIUType(
	struct soap *soap,
	time_t dateTimeExec,
	time_t dateTimeExpired)
{
	ns1__CommandCCTIUType *_p = soap_new_ns1__CommandCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CommandCCTIUType::dateTimeExec = dateTimeExec;
		_p->ns1__CommandCCTIUType::dateTimeExpired = dateTimeExpired;
	}
	return _p;
}

inline ns1__CommandCCTIUType * soap_new_set_ns1__CommandCCTIUType(
	struct soap *soap,
	time_t dateTimeExec,
	time_t dateTimeExpired,
	ns1__CommandParamCCTIUListType *paramList,
	unsigned int *item,
	unsigned int *code,
	char *__item__1)
{
	ns1__CommandCCTIUType *_p = soap_new_ns1__CommandCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CommandCCTIUType::dateTimeExec = dateTimeExec;
		_p->ns1__CommandCCTIUType::dateTimeExpired = dateTimeExpired;
		_p->ns1__CommandCCTIUType::paramList = paramList;
		_p->ns1__CommandCCTIUType::item = item;
		_p->ns1__CommandCCTIUType::code = code;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__CommandCCTIUType(struct soap *soap, ns1__CommandCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandCCTIUType", p->soap_type() == SOAP_TYPE_ns1__CommandCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CommandCCTIUType(struct soap *soap, const char *URL, ns1__CommandCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandCCTIUType", p->soap_type() == SOAP_TYPE_ns1__CommandCCTIUType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CommandCCTIUType(struct soap *soap, const char *URL, ns1__CommandCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CommandCCTIUType", p->soap_type() == SOAP_TYPE_ns1__CommandCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CommandCCTIUType * SOAP_FMAC4 soap_get_ns1__CommandCCTIUType(struct soap*, ns1__CommandCCTIUType *, const char*, const char*);

inline int soap_read_ns1__CommandCCTIUType(struct soap *soap, ns1__CommandCCTIUType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CommandCCTIUType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CommandCCTIUType(struct soap *soap, const char *URL, ns1__CommandCCTIUType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CommandCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CommandCCTIUType(struct soap *soap, ns1__CommandCCTIUType *p)
{
	if (soap_read_ns1__CommandCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCORECommandExecRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCORECommandExecRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCORECommandExecRequestType(struct soap*, const char*, int, const ns1__SrvMTC_USCORECommandExecRequestType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecRequestType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCORECommandExecRequestType(struct soap*, const char*, ns1__SrvMTC_USCORECommandExecRequestType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCORECommandExecRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCORECommandExecRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCORECommandExecRequestType * soap_new_ns1__SrvMTC_USCORECommandExecRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCORECommandExecRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCORECommandExecRequestType * soap_new_req_ns1__SrvMTC_USCORECommandExecRequestType(
	struct soap *soap,
	ns1__CommandCCTIUType *command,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvMTC_USCORECommandExecRequestType *_p = soap_new_ns1__SrvMTC_USCORECommandExecRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORECommandExecRequestType::command = command;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCORECommandExecRequestType * soap_new_set_ns1__SrvMTC_USCORECommandExecRequestType(
	struct soap *soap,
	ns1__CommandCCTIUType *command,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCORECommandExecRequestType *_p = soap_new_ns1__SrvMTC_USCORECommandExecRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORECommandExecRequestType::command = command;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCORECommandExecRequestType(struct soap *soap, ns1__SrvMTC_USCORECommandExecRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_CommandExecRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORECommandExecRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCORECommandExecRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORECommandExecRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_CommandExecRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORECommandExecRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCORECommandExecRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORECommandExecRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_CommandExecRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORECommandExecRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecRequestType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCORECommandExecRequestType(struct soap*, ns1__SrvMTC_USCORECommandExecRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCORECommandExecRequestType(struct soap *soap, ns1__SrvMTC_USCORECommandExecRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCORECommandExecRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCORECommandExecRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORECommandExecRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCORECommandExecRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCORECommandExecRequestType(struct soap *soap, ns1__SrvMTC_USCORECommandExecRequestType *p)
{
	if (soap_read_ns1__SrvMTC_USCORECommandExecRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ValueType_DEFINED
#define SOAP_TYPE_ns1__ValueType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ValueType(struct soap*, const char*, int, const ns1__ValueType *, const char*);
SOAP_FMAC3 ns1__ValueType * SOAP_FMAC4 soap_in_ns1__ValueType(struct soap*, const char*, ns1__ValueType *, const char*);
SOAP_FMAC1 ns1__ValueType * SOAP_FMAC2 soap_instantiate_ns1__ValueType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ValueType * soap_new_ns1__ValueType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ValueType(soap, n, NULL, NULL, NULL);
}

inline ns1__ValueType * soap_new_req_ns1__ValueType(
	struct soap *soap)
{
	ns1__ValueType *_p = soap_new_ns1__ValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__ValueType * soap_new_set_ns1__ValueType(
	struct soap *soap,
	unsigned short *u32,
	unsigned short *s32,
	LONG64 *u64,
	LONG64 *s64,
	char *str,
	bool *bol,
	float *f32,
	double *f64,
	char *__item__1)
{
	ns1__ValueType *_p = soap_new_ns1__ValueType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ValueType::u32 = u32;
		_p->ns1__ValueType::s32 = s32;
		_p->ns1__ValueType::u64 = u64;
		_p->ns1__ValueType::s64 = s64;
		_p->ns1__ValueType::str = str;
		_p->ns1__ValueType::bol = bol;
		_p->ns1__ValueType::f32 = f32;
		_p->ns1__ValueType::f64 = f64;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ValueType(struct soap *soap, ns1__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValueType", p->soap_type() == SOAP_TYPE_ns1__ValueType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ValueType(struct soap *soap, const char *URL, ns1__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValueType", p->soap_type() == SOAP_TYPE_ns1__ValueType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ValueType(struct soap *soap, const char *URL, ns1__ValueType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ValueType", p->soap_type() == SOAP_TYPE_ns1__ValueType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ValueType * SOAP_FMAC4 soap_get_ns1__ValueType(struct soap*, ns1__ValueType *, const char*, const char*);

inline int soap_read_ns1__ValueType(struct soap *soap, ns1__ValueType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ValueType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ValueType(struct soap *soap, const char *URL, ns1__ValueType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ValueType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ValueType(struct soap *soap, ns1__ValueType *p)
{
	if (soap_read_ns1__ValueType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ConfigElementCCTIUType_DEFINED
#define SOAP_TYPE_ns1__ConfigElementCCTIUType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ConfigElementCCTIUType(struct soap*, const char*, int, const ns1__ConfigElementCCTIUType *, const char*);
SOAP_FMAC3 ns1__ConfigElementCCTIUType * SOAP_FMAC4 soap_in_ns1__ConfigElementCCTIUType(struct soap*, const char*, ns1__ConfigElementCCTIUType *, const char*);
SOAP_FMAC1 ns1__ConfigElementCCTIUType * SOAP_FMAC2 soap_instantiate_ns1__ConfigElementCCTIUType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ConfigElementCCTIUType * soap_new_ns1__ConfigElementCCTIUType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ConfigElementCCTIUType(soap, n, NULL, NULL, NULL);
}

inline ns1__ConfigElementCCTIUType * soap_new_req_ns1__ConfigElementCCTIUType(
	struct soap *soap,
	ns1__ValueType *value)
{
	ns1__ConfigElementCCTIUType *_p = soap_new_ns1__ConfigElementCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ConfigElementCCTIUType::value = value;
	}
	return _p;
}

inline ns1__ConfigElementCCTIUType * soap_new_set_ns1__ConfigElementCCTIUType(
	struct soap *soap,
	ns1__ValueType *value,
	unsigned int *item,
	unsigned int *code,
	bool *readOnly,
	char *__item__1)
{
	ns1__ConfigElementCCTIUType *_p = soap_new_ns1__ConfigElementCCTIUType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ConfigElementCCTIUType::value = value;
		_p->ns1__ConfigElementCCTIUType::item = item;
		_p->ns1__ConfigElementCCTIUType::code = code;
		_p->ns1__ConfigElementCCTIUType::readOnly = readOnly;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ConfigElementCCTIUType(struct soap *soap, ns1__ConfigElementCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigElementCCTIUType", p->soap_type() == SOAP_TYPE_ns1__ConfigElementCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ConfigElementCCTIUType(struct soap *soap, const char *URL, ns1__ConfigElementCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigElementCCTIUType", p->soap_type() == SOAP_TYPE_ns1__ConfigElementCCTIUType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ConfigElementCCTIUType(struct soap *soap, const char *URL, ns1__ConfigElementCCTIUType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigElementCCTIUType", p->soap_type() == SOAP_TYPE_ns1__ConfigElementCCTIUType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ConfigElementCCTIUType * SOAP_FMAC4 soap_get_ns1__ConfigElementCCTIUType(struct soap*, ns1__ConfigElementCCTIUType *, const char*, const char*);

inline int soap_read_ns1__ConfigElementCCTIUType(struct soap *soap, ns1__ConfigElementCCTIUType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ConfigElementCCTIUType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ConfigElementCCTIUType(struct soap *soap, const char *URL, ns1__ConfigElementCCTIUType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ConfigElementCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ConfigElementCCTIUType(struct soap *soap, ns1__ConfigElementCCTIUType *p)
{
	if (soap_read_ns1__ConfigElementCCTIUType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ConfigElementCCTIUListType_DEFINED
#define SOAP_TYPE_ns1__ConfigElementCCTIUListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ConfigElementCCTIUListType(struct soap*, const char*, int, const ns1__ConfigElementCCTIUListType *, const char*);
SOAP_FMAC3 ns1__ConfigElementCCTIUListType * SOAP_FMAC4 soap_in_ns1__ConfigElementCCTIUListType(struct soap*, const char*, ns1__ConfigElementCCTIUListType *, const char*);
SOAP_FMAC1 ns1__ConfigElementCCTIUListType * SOAP_FMAC2 soap_instantiate_ns1__ConfigElementCCTIUListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ConfigElementCCTIUListType * soap_new_ns1__ConfigElementCCTIUListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ConfigElementCCTIUListType(soap, n, NULL, NULL, NULL);
}

inline ns1__ConfigElementCCTIUListType * soap_new_req_ns1__ConfigElementCCTIUListType(
	struct soap *soap,
	int __sizeitems,
	ns1__ConfigElementCCTIUType **items)
{
	ns1__ConfigElementCCTIUListType *_p = soap_new_ns1__ConfigElementCCTIUListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ConfigElementCCTIUListType::__sizeitems = __sizeitems;
		_p->ns1__ConfigElementCCTIUListType::items = items;
	}
	return _p;
}

inline ns1__ConfigElementCCTIUListType * soap_new_set_ns1__ConfigElementCCTIUListType(
	struct soap *soap,
	int __sizeitems,
	ns1__ConfigElementCCTIUType **items,
	char *__item__1)
{
	ns1__ConfigElementCCTIUListType *_p = soap_new_ns1__ConfigElementCCTIUListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ConfigElementCCTIUListType::__sizeitems = __sizeitems;
		_p->ns1__ConfigElementCCTIUListType::items = items;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ConfigElementCCTIUListType(struct soap *soap, ns1__ConfigElementCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigElementCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__ConfigElementCCTIUListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ConfigElementCCTIUListType(struct soap *soap, const char *URL, ns1__ConfigElementCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigElementCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__ConfigElementCCTIUListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ConfigElementCCTIUListType(struct soap *soap, const char *URL, ns1__ConfigElementCCTIUListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ConfigElementCCTIUListType", p->soap_type() == SOAP_TYPE_ns1__ConfigElementCCTIUListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ConfigElementCCTIUListType * SOAP_FMAC4 soap_get_ns1__ConfigElementCCTIUListType(struct soap*, ns1__ConfigElementCCTIUListType *, const char*, const char*);

inline int soap_read_ns1__ConfigElementCCTIUListType(struct soap *soap, ns1__ConfigElementCCTIUListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ConfigElementCCTIUListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ConfigElementCCTIUListType(struct soap *soap, const char *URL, ns1__ConfigElementCCTIUListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ConfigElementCCTIUListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ConfigElementCCTIUListType(struct soap *soap, ns1__ConfigElementCCTIUListType *p)
{
	if (soap_read_ns1__ConfigElementCCTIUListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementChangeRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementChangeRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREConfigElementChangeRequestType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementChangeRequestType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREConfigElementChangeRequestType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREConfigElementChangeRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREConfigElementChangeRequestType * soap_new_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREConfigElementChangeRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREConfigElementChangeRequestType * soap_new_req_ns1__SrvMTC_USCOREConfigElementChangeRequestType(
	struct soap *soap,
	ns1__ConfigElementCCTIUListType *configElemList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvMTC_USCOREConfigElementChangeRequestType *_p = soap_new_ns1__SrvMTC_USCOREConfigElementChangeRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREConfigElementChangeRequestType::configElemList = configElemList;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREConfigElementChangeRequestType * soap_new_set_ns1__SrvMTC_USCOREConfigElementChangeRequestType(
	struct soap *soap,
	ns1__ConfigElementCCTIUListType *configElemList,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREConfigElementChangeRequestType *_p = soap_new_ns1__SrvMTC_USCOREConfigElementChangeRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCOREConfigElementChangeRequestType::configElemList = configElemList;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementChangeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementChangeRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementChangeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementChangeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementChangeRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementChangeRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementChangeRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementChangeRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementChangeRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementChangeRequestType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap*, ns1__SrvMTC_USCOREConfigElementChangeRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementChangeRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREConfigElementChangeRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementChangeRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREConfigElementChangeRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementChangeRequestType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREConfigElementChangeRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREConfigElementRequestType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementRequestType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREConfigElementRequestType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREConfigElementRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREConfigElementRequestType * soap_new_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREConfigElementRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREConfigElementRequestType * soap_new_req_ns1__SrvMTC_USCOREConfigElementRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvMTC_USCOREConfigElementRequestType *_p = soap_new_ns1__SrvMTC_USCOREConfigElementRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREConfigElementRequestType * soap_new_set_ns1__SrvMTC_USCOREConfigElementRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREConfigElementRequestType *_p = soap_new_ns1__SrvMTC_USCOREConfigElementRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_ConfigElementRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREConfigElementRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementRequestType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap*, ns1__SrvMTC_USCOREConfigElementRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREConfigElementRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREConfigElementRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREConfigElementRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREConfigElementRequestType(struct soap *soap, ns1__SrvMTC_USCOREConfigElementRequestType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREConfigElementRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREVersionRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREVersionRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREVersionRequestType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREVersionRequestType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREVersionRequestType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREVersionRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREVersionRequestType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREVersionRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREVersionRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREVersionRequestType * soap_new_ns1__SrvMTC_USCOREVersionRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREVersionRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREVersionRequestType * soap_new_req_ns1__SrvMTC_USCOREVersionRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvMTC_USCOREVersionRequestType *_p = soap_new_ns1__SrvMTC_USCOREVersionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREVersionRequestType * soap_new_set_ns1__SrvMTC_USCOREVersionRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREVersionRequestType *_p = soap_new_ns1__SrvMTC_USCOREVersionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREVersionRequestType(struct soap *soap, ns1__SrvMTC_USCOREVersionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_VersionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREVersionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREVersionRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREVersionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_VersionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREVersionRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREVersionRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREVersionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_VersionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREVersionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREVersionRequestType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREVersionRequestType(struct soap*, ns1__SrvMTC_USCOREVersionRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREVersionRequestType(struct soap *soap, ns1__SrvMTC_USCOREVersionRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREVersionRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREVersionRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREVersionRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREVersionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREVersionRequestType(struct soap *soap, ns1__SrvMTC_USCOREVersionRequestType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREVersionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREDiagnosticRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREDiagnosticRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREDiagnosticRequestType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREDiagnosticRequestType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREDiagnosticRequestType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREDiagnosticRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREDiagnosticRequestType * soap_new_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREDiagnosticRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREDiagnosticRequestType * soap_new_req_ns1__SrvMTC_USCOREDiagnosticRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvMTC_USCOREDiagnosticRequestType *_p = soap_new_ns1__SrvMTC_USCOREDiagnosticRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREDiagnosticRequestType * soap_new_set_ns1__SrvMTC_USCOREDiagnosticRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREDiagnosticRequestType *_p = soap_new_ns1__SrvMTC_USCOREDiagnosticRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap *soap, ns1__SrvMTC_USCOREDiagnosticRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_DiagnosticRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREDiagnosticRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREDiagnosticRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_DiagnosticRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREDiagnosticRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREDiagnosticRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_DiagnosticRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREDiagnosticRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREDiagnosticRequestType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap*, ns1__SrvMTC_USCOREDiagnosticRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap *soap, ns1__SrvMTC_USCOREDiagnosticRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREDiagnosticRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREDiagnosticRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREDiagnosticRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREDiagnosticRequestType(struct soap *soap, ns1__SrvMTC_USCOREDiagnosticRequestType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREDiagnosticRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREStatusRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREStatusRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREStatusRequestType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREStatusRequestType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusRequestType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREStatusRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREStatusRequestType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREStatusRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREStatusRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREStatusRequestType * soap_new_ns1__SrvMTC_USCOREStatusRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREStatusRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREStatusRequestType * soap_new_req_ns1__SrvMTC_USCOREStatusRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvMTC_USCOREStatusRequestType *_p = soap_new_ns1__SrvMTC_USCOREStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREStatusRequestType * soap_new_set_ns1__SrvMTC_USCOREStatusRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREStatusRequestType *_p = soap_new_ns1__SrvMTC_USCOREStatusRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREStatusRequestType(struct soap *soap, ns1__SrvMTC_USCOREStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_StatusRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREStatusRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_StatusRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREStatusRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREStatusRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREStatusRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_StatusRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREStatusRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusRequestType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREStatusRequestType(struct soap*, ns1__SrvMTC_USCOREStatusRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREStatusRequestType(struct soap *soap, ns1__SrvMTC_USCOREStatusRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREStatusRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREStatusRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREStatusRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREStatusRequestType(struct soap *soap, ns1__SrvMTC_USCOREStatusRequestType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREStatusRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCOREAlarmRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCOREAlarmRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCOREAlarmRequestType(struct soap*, const char*, int, const ns1__SrvMTC_USCOREAlarmRequestType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmRequestType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCOREAlarmRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREAlarmRequestType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCOREAlarmRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCOREAlarmRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCOREAlarmRequestType * soap_new_ns1__SrvMTC_USCOREAlarmRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCOREAlarmRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCOREAlarmRequestType * soap_new_req_ns1__SrvMTC_USCOREAlarmRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvMTC_USCOREAlarmRequestType *_p = soap_new_ns1__SrvMTC_USCOREAlarmRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCOREAlarmRequestType * soap_new_set_ns1__SrvMTC_USCOREAlarmRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCOREAlarmRequestType *_p = soap_new_ns1__SrvMTC_USCOREAlarmRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCOREAlarmRequestType(struct soap *soap, ns1__SrvMTC_USCOREAlarmRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_AlarmRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREAlarmRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCOREAlarmRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREAlarmRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_AlarmRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREAlarmRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCOREAlarmRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREAlarmRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_AlarmRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCOREAlarmRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmRequestType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCOREAlarmRequestType(struct soap*, ns1__SrvMTC_USCOREAlarmRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCOREAlarmRequestType(struct soap *soap, ns1__SrvMTC_USCOREAlarmRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCOREAlarmRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCOREAlarmRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCOREAlarmRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCOREAlarmRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCOREAlarmRequestType(struct soap *soap, ns1__SrvMTC_USCOREAlarmRequestType *p)
{
	if (soap_read_ns1__SrvMTC_USCOREAlarmRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvStateRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvStateRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvStateRequestType(struct soap*, const char*, int, const ns1__SrvStateRequestType *, const char*);
SOAP_FMAC3 ns1__SrvStateRequestType * SOAP_FMAC4 soap_in_ns1__SrvStateRequestType(struct soap*, const char*, ns1__SrvStateRequestType *, const char*);
SOAP_FMAC1 ns1__SrvStateRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvStateRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvStateRequestType * soap_new_ns1__SrvStateRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvStateRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvStateRequestType * soap_new_req_ns1__SrvStateRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvStateRequestType *_p = soap_new_ns1__SrvStateRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvStateRequestType * soap_new_set_ns1__SrvStateRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvStateRequestType *_p = soap_new_ns1__SrvStateRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvStateRequestType(struct soap *soap, ns1__SrvStateRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvStateRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvStateRequestType(struct soap *soap, const char *URL, ns1__SrvStateRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvStateRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvStateRequestType(struct soap *soap, const char *URL, ns1__SrvStateRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvStateRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvStateRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvStateRequestType * SOAP_FMAC4 soap_get_ns1__SrvStateRequestType(struct soap*, ns1__SrvStateRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvStateRequestType(struct soap *soap, ns1__SrvStateRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvStateRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvStateRequestType(struct soap *soap, const char *URL, ns1__SrvStateRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvStateRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvStateRequestType(struct soap *soap, ns1__SrvStateRequestType *p)
{
	if (soap_read_ns1__SrvStateRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap*, const char*, int, const ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionRequestType * SOAP_FMAC4 soap_in_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *, const char*);
SOAP_FMAC1 ns1__SrvFE_USCOREMTC_USCORETransactionRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvFE_USCOREMTC_USCORETransactionRequestType * soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvFE_USCOREMTC_USCORETransactionRequestType * soap_new_req_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvFE_USCOREMTC_USCORETransactionRequestType * soap_new_set_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(
	struct soap *soap,
	ns1__TransactionMTCIdRangeListType *rngList,
	ns1__TransactionMTCIdRangeType *rng,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *_p = soap_new_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionRequestType::rngList = rngList;
		_p->ns1__SrvFE_USCOREMTC_USCORETransactionRequestType::rng = rng;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvFE_MTC_TransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionRequestType * SOAP_FMAC4 soap_get_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap *soap, const char *URL, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap *soap, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *p)
{
	if (soap_read_ns1__SrvFE_USCOREMTC_USCORETransactionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MTC_USCORETransactionIdType_DEFINED
#define SOAP_TYPE_ns1__MTC_USCORETransactionIdType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MTC_USCORETransactionIdType(struct soap*, const char*, int, const ns1__MTC_USCORETransactionIdType *, const char*);
SOAP_FMAC3 ns1__MTC_USCORETransactionIdType * SOAP_FMAC4 soap_in_ns1__MTC_USCORETransactionIdType(struct soap*, const char*, ns1__MTC_USCORETransactionIdType *, const char*);
SOAP_FMAC1 ns1__MTC_USCORETransactionIdType * SOAP_FMAC2 soap_instantiate_ns1__MTC_USCORETransactionIdType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MTC_USCORETransactionIdType * soap_new_ns1__MTC_USCORETransactionIdType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MTC_USCORETransactionIdType(soap, n, NULL, NULL, NULL);
}

inline ns1__MTC_USCORETransactionIdType * soap_new_req_ns1__MTC_USCORETransactionIdType(
	struct soap *soap,
	unsigned int secElemId,
	unsigned int sequence)
{
	ns1__MTC_USCORETransactionIdType *_p = soap_new_ns1__MTC_USCORETransactionIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORETransactionIdType::secElemId = secElemId;
		_p->ns1__MTC_USCORETransactionIdType::sequence = sequence;
	}
	return _p;
}

inline ns1__MTC_USCORETransactionIdType * soap_new_set_ns1__MTC_USCORETransactionIdType(
	struct soap *soap,
	unsigned int secElemId,
	unsigned int sequence,
	char *__item__1)
{
	ns1__MTC_USCORETransactionIdType *_p = soap_new_ns1__MTC_USCORETransactionIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__MTC_USCORETransactionIdType::secElemId = secElemId;
		_p->ns1__MTC_USCORETransactionIdType::sequence = sequence;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__MTC_USCORETransactionIdType(struct soap *soap, ns1__MTC_USCORETransactionIdType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TransactionIdType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETransactionIdType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MTC_USCORETransactionIdType(struct soap *soap, const char *URL, ns1__MTC_USCORETransactionIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TransactionIdType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETransactionIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MTC_USCORETransactionIdType(struct soap *soap, const char *URL, ns1__MTC_USCORETransactionIdType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MTC_TransactionIdType", p->soap_type() == SOAP_TYPE_ns1__MTC_USCORETransactionIdType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MTC_USCORETransactionIdType * SOAP_FMAC4 soap_get_ns1__MTC_USCORETransactionIdType(struct soap*, ns1__MTC_USCORETransactionIdType *, const char*, const char*);

inline int soap_read_ns1__MTC_USCORETransactionIdType(struct soap *soap, ns1__MTC_USCORETransactionIdType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MTC_USCORETransactionIdType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MTC_USCORETransactionIdType(struct soap *soap, const char *URL, ns1__MTC_USCORETransactionIdType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MTC_USCORETransactionIdType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MTC_USCORETransactionIdType(struct soap *soap, ns1__MTC_USCORETransactionIdType *p)
{
	if (soap_read_ns1__MTC_USCORETransactionIdType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TransactionMTCIdRangeType_DEFINED
#define SOAP_TYPE_ns1__TransactionMTCIdRangeType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransactionMTCIdRangeType(struct soap*, const char*, int, const ns1__TransactionMTCIdRangeType *, const char*);
SOAP_FMAC3 ns1__TransactionMTCIdRangeType * SOAP_FMAC4 soap_in_ns1__TransactionMTCIdRangeType(struct soap*, const char*, ns1__TransactionMTCIdRangeType *, const char*);
SOAP_FMAC1 ns1__TransactionMTCIdRangeType * SOAP_FMAC2 soap_instantiate_ns1__TransactionMTCIdRangeType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransactionMTCIdRangeType * soap_new_ns1__TransactionMTCIdRangeType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TransactionMTCIdRangeType(soap, n, NULL, NULL, NULL);
}

inline ns1__TransactionMTCIdRangeType * soap_new_req_ns1__TransactionMTCIdRangeType(
	struct soap *soap,
	ns1__MTC_USCORETransactionIdType *s,
	ns1__MTC_USCORETransactionIdType *e)
{
	ns1__TransactionMTCIdRangeType *_p = soap_new_ns1__TransactionMTCIdRangeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCIdRangeType::s = s;
		_p->ns1__TransactionMTCIdRangeType::e = e;
	}
	return _p;
}

inline ns1__TransactionMTCIdRangeType * soap_new_set_ns1__TransactionMTCIdRangeType(
	struct soap *soap,
	ns1__MTC_USCORETransactionIdType *s,
	ns1__MTC_USCORETransactionIdType *e,
	char *__item__1)
{
	ns1__TransactionMTCIdRangeType *_p = soap_new_ns1__TransactionMTCIdRangeType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCIdRangeType::s = s;
		_p->ns1__TransactionMTCIdRangeType::e = e;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__TransactionMTCIdRangeType(struct soap *soap, ns1__TransactionMTCIdRangeType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCIdRangeType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCIdRangeType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TransactionMTCIdRangeType(struct soap *soap, const char *URL, ns1__TransactionMTCIdRangeType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCIdRangeType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCIdRangeType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TransactionMTCIdRangeType(struct soap *soap, const char *URL, ns1__TransactionMTCIdRangeType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCIdRangeType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCIdRangeType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TransactionMTCIdRangeType * SOAP_FMAC4 soap_get_ns1__TransactionMTCIdRangeType(struct soap*, ns1__TransactionMTCIdRangeType *, const char*, const char*);

inline int soap_read_ns1__TransactionMTCIdRangeType(struct soap *soap, ns1__TransactionMTCIdRangeType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TransactionMTCIdRangeType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TransactionMTCIdRangeType(struct soap *soap, const char *URL, ns1__TransactionMTCIdRangeType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TransactionMTCIdRangeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TransactionMTCIdRangeType(struct soap *soap, ns1__TransactionMTCIdRangeType *p)
{
	if (soap_read_ns1__TransactionMTCIdRangeType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__TransactionMTCIdRangeListType_DEFINED
#define SOAP_TYPE_ns1__TransactionMTCIdRangeListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__TransactionMTCIdRangeListType(struct soap*, const char*, int, const ns1__TransactionMTCIdRangeListType *, const char*);
SOAP_FMAC3 ns1__TransactionMTCIdRangeListType * SOAP_FMAC4 soap_in_ns1__TransactionMTCIdRangeListType(struct soap*, const char*, ns1__TransactionMTCIdRangeListType *, const char*);
SOAP_FMAC1 ns1__TransactionMTCIdRangeListType * SOAP_FMAC2 soap_instantiate_ns1__TransactionMTCIdRangeListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__TransactionMTCIdRangeListType * soap_new_ns1__TransactionMTCIdRangeListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__TransactionMTCIdRangeListType(soap, n, NULL, NULL, NULL);
}

inline ns1__TransactionMTCIdRangeListType * soap_new_req_ns1__TransactionMTCIdRangeListType(
	struct soap *soap,
	int __sizerng,
	ns1__TransactionMTCIdRangeType **rng)
{
	ns1__TransactionMTCIdRangeListType *_p = soap_new_ns1__TransactionMTCIdRangeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCIdRangeListType::__sizerng = __sizerng;
		_p->ns1__TransactionMTCIdRangeListType::rng = rng;
	}
	return _p;
}

inline ns1__TransactionMTCIdRangeListType * soap_new_set_ns1__TransactionMTCIdRangeListType(
	struct soap *soap,
	int __sizerng,
	ns1__TransactionMTCIdRangeType **rng,
	char *__item__1)
{
	ns1__TransactionMTCIdRangeListType *_p = soap_new_ns1__TransactionMTCIdRangeListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__TransactionMTCIdRangeListType::__sizerng = __sizerng;
		_p->ns1__TransactionMTCIdRangeListType::rng = rng;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__TransactionMTCIdRangeListType(struct soap *soap, ns1__TransactionMTCIdRangeListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCIdRangeListType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCIdRangeListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__TransactionMTCIdRangeListType(struct soap *soap, const char *URL, ns1__TransactionMTCIdRangeListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCIdRangeListType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCIdRangeListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__TransactionMTCIdRangeListType(struct soap *soap, const char *URL, ns1__TransactionMTCIdRangeListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:TransactionMTCIdRangeListType", p->soap_type() == SOAP_TYPE_ns1__TransactionMTCIdRangeListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__TransactionMTCIdRangeListType * SOAP_FMAC4 soap_get_ns1__TransactionMTCIdRangeListType(struct soap*, ns1__TransactionMTCIdRangeListType *, const char*, const char*);

inline int soap_read_ns1__TransactionMTCIdRangeListType(struct soap *soap, ns1__TransactionMTCIdRangeListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__TransactionMTCIdRangeListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__TransactionMTCIdRangeListType(struct soap *soap, const char *URL, ns1__TransactionMTCIdRangeListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__TransactionMTCIdRangeListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__TransactionMTCIdRangeListType(struct soap *soap, ns1__TransactionMTCIdRangeListType *p)
{
	if (soap_read_ns1__TransactionMTCIdRangeListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvMTC_USCORETransactionRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvMTC_USCORETransactionRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvMTC_USCORETransactionRequestType(struct soap*, const char*, int, const ns1__SrvMTC_USCORETransactionRequestType *, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionRequestType * SOAP_FMAC4 soap_in_ns1__SrvMTC_USCORETransactionRequestType(struct soap*, const char*, ns1__SrvMTC_USCORETransactionRequestType *, const char*);
SOAP_FMAC1 ns1__SrvMTC_USCORETransactionRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvMTC_USCORETransactionRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvMTC_USCORETransactionRequestType * soap_new_ns1__SrvMTC_USCORETransactionRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvMTC_USCORETransactionRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvMTC_USCORETransactionRequestType * soap_new_req_ns1__SrvMTC_USCORETransactionRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvMTC_USCORETransactionRequestType *_p = soap_new_ns1__SrvMTC_USCORETransactionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvMTC_USCORETransactionRequestType * soap_new_set_ns1__SrvMTC_USCORETransactionRequestType(
	struct soap *soap,
	ns1__TransactionMTCIdRangeListType *rngList,
	ns1__TransactionMTCIdRangeType *rng,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvMTC_USCORETransactionRequestType *_p = soap_new_ns1__SrvMTC_USCORETransactionRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvMTC_USCORETransactionRequestType::rngList = rngList;
		_p->ns1__SrvMTC_USCORETransactionRequestType::rng = rng;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvMTC_USCORETransactionRequestType(struct soap *soap, ns1__SrvMTC_USCORETransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvMTC_USCORETransactionRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvMTC_USCORETransactionRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvMTC_TransactionRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvMTC_USCORETransactionRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionRequestType * SOAP_FMAC4 soap_get_ns1__SrvMTC_USCORETransactionRequestType(struct soap*, ns1__SrvMTC_USCORETransactionRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvMTC_USCORETransactionRequestType(struct soap *soap, ns1__SrvMTC_USCORETransactionRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvMTC_USCORETransactionRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvMTC_USCORETransactionRequestType(struct soap *soap, const char *URL, ns1__SrvMTC_USCORETransactionRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvMTC_USCORETransactionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvMTC_USCORETransactionRequestType(struct soap *soap, ns1__SrvMTC_USCORETransactionRequestType *p)
{
	if (soap_read_ns1__SrvMTC_USCORETransactionRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Parameter_DEFINED
#define SOAP_TYPE_ns1__Parameter_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Parameter(struct soap*, const char*, int, const ns1__Parameter *, const char*);
SOAP_FMAC3 ns1__Parameter * SOAP_FMAC4 soap_in_ns1__Parameter(struct soap*, const char*, ns1__Parameter *, const char*);
SOAP_FMAC1 ns1__Parameter * SOAP_FMAC2 soap_instantiate_ns1__Parameter(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Parameter * soap_new_ns1__Parameter(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Parameter(soap, n, NULL, NULL, NULL);
}

inline ns1__Parameter * soap_new_req_ns1__Parameter(
	struct soap *soap,
	char *name,
	char *value)
{
	ns1__Parameter *_p = soap_new_ns1__Parameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Parameter::name = name;
		_p->ns1__Parameter::value = value;
	}
	return _p;
}

inline ns1__Parameter * soap_new_set_ns1__Parameter(
	struct soap *soap,
	char *name,
	char *value,
	char *__item__1)
{
	ns1__Parameter *_p = soap_new_ns1__Parameter(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__Parameter::name = name;
		_p->ns1__Parameter::value = value;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__Parameter(struct soap *soap, ns1__Parameter const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Parameter", p->soap_type() == SOAP_TYPE_ns1__Parameter ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Parameter(struct soap *soap, const char *URL, ns1__Parameter const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Parameter", p->soap_type() == SOAP_TYPE_ns1__Parameter ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Parameter(struct soap *soap, const char *URL, ns1__Parameter const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Parameter", p->soap_type() == SOAP_TYPE_ns1__Parameter ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Parameter * SOAP_FMAC4 soap_get_ns1__Parameter(struct soap*, ns1__Parameter *, const char*, const char*);

inline int soap_read_ns1__Parameter(struct soap *soap, ns1__Parameter *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Parameter(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Parameter(struct soap *soap, const char *URL, ns1__Parameter *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Parameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Parameter(struct soap *soap, ns1__Parameter *p)
{
	if (soap_read_ns1__Parameter(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__ParameterList_DEFINED
#define SOAP_TYPE_ns1__ParameterList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ParameterList(struct soap*, const char*, int, const ns1__ParameterList *, const char*);
SOAP_FMAC3 ns1__ParameterList * SOAP_FMAC4 soap_in_ns1__ParameterList(struct soap*, const char*, ns1__ParameterList *, const char*);
SOAP_FMAC1 ns1__ParameterList * SOAP_FMAC2 soap_instantiate_ns1__ParameterList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ParameterList * soap_new_ns1__ParameterList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__ParameterList(soap, n, NULL, NULL, NULL);
}

inline ns1__ParameterList * soap_new_req_ns1__ParameterList(
	struct soap *soap,
	int __sizeparam,
	ns1__Parameter **param)
{
	ns1__ParameterList *_p = soap_new_ns1__ParameterList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ParameterList::__sizeparam = __sizeparam;
		_p->ns1__ParameterList::param = param;
	}
	return _p;
}

inline ns1__ParameterList * soap_new_set_ns1__ParameterList(
	struct soap *soap,
	int __sizeparam,
	ns1__Parameter **param,
	char *__item__1)
{
	ns1__ParameterList *_p = soap_new_ns1__ParameterList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__ParameterList::__sizeparam = __sizeparam;
		_p->ns1__ParameterList::param = param;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__ParameterList(struct soap *soap, ns1__ParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParameterList", p->soap_type() == SOAP_TYPE_ns1__ParameterList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__ParameterList(struct soap *soap, const char *URL, ns1__ParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParameterList", p->soap_type() == SOAP_TYPE_ns1__ParameterList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__ParameterList(struct soap *soap, const char *URL, ns1__ParameterList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:ParameterList", p->soap_type() == SOAP_TYPE_ns1__ParameterList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__ParameterList * SOAP_FMAC4 soap_get_ns1__ParameterList(struct soap*, ns1__ParameterList *, const char*, const char*);

inline int soap_read_ns1__ParameterList(struct soap *soap, ns1__ParameterList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__ParameterList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__ParameterList(struct soap *soap, const char *URL, ns1__ParameterList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__ParameterList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__ParameterList(struct soap *soap, ns1__ParameterList *p)
{
	if (soap_read_ns1__ParameterList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__CustomRecordRequest_DEFINED
#define SOAP_TYPE_ns1__CustomRecordRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CustomRecordRequest(struct soap*, const char*, int, const ns1__CustomRecordRequest *, const char*);
SOAP_FMAC3 ns1__CustomRecordRequest * SOAP_FMAC4 soap_in_ns1__CustomRecordRequest(struct soap*, const char*, ns1__CustomRecordRequest *, const char*);
SOAP_FMAC1 ns1__CustomRecordRequest * SOAP_FMAC2 soap_instantiate_ns1__CustomRecordRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CustomRecordRequest * soap_new_ns1__CustomRecordRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__CustomRecordRequest(soap, n, NULL, NULL, NULL);
}

inline ns1__CustomRecordRequest * soap_new_req_ns1__CustomRecordRequest(
	struct soap *soap,
	ns1__ParameterList *paramList,
	unsigned int recordTypeId)
{
	ns1__CustomRecordRequest *_p = soap_new_ns1__CustomRecordRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CustomRecordRequest::paramList = paramList;
		_p->ns1__CustomRecordRequest::recordTypeId = recordTypeId;
	}
	return _p;
}

inline ns1__CustomRecordRequest * soap_new_set_ns1__CustomRecordRequest(
	struct soap *soap,
	ns1__ParameterList *paramList,
	unsigned int recordTypeId,
	char *__item__1)
{
	ns1__CustomRecordRequest *_p = soap_new_ns1__CustomRecordRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__CustomRecordRequest::paramList = paramList;
		_p->ns1__CustomRecordRequest::recordTypeId = recordTypeId;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__CustomRecordRequest(struct soap *soap, ns1__CustomRecordRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CustomRecordRequest", p->soap_type() == SOAP_TYPE_ns1__CustomRecordRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__CustomRecordRequest(struct soap *soap, const char *URL, ns1__CustomRecordRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CustomRecordRequest", p->soap_type() == SOAP_TYPE_ns1__CustomRecordRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__CustomRecordRequest(struct soap *soap, const char *URL, ns1__CustomRecordRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CustomRecordRequest", p->soap_type() == SOAP_TYPE_ns1__CustomRecordRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__CustomRecordRequest * SOAP_FMAC4 soap_get_ns1__CustomRecordRequest(struct soap*, ns1__CustomRecordRequest *, const char*, const char*);

inline int soap_read_ns1__CustomRecordRequest(struct soap *soap, ns1__CustomRecordRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__CustomRecordRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__CustomRecordRequest(struct soap *soap, const char *URL, ns1__CustomRecordRequest *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__CustomRecordRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__CustomRecordRequest(struct soap *soap, ns1__CustomRecordRequest *p)
{
	if (soap_read_ns1__CustomRecordRequest(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RecordIdType_DEFINED
#define SOAP_TYPE_ns1__RecordIdType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecordIdType(struct soap*, const char*, int, const ns1__RecordIdType *, const char*);
SOAP_FMAC3 ns1__RecordIdType * SOAP_FMAC4 soap_in_ns1__RecordIdType(struct soap*, const char*, ns1__RecordIdType *, const char*);
SOAP_FMAC1 ns1__RecordIdType * SOAP_FMAC2 soap_instantiate_ns1__RecordIdType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecordIdType * soap_new_ns1__RecordIdType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecordIdType(soap, n, NULL, NULL, NULL);
}

inline ns1__RecordIdType * soap_new_req_ns1__RecordIdType(
	struct soap *soap,
	unsigned int eId,
	unsigned int uSeq,
	time_t date)
{
	ns1__RecordIdType *_p = soap_new_ns1__RecordIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordIdType::eId = eId;
		_p->ns1__RecordIdType::uSeq = uSeq;
		_p->ns1__RecordIdType::date = date;
	}
	return _p;
}

inline ns1__RecordIdType * soap_new_set_ns1__RecordIdType(
	struct soap *soap,
	unsigned int eId,
	unsigned int uSeq,
	time_t date,
	char *__item__1)
{
	ns1__RecordIdType *_p = soap_new_ns1__RecordIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordIdType::eId = eId;
		_p->ns1__RecordIdType::uSeq = uSeq;
		_p->ns1__RecordIdType::date = date;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__RecordIdType(struct soap *soap, ns1__RecordIdType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordIdType", p->soap_type() == SOAP_TYPE_ns1__RecordIdType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecordIdType(struct soap *soap, const char *URL, ns1__RecordIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordIdType", p->soap_type() == SOAP_TYPE_ns1__RecordIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecordIdType(struct soap *soap, const char *URL, ns1__RecordIdType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordIdType", p->soap_type() == SOAP_TYPE_ns1__RecordIdType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecordIdType * SOAP_FMAC4 soap_get_ns1__RecordIdType(struct soap*, ns1__RecordIdType *, const char*, const char*);

inline int soap_read_ns1__RecordIdType(struct soap *soap, ns1__RecordIdType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RecordIdType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecordIdType(struct soap *soap, const char *URL, ns1__RecordIdType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RecordIdType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RecordIdType(struct soap *soap, ns1__RecordIdType *p)
{
	if (soap_read_ns1__RecordIdType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RecordRangeIdType_DEFINED
#define SOAP_TYPE_ns1__RecordRangeIdType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecordRangeIdType(struct soap*, const char*, int, const ns1__RecordRangeIdType *, const char*);
SOAP_FMAC3 ns1__RecordRangeIdType * SOAP_FMAC4 soap_in_ns1__RecordRangeIdType(struct soap*, const char*, ns1__RecordRangeIdType *, const char*);
SOAP_FMAC1 ns1__RecordRangeIdType * SOAP_FMAC2 soap_instantiate_ns1__RecordRangeIdType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecordRangeIdType * soap_new_ns1__RecordRangeIdType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecordRangeIdType(soap, n, NULL, NULL, NULL);
}

inline ns1__RecordRangeIdType * soap_new_req_ns1__RecordRangeIdType(
	struct soap *soap,
	ns1__RecordIdType *s,
	ns1__RecordIdType *e)
{
	ns1__RecordRangeIdType *_p = soap_new_ns1__RecordRangeIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordRangeIdType::s = s;
		_p->ns1__RecordRangeIdType::e = e;
	}
	return _p;
}

inline ns1__RecordRangeIdType * soap_new_set_ns1__RecordRangeIdType(
	struct soap *soap,
	ns1__RecordIdType *s,
	ns1__RecordIdType *e,
	char *__item__1)
{
	ns1__RecordRangeIdType *_p = soap_new_ns1__RecordRangeIdType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordRangeIdType::s = s;
		_p->ns1__RecordRangeIdType::e = e;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__RecordRangeIdType(struct soap *soap, ns1__RecordRangeIdType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordRangeIdType", p->soap_type() == SOAP_TYPE_ns1__RecordRangeIdType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecordRangeIdType(struct soap *soap, const char *URL, ns1__RecordRangeIdType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordRangeIdType", p->soap_type() == SOAP_TYPE_ns1__RecordRangeIdType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecordRangeIdType(struct soap *soap, const char *URL, ns1__RecordRangeIdType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordRangeIdType", p->soap_type() == SOAP_TYPE_ns1__RecordRangeIdType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecordRangeIdType * SOAP_FMAC4 soap_get_ns1__RecordRangeIdType(struct soap*, ns1__RecordRangeIdType *, const char*, const char*);

inline int soap_read_ns1__RecordRangeIdType(struct soap *soap, ns1__RecordRangeIdType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RecordRangeIdType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecordRangeIdType(struct soap *soap, const char *URL, ns1__RecordRangeIdType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RecordRangeIdType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RecordRangeIdType(struct soap *soap, ns1__RecordRangeIdType *p)
{
	if (soap_read_ns1__RecordRangeIdType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__RecordRangeIdTypeList_DEFINED
#define SOAP_TYPE_ns1__RecordRangeIdTypeList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RecordRangeIdTypeList(struct soap*, const char*, int, const ns1__RecordRangeIdTypeList *, const char*);
SOAP_FMAC3 ns1__RecordRangeIdTypeList * SOAP_FMAC4 soap_in_ns1__RecordRangeIdTypeList(struct soap*, const char*, ns1__RecordRangeIdTypeList *, const char*);
SOAP_FMAC1 ns1__RecordRangeIdTypeList * SOAP_FMAC2 soap_instantiate_ns1__RecordRangeIdTypeList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RecordRangeIdTypeList * soap_new_ns1__RecordRangeIdTypeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__RecordRangeIdTypeList(soap, n, NULL, NULL, NULL);
}

inline ns1__RecordRangeIdTypeList * soap_new_req_ns1__RecordRangeIdTypeList(
	struct soap *soap,
	int __sizerng,
	ns1__RecordRangeIdType **rng)
{
	ns1__RecordRangeIdTypeList *_p = soap_new_ns1__RecordRangeIdTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordRangeIdTypeList::__sizerng = __sizerng;
		_p->ns1__RecordRangeIdTypeList::rng = rng;
	}
	return _p;
}

inline ns1__RecordRangeIdTypeList * soap_new_set_ns1__RecordRangeIdTypeList(
	struct soap *soap,
	int __sizerng,
	ns1__RecordRangeIdType **rng,
	char *__item__1)
{
	ns1__RecordRangeIdTypeList *_p = soap_new_ns1__RecordRangeIdTypeList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__RecordRangeIdTypeList::__sizerng = __sizerng;
		_p->ns1__RecordRangeIdTypeList::rng = rng;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__RecordRangeIdTypeList(struct soap *soap, ns1__RecordRangeIdTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordRangeIdTypeList", p->soap_type() == SOAP_TYPE_ns1__RecordRangeIdTypeList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__RecordRangeIdTypeList(struct soap *soap, const char *URL, ns1__RecordRangeIdTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordRangeIdTypeList", p->soap_type() == SOAP_TYPE_ns1__RecordRangeIdTypeList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__RecordRangeIdTypeList(struct soap *soap, const char *URL, ns1__RecordRangeIdTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:RecordRangeIdTypeList", p->soap_type() == SOAP_TYPE_ns1__RecordRangeIdTypeList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__RecordRangeIdTypeList * SOAP_FMAC4 soap_get_ns1__RecordRangeIdTypeList(struct soap*, ns1__RecordRangeIdTypeList *, const char*, const char*);

inline int soap_read_ns1__RecordRangeIdTypeList(struct soap *soap, ns1__RecordRangeIdTypeList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__RecordRangeIdTypeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__RecordRangeIdTypeList(struct soap *soap, const char *URL, ns1__RecordRangeIdTypeList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__RecordRangeIdTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__RecordRangeIdTypeList(struct soap *soap, ns1__RecordRangeIdTypeList *p)
{
	if (soap_read_ns1__RecordRangeIdTypeList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvRecordRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvRecordRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvRecordRequestType(struct soap*, const char*, int, const ns1__SrvRecordRequestType *, const char*);
SOAP_FMAC3 ns1__SrvRecordRequestType * SOAP_FMAC4 soap_in_ns1__SrvRecordRequestType(struct soap*, const char*, ns1__SrvRecordRequestType *, const char*);
SOAP_FMAC1 ns1__SrvRecordRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvRecordRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvRecordRequestType * soap_new_ns1__SrvRecordRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvRecordRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvRecordRequestType * soap_new_req_ns1__SrvRecordRequestType(
	struct soap *soap,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvRecordRequestType *_p = soap_new_ns1__SrvRecordRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvRecordRequestType * soap_new_set_ns1__SrvRecordRequestType(
	struct soap *soap,
	ns1__RecordRangeIdTypeList *rngList,
	ns1__RecordRangeIdType *rng,
	ns1__CustomRecordRequest *cutomRecordRequest,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvRecordRequestType *_p = soap_new_ns1__SrvRecordRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvRecordRequestType::rngList = rngList;
		_p->ns1__SrvRecordRequestType::rng = rng;
		_p->ns1__SrvRecordRequestType::cutomRecordRequest = cutomRecordRequest;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvRecordRequestType(struct soap *soap, ns1__SrvRecordRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvRecordRequestType(struct soap *soap, const char *URL, ns1__SrvRecordRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvRecordRequestType(struct soap *soap, const char *URL, ns1__SrvRecordRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvRecordRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvRecordRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvRecordRequestType * SOAP_FMAC4 soap_get_ns1__SrvRecordRequestType(struct soap*, ns1__SrvRecordRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvRecordRequestType(struct soap *soap, ns1__SrvRecordRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvRecordRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvRecordRequestType(struct soap *soap, const char *URL, ns1__SrvRecordRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvRecordRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvRecordRequestType(struct soap *soap, ns1__SrvRecordRequestType *p)
{
	if (soap_read_ns1__SrvRecordRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SlaveEquipmentListType_DEFINED
#define SOAP_TYPE_ns1__SlaveEquipmentListType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SlaveEquipmentListType(struct soap*, const char*, int, const ns1__SlaveEquipmentListType *, const char*);
SOAP_FMAC3 ns1__SlaveEquipmentListType * SOAP_FMAC4 soap_in_ns1__SlaveEquipmentListType(struct soap*, const char*, ns1__SlaveEquipmentListType *, const char*);
SOAP_FMAC1 ns1__SlaveEquipmentListType * SOAP_FMAC2 soap_instantiate_ns1__SlaveEquipmentListType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SlaveEquipmentListType * soap_new_ns1__SlaveEquipmentListType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SlaveEquipmentListType(soap, n, NULL, NULL, NULL);
}

inline ns1__SlaveEquipmentListType * soap_new_req_ns1__SlaveEquipmentListType(
	struct soap *soap,
	int __sizeslave,
	ns1__EquipmentReferenceType **slave)
{
	ns1__SlaveEquipmentListType *_p = soap_new_ns1__SlaveEquipmentListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlaveEquipmentListType::__sizeslave = __sizeslave;
		_p->ns1__SlaveEquipmentListType::slave = slave;
	}
	return _p;
}

inline ns1__SlaveEquipmentListType * soap_new_set_ns1__SlaveEquipmentListType(
	struct soap *soap,
	int __sizeslave,
	ns1__EquipmentReferenceType **slave,
	unsigned int *length,
	char *__item__1)
{
	ns1__SlaveEquipmentListType *_p = soap_new_ns1__SlaveEquipmentListType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SlaveEquipmentListType::__sizeslave = __sizeslave;
		_p->ns1__SlaveEquipmentListType::slave = slave;
		_p->ns1__SlaveEquipmentListType::length = length;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__SlaveEquipmentListType(struct soap *soap, ns1__SlaveEquipmentListType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveEquipmentListType", p->soap_type() == SOAP_TYPE_ns1__SlaveEquipmentListType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SlaveEquipmentListType(struct soap *soap, const char *URL, ns1__SlaveEquipmentListType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveEquipmentListType", p->soap_type() == SOAP_TYPE_ns1__SlaveEquipmentListType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SlaveEquipmentListType(struct soap *soap, const char *URL, ns1__SlaveEquipmentListType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SlaveEquipmentListType", p->soap_type() == SOAP_TYPE_ns1__SlaveEquipmentListType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SlaveEquipmentListType * SOAP_FMAC4 soap_get_ns1__SlaveEquipmentListType(struct soap*, ns1__SlaveEquipmentListType *, const char*, const char*);

inline int soap_read_ns1__SlaveEquipmentListType(struct soap *soap, ns1__SlaveEquipmentListType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SlaveEquipmentListType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SlaveEquipmentListType(struct soap *soap, const char *URL, ns1__SlaveEquipmentListType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SlaveEquipmentListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SlaveEquipmentListType(struct soap *soap, ns1__SlaveEquipmentListType *p)
{
	if (soap_read_ns1__SlaveEquipmentListType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__EquipmentReferenceType_DEFINED
#define SOAP_TYPE_ns1__EquipmentReferenceType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EquipmentReferenceType(struct soap*, const char*, int, const ns1__EquipmentReferenceType *, const char*);
SOAP_FMAC3 ns1__EquipmentReferenceType * SOAP_FMAC4 soap_in_ns1__EquipmentReferenceType(struct soap*, const char*, ns1__EquipmentReferenceType *, const char*);
SOAP_FMAC1 ns1__EquipmentReferenceType * SOAP_FMAC2 soap_instantiate_ns1__EquipmentReferenceType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EquipmentReferenceType * soap_new_ns1__EquipmentReferenceType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__EquipmentReferenceType(soap, n, NULL, NULL, NULL);
}

inline ns1__EquipmentReferenceType * soap_new_req_ns1__EquipmentReferenceType(
	struct soap *soap,
	unsigned int eId,
	unsigned int eCchs,
	unsigned int etId,
	unsigned int emId,
	unsigned int ag)
{
	ns1__EquipmentReferenceType *_p = soap_new_ns1__EquipmentReferenceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EquipmentReferenceType::eId = eId;
		_p->ns1__EquipmentReferenceType::eCchs = eCchs;
		_p->ns1__EquipmentReferenceType::etId = etId;
		_p->ns1__EquipmentReferenceType::emId = emId;
		_p->ns1__EquipmentReferenceType::ag = ag;
	}
	return _p;
}

inline ns1__EquipmentReferenceType * soap_new_set_ns1__EquipmentReferenceType(
	struct soap *soap,
	unsigned int eId,
	unsigned int eCchs,
	unsigned int etId,
	unsigned int emId,
	unsigned int ag,
	char *__item__1)
{
	ns1__EquipmentReferenceType *_p = soap_new_ns1__EquipmentReferenceType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__EquipmentReferenceType::eId = eId;
		_p->ns1__EquipmentReferenceType::eCchs = eCchs;
		_p->ns1__EquipmentReferenceType::etId = etId;
		_p->ns1__EquipmentReferenceType::emId = emId;
		_p->ns1__EquipmentReferenceType::ag = ag;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__EquipmentReferenceType(struct soap *soap, ns1__EquipmentReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentReferenceType", p->soap_type() == SOAP_TYPE_ns1__EquipmentReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__EquipmentReferenceType(struct soap *soap, const char *URL, ns1__EquipmentReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentReferenceType", p->soap_type() == SOAP_TYPE_ns1__EquipmentReferenceType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__EquipmentReferenceType(struct soap *soap, const char *URL, ns1__EquipmentReferenceType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:EquipmentReferenceType", p->soap_type() == SOAP_TYPE_ns1__EquipmentReferenceType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__EquipmentReferenceType * SOAP_FMAC4 soap_get_ns1__EquipmentReferenceType(struct soap*, ns1__EquipmentReferenceType *, const char*, const char*);

inline int soap_read_ns1__EquipmentReferenceType(struct soap *soap, ns1__EquipmentReferenceType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__EquipmentReferenceType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__EquipmentReferenceType(struct soap *soap, const char *URL, ns1__EquipmentReferenceType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__EquipmentReferenceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__EquipmentReferenceType(struct soap *soap, ns1__EquipmentReferenceType *p)
{
	if (soap_read_ns1__EquipmentReferenceType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__PatternServiceRequestType_DEFINED
#define SOAP_TYPE_ns1__PatternServiceRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PatternServiceRequestType(struct soap*, const char*, int, const ns1__PatternServiceRequestType *, const char*);
SOAP_FMAC3 ns1__PatternServiceRequestType * SOAP_FMAC4 soap_in_ns1__PatternServiceRequestType(struct soap*, const char*, ns1__PatternServiceRequestType *, const char*);
SOAP_FMAC1 ns1__PatternServiceRequestType * SOAP_FMAC2 soap_instantiate_ns1__PatternServiceRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PatternServiceRequestType * soap_new_ns1__PatternServiceRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__PatternServiceRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__PatternServiceRequestType * soap_new_req_ns1__PatternServiceRequestType(
	struct soap *soap,
	time_t dateTime,
	ns1__EquipmentReferenceType *requestFrom,
	unsigned int idMessage)
{
	ns1__PatternServiceRequestType *_p = soap_new_ns1__PatternServiceRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage;
	}
	return _p;
}

inline ns1__PatternServiceRequestType * soap_new_set_ns1__PatternServiceRequestType(
	struct soap *soap,
	time_t dateTime,
	ns1__EquipmentReferenceType *requestFrom,
	ns1__EquipmentReferenceType *requestTo,
	ns1__SlaveEquipmentListType *reqSlaveList,
	unsigned int idMessage,
	char *__item__1)
{
	ns1__PatternServiceRequestType *_p = soap_new_ns1__PatternServiceRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__PatternServiceRequestType::dateTime = dateTime;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__PatternServiceRequestType(struct soap *soap, ns1__PatternServiceRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceRequestType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__PatternServiceRequestType(struct soap *soap, const char *URL, ns1__PatternServiceRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceRequestType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__PatternServiceRequestType(struct soap *soap, const char *URL, ns1__PatternServiceRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:PatternServiceRequestType", p->soap_type() == SOAP_TYPE_ns1__PatternServiceRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__PatternServiceRequestType * SOAP_FMAC4 soap_get_ns1__PatternServiceRequestType(struct soap*, ns1__PatternServiceRequestType *, const char*, const char*);

inline int soap_read_ns1__PatternServiceRequestType(struct soap *soap, ns1__PatternServiceRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__PatternServiceRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__PatternServiceRequestType(struct soap *soap, const char *URL, ns1__PatternServiceRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__PatternServiceRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__PatternServiceRequestType(struct soap *soap, ns1__PatternServiceRequestType *p)
{
	if (soap_read_ns1__PatternServiceRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__SrvConfigurationInfoRequestType_DEFINED
#define SOAP_TYPE_ns1__SrvConfigurationInfoRequestType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__SrvConfigurationInfoRequestType(struct soap*, const char*, int, const ns1__SrvConfigurationInfoRequestType *, const char*);
SOAP_FMAC3 ns1__SrvConfigurationInfoRequestType * SOAP_FMAC4 soap_in_ns1__SrvConfigurationInfoRequestType(struct soap*, const char*, ns1__SrvConfigurationInfoRequestType *, const char*);
SOAP_FMAC1 ns1__SrvConfigurationInfoRequestType * SOAP_FMAC2 soap_instantiate_ns1__SrvConfigurationInfoRequestType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__SrvConfigurationInfoRequestType * soap_new_ns1__SrvConfigurationInfoRequestType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__SrvConfigurationInfoRequestType(soap, n, NULL, NULL, NULL);
}

inline ns1__SrvConfigurationInfoRequestType * soap_new_req_ns1__SrvConfigurationInfoRequestType(
	struct soap *soap,
	int __sizepkgId,
	unsigned int *pkgId,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	unsigned int idMessage__1)
{
	ns1__SrvConfigurationInfoRequestType *_p = soap_new_ns1__SrvConfigurationInfoRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvConfigurationInfoRequestType::__sizepkgId = __sizepkgId;
		_p->ns1__SrvConfigurationInfoRequestType::pkgId = pkgId;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
	}
	return _p;
}

inline ns1__SrvConfigurationInfoRequestType * soap_new_set_ns1__SrvConfigurationInfoRequestType(
	struct soap *soap,
	int __sizepkgId,
	unsigned int *pkgId,
	time_t dateTime__1,
	ns1__EquipmentReferenceType *requestFrom__1,
	ns1__EquipmentReferenceType *requestTo__1,
	ns1__SlaveEquipmentListType *reqSlaveList__1,
	unsigned int idMessage__1,
	char *__item__2)
{
	ns1__SrvConfigurationInfoRequestType *_p = soap_new_ns1__SrvConfigurationInfoRequestType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__SrvConfigurationInfoRequestType::__sizepkgId = __sizepkgId;
		_p->ns1__SrvConfigurationInfoRequestType::pkgId = pkgId;
		_p->ns1__PatternServiceRequestType::dateTime = dateTime__1;
		_p->ns1__PatternServiceRequestType::requestFrom = requestFrom__1;
		_p->ns1__PatternServiceRequestType::requestTo = requestTo__1;
		_p->ns1__PatternServiceRequestType::reqSlaveList = reqSlaveList__1;
		_p->ns1__PatternServiceRequestType::idMessage = idMessage__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__SrvConfigurationInfoRequestType(struct soap *soap, ns1__SrvConfigurationInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__SrvConfigurationInfoRequestType(struct soap *soap, const char *URL, ns1__SrvConfigurationInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationInfoRequestType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__SrvConfigurationInfoRequestType(struct soap *soap, const char *URL, ns1__SrvConfigurationInfoRequestType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SrvConfigurationInfoRequestType", p->soap_type() == SOAP_TYPE_ns1__SrvConfigurationInfoRequestType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__SrvConfigurationInfoRequestType * SOAP_FMAC4 soap_get_ns1__SrvConfigurationInfoRequestType(struct soap*, ns1__SrvConfigurationInfoRequestType *, const char*, const char*);

inline int soap_read_ns1__SrvConfigurationInfoRequestType(struct soap *soap, ns1__SrvConfigurationInfoRequestType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__SrvConfigurationInfoRequestType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__SrvConfigurationInfoRequestType(struct soap *soap, const char *URL, ns1__SrvConfigurationInfoRequestType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__SrvConfigurationInfoRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__SrvConfigurationInfoRequestType(struct soap *soap, ns1__SrvConfigurationInfoRequestType *p)
{
	if (soap_read_ns1__SrvConfigurationInfoRequestType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getVersionList_DEFINED
#define SOAP_TYPE_ns1__getVersionList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getVersionList(struct soap*, const char*, int, const ns1__getVersionList *, const char*);
SOAP_FMAC3 ns1__getVersionList * SOAP_FMAC4 soap_in_ns1__getVersionList(struct soap*, const char*, ns1__getVersionList *, const char*);
SOAP_FMAC1 ns1__getVersionList * SOAP_FMAC2 soap_instantiate_ns1__getVersionList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getVersionList * soap_new_ns1__getVersionList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getVersionList(soap, n, NULL, NULL, NULL);
}

inline ns1__getVersionList * soap_new_req_ns1__getVersionList(
	struct soap *soap,
	ns1__SrvConfigurationInfoRequestType *request)
{
	ns1__getVersionList *_p = soap_new_ns1__getVersionList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getVersionList::request = request;
	}
	return _p;
}

inline ns1__getVersionList * soap_new_set_ns1__getVersionList(
	struct soap *soap,
	ns1__SrvConfigurationInfoRequestType *request,
	char *__item__1)
{
	ns1__getVersionList *_p = soap_new_ns1__getVersionList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getVersionList::request = request;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getVersionList(struct soap *soap, ns1__getVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersionList", p->soap_type() == SOAP_TYPE_ns1__getVersionList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getVersionList(struct soap *soap, const char *URL, ns1__getVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersionList", p->soap_type() == SOAP_TYPE_ns1__getVersionList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getVersionList(struct soap *soap, const char *URL, ns1__getVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getVersionList", p->soap_type() == SOAP_TYPE_ns1__getVersionList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getVersionList * SOAP_FMAC4 soap_get_ns1__getVersionList(struct soap*, ns1__getVersionList *, const char*, const char*);

inline int soap_read_ns1__getVersionList(struct soap *soap, ns1__getVersionList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getVersionList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getVersionList(struct soap *soap, const char *URL, ns1__getVersionList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getVersionList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getVersionList(struct soap *soap, ns1__getVersionList *p)
{
	if (soap_read_ns1__getVersionList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getProtoVersionListResponse_DEFINED
#define SOAP_TYPE_ns1__getProtoVersionListResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProtoVersionListResponse(struct soap*, const char*, int, const ns1__getProtoVersionListResponse *, const char*);
SOAP_FMAC3 ns1__getProtoVersionListResponse * SOAP_FMAC4 soap_in_ns1__getProtoVersionListResponse(struct soap*, const char*, ns1__getProtoVersionListResponse *, const char*);
SOAP_FMAC1 ns1__getProtoVersionListResponse * SOAP_FMAC2 soap_instantiate_ns1__getProtoVersionListResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getProtoVersionListResponse * soap_new_ns1__getProtoVersionListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getProtoVersionListResponse(soap, n, NULL, NULL, NULL);
}

inline ns1__getProtoVersionListResponse * soap_new_req_ns1__getProtoVersionListResponse(
	struct soap *soap)
{
	ns1__getProtoVersionListResponse *_p = soap_new_ns1__getProtoVersionListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns1__getProtoVersionListResponse * soap_new_set_ns1__getProtoVersionListResponse(
	struct soap *soap,
	xsd__base64Binary *applicationsResult,
	char *__item__1)
{
	ns1__getProtoVersionListResponse *_p = soap_new_ns1__getProtoVersionListResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getProtoVersionListResponse::applicationsResult = applicationsResult;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getProtoVersionListResponse(struct soap *soap, ns1__getProtoVersionListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProtoVersionListResponse", p->soap_type() == SOAP_TYPE_ns1__getProtoVersionListResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getProtoVersionListResponse(struct soap *soap, const char *URL, ns1__getProtoVersionListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProtoVersionListResponse", p->soap_type() == SOAP_TYPE_ns1__getProtoVersionListResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getProtoVersionListResponse(struct soap *soap, const char *URL, ns1__getProtoVersionListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProtoVersionListResponse", p->soap_type() == SOAP_TYPE_ns1__getProtoVersionListResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getProtoVersionListResponse * SOAP_FMAC4 soap_get_ns1__getProtoVersionListResponse(struct soap*, ns1__getProtoVersionListResponse *, const char*, const char*);

inline int soap_read_ns1__getProtoVersionListResponse(struct soap *soap, ns1__getProtoVersionListResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getProtoVersionListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getProtoVersionListResponse(struct soap *soap, const char *URL, ns1__getProtoVersionListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getProtoVersionListResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getProtoVersionListResponse(struct soap *soap, ns1__getProtoVersionListResponse *p)
{
	if (soap_read_ns1__getProtoVersionListResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__getProtoVersionList_DEFINED
#define SOAP_TYPE_ns1__getProtoVersionList_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getProtoVersionList(struct soap*, const char*, int, const ns1__getProtoVersionList *, const char*);
SOAP_FMAC3 ns1__getProtoVersionList * SOAP_FMAC4 soap_in_ns1__getProtoVersionList(struct soap*, const char*, ns1__getProtoVersionList *, const char*);
SOAP_FMAC1 ns1__getProtoVersionList * SOAP_FMAC2 soap_instantiate_ns1__getProtoVersionList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__getProtoVersionList * soap_new_ns1__getProtoVersionList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__getProtoVersionList(soap, n, NULL, NULL, NULL);
}

inline ns1__getProtoVersionList * soap_new_req_ns1__getProtoVersionList(
	struct soap *soap,
	const xsd__base64Binary& request)
{
	ns1__getProtoVersionList *_p = soap_new_ns1__getProtoVersionList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getProtoVersionList::request = request;
	}
	return _p;
}

inline ns1__getProtoVersionList * soap_new_set_ns1__getProtoVersionList(
	struct soap *soap,
	const xsd__base64Binary& request,
	char *__item__1)
{
	ns1__getProtoVersionList *_p = soap_new_ns1__getProtoVersionList(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__getProtoVersionList::request = request;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__getProtoVersionList(struct soap *soap, ns1__getProtoVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProtoVersionList", p->soap_type() == SOAP_TYPE_ns1__getProtoVersionList ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__getProtoVersionList(struct soap *soap, const char *URL, ns1__getProtoVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProtoVersionList", p->soap_type() == SOAP_TYPE_ns1__getProtoVersionList ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns1__getProtoVersionList(struct soap *soap, const char *URL, ns1__getProtoVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getProtoVersionList", p->soap_type() == SOAP_TYPE_ns1__getProtoVersionList ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns1__getProtoVersionList * SOAP_FMAC4 soap_get_ns1__getProtoVersionList(struct soap*, ns1__getProtoVersionList *, const char*, const char*);

inline int soap_read_ns1__getProtoVersionList(struct soap *soap, ns1__getProtoVersionList *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__getProtoVersionList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__getProtoVersionList(struct soap *soap, const char *URL, ns1__getProtoVersionList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__getProtoVersionList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__getProtoVersionList(struct soap *soap, ns1__getProtoVersionList *p)
{
	if (soap_read_ns1__getProtoVersionList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedShort_DEFINED
#define SOAP_TYPE_xsd__unsignedShort_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap*, const char*, int, const xsd__unsignedShort *, const char*);
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap*, const char*, xsd__unsignedShort *, const char*);
SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedShort * soap_new_xsd__unsignedShort(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedShort(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedShort * soap_new_req_xsd__unsignedShort(
	struct soap *soap,
	unsigned short __item)
{
	xsd__unsignedShort *_p = soap_new_xsd__unsignedShort(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedShort::__item = __item;
	}
	return _p;
}

inline xsd__unsignedShort * soap_new_set_xsd__unsignedShort(
	struct soap *soap,
	unsigned short __item,
	char *__item__1)
{
	xsd__unsignedShort *_p = soap_new_xsd__unsignedShort(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedShort::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedShort", p->soap_type() == SOAP_TYPE_xsd__unsignedShort ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedShort(struct soap *soap, const char *URL, xsd__unsignedShort const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedShort", p->soap_type() == SOAP_TYPE_xsd__unsignedShort ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedShort(struct soap *soap, const char *URL, xsd__unsignedShort const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedShort", p->soap_type() == SOAP_TYPE_xsd__unsignedShort ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap*, xsd__unsignedShort *, const char*, const char*);

inline int soap_read_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedShort(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedShort(struct soap *soap, const char *URL, xsd__unsignedShort *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__unsignedShort(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p)
{
	if (soap_read_xsd__unsignedShort(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong_DEFINED
#define SOAP_TYPE_xsd__unsignedLong_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const xsd__unsignedLong *, const char*);
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, xsd__unsignedLong *, const char*);
SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedLong * soap_new_xsd__unsignedLong(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedLong * soap_new_req_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
	}
	return _p;
}

inline xsd__unsignedLong * soap_new_set_xsd__unsignedLong(
	struct soap *soap,
	ULONG64 __item,
	char *__item__1)
{
	xsd__unsignedLong *_p = soap_new_xsd__unsignedLong(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedLong::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedLong(struct soap *soap, const char *URL, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedLong(struct soap *soap, const char *URL, xsd__unsignedLong const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedLong", p->soap_type() == SOAP_TYPE_xsd__unsignedLong ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, xsd__unsignedLong *, const char*, const char*);

inline int soap_read_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedLong(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedLong(struct soap *soap, const char *URL, xsd__unsignedLong *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__unsignedLong(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p)
{
	if (soap_read_xsd__unsignedLong(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt_DEFINED
#define SOAP_TYPE_xsd__unsignedInt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap*, const char*, int, const xsd__unsignedInt *, const char*);
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap*, const char*, xsd__unsignedInt *, const char*);
SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedInt * soap_new_xsd__unsignedInt(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__unsignedInt(soap, n, NULL, NULL, NULL);
}

inline xsd__unsignedInt * soap_new_req_xsd__unsignedInt(
	struct soap *soap,
	unsigned int __item)
{
	xsd__unsignedInt *_p = soap_new_xsd__unsignedInt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedInt::__item = __item;
	}
	return _p;
}

inline xsd__unsignedInt * soap_new_set_xsd__unsignedInt(
	struct soap *soap,
	unsigned int __item,
	char *__item__1)
{
	xsd__unsignedInt *_p = soap_new_xsd__unsignedInt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__unsignedInt::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedInt", p->soap_type() == SOAP_TYPE_xsd__unsignedInt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__unsignedInt(struct soap *soap, const char *URL, xsd__unsignedInt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedInt", p->soap_type() == SOAP_TYPE_xsd__unsignedInt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__unsignedInt(struct soap *soap, const char *URL, xsd__unsignedInt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:unsignedInt", p->soap_type() == SOAP_TYPE_xsd__unsignedInt ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap*, xsd__unsignedInt *, const char*, const char*);

inline int soap_read_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__unsignedInt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__unsignedInt(struct soap *soap, const char *URL, xsd__unsignedInt *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p)
{
	if (soap_read_xsd__unsignedInt(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__string_DEFINED
#define SOAP_TYPE_xsd__string_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);
SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL);
}

inline xsd__string * soap_new_req_xsd__string(
	struct soap *soap)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__string * soap_new_set_xsd__string(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__string *_p = soap_new_xsd__string(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__string::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__string(struct soap *soap, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__string(struct soap *soap, const char *URL, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__string(struct soap *soap, const char *URL, xsd__string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:string", p->soap_type() == SOAP_TYPE_xsd__string ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

inline int soap_read_xsd__string(struct soap *soap, xsd__string *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__string(struct soap *soap, const char *URL, xsd__string *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__string(struct soap *soap, xsd__string *p)
{
	if (soap_read_xsd__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__positiveInteger__DEFINED
#define SOAP_TYPE_xsd__positiveInteger__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger_(struct soap*, const char*, int, const xsd__positiveInteger_ *, const char*);
SOAP_FMAC3 xsd__positiveInteger_ * SOAP_FMAC4 soap_in_xsd__positiveInteger_(struct soap*, const char*, xsd__positiveInteger_ *, const char*);
SOAP_FMAC1 xsd__positiveInteger_ * SOAP_FMAC2 soap_instantiate_xsd__positiveInteger_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__positiveInteger_ * soap_new_xsd__positiveInteger_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__positiveInteger_(soap, n, NULL, NULL, NULL);
}

inline xsd__positiveInteger_ * soap_new_req_xsd__positiveInteger_(
	struct soap *soap)
{
	xsd__positiveInteger_ *_p = soap_new_xsd__positiveInteger_(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__positiveInteger_ * soap_new_set_xsd__positiveInteger_(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__positiveInteger_ *_p = soap_new_xsd__positiveInteger_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__positiveInteger_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__positiveInteger_(struct soap *soap, xsd__positiveInteger_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:positiveInteger", p->soap_type() == SOAP_TYPE_xsd__positiveInteger_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__positiveInteger_(struct soap *soap, const char *URL, xsd__positiveInteger_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:positiveInteger", p->soap_type() == SOAP_TYPE_xsd__positiveInteger_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__positiveInteger_(struct soap *soap, const char *URL, xsd__positiveInteger_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:positiveInteger", p->soap_type() == SOAP_TYPE_xsd__positiveInteger_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__positiveInteger_ * SOAP_FMAC4 soap_get_xsd__positiveInteger_(struct soap*, xsd__positiveInteger_ *, const char*, const char*);

inline int soap_read_xsd__positiveInteger_(struct soap *soap, xsd__positiveInteger_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__positiveInteger_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__positiveInteger_(struct soap *soap, const char *URL, xsd__positiveInteger_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__positiveInteger_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__positiveInteger_(struct soap *soap, xsd__positiveInteger_ *p)
{
	if (soap_read_xsd__positiveInteger_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__long_DEFINED
#define SOAP_TYPE_xsd__long_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const xsd__long *, const char*);
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, xsd__long *, const char*);
SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap*, int, const char*, const char*, size_t*);

inline xsd__long * soap_new_xsd__long(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL);
}

inline xsd__long * soap_new_req_xsd__long(
	struct soap *soap,
	LONG64 __item)
{
	xsd__long *_p = soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
	}
	return _p;
}

inline xsd__long * soap_new_set_xsd__long(
	struct soap *soap,
	LONG64 __item,
	char *__item__1)
{
	xsd__long *_p = soap_new_xsd__long(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__long::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__long(struct soap *soap, xsd__long const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__long(struct soap *soap, const char *URL, xsd__long const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__long(struct soap *soap, const char *URL, xsd__long const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:long", p->soap_type() == SOAP_TYPE_xsd__long ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap*, xsd__long *, const char*, const char*);

inline int soap_read_xsd__long(struct soap *soap, xsd__long *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__long(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__long(struct soap *soap, const char *URL, xsd__long *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__long(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__long(struct soap *soap, xsd__long *p)
{
	if (soap_read_xsd__long(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__language__DEFINED
#define SOAP_TYPE_xsd__language__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__language_(struct soap*, const char*, int, const xsd__language_ *, const char*);
SOAP_FMAC3 xsd__language_ * SOAP_FMAC4 soap_in_xsd__language_(struct soap*, const char*, xsd__language_ *, const char*);
SOAP_FMAC1 xsd__language_ * SOAP_FMAC2 soap_instantiate_xsd__language_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__language_ * soap_new_xsd__language_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__language_(soap, n, NULL, NULL, NULL);
}

inline xsd__language_ * soap_new_req_xsd__language_(
	struct soap *soap)
{
	xsd__language_ *_p = soap_new_xsd__language_(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__language_ * soap_new_set_xsd__language_(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__language_ *_p = soap_new_xsd__language_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__language_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__language_(struct soap *soap, xsd__language_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:language", p->soap_type() == SOAP_TYPE_xsd__language_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__language_(struct soap *soap, const char *URL, xsd__language_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:language", p->soap_type() == SOAP_TYPE_xsd__language_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__language_(struct soap *soap, const char *URL, xsd__language_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:language", p->soap_type() == SOAP_TYPE_xsd__language_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__language_ * SOAP_FMAC4 soap_get_xsd__language_(struct soap*, xsd__language_ *, const char*, const char*);

inline int soap_read_xsd__language_(struct soap *soap, xsd__language_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__language_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__language_(struct soap *soap, const char *URL, xsd__language_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__language_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__language_(struct soap *soap, xsd__language_ *p)
{
	if (soap_read_xsd__language_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__integer__DEFINED
#define SOAP_TYPE_xsd__integer__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer_(struct soap*, const char*, int, const xsd__integer_ *, const char*);
SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_in_xsd__integer_(struct soap*, const char*, xsd__integer_ *, const char*);
SOAP_FMAC1 xsd__integer_ * SOAP_FMAC2 soap_instantiate_xsd__integer_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__integer_ * soap_new_xsd__integer_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__integer_(soap, n, NULL, NULL, NULL);
}

inline xsd__integer_ * soap_new_req_xsd__integer_(
	struct soap *soap)
{
	xsd__integer_ *_p = soap_new_xsd__integer_(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__integer_ * soap_new_set_xsd__integer_(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__integer_ *_p = soap_new_xsd__integer_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__integer_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__integer_(struct soap *soap, xsd__integer_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:integer", p->soap_type() == SOAP_TYPE_xsd__integer_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer_(struct soap *soap, const char *URL, xsd__integer_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:integer", p->soap_type() == SOAP_TYPE_xsd__integer_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer_(struct soap *soap, const char *URL, xsd__integer_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:integer", p->soap_type() == SOAP_TYPE_xsd__integer_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_get_xsd__integer_(struct soap*, xsd__integer_ *, const char*, const char*);

inline int soap_read_xsd__integer_(struct soap *soap, xsd__integer_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__integer_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer_(struct soap *soap, const char *URL, xsd__integer_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__integer_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__integer_(struct soap *soap, xsd__integer_ *p)
{
	if (soap_read_xsd__integer_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__int_DEFINED
#define SOAP_TYPE_xsd__int_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);
SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL);
}

inline xsd__int * soap_new_req_xsd__int(
	struct soap *soap,
	int __item)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
	}
	return _p;
}

inline xsd__int * soap_new_set_xsd__int(
	struct soap *soap,
	int __item,
	char *__item__1)
{
	xsd__int *_p = soap_new_xsd__int(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__int::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__int(struct soap *soap, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__int(struct soap *soap, const char *URL, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__int(struct soap *soap, const char *URL, xsd__int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:int", p->soap_type() == SOAP_TYPE_xsd__int ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

inline int soap_read_xsd__int(struct soap *soap, xsd__int *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__int(struct soap *soap, const char *URL, xsd__int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__int(struct soap *soap, xsd__int *p)
{
	if (soap_read_xsd__int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__hexBinary__DEFINED
#define SOAP_TYPE_xsd__hexBinary__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary_(struct soap*, const char*, int, const xsd__hexBinary_ *, const char*);
SOAP_FMAC3 xsd__hexBinary_ * SOAP_FMAC4 soap_in_xsd__hexBinary_(struct soap*, const char*, xsd__hexBinary_ *, const char*);
SOAP_FMAC1 xsd__hexBinary_ * SOAP_FMAC2 soap_instantiate_xsd__hexBinary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary_ * soap_new_xsd__hexBinary_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__hexBinary_(soap, n, NULL, NULL, NULL);
}

inline xsd__hexBinary_ * soap_new_req_xsd__hexBinary_(
	struct soap *soap,
	const xsd__hexBinary& __item)
{
	xsd__hexBinary_ *_p = soap_new_xsd__hexBinary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary_::__item = __item;
	}
	return _p;
}

inline xsd__hexBinary_ * soap_new_set_xsd__hexBinary_(
	struct soap *soap,
	const xsd__hexBinary& __item,
	char *__item__1)
{
	xsd__hexBinary_ *_p = soap_new_xsd__hexBinary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__hexBinary_(struct soap *soap, xsd__hexBinary_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__hexBinary_(struct soap *soap, const char *URL, xsd__hexBinary_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__hexBinary_(struct soap *soap, const char *URL, xsd__hexBinary_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary_ * SOAP_FMAC4 soap_get_xsd__hexBinary_(struct soap*, xsd__hexBinary_ *, const char*, const char*);

inline int soap_read_xsd__hexBinary_(struct soap *soap, xsd__hexBinary_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__hexBinary_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__hexBinary_(struct soap *soap, const char *URL, xsd__hexBinary_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__hexBinary_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__hexBinary_(struct soap *soap, xsd__hexBinary_ *p)
{
	if (soap_read_xsd__hexBinary_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__float_DEFINED
#define SOAP_TYPE_xsd__float_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);
SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL);
}

inline xsd__float * soap_new_req_xsd__float(
	struct soap *soap,
	float __item)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
	}
	return _p;
}

inline xsd__float * soap_new_set_xsd__float(
	struct soap *soap,
	float __item,
	char *__item__1)
{
	xsd__float *_p = soap_new_xsd__float(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__float::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__float(struct soap *soap, xsd__float const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:float", p->soap_type() == SOAP_TYPE_xsd__float ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__float(struct soap *soap, const char *URL, xsd__float const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:float", p->soap_type() == SOAP_TYPE_xsd__float ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__float(struct soap *soap, const char *URL, xsd__float const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:float", p->soap_type() == SOAP_TYPE_xsd__float ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

inline int soap_read_xsd__float(struct soap *soap, xsd__float *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__float(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__float(struct soap *soap, const char *URL, xsd__float *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__float(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__float(struct soap *soap, xsd__float *p)
{
	if (soap_read_xsd__float(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__double_DEFINED
#define SOAP_TYPE_xsd__double_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const xsd__double *, const char*);
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, xsd__double *, const char*);
SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap*, int, const char*, const char*, size_t*);

inline xsd__double * soap_new_xsd__double(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__double(soap, n, NULL, NULL, NULL);
}

inline xsd__double * soap_new_req_xsd__double(
	struct soap *soap,
	double __item)
{
	xsd__double *_p = soap_new_xsd__double(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__double::__item = __item;
	}
	return _p;
}

inline xsd__double * soap_new_set_xsd__double(
	struct soap *soap,
	double __item,
	char *__item__1)
{
	xsd__double *_p = soap_new_xsd__double(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__double::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__double(struct soap *soap, xsd__double const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:double", p->soap_type() == SOAP_TYPE_xsd__double ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__double(struct soap *soap, const char *URL, xsd__double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:double", p->soap_type() == SOAP_TYPE_xsd__double ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__double(struct soap *soap, const char *URL, xsd__double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:double", p->soap_type() == SOAP_TYPE_xsd__double ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, xsd__double *, const char*, const char*);

inline int soap_read_xsd__double(struct soap *soap, xsd__double *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__double(struct soap *soap, const char *URL, xsd__double *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__double(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__double(struct soap *soap, xsd__double *p)
{
	if (soap_read_xsd__double(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__dateTime_DEFINED
#define SOAP_TYPE_xsd__dateTime_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);
SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL);
}

inline xsd__dateTime * soap_new_req_xsd__dateTime(
	struct soap *soap,
	time_t __item)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
	}
	return _p;
}

inline xsd__dateTime * soap_new_set_xsd__dateTime(
	struct soap *soap,
	time_t __item,
	char *__item__1)
{
	xsd__dateTime *_p = soap_new_xsd__dateTime(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__dateTime::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__dateTime(struct soap *soap, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:dateTime", p->soap_type() == SOAP_TYPE_xsd__dateTime ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

inline int soap_read_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__dateTime(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__dateTime(struct soap *soap, const char *URL, xsd__dateTime *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__dateTime(struct soap *soap, xsd__dateTime *p)
{
	if (soap_read_xsd__dateTime(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__date__DEFINED
#define SOAP_TYPE_xsd__date__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date_(struct soap*, const char*, int, const xsd__date_ *, const char*);
SOAP_FMAC3 xsd__date_ * SOAP_FMAC4 soap_in_xsd__date_(struct soap*, const char*, xsd__date_ *, const char*);
SOAP_FMAC1 xsd__date_ * SOAP_FMAC2 soap_instantiate_xsd__date_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__date_ * soap_new_xsd__date_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__date_(soap, n, NULL, NULL, NULL);
}

inline xsd__date_ * soap_new_req_xsd__date_(
	struct soap *soap)
{
	xsd__date_ *_p = soap_new_xsd__date_(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__date_ * soap_new_set_xsd__date_(
	struct soap *soap,
	char *__item,
	char *__item__1)
{
	xsd__date_ *_p = soap_new_xsd__date_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__date_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__date_(struct soap *soap, xsd__date_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:date", p->soap_type() == SOAP_TYPE_xsd__date_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__date_(struct soap *soap, const char *URL, xsd__date_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:date", p->soap_type() == SOAP_TYPE_xsd__date_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__date_(struct soap *soap, const char *URL, xsd__date_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:date", p->soap_type() == SOAP_TYPE_xsd__date_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__date_ * SOAP_FMAC4 soap_get_xsd__date_(struct soap*, xsd__date_ *, const char*, const char*);

inline int soap_read_xsd__date_(struct soap *soap, xsd__date_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__date_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__date_(struct soap *soap, const char *URL, xsd__date_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__date_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__date_(struct soap *soap, xsd__date_ *p)
{
	if (soap_read_xsd__date_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__boolean_DEFINED
#define SOAP_TYPE_xsd__boolean_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);
SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL);
}

inline xsd__boolean * soap_new_req_xsd__boolean(
	struct soap *soap,
	bool __item)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
	}
	return _p;
}

inline xsd__boolean * soap_new_set_xsd__boolean(
	struct soap *soap,
	bool __item,
	char *__item__1)
{
	xsd__boolean *_p = soap_new_xsd__boolean(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__boolean::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__boolean(struct soap *soap, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:boolean", p->soap_type() == SOAP_TYPE_xsd__boolean ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

inline int soap_read_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__boolean(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__boolean(struct soap *soap, const char *URL, xsd__boolean *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__boolean(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__boolean(struct soap *soap, xsd__boolean *p)
{
	if (soap_read_xsd__boolean(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary__DEFINED
#define SOAP_TYPE_xsd__base64Binary__DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);
SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
	}
	return _p;
}

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(
	struct soap *soap,
	const xsd__base64Binary& __item,
	char *__item__1)
{
	xsd__base64Binary_ *_p = soap_new_xsd__base64Binary_(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary_::__item = __item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary_(struct soap *soap, const char *URL, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary_(struct soap *soap, const char *URL, xsd__base64Binary_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary_ ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

inline int soap_read_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary_(struct soap *soap, const char *URL, xsd__base64Binary_ *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__base64Binary_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p)
{
	if (soap_read_xsd__base64Binary_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__hexBinary_DEFINED
#define SOAP_TYPE_xsd__hexBinary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__hexBinary(struct soap*, const char*, int, const xsd__hexBinary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__hexBinary2s(struct soap*, xsd__hexBinary);
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_in_xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__hexBinary(struct soap*, const char*, xsd__hexBinary *);
SOAP_FMAC1 xsd__hexBinary * SOAP_FMAC2 soap_instantiate_xsd__hexBinary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__hexBinary * soap_new_xsd__hexBinary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__hexBinary(soap, n, NULL, NULL, NULL);
}

inline xsd__hexBinary * soap_new_req_xsd__hexBinary(
	struct soap *soap)
{
	xsd__hexBinary *_p = soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__hexBinary * soap_new_set_xsd__hexBinary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size)
{
	xsd__hexBinary *_p = soap_new_xsd__hexBinary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__hexBinary::__ptr = __ptr;
		_p->xsd__hexBinary::__size = __size;
	}
	return _p;
}

inline int soap_write_xsd__hexBinary(struct soap *soap, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:hexBinary", p->soap_type() == SOAP_TYPE_xsd__hexBinary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__hexBinary * SOAP_FMAC4 soap_get_xsd__hexBinary(struct soap*, xsd__hexBinary *, const char*, const char*);

inline int soap_read_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__hexBinary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__hexBinary(struct soap *soap, const char *URL, xsd__hexBinary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__hexBinary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__hexBinary(struct soap *soap, xsd__hexBinary *p)
{
	if (soap_read_xsd__hexBinary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_DEFINED
#define SOAP_TYPE_xsd__base64Binary_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap*, xsd__base64Binary);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *);
SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(
	struct soap *soap)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(
	struct soap *soap,
	unsigned char *__ptr,
	int __size,
	char *id,
	char *type,
	char *options)
{
	xsd__base64Binary *_p = soap_new_xsd__base64Binary(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__base64Binary::__ptr = __ptr;
		_p->xsd__base64Binary::__size = __size;
		_p->xsd__base64Binary::id = id;
		_p->xsd__base64Binary::type = type;
		_p->xsd__base64Binary::options = options;
	}
	return _p;
}

inline int soap_write_xsd__base64Binary(struct soap *soap, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:base64Binary", p->soap_type() == SOAP_TYPE_xsd__base64Binary ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

inline int soap_read_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__base64Binary(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__base64Binary(struct soap *soap, const char *URL, xsd__base64Binary *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{
	if (soap_read_xsd__base64Binary(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (soap_read_xsd__anyType(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__getVersionList_DEFINED
#define SOAP_TYPE___ns1__getVersionList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getVersionList(struct soap*, struct __ns1__getVersionList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getVersionList(struct soap*, const struct __ns1__getVersionList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getVersionList(struct soap*, const char*, int, const struct __ns1__getVersionList *, const char*);
SOAP_FMAC3 struct __ns1__getVersionList * SOAP_FMAC4 soap_in___ns1__getVersionList(struct soap*, const char*, struct __ns1__getVersionList *, const char*);
SOAP_FMAC1 struct __ns1__getVersionList * SOAP_FMAC2 soap_instantiate___ns1__getVersionList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getVersionList * soap_new___ns1__getVersionList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getVersionList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getVersionList * soap_new_req___ns1__getVersionList(
	struct soap *soap)
{
	struct __ns1__getVersionList *_p = soap_new___ns1__getVersionList(soap);
	if (_p)
	{	soap_default___ns1__getVersionList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getVersionList * soap_new_set___ns1__getVersionList(
	struct soap *soap,
	ns1__getVersionList *ns1__getVersionList_)
{
	struct __ns1__getVersionList *_p = soap_new___ns1__getVersionList(soap);
	if (_p)
	{	soap_default___ns1__getVersionList(soap, _p);
		_p->ns1__getVersionList_ = ns1__getVersionList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getVersionList(struct soap*, const struct __ns1__getVersionList *, const char*, const char*);

inline int soap_write___ns1__getVersionList(struct soap *soap, struct __ns1__getVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getVersionList(soap, p), 0) || soap_put___ns1__getVersionList(soap, p, "-ns1:getVersionList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getVersionList(struct soap *soap, const char *URL, struct __ns1__getVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getVersionList(soap, p), 0) || soap_put___ns1__getVersionList(soap, p, "-ns1:getVersionList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getVersionList(struct soap *soap, const char *URL, struct __ns1__getVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getVersionList(soap, p), 0) || soap_put___ns1__getVersionList(soap, p, "-ns1:getVersionList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getVersionList * SOAP_FMAC4 soap_get___ns1__getVersionList(struct soap*, struct __ns1__getVersionList *, const char*, const char*);

inline int soap_read___ns1__getVersionList(struct soap *soap, struct __ns1__getVersionList *p)
{
	if (p)
	{	soap_default___ns1__getVersionList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getVersionList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getVersionList(struct soap *soap, const char *URL, struct __ns1__getVersionList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getVersionList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getVersionList(struct soap *soap, struct __ns1__getVersionList *p)
{
	if (soap_read___ns1__getVersionList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getProtoVersionList_DEFINED
#define SOAP_TYPE___ns1__getProtoVersionList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getProtoVersionList(struct soap*, struct __ns1__getProtoVersionList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getProtoVersionList(struct soap*, const struct __ns1__getProtoVersionList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getProtoVersionList(struct soap*, const char*, int, const struct __ns1__getProtoVersionList *, const char*);
SOAP_FMAC3 struct __ns1__getProtoVersionList * SOAP_FMAC4 soap_in___ns1__getProtoVersionList(struct soap*, const char*, struct __ns1__getProtoVersionList *, const char*);
SOAP_FMAC1 struct __ns1__getProtoVersionList * SOAP_FMAC2 soap_instantiate___ns1__getProtoVersionList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getProtoVersionList * soap_new___ns1__getProtoVersionList(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getProtoVersionList(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getProtoVersionList * soap_new_req___ns1__getProtoVersionList(
	struct soap *soap)
{
	struct __ns1__getProtoVersionList *_p = soap_new___ns1__getProtoVersionList(soap);
	if (_p)
	{	soap_default___ns1__getProtoVersionList(soap, _p);
	}
	return _p;
}

inline struct __ns1__getProtoVersionList * soap_new_set___ns1__getProtoVersionList(
	struct soap *soap,
	ns1__getProtoVersionList *ns1__getProtoVersionList_)
{
	struct __ns1__getProtoVersionList *_p = soap_new___ns1__getProtoVersionList(soap);
	if (_p)
	{	soap_default___ns1__getProtoVersionList(soap, _p);
		_p->ns1__getProtoVersionList_ = ns1__getProtoVersionList_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getProtoVersionList(struct soap*, const struct __ns1__getProtoVersionList *, const char*, const char*);

inline int soap_write___ns1__getProtoVersionList(struct soap *soap, struct __ns1__getProtoVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___ns1__getProtoVersionList(soap, p), 0) || soap_put___ns1__getProtoVersionList(soap, p, "-ns1:getProtoVersionList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__getProtoVersionList(struct soap *soap, const char *URL, struct __ns1__getProtoVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getProtoVersionList(soap, p), 0) || soap_put___ns1__getProtoVersionList(soap, p, "-ns1:getProtoVersionList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__getProtoVersionList(struct soap *soap, const char *URL, struct __ns1__getProtoVersionList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize___ns1__getProtoVersionList(soap, p), 0) || soap_put___ns1__getProtoVersionList(soap, p, "-ns1:getProtoVersionList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getProtoVersionList * SOAP_FMAC4 soap_get___ns1__getProtoVersionList(struct soap*, struct __ns1__getProtoVersionList *, const char*, const char*);

inline int soap_read___ns1__getProtoVersionList(struct soap *soap, struct __ns1__getProtoVersionList *p)
{
	if (p)
	{	soap_default___ns1__getProtoVersionList(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getProtoVersionList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__getProtoVersionList(struct soap *soap, const char *URL, struct __ns1__getProtoVersionList *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___ns1__getProtoVersionList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__getProtoVersionList(struct soap *soap, struct __ns1__getProtoVersionList *p)
{
	if (soap_read___ns1__getProtoVersionList(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__union_protocol_DEFINED
#define SOAP_TYPE__ns1__union_protocol_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_protocol(struct soap*, int, const union _ns1__union_protocol *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_protocol(struct soap*, int, const union _ns1__union_protocol *);
SOAP_FMAC3 union _ns1__union_protocol * SOAP_FMAC4 soap_in__ns1__union_protocol(struct soap*, int*, union _ns1__union_protocol *);
#endif

#ifndef SOAP_TYPE__ns1__union_MTC_USCOREUnsignedTransactionRegType_DEFINED
#define SOAP_TYPE__ns1__union_MTC_USCOREUnsignedTransactionRegType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_MTC_USCOREUnsignedTransactionRegType(struct soap*, int, const union _ns1__union_MTC_USCOREUnsignedTransactionRegType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_MTC_USCOREUnsignedTransactionRegType(struct soap*, int, const union _ns1__union_MTC_USCOREUnsignedTransactionRegType *);
SOAP_FMAC3 union _ns1__union_MTC_USCOREUnsignedTransactionRegType * SOAP_FMAC4 soap_in__ns1__union_MTC_USCOREUnsignedTransactionRegType(struct soap*, int*, union _ns1__union_MTC_USCOREUnsignedTransactionRegType *);
#endif

#ifndef SOAP_TYPE__ns1__union_UnsignedRecordType_DEFINED
#define SOAP_TYPE__ns1__union_UnsignedRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__ns1__union_UnsignedRecordType(struct soap*, int, const union _ns1__union_UnsignedRecordType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__union_UnsignedRecordType(struct soap*, int, const union _ns1__union_UnsignedRecordType *);
SOAP_FMAC3 union _ns1__union_UnsignedRecordType * SOAP_FMAC4 soap_in__ns1__union_UnsignedRecordType(struct soap*, int*, union _ns1__union_UnsignedRecordType *);
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons1__getVersionList_DEFINED
#define SOAP_TYPE_PointerTons1__getVersionList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getVersionList(struct soap*, ns1__getVersionList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getVersionList(struct soap*, const char *, int, ns1__getVersionList *const*, const char *);
SOAP_FMAC3 ns1__getVersionList ** SOAP_FMAC4 soap_in_PointerTons1__getVersionList(struct soap*, const char*, ns1__getVersionList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getVersionList(struct soap*, ns1__getVersionList *const*, const char*, const char*);
SOAP_FMAC3 ns1__getVersionList ** SOAP_FMAC4 soap_get_PointerTons1__getVersionList(struct soap*, ns1__getVersionList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__getProtoVersionList_DEFINED
#define SOAP_TYPE_PointerTons1__getProtoVersionList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__getProtoVersionList(struct soap*, ns1__getProtoVersionList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__getProtoVersionList(struct soap*, const char *, int, ns1__getProtoVersionList *const*, const char *);
SOAP_FMAC3 ns1__getProtoVersionList ** SOAP_FMAC4 soap_in_PointerTons1__getProtoVersionList(struct soap*, const char*, ns1__getProtoVersionList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__getProtoVersionList(struct soap*, ns1__getProtoVersionList *const*, const char*, const char*);
SOAP_FMAC3 ns1__getProtoVersionList ** SOAP_FMAC4 soap_get_PointerTons1__getProtoVersionList(struct soap*, ns1__getProtoVersionList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SlavePresentationResponseListType_DEFINED
#define SOAP_TYPE_PointerTons1__SlavePresentationResponseListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SlavePresentationResponseListType(struct soap*, ns1__SlavePresentationResponseListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SlavePresentationResponseListType(struct soap*, const char *, int, ns1__SlavePresentationResponseListType *const*, const char *);
SOAP_FMAC3 ns1__SlavePresentationResponseListType ** SOAP_FMAC4 soap_in_PointerTons1__SlavePresentationResponseListType(struct soap*, const char*, ns1__SlavePresentationResponseListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SlavePresentationResponseListType(struct soap*, ns1__SlavePresentationResponseListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SlavePresentationResponseListType ** SOAP_FMAC4 soap_get_PointerTons1__SlavePresentationResponseListType(struct soap*, ns1__SlavePresentationResponseListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MtvmExtStateType_DEFINED
#define SOAP_TYPE_PointerTons1__MtvmExtStateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MtvmExtStateType(struct soap*, ns1__MtvmExtStateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MtvmExtStateType(struct soap*, const char *, int, ns1__MtvmExtStateType *const*, const char *);
SOAP_FMAC3 ns1__MtvmExtStateType ** SOAP_FMAC4 soap_in_PointerTons1__MtvmExtStateType(struct soap*, const char*, ns1__MtvmExtStateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MtvmExtStateType(struct soap*, ns1__MtvmExtStateType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MtvmExtStateType ** SOAP_FMAC4 soap_get_PointerTons1__MtvmExtStateType(struct soap*, ns1__MtvmExtStateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ExtStateType_DEFINED
#define SOAP_TYPE_PointerTons1__ExtStateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ExtStateType(struct soap*, ns1__ExtStateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ExtStateType(struct soap*, const char *, int, ns1__ExtStateType *const*, const char *);
SOAP_FMAC3 ns1__ExtStateType ** SOAP_FMAC4 soap_in_PointerTons1__ExtStateType(struct soap*, const char*, ns1__ExtStateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ExtStateType(struct soap*, ns1__ExtStateType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ExtStateType ** SOAP_FMAC4 soap_get_PointerTons1__ExtStateType(struct soap*, ns1__ExtStateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TvmExtStateType_DEFINED
#define SOAP_TYPE_PointerTons1__TvmExtStateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TvmExtStateType(struct soap*, ns1__TvmExtStateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TvmExtStateType(struct soap*, const char *, int, ns1__TvmExtStateType *const*, const char *);
SOAP_FMAC3 ns1__TvmExtStateType ** SOAP_FMAC4 soap_in_PointerTons1__TvmExtStateType(struct soap*, const char*, ns1__TvmExtStateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TvmExtStateType(struct soap*, ns1__TvmExtStateType *const*, const char*, const char*);
SOAP_FMAC3 ns1__TvmExtStateType ** SOAP_FMAC4 soap_get_PointerTons1__TvmExtStateType(struct soap*, ns1__TvmExtStateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__StateConfigInstallationListType_DEFINED
#define SOAP_TYPE_PointerTons1__StateConfigInstallationListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StateConfigInstallationListType(struct soap*, ns1__StateConfigInstallationListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StateConfigInstallationListType(struct soap*, const char *, int, ns1__StateConfigInstallationListType *const*, const char *);
SOAP_FMAC3 ns1__StateConfigInstallationListType ** SOAP_FMAC4 soap_in_PointerTons1__StateConfigInstallationListType(struct soap*, const char*, ns1__StateConfigInstallationListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StateConfigInstallationListType(struct soap*, ns1__StateConfigInstallationListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__StateConfigInstallationListType ** SOAP_FMAC4 soap_get_PointerTons1__StateConfigInstallationListType(struct soap*, ns1__StateConfigInstallationListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__versionListType_DEFINED
#define SOAP_TYPE_PointerTons1__versionListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__versionListType(struct soap*, ns1__versionListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__versionListType(struct soap*, const char *, int, ns1__versionListType *const*, const char *);
SOAP_FMAC3 ns1__versionListType ** SOAP_FMAC4 soap_in_PointerTons1__versionListType(struct soap*, const char*, ns1__versionListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__versionListType(struct soap*, ns1__versionListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__versionListType ** SOAP_FMAC4 soap_get_PointerTons1__versionListType(struct soap*, ns1__versionListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__diagnosticListType_DEFINED
#define SOAP_TYPE_PointerTons1__diagnosticListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__diagnosticListType(struct soap*, ns1__diagnosticListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__diagnosticListType(struct soap*, const char *, int, ns1__diagnosticListType *const*, const char *);
SOAP_FMAC3 ns1__diagnosticListType ** SOAP_FMAC4 soap_in_PointerTons1__diagnosticListType(struct soap*, const char*, ns1__diagnosticListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__diagnosticListType(struct soap*, ns1__diagnosticListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__diagnosticListType ** SOAP_FMAC4 soap_get_PointerTons1__diagnosticListType(struct soap*, ns1__diagnosticListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__confPackageListType_DEFINED
#define SOAP_TYPE_PointerTons1__confPackageListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__confPackageListType(struct soap*, ns1__confPackageListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__confPackageListType(struct soap*, const char *, int, ns1__confPackageListType *const*, const char *);
SOAP_FMAC3 ns1__confPackageListType ** SOAP_FMAC4 soap_in_PointerTons1__confPackageListType(struct soap*, const char*, ns1__confPackageListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__confPackageListType(struct soap*, ns1__confPackageListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__confPackageListType ** SOAP_FMAC4 soap_get_PointerTons1__confPackageListType(struct soap*, ns1__confPackageListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AgExtStateType_DEFINED
#define SOAP_TYPE_PointerTons1__AgExtStateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AgExtStateType(struct soap*, ns1__AgExtStateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AgExtStateType(struct soap*, const char *, int, ns1__AgExtStateType *const*, const char *);
SOAP_FMAC3 ns1__AgExtStateType ** SOAP_FMAC4 soap_in_PointerTons1__AgExtStateType(struct soap*, const char*, ns1__AgExtStateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AgExtStateType(struct soap*, ns1__AgExtStateType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AgExtStateType ** SOAP_FMAC4 soap_get_PointerTons1__AgExtStateType(struct soap*, ns1__AgExtStateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecordConfirmationListType_DEFINED
#define SOAP_TYPE_PointerTons1__RecordConfirmationListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecordConfirmationListType(struct soap*, ns1__RecordConfirmationListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecordConfirmationListType(struct soap*, const char *, int, ns1__RecordConfirmationListType *const*, const char *);
SOAP_FMAC3 ns1__RecordConfirmationListType ** SOAP_FMAC4 soap_in_PointerTons1__RecordConfirmationListType(struct soap*, const char*, ns1__RecordConfirmationListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecordConfirmationListType(struct soap*, ns1__RecordConfirmationListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecordConfirmationListType ** SOAP_FMAC4 soap_get_PointerTons1__RecordConfirmationListType(struct soap*, ns1__RecordConfirmationListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TransactionMTCConfTypeList_DEFINED
#define SOAP_TYPE_PointerTons1__TransactionMTCConfTypeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TransactionMTCConfTypeList(struct soap*, ns1__TransactionMTCConfTypeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TransactionMTCConfTypeList(struct soap*, const char *, int, ns1__TransactionMTCConfTypeList *const*, const char *);
SOAP_FMAC3 ns1__TransactionMTCConfTypeList ** SOAP_FMAC4 soap_in_PointerTons1__TransactionMTCConfTypeList(struct soap*, const char*, ns1__TransactionMTCConfTypeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TransactionMTCConfTypeList(struct soap*, ns1__TransactionMTCConfTypeList *const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionMTCConfTypeList ** SOAP_FMAC4 soap_get_PointerTons1__TransactionMTCConfTypeList(struct soap*, ns1__TransactionMTCConfTypeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__ConfigurationDocument_DEFINED
#define SOAP_TYPE_PointerTons2__ConfigurationDocument_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ConfigurationDocument(struct soap*, ns2__ConfigurationDocument *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ConfigurationDocument(struct soap*, const char *, int, ns2__ConfigurationDocument *const*, const char *);
SOAP_FMAC3 ns2__ConfigurationDocument ** SOAP_FMAC4 soap_in_PointerTons2__ConfigurationDocument(struct soap*, const char*, ns2__ConfigurationDocument **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ConfigurationDocument(struct soap*, ns2__ConfigurationDocument *const*, const char*, const char*);
SOAP_FMAC3 ns2__ConfigurationDocument ** SOAP_FMAC4 soap_get_PointerTons2__ConfigurationDocument(struct soap*, ns2__ConfigurationDocument **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InfoFEMonitorCCTIUType_DEFINED
#define SOAP_TYPE_PointerTons1__InfoFEMonitorCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InfoFEMonitorCCTIUType(struct soap*, ns1__InfoFEMonitorCCTIUType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InfoFEMonitorCCTIUType(struct soap*, const char *, int, ns1__InfoFEMonitorCCTIUType *const*, const char *);
SOAP_FMAC3 ns1__InfoFEMonitorCCTIUType ** SOAP_FMAC4 soap_in_PointerTons1__InfoFEMonitorCCTIUType(struct soap*, const char*, ns1__InfoFEMonitorCCTIUType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InfoFEMonitorCCTIUType(struct soap*, ns1__InfoFEMonitorCCTIUType *const*, const char*, const char*);
SOAP_FMAC3 ns1__InfoFEMonitorCCTIUType ** SOAP_FMAC4 soap_get_PointerTons1__InfoFEMonitorCCTIUType(struct soap*, ns1__InfoFEMonitorCCTIUType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__VersionsCCTIUType_DEFINED
#define SOAP_TYPE_PointerTons1__VersionsCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VersionsCCTIUType(struct soap*, ns1__VersionsCCTIUType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VersionsCCTIUType(struct soap*, const char *, int, ns1__VersionsCCTIUType *const*, const char *);
SOAP_FMAC3 ns1__VersionsCCTIUType ** SOAP_FMAC4 soap_in_PointerTons1__VersionsCCTIUType(struct soap*, const char*, ns1__VersionsCCTIUType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VersionsCCTIUType(struct soap*, ns1__VersionsCCTIUType *const*, const char*, const char*);
SOAP_FMAC3 ns1__VersionsCCTIUType ** SOAP_FMAC4 soap_get_PointerTons1__VersionsCCTIUType(struct soap*, ns1__VersionsCCTIUType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DiagnosticCCTIUListType_DEFINED
#define SOAP_TYPE_PointerTons1__DiagnosticCCTIUListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DiagnosticCCTIUListType(struct soap*, ns1__DiagnosticCCTIUListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DiagnosticCCTIUListType(struct soap*, const char *, int, ns1__DiagnosticCCTIUListType *const*, const char *);
SOAP_FMAC3 ns1__DiagnosticCCTIUListType ** SOAP_FMAC4 soap_in_PointerTons1__DiagnosticCCTIUListType(struct soap*, const char*, ns1__DiagnosticCCTIUListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DiagnosticCCTIUListType(struct soap*, ns1__DiagnosticCCTIUListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DiagnosticCCTIUListType ** SOAP_FMAC4 soap_get_PointerTons1__DiagnosticCCTIUListType(struct soap*, ns1__DiagnosticCCTIUListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__StatusCCTIUListType_DEFINED
#define SOAP_TYPE_PointerTons1__StatusCCTIUListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StatusCCTIUListType(struct soap*, ns1__StatusCCTIUListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StatusCCTIUListType(struct soap*, const char *, int, ns1__StatusCCTIUListType *const*, const char *);
SOAP_FMAC3 ns1__StatusCCTIUListType ** SOAP_FMAC4 soap_in_PointerTons1__StatusCCTIUListType(struct soap*, const char*, ns1__StatusCCTIUListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StatusCCTIUListType(struct soap*, ns1__StatusCCTIUListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__StatusCCTIUListType ** SOAP_FMAC4 soap_get_PointerTons1__StatusCCTIUListType(struct soap*, ns1__StatusCCTIUListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AlarmCCTIUListType_DEFINED
#define SOAP_TYPE_PointerTons1__AlarmCCTIUListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AlarmCCTIUListType(struct soap*, ns1__AlarmCCTIUListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AlarmCCTIUListType(struct soap*, const char *, int, ns1__AlarmCCTIUListType *const*, const char *);
SOAP_FMAC3 ns1__AlarmCCTIUListType ** SOAP_FMAC4 soap_in_PointerTons1__AlarmCCTIUListType(struct soap*, const char*, ns1__AlarmCCTIUListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AlarmCCTIUListType(struct soap*, ns1__AlarmCCTIUListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AlarmCCTIUListType ** SOAP_FMAC4 soap_get_PointerTons1__AlarmCCTIUListType(struct soap*, ns1__AlarmCCTIUListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SlaveStateListType_DEFINED
#define SOAP_TYPE_PointerTons1__SlaveStateListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SlaveStateListType(struct soap*, ns1__SlaveStateListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SlaveStateListType(struct soap*, const char *, int, ns1__SlaveStateListType *const*, const char *);
SOAP_FMAC3 ns1__SlaveStateListType ** SOAP_FMAC4 soap_in_PointerTons1__SlaveStateListType(struct soap*, const char*, ns1__SlaveStateListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SlaveStateListType(struct soap*, ns1__SlaveStateListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SlaveStateListType ** SOAP_FMAC4 soap_get_PointerTons1__SlaveStateListType(struct soap*, ns1__SlaveStateListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__stateType_DEFINED
#define SOAP_TYPE_PointerTons1__stateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__stateType(struct soap*, ns1__stateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__stateType(struct soap*, const char *, int, ns1__stateType *const*, const char *);
SOAP_FMAC3 ns1__stateType ** SOAP_FMAC4 soap_in_PointerTons1__stateType(struct soap*, const char*, ns1__stateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__stateType(struct soap*, ns1__stateType *const*, const char*, const char*);
SOAP_FMAC3 ns1__stateType ** SOAP_FMAC4 soap_get_PointerTons1__stateType(struct soap*, ns1__stateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InfoFERecordMTCType_DEFINED
#define SOAP_TYPE_PointerTons1__InfoFERecordMTCType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InfoFERecordMTCType(struct soap*, ns1__InfoFERecordMTCType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InfoFERecordMTCType(struct soap*, const char *, int, ns1__InfoFERecordMTCType *const*, const char *);
SOAP_FMAC3 ns1__InfoFERecordMTCType ** SOAP_FMAC4 soap_in_PointerTons1__InfoFERecordMTCType(struct soap*, const char*, ns1__InfoFERecordMTCType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InfoFERecordMTCType(struct soap*, ns1__InfoFERecordMTCType *const*, const char*, const char*);
SOAP_FMAC3 ns1__InfoFERecordMTCType ** SOAP_FMAC4 soap_get_PointerTons1__InfoFERecordMTCType(struct soap*, ns1__InfoFERecordMTCType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORETMobilitatCurveType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORETMobilitatCurveType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORETMobilitatCurveType(struct soap*, ns1__MTC_USCORETMobilitatCurveType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORETMobilitatCurveType(struct soap*, const char *, int, ns1__MTC_USCORETMobilitatCurveType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORETMobilitatCurveType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORETMobilitatCurveType(struct soap*, const char*, ns1__MTC_USCORETMobilitatCurveType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORETMobilitatCurveType(struct soap*, ns1__MTC_USCORETMobilitatCurveType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORETMobilitatCurveType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORETMobilitatCurveType(struct soap*, ns1__MTC_USCORETMobilitatCurveType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__MTC_USCOREQuantityType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__MTC_USCOREQuantityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__MTC_USCOREQuantityType(struct soap*, ns1__MTC_USCOREQuantityType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__MTC_USCOREQuantityType(struct soap*, const char *, int, ns1__MTC_USCOREQuantityType **const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREQuantityType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__MTC_USCOREQuantityType(struct soap*, const char*, ns1__MTC_USCOREQuantityType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__MTC_USCOREQuantityType(struct soap*, ns1__MTC_USCOREQuantityType **const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREQuantityType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__MTC_USCOREQuantityType(struct soap*, ns1__MTC_USCOREQuantityType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORETitleInfoType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORETitleInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORETitleInfoType(struct soap*, ns1__MTC_USCORETitleInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORETitleInfoType(struct soap*, const char *, int, ns1__MTC_USCORETitleInfoType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORETitleInfoType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORETitleInfoType(struct soap*, const char*, ns1__MTC_USCORETitleInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORETitleInfoType(struct soap*, ns1__MTC_USCORETitleInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORETitleInfoType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORETitleInfoType(struct soap*, ns1__MTC_USCORETitleInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ProductIdType_DEFINED
#define SOAP_TYPE_PointerTons1__ProductIdType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ProductIdType(struct soap*, ns1__ProductIdType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ProductIdType(struct soap*, const char *, int, ns1__ProductIdType *const*, const char *);
SOAP_FMAC3 ns1__ProductIdType ** SOAP_FMAC4 soap_in_PointerTons1__ProductIdType(struct soap*, const char*, ns1__ProductIdType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ProductIdType(struct soap*, ns1__ProductIdType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ProductIdType ** SOAP_FMAC4 soap_get_PointerTons1__ProductIdType(struct soap*, ns1__ProductIdType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREProfileInfoType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREProfileInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREProfileInfoType(struct soap*, ns1__MTC_USCOREProfileInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREProfileInfoType(struct soap*, const char *, int, ns1__MTC_USCOREProfileInfoType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREProfileInfoType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREProfileInfoType(struct soap*, const char*, ns1__MTC_USCOREProfileInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREProfileInfoType(struct soap*, ns1__MTC_USCOREProfileInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREProfileInfoType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREProfileInfoType(struct soap*, ns1__MTC_USCOREProfileInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ActionIdType_DEFINED
#define SOAP_TYPE_PointerTons1__ActionIdType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ActionIdType(struct soap*, ns1__ActionIdType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ActionIdType(struct soap*, const char *, int, ns1__ActionIdType *const*, const char *);
SOAP_FMAC3 ns1__ActionIdType ** SOAP_FMAC4 soap_in_PointerTons1__ActionIdType(struct soap*, const char*, ns1__ActionIdType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ActionIdType(struct soap*, ns1__ActionIdType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ActionIdType ** SOAP_FMAC4 soap_get_PointerTons1__ActionIdType(struct soap*, ns1__ActionIdType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREApplicationInfoType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREApplicationInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREApplicationInfoType(struct soap*, ns1__MTC_USCOREApplicationInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREApplicationInfoType(struct soap*, const char *, int, ns1__MTC_USCOREApplicationInfoType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREApplicationInfoType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREApplicationInfoType(struct soap*, const char*, ns1__MTC_USCOREApplicationInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREApplicationInfoType(struct soap*, ns1__MTC_USCOREApplicationInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREApplicationInfoType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREApplicationInfoType(struct soap*, ns1__MTC_USCOREApplicationInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TransactionMTCRegTypeList_DEFINED
#define SOAP_TYPE_PointerTons1__TransactionMTCRegTypeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TransactionMTCRegTypeList(struct soap*, ns1__TransactionMTCRegTypeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TransactionMTCRegTypeList(struct soap*, const char *, int, ns1__TransactionMTCRegTypeList *const*, const char *);
SOAP_FMAC3 ns1__TransactionMTCRegTypeList ** SOAP_FMAC4 soap_in_PointerTons1__TransactionMTCRegTypeList(struct soap*, const char*, ns1__TransactionMTCRegTypeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TransactionMTCRegTypeList(struct soap*, ns1__TransactionMTCRegTypeList *const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionMTCRegTypeList ** SOAP_FMAC4 soap_get_PointerTons1__TransactionMTCRegTypeList(struct soap*, ns1__TransactionMTCRegTypeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ParkingValidationInfo_DEFINED
#define SOAP_TYPE_PointerTons1__ParkingValidationInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ParkingValidationInfo(struct soap*, ns1__ParkingValidationInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ParkingValidationInfo(struct soap*, const char *, int, ns1__ParkingValidationInfo *const*, const char *);
SOAP_FMAC3 ns1__ParkingValidationInfo ** SOAP_FMAC4 soap_in_PointerTons1__ParkingValidationInfo(struct soap*, const char*, ns1__ParkingValidationInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ParkingValidationInfo(struct soap*, ns1__ParkingValidationInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__ParkingValidationInfo ** SOAP_FMAC4 soap_get_PointerTons1__ParkingValidationInfo(struct soap*, ns1__ParkingValidationInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ActionListType_DEFINED
#define SOAP_TYPE_PointerTons1__ActionListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ActionListType(struct soap*, ns1__ActionListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ActionListType(struct soap*, const char *, int, ns1__ActionListType *const*, const char *);
SOAP_FMAC3 ns1__ActionListType ** SOAP_FMAC4 soap_in_PointerTons1__ActionListType(struct soap*, const char*, ns1__ActionListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ActionListType(struct soap*, ns1__ActionListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ActionListType ** SOAP_FMAC4 soap_get_PointerTons1__ActionListType(struct soap*, ns1__ActionListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PenaltyType_DEFINED
#define SOAP_TYPE_PointerTons1__PenaltyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PenaltyType(struct soap*, ns1__PenaltyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PenaltyType(struct soap*, const char *, int, ns1__PenaltyType *const*, const char *);
SOAP_FMAC3 ns1__PenaltyType ** SOAP_FMAC4 soap_in_PointerTons1__PenaltyType(struct soap*, const char*, ns1__PenaltyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PenaltyType(struct soap*, ns1__PenaltyType *const*, const char*, const char*);
SOAP_FMAC3 ns1__PenaltyType ** SOAP_FMAC4 soap_get_PointerTons1__PenaltyType(struct soap*, ns1__PenaltyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PendingPaymentType_DEFINED
#define SOAP_TYPE_PointerTons1__PendingPaymentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PendingPaymentType(struct soap*, ns1__PendingPaymentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PendingPaymentType(struct soap*, const char *, int, ns1__PendingPaymentType *const*, const char *);
SOAP_FMAC3 ns1__PendingPaymentType ** SOAP_FMAC4 soap_in_PointerTons1__PendingPaymentType(struct soap*, const char*, ns1__PendingPaymentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PendingPaymentType(struct soap*, ns1__PendingPaymentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__PendingPaymentType ** SOAP_FMAC4 soap_get_PointerTons1__PendingPaymentType(struct soap*, ns1__PendingPaymentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Penalty_DEFINED
#define SOAP_TYPE_PointerTons1__Penalty_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Penalty(struct soap*, ns1__Penalty *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Penalty(struct soap*, const char *, int, ns1__Penalty *const*, const char *);
SOAP_FMAC3 ns1__Penalty ** SOAP_FMAC4 soap_in_PointerTons1__Penalty(struct soap*, const char*, ns1__Penalty **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Penalty(struct soap*, ns1__Penalty *const*, const char*, const char*);
SOAP_FMAC3 ns1__Penalty ** SOAP_FMAC4 soap_get_PointerTons1__Penalty(struct soap*, ns1__Penalty **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MediaStockListType_DEFINED
#define SOAP_TYPE_PointerTons1__MediaStockListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MediaStockListType(struct soap*, ns1__MediaStockListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MediaStockListType(struct soap*, const char *, int, ns1__MediaStockListType *const*, const char *);
SOAP_FMAC3 ns1__MediaStockListType ** SOAP_FMAC4 soap_in_PointerTons1__MediaStockListType(struct soap*, const char*, ns1__MediaStockListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MediaStockListType(struct soap*, ns1__MediaStockListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MediaStockListType ** SOAP_FMAC4 soap_get_PointerTons1__MediaStockListType(struct soap*, ns1__MediaStockListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SamType_DEFINED
#define SOAP_TYPE_PointerTons1__SamType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SamType(struct soap*, ns1__SamType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SamType(struct soap*, const char *, int, ns1__SamType *const*, const char *);
SOAP_FMAC3 ns1__SamType ** SOAP_FMAC4 soap_in_PointerTons1__SamType(struct soap*, const char*, ns1__SamType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SamType(struct soap*, ns1__SamType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SamType ** SOAP_FMAC4 soap_get_PointerTons1__SamType(struct soap*, ns1__SamType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__missingDataListType_DEFINED
#define SOAP_TYPE_PointerTons1__missingDataListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__missingDataListType(struct soap*, ns1__missingDataListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__missingDataListType(struct soap*, const char *, int, ns1__missingDataListType *const*, const char *);
SOAP_FMAC3 ns1__missingDataListType ** SOAP_FMAC4 soap_in_PointerTons1__missingDataListType(struct soap*, const char*, ns1__missingDataListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__missingDataListType(struct soap*, ns1__missingDataListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__missingDataListType ** SOAP_FMAC4 soap_get_PointerTons1__missingDataListType(struct soap*, ns1__missingDataListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SlaveDataReportListType_DEFINED
#define SOAP_TYPE_PointerTons1__SlaveDataReportListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SlaveDataReportListType(struct soap*, ns1__SlaveDataReportListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SlaveDataReportListType(struct soap*, const char *, int, ns1__SlaveDataReportListType *const*, const char *);
SOAP_FMAC3 ns1__SlaveDataReportListType ** SOAP_FMAC4 soap_in_PointerTons1__SlaveDataReportListType(struct soap*, const char*, ns1__SlaveDataReportListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SlaveDataReportListType(struct soap*, ns1__SlaveDataReportListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SlaveDataReportListType ** SOAP_FMAC4 soap_get_PointerTons1__SlaveDataReportListType(struct soap*, ns1__SlaveDataReportListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingReceiptType_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingReceiptType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingReceiptType(struct soap*, ns1__AccountingReceiptType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingReceiptType(struct soap*, const char *, int, ns1__AccountingReceiptType *const*, const char *);
SOAP_FMAC3 ns1__AccountingReceiptType ** SOAP_FMAC4 soap_in_PointerTons1__AccountingReceiptType(struct soap*, const char*, ns1__AccountingReceiptType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingReceiptType(struct soap*, ns1__AccountingReceiptType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingReceiptType ** SOAP_FMAC4 soap_get_PointerTons1__AccountingReceiptType(struct soap*, ns1__AccountingReceiptType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CoinNoteReturnedListType_DEFINED
#define SOAP_TYPE_PointerTons1__CoinNoteReturnedListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CoinNoteReturnedListType(struct soap*, ns1__CoinNoteReturnedListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CoinNoteReturnedListType(struct soap*, const char *, int, ns1__CoinNoteReturnedListType *const*, const char *);
SOAP_FMAC3 ns1__CoinNoteReturnedListType ** SOAP_FMAC4 soap_in_PointerTons1__CoinNoteReturnedListType(struct soap*, const char*, ns1__CoinNoteReturnedListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CoinNoteReturnedListType(struct soap*, ns1__CoinNoteReturnedListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CoinNoteReturnedListType ** SOAP_FMAC4 soap_get_PointerTons1__CoinNoteReturnedListType(struct soap*, ns1__CoinNoteReturnedListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CoinNoteInsertedListType_DEFINED
#define SOAP_TYPE_PointerTons1__CoinNoteInsertedListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CoinNoteInsertedListType(struct soap*, ns1__CoinNoteInsertedListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CoinNoteInsertedListType(struct soap*, const char *, int, ns1__CoinNoteInsertedListType *const*, const char *);
SOAP_FMAC3 ns1__CoinNoteInsertedListType ** SOAP_FMAC4 soap_in_PointerTons1__CoinNoteInsertedListType(struct soap*, const char*, ns1__CoinNoteInsertedListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CoinNoteInsertedListType(struct soap*, ns1__CoinNoteInsertedListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CoinNoteInsertedListType ** SOAP_FMAC4 soap_get_PointerTons1__CoinNoteInsertedListType(struct soap*, ns1__CoinNoteInsertedListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AwardListType_DEFINED
#define SOAP_TYPE_PointerTons1__AwardListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AwardListType(struct soap*, ns1__AwardListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AwardListType(struct soap*, const char *, int, ns1__AwardListType *const*, const char *);
SOAP_FMAC3 ns1__AwardListType ** SOAP_FMAC4 soap_in_PointerTons1__AwardListType(struct soap*, const char*, ns1__AwardListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AwardListType(struct soap*, ns1__AwardListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AwardListType ** SOAP_FMAC4 soap_get_PointerTons1__AwardListType(struct soap*, ns1__AwardListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PaymentModeListType_DEFINED
#define SOAP_TYPE_PointerTons1__PaymentModeListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PaymentModeListType(struct soap*, ns1__PaymentModeListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PaymentModeListType(struct soap*, const char *, int, ns1__PaymentModeListType *const*, const char *);
SOAP_FMAC3 ns1__PaymentModeListType ** SOAP_FMAC4 soap_in_PointerTons1__PaymentModeListType(struct soap*, const char*, ns1__PaymentModeListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PaymentModeListType(struct soap*, ns1__PaymentModeListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__PaymentModeListType ** SOAP_FMAC4 soap_get_PointerTons1__PaymentModeListType(struct soap*, ns1__PaymentModeListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingFailureListType_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingFailureListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingFailureListType(struct soap*, ns1__AccountingFailureListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingFailureListType(struct soap*, const char *, int, ns1__AccountingFailureListType *const*, const char *);
SOAP_FMAC3 ns1__AccountingFailureListType ** SOAP_FMAC4 soap_in_PointerTons1__AccountingFailureListType(struct soap*, const char*, ns1__AccountingFailureListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingFailureListType(struct soap*, ns1__AccountingFailureListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingFailureListType ** SOAP_FMAC4 soap_get_PointerTons1__AccountingFailureListType(struct soap*, ns1__AccountingFailureListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingUnitListType_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingUnitListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingUnitListType(struct soap*, ns1__AccountingUnitListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingUnitListType(struct soap*, const char *, int, ns1__AccountingUnitListType *const*, const char *);
SOAP_FMAC3 ns1__AccountingUnitListType ** SOAP_FMAC4 soap_in_PointerTons1__AccountingUnitListType(struct soap*, const char*, ns1__AccountingUnitListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingUnitListType(struct soap*, ns1__AccountingUnitListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingUnitListType ** SOAP_FMAC4 soap_get_PointerTons1__AccountingUnitListType(struct soap*, ns1__AccountingUnitListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingOperationInfo_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingOperationInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingOperationInfo(struct soap*, ns1__AccountingOperationInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingOperationInfo(struct soap*, const char *, int, ns1__AccountingOperationInfo *const*, const char *);
SOAP_FMAC3 ns1__AccountingOperationInfo ** SOAP_FMAC4 soap_in_PointerTons1__AccountingOperationInfo(struct soap*, const char*, ns1__AccountingOperationInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingOperationInfo(struct soap*, ns1__AccountingOperationInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingOperationInfo ** SOAP_FMAC4 soap_get_PointerTons1__AccountingOperationInfo(struct soap*, ns1__AccountingOperationInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingOpType_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingOpType(struct soap*, ns1__AccountingOpType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingOpType(struct soap*, const char *, int, ns1__AccountingOpType *const*, const char *);
SOAP_FMAC3 ns1__AccountingOpType ** SOAP_FMAC4 soap_in_PointerTons1__AccountingOpType(struct soap*, const char*, ns1__AccountingOpType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingOpType(struct soap*, ns1__AccountingOpType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingOpType ** SOAP_FMAC4 soap_get_PointerTons1__AccountingOpType(struct soap*, ns1__AccountingOpType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FareType_DEFINED
#define SOAP_TYPE_PointerTons1__FareType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FareType(struct soap*, ns1__FareType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FareType(struct soap*, const char *, int, ns1__FareType *const*, const char *);
SOAP_FMAC3 ns1__FareType ** SOAP_FMAC4 soap_in_PointerTons1__FareType(struct soap*, const char*, ns1__FareType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FareType(struct soap*, ns1__FareType *const*, const char*, const char*);
SOAP_FMAC3 ns1__FareType ** SOAP_FMAC4 soap_get_PointerTons1__FareType(struct soap*, ns1__FareType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ValidationInfo_DEFINED
#define SOAP_TYPE_PointerTons1__ValidationInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ValidationInfo(struct soap*, ns1__ValidationInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ValidationInfo(struct soap*, const char *, int, ns1__ValidationInfo *const*, const char *);
SOAP_FMAC3 ns1__ValidationInfo ** SOAP_FMAC4 soap_in_PointerTons1__ValidationInfo(struct soap*, const char*, ns1__ValidationInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ValidationInfo(struct soap*, ns1__ValidationInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__ValidationInfo ** SOAP_FMAC4 soap_get_PointerTons1__ValidationInfo(struct soap*, ns1__ValidationInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ValidationOpType_DEFINED
#define SOAP_TYPE_PointerTons1__ValidationOpType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ValidationOpType(struct soap*, ns1__ValidationOpType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ValidationOpType(struct soap*, const char *, int, ns1__ValidationOpType *const*, const char *);
SOAP_FMAC3 ns1__ValidationOpType ** SOAP_FMAC4 soap_in_PointerTons1__ValidationOpType(struct soap*, const char*, ns1__ValidationOpType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ValidationOpType(struct soap*, ns1__ValidationOpType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ValidationOpType ** SOAP_FMAC4 soap_get_PointerTons1__ValidationOpType(struct soap*, ns1__ValidationOpType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FareProductType_DEFINED
#define SOAP_TYPE_PointerTons1__FareProductType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FareProductType(struct soap*, ns1__FareProductType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FareProductType(struct soap*, const char *, int, ns1__FareProductType *const*, const char *);
SOAP_FMAC3 ns1__FareProductType ** SOAP_FMAC4 soap_in_PointerTons1__FareProductType(struct soap*, const char*, ns1__FareProductType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FareProductType(struct soap*, ns1__FareProductType *const*, const char*, const char*);
SOAP_FMAC3 ns1__FareProductType ** SOAP_FMAC4 soap_get_PointerTons1__FareProductType(struct soap*, ns1__FareProductType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Schedule_DEFINED
#define SOAP_TYPE_PointerTons1__Schedule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Schedule(struct soap*, ns1__Schedule *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Schedule(struct soap*, const char *, int, ns1__Schedule *const*, const char *);
SOAP_FMAC3 ns1__Schedule ** SOAP_FMAC4 soap_in_PointerTons1__Schedule(struct soap*, const char*, ns1__Schedule **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Schedule(struct soap*, ns1__Schedule *const*, const char*, const char*);
SOAP_FMAC3 ns1__Schedule ** SOAP_FMAC4 soap_get_PointerTons1__Schedule(struct soap*, ns1__Schedule **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__stPackageListType_DEFINED
#define SOAP_TYPE_PointerTons1__stPackageListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__stPackageListType(struct soap*, ns1__stPackageListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__stPackageListType(struct soap*, const char *, int, ns1__stPackageListType *const*, const char *);
SOAP_FMAC3 ns1__stPackageListType ** SOAP_FMAC4 soap_in_PointerTons1__stPackageListType(struct soap*, const char*, ns1__stPackageListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__stPackageListType(struct soap*, ns1__stPackageListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__stPackageListType ** SOAP_FMAC4 soap_get_PointerTons1__stPackageListType(struct soap*, ns1__stPackageListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecordListType_DEFINED
#define SOAP_TYPE_PointerTons1__RecordListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecordListType(struct soap*, ns1__RecordListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecordListType(struct soap*, const char *, int, ns1__RecordListType *const*, const char *);
SOAP_FMAC3 ns1__RecordListType ** SOAP_FMAC4 soap_in_PointerTons1__RecordListType(struct soap*, const char*, ns1__RecordListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecordListType(struct soap*, ns1__RecordListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecordListType ** SOAP_FMAC4 soap_get_PointerTons1__RecordListType(struct soap*, ns1__RecordListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ResultWS_DEFINED
#define SOAP_TYPE_PointerTons1__ResultWS_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ResultWS(struct soap*, ns1__ResultWS *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ResultWS(struct soap*, const char *, int, ns1__ResultWS *const*, const char *);
SOAP_FMAC3 ns1__ResultWS ** SOAP_FMAC4 soap_in_PointerTons1__ResultWS(struct soap*, const char*, ns1__ResultWS **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ResultWS(struct soap*, ns1__ResultWS *const*, const char*, const char*);
SOAP_FMAC3 ns1__ResultWS ** SOAP_FMAC4 soap_get_PointerTons1__ResultWS(struct soap*, ns1__ResultWS **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PackageConfigVersionListType_DEFINED
#define SOAP_TYPE_PointerTons1__PackageConfigVersionListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PackageConfigVersionListType(struct soap*, ns1__PackageConfigVersionListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PackageConfigVersionListType(struct soap*, const char *, int, ns1__PackageConfigVersionListType *const*, const char *);
SOAP_FMAC3 ns1__PackageConfigVersionListType ** SOAP_FMAC4 soap_in_PointerTons1__PackageConfigVersionListType(struct soap*, const char*, ns1__PackageConfigVersionListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PackageConfigVersionListType(struct soap*, ns1__PackageConfigVersionListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__PackageConfigVersionListType ** SOAP_FMAC4 soap_get_PointerTons1__PackageConfigVersionListType(struct soap*, ns1__PackageConfigVersionListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CommandCCTIUType_DEFINED
#define SOAP_TYPE_PointerTons1__CommandCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CommandCCTIUType(struct soap*, ns1__CommandCCTIUType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CommandCCTIUType(struct soap*, const char *, int, ns1__CommandCCTIUType *const*, const char *);
SOAP_FMAC3 ns1__CommandCCTIUType ** SOAP_FMAC4 soap_in_PointerTons1__CommandCCTIUType(struct soap*, const char*, ns1__CommandCCTIUType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CommandCCTIUType(struct soap*, ns1__CommandCCTIUType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CommandCCTIUType ** SOAP_FMAC4 soap_get_PointerTons1__CommandCCTIUType(struct soap*, ns1__CommandCCTIUType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ConfigElementCCTIUListType_DEFINED
#define SOAP_TYPE_PointerTons1__ConfigElementCCTIUListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ConfigElementCCTIUListType(struct soap*, ns1__ConfigElementCCTIUListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ConfigElementCCTIUListType(struct soap*, const char *, int, ns1__ConfigElementCCTIUListType *const*, const char *);
SOAP_FMAC3 ns1__ConfigElementCCTIUListType ** SOAP_FMAC4 soap_in_PointerTons1__ConfigElementCCTIUListType(struct soap*, const char*, ns1__ConfigElementCCTIUListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ConfigElementCCTIUListType(struct soap*, ns1__ConfigElementCCTIUListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ConfigElementCCTIUListType ** SOAP_FMAC4 soap_get_PointerTons1__ConfigElementCCTIUListType(struct soap*, ns1__ConfigElementCCTIUListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TransactionMTCIdRangeListType_DEFINED
#define SOAP_TYPE_PointerTons1__TransactionMTCIdRangeListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TransactionMTCIdRangeListType(struct soap*, ns1__TransactionMTCIdRangeListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TransactionMTCIdRangeListType(struct soap*, const char *, int, ns1__TransactionMTCIdRangeListType *const*, const char *);
SOAP_FMAC3 ns1__TransactionMTCIdRangeListType ** SOAP_FMAC4 soap_in_PointerTons1__TransactionMTCIdRangeListType(struct soap*, const char*, ns1__TransactionMTCIdRangeListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TransactionMTCIdRangeListType(struct soap*, ns1__TransactionMTCIdRangeListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionMTCIdRangeListType ** SOAP_FMAC4 soap_get_PointerTons1__TransactionMTCIdRangeListType(struct soap*, ns1__TransactionMTCIdRangeListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CustomRecordRequest_DEFINED
#define SOAP_TYPE_PointerTons1__CustomRecordRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CustomRecordRequest(struct soap*, ns1__CustomRecordRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CustomRecordRequest(struct soap*, const char *, int, ns1__CustomRecordRequest *const*, const char *);
SOAP_FMAC3 ns1__CustomRecordRequest ** SOAP_FMAC4 soap_in_PointerTons1__CustomRecordRequest(struct soap*, const char*, ns1__CustomRecordRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CustomRecordRequest(struct soap*, ns1__CustomRecordRequest *const*, const char*, const char*);
SOAP_FMAC3 ns1__CustomRecordRequest ** SOAP_FMAC4 soap_get_PointerTons1__CustomRecordRequest(struct soap*, ns1__CustomRecordRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecordRangeIdTypeList_DEFINED
#define SOAP_TYPE_PointerTons1__RecordRangeIdTypeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecordRangeIdTypeList(struct soap*, ns1__RecordRangeIdTypeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecordRangeIdTypeList(struct soap*, const char *, int, ns1__RecordRangeIdTypeList *const*, const char *);
SOAP_FMAC3 ns1__RecordRangeIdTypeList ** SOAP_FMAC4 soap_in_PointerTons1__RecordRangeIdTypeList(struct soap*, const char*, ns1__RecordRangeIdTypeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecordRangeIdTypeList(struct soap*, ns1__RecordRangeIdTypeList *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecordRangeIdTypeList ** SOAP_FMAC4 soap_get_PointerTons1__RecordRangeIdTypeList(struct soap*, ns1__RecordRangeIdTypeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons2__Distance_DEFINED
#define SOAP_TYPE_PointerToPointerTons2__Distance_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons2__Distance(struct soap*, ns2__Distance **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons2__Distance(struct soap*, const char *, int, ns2__Distance **const*, const char *);
SOAP_FMAC3 ns2__Distance *** SOAP_FMAC4 soap_in_PointerToPointerTons2__Distance(struct soap*, const char*, ns2__Distance ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons2__Distance(struct soap*, ns2__Distance **const*, const char*, const char*);
SOAP_FMAC3 ns2__Distance *** SOAP_FMAC4 soap_get_PointerToPointerTons2__Distance(struct soap*, ns2__Distance ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Distance_DEFINED
#define SOAP_TYPE_PointerTons2__Distance_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Distance(struct soap*, ns2__Distance *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Distance(struct soap*, const char *, int, ns2__Distance *const*, const char *);
SOAP_FMAC3 ns2__Distance ** SOAP_FMAC4 soap_in_PointerTons2__Distance(struct soap*, const char*, ns2__Distance **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Distance(struct soap*, ns2__Distance *const*, const char*, const char*);
SOAP_FMAC3 ns2__Distance ** SOAP_FMAC4 soap_get_PointerTons2__Distance(struct soap*, ns2__Distance **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__DistanceList_DEFINED
#define SOAP_TYPE_PointerTons2__DistanceList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__DistanceList(struct soap*, ns2__DistanceList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__DistanceList(struct soap*, const char *, int, ns2__DistanceList *const*, const char *);
SOAP_FMAC3 ns2__DistanceList ** SOAP_FMAC4 soap_in_PointerTons2__DistanceList(struct soap*, const char*, ns2__DistanceList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__DistanceList(struct soap*, ns2__DistanceList *const*, const char*, const char*);
SOAP_FMAC3 ns2__DistanceList ** SOAP_FMAC4 soap_get_PointerTons2__DistanceList(struct soap*, ns2__DistanceList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons2__NameSet_DEFINED
#define SOAP_TYPE_PointerToPointerTons2__NameSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons2__NameSet(struct soap*, ns2__NameSet **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons2__NameSet(struct soap*, const char *, int, ns2__NameSet **const*, const char *);
SOAP_FMAC3 ns2__NameSet *** SOAP_FMAC4 soap_in_PointerToPointerTons2__NameSet(struct soap*, const char*, ns2__NameSet ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons2__NameSet(struct soap*, ns2__NameSet **const*, const char*, const char*);
SOAP_FMAC3 ns2__NameSet *** SOAP_FMAC4 soap_get_PointerToPointerTons2__NameSet(struct soap*, ns2__NameSet ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__NameSet_DEFINED
#define SOAP_TYPE_PointerTons2__NameSet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__NameSet(struct soap*, ns2__NameSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__NameSet(struct soap*, const char *, int, ns2__NameSet *const*, const char *);
SOAP_FMAC3 ns2__NameSet ** SOAP_FMAC4 soap_in_PointerTons2__NameSet(struct soap*, const char*, ns2__NameSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__NameSet(struct soap*, ns2__NameSet *const*, const char*, const char*);
SOAP_FMAC3 ns2__NameSet ** SOAP_FMAC4 soap_get_PointerTons2__NameSet(struct soap*, ns2__NameSet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons2__Header_DEFINED
#define SOAP_TYPE_PointerTons2__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Header(struct soap*, ns2__Header *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Header(struct soap*, const char *, int, ns2__Header *const*, const char *);
SOAP_FMAC3 ns2__Header ** SOAP_FMAC4 soap_in_PointerTons2__Header(struct soap*, const char*, ns2__Header **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Header(struct soap*, ns2__Header *const*, const char*, const char*);
SOAP_FMAC3 ns2__Header ** SOAP_FMAC4 soap_get_PointerTons2__Header(struct soap*, ns2__Header **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__versionList_DEFINED
#define SOAP_TYPE_PointerTons1__versionList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__versionList(struct soap*, ns1__versionList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__versionList(struct soap*, const char *, int, ns1__versionList *const*, const char *);
SOAP_FMAC3 ns1__versionList ** SOAP_FMAC4 soap_in_PointerTons1__versionList(struct soap*, const char*, ns1__versionList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__versionList(struct soap*, ns1__versionList *const*, const char*, const char*);
SOAP_FMAC3 ns1__versionList ** SOAP_FMAC4 soap_get_PointerTons1__versionList(struct soap*, ns1__versionList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvOrderConfirmationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvOrderConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvOrderConfirmationType(struct soap*, ns1__SrvOrderConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvOrderConfirmationType(struct soap*, const char *, int, ns1__SrvOrderConfirmationType *const*, const char *);
SOAP_FMAC3 ns1__SrvOrderConfirmationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvOrderConfirmationType(struct soap*, const char*, ns1__SrvOrderConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvOrderConfirmationType(struct soap*, ns1__SrvOrderConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvOrderConfirmationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvOrderConfirmationType(struct soap*, ns1__SrvOrderConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvOrderNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvOrderNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvOrderNotificationType(struct soap*, ns1__SrvOrderNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvOrderNotificationType(struct soap*, const char *, int, ns1__SrvOrderNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvOrderNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvOrderNotificationType(struct soap*, const char*, ns1__SrvOrderNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvOrderNotificationType(struct soap*, ns1__SrvOrderNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvOrderNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvOrderNotificationType(struct soap*, ns1__SrvOrderNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFileConfirmationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFileConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFileConfirmationType(struct soap*, ns1__SrvFileConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFileConfirmationType(struct soap*, const char *, int, ns1__SrvFileConfirmationType *const*, const char *);
SOAP_FMAC3 ns1__SrvFileConfirmationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFileConfirmationType(struct soap*, const char*, ns1__SrvFileConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFileConfirmationType(struct soap*, ns1__SrvFileConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFileConfirmationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFileConfirmationType(struct soap*, ns1__SrvFileConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFileNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFileNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFileNotificationType(struct soap*, ns1__SrvFileNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFileNotificationType(struct soap*, const char *, int, ns1__SrvFileNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvFileNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFileNotificationType(struct soap*, const char*, ns1__SrvFileNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFileNotificationType(struct soap*, ns1__SrvFileNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFileNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFileNotificationType(struct soap*, ns1__SrvFileNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvConfigurationContentResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvConfigurationContentResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvConfigurationContentResponseType(struct soap*, ns1__SrvConfigurationContentResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvConfigurationContentResponseType(struct soap*, const char *, int, ns1__SrvConfigurationContentResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvConfigurationContentResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvConfigurationContentResponseType(struct soap*, const char*, ns1__SrvConfigurationContentResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvConfigurationContentResponseType(struct soap*, ns1__SrvConfigurationContentResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvConfigurationContentResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvConfigurationContentResponseType(struct soap*, ns1__SrvConfigurationContentResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvConfigurationContentRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvConfigurationContentRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvConfigurationContentRequestType(struct soap*, ns1__SrvConfigurationContentRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvConfigurationContentRequestType(struct soap*, const char *, int, ns1__SrvConfigurationContentRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvConfigurationContentRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvConfigurationContentRequestType(struct soap*, const char*, ns1__SrvConfigurationContentRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvConfigurationContentRequestType(struct soap*, ns1__SrvConfigurationContentRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvConfigurationContentRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvConfigurationContentRequestType(struct soap*, ns1__SrvConfigurationContentRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvNewConfigurationConfirmationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvNewConfigurationConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvNewConfigurationConfirmationType(struct soap*, ns1__SrvNewConfigurationConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvNewConfigurationConfirmationType(struct soap*, const char *, int, ns1__SrvNewConfigurationConfirmationType *const*, const char *);
SOAP_FMAC3 ns1__SrvNewConfigurationConfirmationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvNewConfigurationConfirmationType(struct soap*, const char*, ns1__SrvNewConfigurationConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvNewConfigurationConfirmationType(struct soap*, ns1__SrvNewConfigurationConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvNewConfigurationConfirmationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvNewConfigurationConfirmationType(struct soap*, ns1__SrvNewConfigurationConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvNewConfigurationNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvNewConfigurationNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvNewConfigurationNotificationType(struct soap*, ns1__SrvNewConfigurationNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvNewConfigurationNotificationType(struct soap*, const char *, int, ns1__SrvNewConfigurationNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvNewConfigurationNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvNewConfigurationNotificationType(struct soap*, const char*, ns1__SrvNewConfigurationNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvNewConfigurationNotificationType(struct soap*, ns1__SrvNewConfigurationNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvNewConfigurationNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvNewConfigurationNotificationType(struct soap*, ns1__SrvNewConfigurationNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREVersionResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREVersionResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREVersionResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREVersionResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCOREVersionResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREVersionResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREVersionRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREVersionRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREVersionRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREVersionRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCOREVersionRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREVersionRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREDiagnosticRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREStatusNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREStatusNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCOREStatusNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREStatusResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREStatusResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCOREStatusResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREStatusRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREStatusRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREStatusRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCOREStatusRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREStatusRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCOREAlarmRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCOREAlarmRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCORECommandExecNotifyType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCORECommandExecNotifyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCORECommandExecNotifyType(struct soap*, ns1__SrvMTC_USCORECommandExecNotifyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCORECommandExecNotifyType(struct soap*, const char *, int, ns1__SrvMTC_USCORECommandExecNotifyType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecNotifyType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCORECommandExecNotifyType(struct soap*, const char*, ns1__SrvMTC_USCORECommandExecNotifyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCORECommandExecNotifyType(struct soap*, ns1__SrvMTC_USCORECommandExecNotifyType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecNotifyType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCORECommandExecNotifyType(struct soap*, ns1__SrvMTC_USCORECommandExecNotifyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCORECommandExecResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCORECommandExecResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCORECommandExecResponseType(struct soap*, ns1__SrvMTC_USCORECommandExecResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCORECommandExecResponseType(struct soap*, const char *, int, ns1__SrvMTC_USCORECommandExecResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCORECommandExecResponseType(struct soap*, const char*, ns1__SrvMTC_USCORECommandExecResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCORECommandExecResponseType(struct soap*, ns1__SrvMTC_USCORECommandExecResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCORECommandExecResponseType(struct soap*, ns1__SrvMTC_USCORECommandExecResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCORECommandExecRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCORECommandExecRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCORECommandExecRequestType(struct soap*, ns1__SrvMTC_USCORECommandExecRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCORECommandExecRequestType(struct soap*, const char *, int, ns1__SrvMTC_USCORECommandExecRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCORECommandExecRequestType(struct soap*, const char*, ns1__SrvMTC_USCORECommandExecRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCORECommandExecRequestType(struct soap*, ns1__SrvMTC_USCORECommandExecRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORECommandExecRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCORECommandExecRequestType(struct soap*, ns1__SrvMTC_USCORECommandExecRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREConfigElementChangeResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREConfigElementChangeResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap*, ns1__SrvMTC_USCOREConfigElementChangeResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap*, const char *, int, ns1__SrvMTC_USCOREConfigElementChangeResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementChangeResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREConfigElementChangeResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap*, ns1__SrvMTC_USCOREConfigElementChangeResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementChangeResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREConfigElementChangeResponseType(struct soap*, ns1__SrvMTC_USCOREConfigElementChangeResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREConfigElementChangeRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREConfigElementChangeRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap*, ns1__SrvMTC_USCOREConfigElementChangeRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap*, const char *, int, ns1__SrvMTC_USCOREConfigElementChangeRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementChangeRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREConfigElementChangeRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap*, ns1__SrvMTC_USCOREConfigElementChangeRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementChangeRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREConfigElementChangeRequestType(struct soap*, ns1__SrvMTC_USCOREConfigElementChangeRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREConfigElementResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREConfigElementResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREConfigElementResponseType(struct soap*, ns1__SrvMTC_USCOREConfigElementResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREConfigElementResponseType(struct soap*, const char *, int, ns1__SrvMTC_USCOREConfigElementResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREConfigElementResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREConfigElementResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREConfigElementResponseType(struct soap*, ns1__SrvMTC_USCOREConfigElementResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREConfigElementResponseType(struct soap*, ns1__SrvMTC_USCOREConfigElementResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREConfigElementRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREConfigElementRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREConfigElementRequestType(struct soap*, ns1__SrvMTC_USCOREConfigElementRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREConfigElementRequestType(struct soap*, const char *, int, ns1__SrvMTC_USCOREConfigElementRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREConfigElementRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREConfigElementRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREConfigElementRequestType(struct soap*, ns1__SrvMTC_USCOREConfigElementRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREConfigElementRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREConfigElementRequestType(struct soap*, ns1__SrvMTC_USCOREConfigElementRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREVersionResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREVersionResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREVersionResponseType(struct soap*, ns1__SrvMTC_USCOREVersionResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREVersionResponseType(struct soap*, const char *, int, ns1__SrvMTC_USCOREVersionResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREVersionResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREVersionResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREVersionResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREVersionResponseType(struct soap*, ns1__SrvMTC_USCOREVersionResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREVersionResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREVersionResponseType(struct soap*, ns1__SrvMTC_USCOREVersionResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREVersionRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREVersionRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREVersionRequestType(struct soap*, ns1__SrvMTC_USCOREVersionRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREVersionRequestType(struct soap*, const char *, int, ns1__SrvMTC_USCOREVersionRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREVersionRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREVersionRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREVersionRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREVersionRequestType(struct soap*, ns1__SrvMTC_USCOREVersionRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREVersionRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREVersionRequestType(struct soap*, ns1__SrvMTC_USCOREVersionRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREDiagnosticResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREDiagnosticResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREDiagnosticResponseType(struct soap*, ns1__SrvMTC_USCOREDiagnosticResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREDiagnosticResponseType(struct soap*, const char *, int, ns1__SrvMTC_USCOREDiagnosticResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREDiagnosticResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREDiagnosticResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREDiagnosticResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREDiagnosticResponseType(struct soap*, ns1__SrvMTC_USCOREDiagnosticResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREDiagnosticResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREDiagnosticResponseType(struct soap*, ns1__SrvMTC_USCOREDiagnosticResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREDiagnosticRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREDiagnosticRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREDiagnosticRequestType(struct soap*, ns1__SrvMTC_USCOREDiagnosticRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREDiagnosticRequestType(struct soap*, const char *, int, ns1__SrvMTC_USCOREDiagnosticRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREDiagnosticRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREDiagnosticRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREDiagnosticRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREDiagnosticRequestType(struct soap*, ns1__SrvMTC_USCOREDiagnosticRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREDiagnosticRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREDiagnosticRequestType(struct soap*, ns1__SrvMTC_USCOREDiagnosticRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREStatusNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREStatusNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREStatusNotificationType(struct soap*, ns1__SrvMTC_USCOREStatusNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREStatusNotificationType(struct soap*, const char *, int, ns1__SrvMTC_USCOREStatusNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREStatusNotificationType(struct soap*, const char*, ns1__SrvMTC_USCOREStatusNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREStatusNotificationType(struct soap*, ns1__SrvMTC_USCOREStatusNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREStatusNotificationType(struct soap*, ns1__SrvMTC_USCOREStatusNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREStatusResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREStatusResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREStatusResponseType(struct soap*, ns1__SrvMTC_USCOREStatusResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREStatusResponseType(struct soap*, const char *, int, ns1__SrvMTC_USCOREStatusResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREStatusResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREStatusResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREStatusResponseType(struct soap*, ns1__SrvMTC_USCOREStatusResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREStatusResponseType(struct soap*, ns1__SrvMTC_USCOREStatusResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREStatusRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREStatusRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREStatusRequestType(struct soap*, ns1__SrvMTC_USCOREStatusRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREStatusRequestType(struct soap*, const char *, int, ns1__SrvMTC_USCOREStatusRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREStatusRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREStatusRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREStatusRequestType(struct soap*, ns1__SrvMTC_USCOREStatusRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREStatusRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREStatusRequestType(struct soap*, ns1__SrvMTC_USCOREStatusRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREAlarmNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREAlarmNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREAlarmNotificationType(struct soap*, ns1__SrvMTC_USCOREAlarmNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREAlarmNotificationType(struct soap*, const char *, int, ns1__SrvMTC_USCOREAlarmNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREAlarmNotificationType(struct soap*, const char*, ns1__SrvMTC_USCOREAlarmNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREAlarmNotificationType(struct soap*, ns1__SrvMTC_USCOREAlarmNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREAlarmNotificationType(struct soap*, ns1__SrvMTC_USCOREAlarmNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREAlarmResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREAlarmResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREAlarmResponseType(struct soap*, ns1__SrvMTC_USCOREAlarmResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREAlarmResponseType(struct soap*, const char *, int, ns1__SrvMTC_USCOREAlarmResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREAlarmResponseType(struct soap*, const char*, ns1__SrvMTC_USCOREAlarmResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREAlarmResponseType(struct soap*, ns1__SrvMTC_USCOREAlarmResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREAlarmResponseType(struct soap*, ns1__SrvMTC_USCOREAlarmResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCOREAlarmRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCOREAlarmRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCOREAlarmRequestType(struct soap*, ns1__SrvMTC_USCOREAlarmRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCOREAlarmRequestType(struct soap*, const char *, int, ns1__SrvMTC_USCOREAlarmRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCOREAlarmRequestType(struct soap*, const char*, ns1__SrvMTC_USCOREAlarmRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCOREAlarmRequestType(struct soap*, ns1__SrvMTC_USCOREAlarmRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCOREAlarmRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCOREAlarmRequestType(struct soap*, ns1__SrvMTC_USCOREAlarmRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMtvmExtendedStateNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMtvmExtendedStateNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMtvmExtendedStateNotificationType(struct soap*, ns1__SrvMtvmExtendedStateNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMtvmExtendedStateNotificationType(struct soap*, const char *, int, ns1__SrvMtvmExtendedStateNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvMtvmExtendedStateNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMtvmExtendedStateNotificationType(struct soap*, const char*, ns1__SrvMtvmExtendedStateNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMtvmExtendedStateNotificationType(struct soap*, ns1__SrvMtvmExtendedStateNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMtvmExtendedStateNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMtvmExtendedStateNotificationType(struct soap*, ns1__SrvMtvmExtendedStateNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvExtendedStateNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvExtendedStateNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvExtendedStateNotificationType(struct soap*, ns1__SrvExtendedStateNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvExtendedStateNotificationType(struct soap*, const char *, int, ns1__SrvExtendedStateNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvExtendedStateNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvExtendedStateNotificationType(struct soap*, const char*, ns1__SrvExtendedStateNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvExtendedStateNotificationType(struct soap*, ns1__SrvExtendedStateNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvExtendedStateNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvExtendedStateNotificationType(struct soap*, ns1__SrvExtendedStateNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvTvmExtendedStateNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvTvmExtendedStateNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvTvmExtendedStateNotificationType(struct soap*, ns1__SrvTvmExtendedStateNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvTvmExtendedStateNotificationType(struct soap*, const char *, int, ns1__SrvTvmExtendedStateNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvTvmExtendedStateNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvTvmExtendedStateNotificationType(struct soap*, const char*, ns1__SrvTvmExtendedStateNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvTvmExtendedStateNotificationType(struct soap*, ns1__SrvTvmExtendedStateNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvTvmExtendedStateNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvTvmExtendedStateNotificationType(struct soap*, ns1__SrvTvmExtendedStateNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvAgExtendedStateNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvAgExtendedStateNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvAgExtendedStateNotificationType(struct soap*, ns1__SrvAgExtendedStateNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvAgExtendedStateNotificationType(struct soap*, const char *, int, ns1__SrvAgExtendedStateNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvAgExtendedStateNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvAgExtendedStateNotificationType(struct soap*, const char*, ns1__SrvAgExtendedStateNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvAgExtendedStateNotificationType(struct soap*, ns1__SrvAgExtendedStateNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvAgExtendedStateNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvAgExtendedStateNotificationType(struct soap*, ns1__SrvAgExtendedStateNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvStateSceqnNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvStateSceqnNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvStateSceqnNotificationType(struct soap*, ns1__SrvStateSceqnNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvStateSceqnNotificationType(struct soap*, const char *, int, ns1__SrvStateSceqnNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvStateSceqnNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvStateSceqnNotificationType(struct soap*, const char*, ns1__SrvStateSceqnNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvStateSceqnNotificationType(struct soap*, ns1__SrvStateSceqnNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvStateSceqnNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvStateSceqnNotificationType(struct soap*, ns1__SrvStateSceqnNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvStateConfigInstallationNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvStateConfigInstallationNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvStateConfigInstallationNotificationType(struct soap*, ns1__SrvStateConfigInstallationNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvStateConfigInstallationNotificationType(struct soap*, const char *, int, ns1__SrvStateConfigInstallationNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvStateConfigInstallationNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvStateConfigInstallationNotificationType(struct soap*, const char*, ns1__SrvStateConfigInstallationNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvStateConfigInstallationNotificationType(struct soap*, ns1__SrvStateConfigInstallationNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvStateConfigInstallationNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvStateConfigInstallationNotificationType(struct soap*, ns1__SrvStateConfigInstallationNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvVersionNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvVersionNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvVersionNotificationType(struct soap*, ns1__SrvVersionNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvVersionNotificationType(struct soap*, const char *, int, ns1__SrvVersionNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvVersionNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvVersionNotificationType(struct soap*, const char*, ns1__SrvVersionNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvVersionNotificationType(struct soap*, ns1__SrvVersionNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvVersionNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvVersionNotificationType(struct soap*, ns1__SrvVersionNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvDiagnosticNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvDiagnosticNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvDiagnosticNotificationType(struct soap*, ns1__SrvDiagnosticNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvDiagnosticNotificationType(struct soap*, const char *, int, ns1__SrvDiagnosticNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvDiagnosticNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvDiagnosticNotificationType(struct soap*, const char*, ns1__SrvDiagnosticNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvDiagnosticNotificationType(struct soap*, ns1__SrvDiagnosticNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvDiagnosticNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvDiagnosticNotificationType(struct soap*, ns1__SrvDiagnosticNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvConfigurationNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvConfigurationNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvConfigurationNotificationType(struct soap*, ns1__SrvConfigurationNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvConfigurationNotificationType(struct soap*, const char *, int, ns1__SrvConfigurationNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvConfigurationNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvConfigurationNotificationType(struct soap*, const char*, ns1__SrvConfigurationNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvConfigurationNotificationType(struct soap*, ns1__SrvConfigurationNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvConfigurationNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvConfigurationNotificationType(struct soap*, ns1__SrvConfigurationNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__srvCommandBaseResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__srvCommandBaseResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__srvCommandBaseResponseType(struct soap*, ns1__srvCommandBaseResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__srvCommandBaseResponseType(struct soap*, const char *, int, ns1__srvCommandBaseResponseType *const*, const char *);
SOAP_FMAC3 ns1__srvCommandBaseResponseType ** SOAP_FMAC4 soap_in_PointerTons1__srvCommandBaseResponseType(struct soap*, const char*, ns1__srvCommandBaseResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__srvCommandBaseResponseType(struct soap*, ns1__srvCommandBaseResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__srvCommandBaseResponseType ** SOAP_FMAC4 soap_get_PointerTons1__srvCommandBaseResponseType(struct soap*, ns1__srvCommandBaseResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__srvCommandBaseRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__srvCommandBaseRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__srvCommandBaseRequestType(struct soap*, ns1__srvCommandBaseRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__srvCommandBaseRequestType(struct soap*, const char *, int, ns1__srvCommandBaseRequestType *const*, const char *);
SOAP_FMAC3 ns1__srvCommandBaseRequestType ** SOAP_FMAC4 soap_in_PointerTons1__srvCommandBaseRequestType(struct soap*, const char*, ns1__srvCommandBaseRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__srvCommandBaseRequestType(struct soap*, ns1__srvCommandBaseRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__srvCommandBaseRequestType ** SOAP_FMAC4 soap_get_PointerTons1__srvCommandBaseRequestType(struct soap*, ns1__srvCommandBaseRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvAlarmConfirmationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvAlarmConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvAlarmConfirmationType(struct soap*, ns1__SrvAlarmConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvAlarmConfirmationType(struct soap*, const char *, int, ns1__SrvAlarmConfirmationType *const*, const char *);
SOAP_FMAC3 ns1__SrvAlarmConfirmationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvAlarmConfirmationType(struct soap*, const char*, ns1__SrvAlarmConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvAlarmConfirmationType(struct soap*, ns1__SrvAlarmConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvAlarmConfirmationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvAlarmConfirmationType(struct soap*, ns1__SrvAlarmConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvAlarmNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvAlarmNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvAlarmNotificationType(struct soap*, ns1__SrvAlarmNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvAlarmNotificationType(struct soap*, const char *, int, ns1__SrvAlarmNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvAlarmNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvAlarmNotificationType(struct soap*, const char*, ns1__SrvAlarmNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvAlarmNotificationType(struct soap*, ns1__SrvAlarmNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvAlarmNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvAlarmNotificationType(struct soap*, ns1__SrvAlarmNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__srvConfigurationBaseResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__srvConfigurationBaseResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__srvConfigurationBaseResponseType(struct soap*, ns1__srvConfigurationBaseResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__srvConfigurationBaseResponseType(struct soap*, const char *, int, ns1__srvConfigurationBaseResponseType *const*, const char *);
SOAP_FMAC3 ns1__srvConfigurationBaseResponseType ** SOAP_FMAC4 soap_in_PointerTons1__srvConfigurationBaseResponseType(struct soap*, const char*, ns1__srvConfigurationBaseResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__srvConfigurationBaseResponseType(struct soap*, ns1__srvConfigurationBaseResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__srvConfigurationBaseResponseType ** SOAP_FMAC4 soap_get_PointerTons1__srvConfigurationBaseResponseType(struct soap*, ns1__srvConfigurationBaseResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__srvConfigurationBaseRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__srvConfigurationBaseRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__srvConfigurationBaseRequestType(struct soap*, ns1__srvConfigurationBaseRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__srvConfigurationBaseRequestType(struct soap*, const char *, int, ns1__srvConfigurationBaseRequestType *const*, const char *);
SOAP_FMAC3 ns1__srvConfigurationBaseRequestType ** SOAP_FMAC4 soap_in_PointerTons1__srvConfigurationBaseRequestType(struct soap*, const char*, ns1__srvConfigurationBaseRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__srvConfigurationBaseRequestType(struct soap*, ns1__srvConfigurationBaseRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__srvConfigurationBaseRequestType ** SOAP_FMAC4 soap_get_PointerTons1__srvConfigurationBaseRequestType(struct soap*, ns1__srvConfigurationBaseRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvStateConfirmationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvStateConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvStateConfirmationType(struct soap*, ns1__SrvStateConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvStateConfirmationType(struct soap*, const char *, int, ns1__SrvStateConfirmationType *const*, const char *);
SOAP_FMAC3 ns1__SrvStateConfirmationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvStateConfirmationType(struct soap*, const char*, ns1__SrvStateConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvStateConfirmationType(struct soap*, ns1__SrvStateConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvStateConfirmationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvStateConfirmationType(struct soap*, ns1__SrvStateConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvStateNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvStateNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvStateNotificationType(struct soap*, ns1__SrvStateNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvStateNotificationType(struct soap*, const char *, int, ns1__SrvStateNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvStateNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvStateNotificationType(struct soap*, const char*, ns1__SrvStateNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvStateNotificationType(struct soap*, ns1__SrvStateNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvStateNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvStateNotificationType(struct soap*, ns1__SrvStateNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvStateResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvStateResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvStateResponseType(struct soap*, ns1__SrvStateResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvStateResponseType(struct soap*, const char *, int, ns1__SrvStateResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvStateResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvStateResponseType(struct soap*, const char*, ns1__SrvStateResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvStateResponseType(struct soap*, ns1__SrvStateResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvStateResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvStateResponseType(struct soap*, ns1__SrvStateResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvStateRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvStateRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvStateRequestType(struct soap*, ns1__SrvStateRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvStateRequestType(struct soap*, const char *, int, ns1__SrvStateRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvStateRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvStateRequestType(struct soap*, const char*, ns1__SrvStateRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvStateRequestType(struct soap*, ns1__SrvStateRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvStateRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvStateRequestType(struct soap*, ns1__SrvStateRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__srvPresentationV1ResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__srvPresentationV1ResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__srvPresentationV1ResponseType(struct soap*, ns1__srvPresentationV1ResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__srvPresentationV1ResponseType(struct soap*, const char *, int, ns1__srvPresentationV1ResponseType *const*, const char *);
SOAP_FMAC3 ns1__srvPresentationV1ResponseType ** SOAP_FMAC4 soap_in_PointerTons1__srvPresentationV1ResponseType(struct soap*, const char*, ns1__srvPresentationV1ResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__srvPresentationV1ResponseType(struct soap*, ns1__srvPresentationV1ResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__srvPresentationV1ResponseType ** SOAP_FMAC4 soap_get_PointerTons1__srvPresentationV1ResponseType(struct soap*, ns1__srvPresentationV1ResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__srvPresentationV1RequestType_DEFINED
#define SOAP_TYPE_PointerTons1__srvPresentationV1RequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__srvPresentationV1RequestType(struct soap*, ns1__srvPresentationV1RequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__srvPresentationV1RequestType(struct soap*, const char *, int, ns1__srvPresentationV1RequestType *const*, const char *);
SOAP_FMAC3 ns1__srvPresentationV1RequestType ** SOAP_FMAC4 soap_in_PointerTons1__srvPresentationV1RequestType(struct soap*, const char*, ns1__srvPresentationV1RequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__srvPresentationV1RequestType(struct soap*, ns1__srvPresentationV1RequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__srvPresentationV1RequestType ** SOAP_FMAC4 soap_get_PointerTons1__srvPresentationV1RequestType(struct soap*, ns1__srvPresentationV1RequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCORETransactionResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCORETransactionResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCORETransactionResponseType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCORETransactionRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCORETransactionRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCORETransactionRequestType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCORETransactionConfirmationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCORETransactionConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCORETransactionConfirmationType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCORETransactionNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvFE_USCOREMTC_USCORETransactionNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap*, const char *, int, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap*, const char*, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvFE_USCOREMTC_USCORETransactionNotificationType(struct soap*, ns1__SrvFE_USCOREMTC_USCORETransactionNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCORETransactionResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCORETransactionResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCORETransactionResponseType(struct soap*, ns1__SrvMTC_USCORETransactionResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCORETransactionResponseType(struct soap*, const char *, int, ns1__SrvMTC_USCORETransactionResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCORETransactionResponseType(struct soap*, const char*, ns1__SrvMTC_USCORETransactionResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCORETransactionResponseType(struct soap*, ns1__SrvMTC_USCORETransactionResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCORETransactionResponseType(struct soap*, ns1__SrvMTC_USCORETransactionResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCORETransactionRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCORETransactionRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCORETransactionRequestType(struct soap*, ns1__SrvMTC_USCORETransactionRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCORETransactionRequestType(struct soap*, const char *, int, ns1__SrvMTC_USCORETransactionRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCORETransactionRequestType(struct soap*, const char*, ns1__SrvMTC_USCORETransactionRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCORETransactionRequestType(struct soap*, ns1__SrvMTC_USCORETransactionRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCORETransactionRequestType(struct soap*, ns1__SrvMTC_USCORETransactionRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCORETransactionConfirmationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCORETransactionConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCORETransactionConfirmationType(struct soap*, ns1__SrvMTC_USCORETransactionConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCORETransactionConfirmationType(struct soap*, const char *, int, ns1__SrvMTC_USCORETransactionConfirmationType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionConfirmationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCORETransactionConfirmationType(struct soap*, const char*, ns1__SrvMTC_USCORETransactionConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCORETransactionConfirmationType(struct soap*, ns1__SrvMTC_USCORETransactionConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionConfirmationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCORETransactionConfirmationType(struct soap*, ns1__SrvMTC_USCORETransactionConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvMTC_USCORETransactionNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvMTC_USCORETransactionNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvMTC_USCORETransactionNotificationType(struct soap*, ns1__SrvMTC_USCORETransactionNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvMTC_USCORETransactionNotificationType(struct soap*, const char *, int, ns1__SrvMTC_USCORETransactionNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvMTC_USCORETransactionNotificationType(struct soap*, const char*, ns1__SrvMTC_USCORETransactionNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvMTC_USCORETransactionNotificationType(struct soap*, ns1__SrvMTC_USCORETransactionNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvMTC_USCORETransactionNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvMTC_USCORETransactionNotificationType(struct soap*, ns1__SrvMTC_USCORETransactionNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvRecordResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvRecordResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvRecordResponseType(struct soap*, ns1__SrvRecordResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvRecordResponseType(struct soap*, const char *, int, ns1__SrvRecordResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvRecordResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvRecordResponseType(struct soap*, const char*, ns1__SrvRecordResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvRecordResponseType(struct soap*, ns1__SrvRecordResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvRecordResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvRecordResponseType(struct soap*, ns1__SrvRecordResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvRecordRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvRecordRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvRecordRequestType(struct soap*, ns1__SrvRecordRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvRecordRequestType(struct soap*, const char *, int, ns1__SrvRecordRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvRecordRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvRecordRequestType(struct soap*, const char*, ns1__SrvRecordRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvRecordRequestType(struct soap*, ns1__SrvRecordRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvRecordRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvRecordRequestType(struct soap*, ns1__SrvRecordRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvRecordConfirmationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvRecordConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvRecordConfirmationType(struct soap*, ns1__SrvRecordConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvRecordConfirmationType(struct soap*, const char *, int, ns1__SrvRecordConfirmationType *const*, const char *);
SOAP_FMAC3 ns1__SrvRecordConfirmationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvRecordConfirmationType(struct soap*, const char*, ns1__SrvRecordConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvRecordConfirmationType(struct soap*, ns1__SrvRecordConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvRecordConfirmationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvRecordConfirmationType(struct soap*, ns1__SrvRecordConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__SrvRecordNotificationType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__SrvRecordNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__SrvRecordNotificationType(struct soap*, ns1__SrvRecordNotificationType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__SrvRecordNotificationType(struct soap*, const char *, int, ns1__SrvRecordNotificationType **const*, const char *);
SOAP_FMAC3 ns1__SrvRecordNotificationType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__SrvRecordNotificationType(struct soap*, const char*, ns1__SrvRecordNotificationType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__SrvRecordNotificationType(struct soap*, ns1__SrvRecordNotificationType **const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvRecordNotificationType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__SrvRecordNotificationType(struct soap*, ns1__SrvRecordNotificationType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvRecordNotificationType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvRecordNotificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvRecordNotificationType(struct soap*, ns1__SrvRecordNotificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvRecordNotificationType(struct soap*, const char *, int, ns1__SrvRecordNotificationType *const*, const char *);
SOAP_FMAC3 ns1__SrvRecordNotificationType ** SOAP_FMAC4 soap_in_PointerTons1__SrvRecordNotificationType(struct soap*, const char*, ns1__SrvRecordNotificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvRecordNotificationType(struct soap*, ns1__SrvRecordNotificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvRecordNotificationType ** SOAP_FMAC4 soap_get_PointerTons1__SrvRecordNotificationType(struct soap*, ns1__SrvRecordNotificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__stateConfigInstallationType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__stateConfigInstallationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__stateConfigInstallationType(struct soap*, ns1__stateConfigInstallationType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__stateConfigInstallationType(struct soap*, const char *, int, ns1__stateConfigInstallationType **const*, const char *);
SOAP_FMAC3 ns1__stateConfigInstallationType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__stateConfigInstallationType(struct soap*, const char*, ns1__stateConfigInstallationType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__stateConfigInstallationType(struct soap*, ns1__stateConfigInstallationType **const*, const char*, const char*);
SOAP_FMAC3 ns1__stateConfigInstallationType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__stateConfigInstallationType(struct soap*, ns1__stateConfigInstallationType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__stateConfigInstallationType_DEFINED
#define SOAP_TYPE_PointerTons1__stateConfigInstallationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__stateConfigInstallationType(struct soap*, ns1__stateConfigInstallationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__stateConfigInstallationType(struct soap*, const char *, int, ns1__stateConfigInstallationType *const*, const char *);
SOAP_FMAC3 ns1__stateConfigInstallationType ** SOAP_FMAC4 soap_in_PointerTons1__stateConfigInstallationType(struct soap*, const char*, ns1__stateConfigInstallationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__stateConfigInstallationType(struct soap*, ns1__stateConfigInstallationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__stateConfigInstallationType ** SOAP_FMAC4 soap_get_PointerTons1__stateConfigInstallationType(struct soap*, ns1__stateConfigInstallationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__RecordConfirmationType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__RecordConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__RecordConfirmationType(struct soap*, ns1__RecordConfirmationType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__RecordConfirmationType(struct soap*, const char *, int, ns1__RecordConfirmationType **const*, const char *);
SOAP_FMAC3 ns1__RecordConfirmationType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__RecordConfirmationType(struct soap*, const char*, ns1__RecordConfirmationType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__RecordConfirmationType(struct soap*, ns1__RecordConfirmationType **const*, const char*, const char*);
SOAP_FMAC3 ns1__RecordConfirmationType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__RecordConfirmationType(struct soap*, ns1__RecordConfirmationType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecordConfirmationType_DEFINED
#define SOAP_TYPE_PointerTons1__RecordConfirmationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecordConfirmationType(struct soap*, ns1__RecordConfirmationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecordConfirmationType(struct soap*, const char *, int, ns1__RecordConfirmationType *const*, const char *);
SOAP_FMAC3 ns1__RecordConfirmationType ** SOAP_FMAC4 soap_in_PointerTons1__RecordConfirmationType(struct soap*, const char*, ns1__RecordConfirmationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecordConfirmationType(struct soap*, ns1__RecordConfirmationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecordConfirmationType ** SOAP_FMAC4 soap_get_PointerTons1__RecordConfirmationType(struct soap*, ns1__RecordConfirmationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__SceqExtStateType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__SceqExtStateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__SceqExtStateType(struct soap*, ns1__SceqExtStateType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__SceqExtStateType(struct soap*, const char *, int, ns1__SceqExtStateType **const*, const char *);
SOAP_FMAC3 ns1__SceqExtStateType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__SceqExtStateType(struct soap*, const char*, ns1__SceqExtStateType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__SceqExtStateType(struct soap*, ns1__SceqExtStateType **const*, const char*, const char*);
SOAP_FMAC3 ns1__SceqExtStateType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__SceqExtStateType(struct soap*, ns1__SceqExtStateType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SceqExtStateType_DEFINED
#define SOAP_TYPE_PointerTons1__SceqExtStateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SceqExtStateType(struct soap*, ns1__SceqExtStateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SceqExtStateType(struct soap*, const char *, int, ns1__SceqExtStateType *const*, const char *);
SOAP_FMAC3 ns1__SceqExtStateType ** SOAP_FMAC4 soap_in_PointerTons1__SceqExtStateType(struct soap*, const char*, ns1__SceqExtStateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SceqExtStateType(struct soap*, ns1__SceqExtStateType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SceqExtStateType ** SOAP_FMAC4 soap_get_PointerTons1__SceqExtStateType(struct soap*, ns1__SceqExtStateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__diagnosticType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__diagnosticType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__diagnosticType(struct soap*, ns1__diagnosticType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__diagnosticType(struct soap*, const char *, int, ns1__diagnosticType **const*, const char *);
SOAP_FMAC3 ns1__diagnosticType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__diagnosticType(struct soap*, const char*, ns1__diagnosticType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__diagnosticType(struct soap*, ns1__diagnosticType **const*, const char*, const char*);
SOAP_FMAC3 ns1__diagnosticType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__diagnosticType(struct soap*, ns1__diagnosticType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__diagnosticType_DEFINED
#define SOAP_TYPE_PointerTons1__diagnosticType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__diagnosticType(struct soap*, ns1__diagnosticType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__diagnosticType(struct soap*, const char *, int, ns1__diagnosticType *const*, const char *);
SOAP_FMAC3 ns1__diagnosticType ** SOAP_FMAC4 soap_in_PointerTons1__diagnosticType(struct soap*, const char*, ns1__diagnosticType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__diagnosticType(struct soap*, ns1__diagnosticType *const*, const char*, const char*);
SOAP_FMAC3 ns1__diagnosticType ** SOAP_FMAC4 soap_get_PointerTons1__diagnosticType(struct soap*, ns1__diagnosticType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__versionType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__versionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__versionType(struct soap*, ns1__versionType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__versionType(struct soap*, const char *, int, ns1__versionType **const*, const char *);
SOAP_FMAC3 ns1__versionType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__versionType(struct soap*, const char*, ns1__versionType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__versionType(struct soap*, ns1__versionType **const*, const char*, const char*);
SOAP_FMAC3 ns1__versionType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__versionType(struct soap*, ns1__versionType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__versionType_DEFINED
#define SOAP_TYPE_PointerTons1__versionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__versionType(struct soap*, ns1__versionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__versionType(struct soap*, const char *, int, ns1__versionType *const*, const char *);
SOAP_FMAC3 ns1__versionType ** SOAP_FMAC4 soap_in_PointerTons1__versionType(struct soap*, const char*, ns1__versionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__versionType(struct soap*, ns1__versionType *const*, const char*, const char*);
SOAP_FMAC3 ns1__versionType ** SOAP_FMAC4 soap_get_PointerTons1__versionType(struct soap*, ns1__versionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__eqList_eq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__eqList_eq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__eqList_eq(struct soap*, _ns1__eqList_eq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__eqList_eq(struct soap*, const char *, int, _ns1__eqList_eq *const*, const char *);
SOAP_FMAC3 _ns1__eqList_eq ** SOAP_FMAC4 soap_in_PointerTo_ns1__eqList_eq(struct soap*, const char*, _ns1__eqList_eq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__eqList_eq(struct soap*, _ns1__eqList_eq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__eqList_eq ** SOAP_FMAC4 soap_get_PointerTo_ns1__eqList_eq(struct soap*, _ns1__eqList_eq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__eqList_DEFINED
#define SOAP_TYPE_PointerTons1__eqList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__eqList(struct soap*, ns1__eqList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__eqList(struct soap*, const char *, int, ns1__eqList *const*, const char *);
SOAP_FMAC3 ns1__eqList ** SOAP_FMAC4 soap_in_PointerTons1__eqList(struct soap*, const char*, ns1__eqList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__eqList(struct soap*, ns1__eqList *const*, const char*, const char*);
SOAP_FMAC3 ns1__eqList ** SOAP_FMAC4 soap_get_PointerTons1__eqList(struct soap*, ns1__eqList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__monetaryUnitListType_DEFINED
#define SOAP_TYPE_PointerTons1__monetaryUnitListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__monetaryUnitListType(struct soap*, ns1__monetaryUnitListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__monetaryUnitListType(struct soap*, const char *, int, ns1__monetaryUnitListType *const*, const char *);
SOAP_FMAC3 ns1__monetaryUnitListType ** SOAP_FMAC4 soap_in_PointerTons1__monetaryUnitListType(struct soap*, const char*, ns1__monetaryUnitListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__monetaryUnitListType(struct soap*, ns1__monetaryUnitListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__monetaryUnitListType ** SOAP_FMAC4 soap_get_PointerTons1__monetaryUnitListType(struct soap*, ns1__monetaryUnitListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__boxType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__boxType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__boxType(struct soap*, ns1__boxType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__boxType(struct soap*, const char *, int, ns1__boxType **const*, const char *);
SOAP_FMAC3 ns1__boxType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__boxType(struct soap*, const char*, ns1__boxType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__boxType(struct soap*, ns1__boxType **const*, const char*, const char*);
SOAP_FMAC3 ns1__boxType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__boxType(struct soap*, ns1__boxType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__boxType_DEFINED
#define SOAP_TYPE_PointerTons1__boxType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__boxType(struct soap*, ns1__boxType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__boxType(struct soap*, const char *, int, ns1__boxType *const*, const char *);
SOAP_FMAC3 ns1__boxType ** SOAP_FMAC4 soap_in_PointerTons1__boxType(struct soap*, const char*, ns1__boxType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__boxType(struct soap*, ns1__boxType *const*, const char*, const char*);
SOAP_FMAC3 ns1__boxType ** SOAP_FMAC4 soap_get_PointerTons1__boxType(struct soap*, ns1__boxType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MediaDispenserListType_DEFINED
#define SOAP_TYPE_PointerTons1__MediaDispenserListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MediaDispenserListType(struct soap*, ns1__MediaDispenserListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MediaDispenserListType(struct soap*, const char *, int, ns1__MediaDispenserListType *const*, const char *);
SOAP_FMAC3 ns1__MediaDispenserListType ** SOAP_FMAC4 soap_in_PointerTons1__MediaDispenserListType(struct soap*, const char*, ns1__MediaDispenserListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MediaDispenserListType(struct soap*, ns1__MediaDispenserListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MediaDispenserListType ** SOAP_FMAC4 soap_get_PointerTons1__MediaDispenserListType(struct soap*, ns1__MediaDispenserListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BoxListType_DEFINED
#define SOAP_TYPE_PointerTons1__BoxListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BoxListType(struct soap*, ns1__BoxListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BoxListType(struct soap*, const char *, int, ns1__BoxListType *const*, const char *);
SOAP_FMAC3 ns1__BoxListType ** SOAP_FMAC4 soap_in_PointerTons1__BoxListType(struct soap*, const char*, ns1__BoxListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BoxListType(struct soap*, ns1__BoxListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BoxListType ** SOAP_FMAC4 soap_get_PointerTons1__BoxListType(struct soap*, ns1__BoxListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__TransactionMTCConfType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__TransactionMTCConfType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__TransactionMTCConfType(struct soap*, ns1__TransactionMTCConfType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__TransactionMTCConfType(struct soap*, const char *, int, ns1__TransactionMTCConfType **const*, const char *);
SOAP_FMAC3 ns1__TransactionMTCConfType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__TransactionMTCConfType(struct soap*, const char*, ns1__TransactionMTCConfType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__TransactionMTCConfType(struct soap*, ns1__TransactionMTCConfType **const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionMTCConfType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__TransactionMTCConfType(struct soap*, ns1__TransactionMTCConfType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TransactionMTCConfType_DEFINED
#define SOAP_TYPE_PointerTons1__TransactionMTCConfType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TransactionMTCConfType(struct soap*, ns1__TransactionMTCConfType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TransactionMTCConfType(struct soap*, const char *, int, ns1__TransactionMTCConfType *const*, const char *);
SOAP_FMAC3 ns1__TransactionMTCConfType ** SOAP_FMAC4 soap_in_PointerTons1__TransactionMTCConfType(struct soap*, const char*, ns1__TransactionMTCConfType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TransactionMTCConfType(struct soap*, ns1__TransactionMTCConfType *const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionMTCConfType ** SOAP_FMAC4 soap_get_PointerTons1__TransactionMTCConfType(struct soap*, ns1__TransactionMTCConfType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__CashInfo_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__CashInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CashInfo(struct soap*, ns1__CashInfo **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CashInfo(struct soap*, const char *, int, ns1__CashInfo **const*, const char *);
SOAP_FMAC3 ns1__CashInfo *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CashInfo(struct soap*, const char*, ns1__CashInfo ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CashInfo(struct soap*, ns1__CashInfo **const*, const char*, const char*);
SOAP_FMAC3 ns1__CashInfo *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CashInfo(struct soap*, ns1__CashInfo ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CashInfo_DEFINED
#define SOAP_TYPE_PointerTons1__CashInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CashInfo(struct soap*, ns1__CashInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CashInfo(struct soap*, const char *, int, ns1__CashInfo *const*, const char *);
SOAP_FMAC3 ns1__CashInfo ** SOAP_FMAC4 soap_in_PointerTons1__CashInfo(struct soap*, const char*, ns1__CashInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CashInfo(struct soap*, ns1__CashInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__CashInfo ** SOAP_FMAC4 soap_get_PointerTons1__CashInfo(struct soap*, ns1__CashInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__samDeviceType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__samDeviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__samDeviceType(struct soap*, ns1__samDeviceType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__samDeviceType(struct soap*, const char *, int, ns1__samDeviceType **const*, const char *);
SOAP_FMAC3 ns1__samDeviceType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__samDeviceType(struct soap*, const char*, ns1__samDeviceType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__samDeviceType(struct soap*, ns1__samDeviceType **const*, const char*, const char*);
SOAP_FMAC3 ns1__samDeviceType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__samDeviceType(struct soap*, ns1__samDeviceType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__samDeviceType_DEFINED
#define SOAP_TYPE_PointerTons1__samDeviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__samDeviceType(struct soap*, ns1__samDeviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__samDeviceType(struct soap*, const char *, int, ns1__samDeviceType *const*, const char *);
SOAP_FMAC3 ns1__samDeviceType ** SOAP_FMAC4 soap_in_PointerTons1__samDeviceType(struct soap*, const char*, ns1__samDeviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__samDeviceType(struct soap*, ns1__samDeviceType *const*, const char*, const char*);
SOAP_FMAC3 ns1__samDeviceType ** SOAP_FMAC4 soap_get_PointerTons1__samDeviceType(struct soap*, ns1__samDeviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__Shift_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__Shift_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__Shift(struct soap*, ns1__Shift **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__Shift(struct soap*, const char *, int, ns1__Shift **const*, const char *);
SOAP_FMAC3 ns1__Shift *** SOAP_FMAC4 soap_in_PointerToPointerTons1__Shift(struct soap*, const char*, ns1__Shift ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__Shift(struct soap*, ns1__Shift **const*, const char*, const char*);
SOAP_FMAC3 ns1__Shift *** SOAP_FMAC4 soap_get_PointerToPointerTons1__Shift(struct soap*, ns1__Shift ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Shift_DEFINED
#define SOAP_TYPE_PointerTons1__Shift_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Shift(struct soap*, ns1__Shift *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Shift(struct soap*, const char *, int, ns1__Shift *const*, const char *);
SOAP_FMAC3 ns1__Shift ** SOAP_FMAC4 soap_in_PointerTons1__Shift(struct soap*, const char*, ns1__Shift **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Shift(struct soap*, ns1__Shift *const*, const char*, const char*);
SOAP_FMAC3 ns1__Shift ** SOAP_FMAC4 soap_get_PointerTons1__Shift(struct soap*, ns1__Shift **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__DispenserStockType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__DispenserStockType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__DispenserStockType(struct soap*, ns1__DispenserStockType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__DispenserStockType(struct soap*, const char *, int, ns1__DispenserStockType **const*, const char *);
SOAP_FMAC3 ns1__DispenserStockType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__DispenserStockType(struct soap*, const char*, ns1__DispenserStockType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__DispenserStockType(struct soap*, ns1__DispenserStockType **const*, const char*, const char*);
SOAP_FMAC3 ns1__DispenserStockType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__DispenserStockType(struct soap*, ns1__DispenserStockType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DispenserStockType_DEFINED
#define SOAP_TYPE_PointerTons1__DispenserStockType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DispenserStockType(struct soap*, ns1__DispenserStockType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DispenserStockType(struct soap*, const char *, int, ns1__DispenserStockType *const*, const char *);
SOAP_FMAC3 ns1__DispenserStockType ** SOAP_FMAC4 soap_in_PointerTons1__DispenserStockType(struct soap*, const char*, ns1__DispenserStockType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DispenserStockType(struct soap*, ns1__DispenserStockType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DispenserStockType ** SOAP_FMAC4 soap_get_PointerTons1__DispenserStockType(struct soap*, ns1__DispenserStockType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DispenserStockListType_DEFINED
#define SOAP_TYPE_PointerTons1__DispenserStockListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DispenserStockListType(struct soap*, ns1__DispenserStockListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DispenserStockListType(struct soap*, const char *, int, ns1__DispenserStockListType *const*, const char *);
SOAP_FMAC3 ns1__DispenserStockListType ** SOAP_FMAC4 soap_in_PointerTons1__DispenserStockListType(struct soap*, const char*, ns1__DispenserStockListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DispenserStockListType(struct soap*, ns1__DispenserStockListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DispenserStockListType ** SOAP_FMAC4 soap_get_PointerTons1__DispenserStockListType(struct soap*, ns1__DispenserStockListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__MediaDispenserType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__MediaDispenserType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__MediaDispenserType(struct soap*, ns1__MediaDispenserType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__MediaDispenserType(struct soap*, const char *, int, ns1__MediaDispenserType **const*, const char *);
SOAP_FMAC3 ns1__MediaDispenserType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__MediaDispenserType(struct soap*, const char*, ns1__MediaDispenserType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__MediaDispenserType(struct soap*, ns1__MediaDispenserType **const*, const char*, const char*);
SOAP_FMAC3 ns1__MediaDispenserType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__MediaDispenserType(struct soap*, ns1__MediaDispenserType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MediaDispenserType_DEFINED
#define SOAP_TYPE_PointerTons1__MediaDispenserType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MediaDispenserType(struct soap*, ns1__MediaDispenserType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MediaDispenserType(struct soap*, const char *, int, ns1__MediaDispenserType *const*, const char *);
SOAP_FMAC3 ns1__MediaDispenserType ** SOAP_FMAC4 soap_in_PointerTons1__MediaDispenserType(struct soap*, const char*, ns1__MediaDispenserType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MediaDispenserType(struct soap*, ns1__MediaDispenserType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MediaDispenserType ** SOAP_FMAC4 soap_get_PointerTons1__MediaDispenserType(struct soap*, ns1__MediaDispenserType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CashInfoList_DEFINED
#define SOAP_TYPE_PointerTons1__CashInfoList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CashInfoList(struct soap*, ns1__CashInfoList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CashInfoList(struct soap*, const char *, int, ns1__CashInfoList *const*, const char *);
SOAP_FMAC3 ns1__CashInfoList ** SOAP_FMAC4 soap_in_PointerTons1__CashInfoList(struct soap*, const char*, ns1__CashInfoList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CashInfoList(struct soap*, ns1__CashInfoList *const*, const char*, const char*);
SOAP_FMAC3 ns1__CashInfoList ** SOAP_FMAC4 soap_get_PointerTons1__CashInfoList(struct soap*, ns1__CashInfoList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__samDeviceTypeList_DEFINED
#define SOAP_TYPE_PointerTons1__samDeviceTypeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__samDeviceTypeList(struct soap*, ns1__samDeviceTypeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__samDeviceTypeList(struct soap*, const char *, int, ns1__samDeviceTypeList *const*, const char *);
SOAP_FMAC3 ns1__samDeviceTypeList ** SOAP_FMAC4 soap_in_PointerTons1__samDeviceTypeList(struct soap*, const char*, ns1__samDeviceTypeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__samDeviceTypeList(struct soap*, ns1__samDeviceTypeList *const*, const char*, const char*);
SOAP_FMAC3 ns1__samDeviceTypeList ** SOAP_FMAC4 soap_get_PointerTons1__samDeviceTypeList(struct soap*, ns1__samDeviceTypeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ShiftList_DEFINED
#define SOAP_TYPE_PointerTons1__ShiftList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ShiftList(struct soap*, ns1__ShiftList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ShiftList(struct soap*, const char *, int, ns1__ShiftList *const*, const char *);
SOAP_FMAC3 ns1__ShiftList ** SOAP_FMAC4 soap_in_PointerTons1__ShiftList(struct soap*, const char*, ns1__ShiftList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ShiftList(struct soap*, ns1__ShiftList *const*, const char*, const char*);
SOAP_FMAC3 ns1__ShiftList ** SOAP_FMAC4 soap_get_PointerTons1__ShiftList(struct soap*, ns1__ShiftList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__shiftType_DEFINED
#define SOAP_TYPE_PointerTons1__shiftType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__shiftType(struct soap*, ns1__shiftType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__shiftType(struct soap*, const char *, int, ns1__shiftType *const*, const char *);
SOAP_FMAC3 ns1__shiftType ** SOAP_FMAC4 soap_in_PointerTons1__shiftType(struct soap*, const char*, ns1__shiftType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__shiftType(struct soap*, ns1__shiftType *const*, const char*, const char*);
SOAP_FMAC3 ns1__shiftType ** SOAP_FMAC4 soap_get_PointerTons1__shiftType(struct soap*, ns1__shiftType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MediaOperationListType_DEFINED
#define SOAP_TYPE_PointerTons1__MediaOperationListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MediaOperationListType(struct soap*, ns1__MediaOperationListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MediaOperationListType(struct soap*, const char *, int, ns1__MediaOperationListType *const*, const char *);
SOAP_FMAC3 ns1__MediaOperationListType ** SOAP_FMAC4 soap_in_PointerTons1__MediaOperationListType(struct soap*, const char*, ns1__MediaOperationListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MediaOperationListType(struct soap*, ns1__MediaOperationListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MediaOperationListType ** SOAP_FMAC4 soap_get_PointerTons1__MediaOperationListType(struct soap*, ns1__MediaOperationListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__configFileType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__configFileType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__configFileType(struct soap*, ns1__configFileType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__configFileType(struct soap*, const char *, int, ns1__configFileType **const*, const char *);
SOAP_FMAC3 ns1__configFileType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__configFileType(struct soap*, const char*, ns1__configFileType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__configFileType(struct soap*, ns1__configFileType **const*, const char*, const char*);
SOAP_FMAC3 ns1__configFileType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__configFileType(struct soap*, ns1__configFileType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__configFileType_DEFINED
#define SOAP_TYPE_PointerTons1__configFileType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__configFileType(struct soap*, ns1__configFileType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__configFileType(struct soap*, const char *, int, ns1__configFileType *const*, const char *);
SOAP_FMAC3 ns1__configFileType ** SOAP_FMAC4 soap_in_PointerTons1__configFileType(struct soap*, const char*, ns1__configFileType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__configFileType(struct soap*, ns1__configFileType *const*, const char*, const char*);
SOAP_FMAC3 ns1__configFileType ** SOAP_FMAC4 soap_get_PointerTons1__configFileType(struct soap*, ns1__configFileType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__configFileListType_DEFINED
#define SOAP_TYPE_PointerTons1__configFileListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__configFileListType(struct soap*, ns1__configFileListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__configFileListType(struct soap*, const char *, int, ns1__configFileListType *const*, const char *);
SOAP_FMAC3 ns1__configFileListType ** SOAP_FMAC4 soap_in_PointerTons1__configFileListType(struct soap*, const char*, ns1__configFileListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__configFileListType(struct soap*, ns1__configFileListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__configFileListType ** SOAP_FMAC4 soap_get_PointerTons1__configFileListType(struct soap*, ns1__configFileListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__packageType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__packageType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__packageType(struct soap*, ns1__packageType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__packageType(struct soap*, const char *, int, ns1__packageType **const*, const char *);
SOAP_FMAC3 ns1__packageType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__packageType(struct soap*, const char*, ns1__packageType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__packageType(struct soap*, ns1__packageType **const*, const char*, const char*);
SOAP_FMAC3 ns1__packageType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__packageType(struct soap*, ns1__packageType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__packageType_DEFINED
#define SOAP_TYPE_PointerTons1__packageType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__packageType(struct soap*, ns1__packageType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__packageType(struct soap*, const char *, int, ns1__packageType *const*, const char *);
SOAP_FMAC3 ns1__packageType ** SOAP_FMAC4 soap_in_PointerTons1__packageType(struct soap*, const char*, ns1__packageType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__packageType(struct soap*, ns1__packageType *const*, const char*, const char*);
SOAP_FMAC3 ns1__packageType ** SOAP_FMAC4 soap_get_PointerTons1__packageType(struct soap*, ns1__packageType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MonitoringTypeId_DEFINED
#define SOAP_TYPE_PointerTons1__MonitoringTypeId_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MonitoringTypeId(struct soap*, ns1__MonitoringTypeId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MonitoringTypeId(struct soap*, const char *, int, ns1__MonitoringTypeId *const*, const char *);
SOAP_FMAC3 ns1__MonitoringTypeId ** SOAP_FMAC4 soap_in_PointerTons1__MonitoringTypeId(struct soap*, const char*, ns1__MonitoringTypeId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MonitoringTypeId(struct soap*, ns1__MonitoringTypeId *const*, const char*, const char*);
SOAP_FMAC3 ns1__MonitoringTypeId ** SOAP_FMAC4 soap_get_PointerTons1__MonitoringTypeId(struct soap*, ns1__MonitoringTypeId **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__SlavePresentationResponseType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__SlavePresentationResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__SlavePresentationResponseType(struct soap*, ns1__SlavePresentationResponseType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__SlavePresentationResponseType(struct soap*, const char *, int, ns1__SlavePresentationResponseType **const*, const char *);
SOAP_FMAC3 ns1__SlavePresentationResponseType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__SlavePresentationResponseType(struct soap*, const char*, ns1__SlavePresentationResponseType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__SlavePresentationResponseType(struct soap*, ns1__SlavePresentationResponseType **const*, const char*, const char*);
SOAP_FMAC3 ns1__SlavePresentationResponseType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__SlavePresentationResponseType(struct soap*, ns1__SlavePresentationResponseType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SlavePresentationResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SlavePresentationResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SlavePresentationResponseType(struct soap*, ns1__SlavePresentationResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SlavePresentationResponseType(struct soap*, const char *, int, ns1__SlavePresentationResponseType *const*, const char *);
SOAP_FMAC3 ns1__SlavePresentationResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SlavePresentationResponseType(struct soap*, const char*, ns1__SlavePresentationResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SlavePresentationResponseType(struct soap*, ns1__SlavePresentationResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SlavePresentationResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SlavePresentationResponseType(struct soap*, ns1__SlavePresentationResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__VersionElementCfgType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__VersionElementCfgType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__VersionElementCfgType(struct soap*, ns1__VersionElementCfgType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__VersionElementCfgType(struct soap*, const char *, int, ns1__VersionElementCfgType **const*, const char *);
SOAP_FMAC3 ns1__VersionElementCfgType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__VersionElementCfgType(struct soap*, const char*, ns1__VersionElementCfgType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__VersionElementCfgType(struct soap*, ns1__VersionElementCfgType **const*, const char*, const char*);
SOAP_FMAC3 ns1__VersionElementCfgType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__VersionElementCfgType(struct soap*, ns1__VersionElementCfgType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__VersionElementCfgType_DEFINED
#define SOAP_TYPE_PointerTons1__VersionElementCfgType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VersionElementCfgType(struct soap*, ns1__VersionElementCfgType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VersionElementCfgType(struct soap*, const char *, int, ns1__VersionElementCfgType *const*, const char *);
SOAP_FMAC3 ns1__VersionElementCfgType ** SOAP_FMAC4 soap_in_PointerTons1__VersionElementCfgType(struct soap*, const char*, ns1__VersionElementCfgType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VersionElementCfgType(struct soap*, ns1__VersionElementCfgType *const*, const char*, const char*);
SOAP_FMAC3 ns1__VersionElementCfgType ** SOAP_FMAC4 soap_get_PointerTons1__VersionElementCfgType(struct soap*, ns1__VersionElementCfgType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__VersionElementCfgListType_DEFINED
#define SOAP_TYPE_PointerTons1__VersionElementCfgListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VersionElementCfgListType(struct soap*, ns1__VersionElementCfgListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VersionElementCfgListType(struct soap*, const char *, int, ns1__VersionElementCfgListType *const*, const char *);
SOAP_FMAC3 ns1__VersionElementCfgListType ** SOAP_FMAC4 soap_in_PointerTons1__VersionElementCfgListType(struct soap*, const char*, ns1__VersionElementCfgListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VersionElementCfgListType(struct soap*, ns1__VersionElementCfgListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__VersionElementCfgListType ** SOAP_FMAC4 soap_get_PointerTons1__VersionElementCfgListType(struct soap*, ns1__VersionElementCfgListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__VersionCfgType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__VersionCfgType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__VersionCfgType(struct soap*, ns1__VersionCfgType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__VersionCfgType(struct soap*, const char *, int, ns1__VersionCfgType **const*, const char *);
SOAP_FMAC3 ns1__VersionCfgType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__VersionCfgType(struct soap*, const char*, ns1__VersionCfgType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__VersionCfgType(struct soap*, ns1__VersionCfgType **const*, const char*, const char*);
SOAP_FMAC3 ns1__VersionCfgType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__VersionCfgType(struct soap*, ns1__VersionCfgType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__VersionCfgType_DEFINED
#define SOAP_TYPE_PointerTons1__VersionCfgType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VersionCfgType(struct soap*, ns1__VersionCfgType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VersionCfgType(struct soap*, const char *, int, ns1__VersionCfgType *const*, const char *);
SOAP_FMAC3 ns1__VersionCfgType ** SOAP_FMAC4 soap_in_PointerTons1__VersionCfgType(struct soap*, const char*, ns1__VersionCfgType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VersionCfgType(struct soap*, ns1__VersionCfgType *const*, const char*, const char*);
SOAP_FMAC3 ns1__VersionCfgType ** SOAP_FMAC4 soap_get_PointerTons1__VersionCfgType(struct soap*, ns1__VersionCfgType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__VersionFW_USCOREHWType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__VersionFW_USCOREHWType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__VersionFW_USCOREHWType(struct soap*, ns1__VersionFW_USCOREHWType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__VersionFW_USCOREHWType(struct soap*, const char *, int, ns1__VersionFW_USCOREHWType **const*, const char *);
SOAP_FMAC3 ns1__VersionFW_USCOREHWType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__VersionFW_USCOREHWType(struct soap*, const char*, ns1__VersionFW_USCOREHWType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__VersionFW_USCOREHWType(struct soap*, ns1__VersionFW_USCOREHWType **const*, const char*, const char*);
SOAP_FMAC3 ns1__VersionFW_USCOREHWType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__VersionFW_USCOREHWType(struct soap*, ns1__VersionFW_USCOREHWType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__VersionFW_USCOREHWType_DEFINED
#define SOAP_TYPE_PointerTons1__VersionFW_USCOREHWType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VersionFW_USCOREHWType(struct soap*, ns1__VersionFW_USCOREHWType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VersionFW_USCOREHWType(struct soap*, const char *, int, ns1__VersionFW_USCOREHWType *const*, const char *);
SOAP_FMAC3 ns1__VersionFW_USCOREHWType ** SOAP_FMAC4 soap_in_PointerTons1__VersionFW_USCOREHWType(struct soap*, const char*, ns1__VersionFW_USCOREHWType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VersionFW_USCOREHWType(struct soap*, ns1__VersionFW_USCOREHWType *const*, const char*, const char*);
SOAP_FMAC3 ns1__VersionFW_USCOREHWType ** SOAP_FMAC4 soap_get_PointerTons1__VersionFW_USCOREHWType(struct soap*, ns1__VersionFW_USCOREHWType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__VersionCfgListType_DEFINED
#define SOAP_TYPE_PointerTons1__VersionCfgListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VersionCfgListType(struct soap*, ns1__VersionCfgListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VersionCfgListType(struct soap*, const char *, int, ns1__VersionCfgListType *const*, const char *);
SOAP_FMAC3 ns1__VersionCfgListType ** SOAP_FMAC4 soap_in_PointerTons1__VersionCfgListType(struct soap*, const char*, ns1__VersionCfgListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VersionCfgListType(struct soap*, ns1__VersionCfgListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__VersionCfgListType ** SOAP_FMAC4 soap_get_PointerTons1__VersionCfgListType(struct soap*, ns1__VersionCfgListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__VersionFW_USCOREHWListType_DEFINED
#define SOAP_TYPE_PointerTons1__VersionFW_USCOREHWListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__VersionFW_USCOREHWListType(struct soap*, ns1__VersionFW_USCOREHWListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__VersionFW_USCOREHWListType(struct soap*, const char *, int, ns1__VersionFW_USCOREHWListType *const*, const char *);
SOAP_FMAC3 ns1__VersionFW_USCOREHWListType ** SOAP_FMAC4 soap_in_PointerTons1__VersionFW_USCOREHWListType(struct soap*, const char*, ns1__VersionFW_USCOREHWListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__VersionFW_USCOREHWListType(struct soap*, ns1__VersionFW_USCOREHWListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__VersionFW_USCOREHWListType ** SOAP_FMAC4 soap_get_PointerTons1__VersionFW_USCOREHWListType(struct soap*, ns1__VersionFW_USCOREHWListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__DiagnosticCCTIUType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__DiagnosticCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__DiagnosticCCTIUType(struct soap*, ns1__DiagnosticCCTIUType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__DiagnosticCCTIUType(struct soap*, const char *, int, ns1__DiagnosticCCTIUType **const*, const char *);
SOAP_FMAC3 ns1__DiagnosticCCTIUType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__DiagnosticCCTIUType(struct soap*, const char*, ns1__DiagnosticCCTIUType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__DiagnosticCCTIUType(struct soap*, ns1__DiagnosticCCTIUType **const*, const char*, const char*);
SOAP_FMAC3 ns1__DiagnosticCCTIUType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__DiagnosticCCTIUType(struct soap*, ns1__DiagnosticCCTIUType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DiagnosticCCTIUType_DEFINED
#define SOAP_TYPE_PointerTons1__DiagnosticCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DiagnosticCCTIUType(struct soap*, ns1__DiagnosticCCTIUType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DiagnosticCCTIUType(struct soap*, const char *, int, ns1__DiagnosticCCTIUType *const*, const char *);
SOAP_FMAC3 ns1__DiagnosticCCTIUType ** SOAP_FMAC4 soap_in_PointerTons1__DiagnosticCCTIUType(struct soap*, const char*, ns1__DiagnosticCCTIUType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DiagnosticCCTIUType(struct soap*, ns1__DiagnosticCCTIUType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DiagnosticCCTIUType ** SOAP_FMAC4 soap_get_PointerTons1__DiagnosticCCTIUType(struct soap*, ns1__DiagnosticCCTIUType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__StatusCCTIUType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__StatusCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__StatusCCTIUType(struct soap*, ns1__StatusCCTIUType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__StatusCCTIUType(struct soap*, const char *, int, ns1__StatusCCTIUType **const*, const char *);
SOAP_FMAC3 ns1__StatusCCTIUType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__StatusCCTIUType(struct soap*, const char*, ns1__StatusCCTIUType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__StatusCCTIUType(struct soap*, ns1__StatusCCTIUType **const*, const char*, const char*);
SOAP_FMAC3 ns1__StatusCCTIUType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__StatusCCTIUType(struct soap*, ns1__StatusCCTIUType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__StatusCCTIUType_DEFINED
#define SOAP_TYPE_PointerTons1__StatusCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StatusCCTIUType(struct soap*, ns1__StatusCCTIUType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StatusCCTIUType(struct soap*, const char *, int, ns1__StatusCCTIUType *const*, const char *);
SOAP_FMAC3 ns1__StatusCCTIUType ** SOAP_FMAC4 soap_in_PointerTons1__StatusCCTIUType(struct soap*, const char*, ns1__StatusCCTIUType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StatusCCTIUType(struct soap*, ns1__StatusCCTIUType *const*, const char*, const char*);
SOAP_FMAC3 ns1__StatusCCTIUType ** SOAP_FMAC4 soap_get_PointerTons1__StatusCCTIUType(struct soap*, ns1__StatusCCTIUType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__AlarmCCTIUType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__AlarmCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AlarmCCTIUType(struct soap*, ns1__AlarmCCTIUType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AlarmCCTIUType(struct soap*, const char *, int, ns1__AlarmCCTIUType **const*, const char *);
SOAP_FMAC3 ns1__AlarmCCTIUType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AlarmCCTIUType(struct soap*, const char*, ns1__AlarmCCTIUType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AlarmCCTIUType(struct soap*, ns1__AlarmCCTIUType **const*, const char*, const char*);
SOAP_FMAC3 ns1__AlarmCCTIUType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AlarmCCTIUType(struct soap*, ns1__AlarmCCTIUType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AlarmCCTIUType_DEFINED
#define SOAP_TYPE_PointerTons1__AlarmCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AlarmCCTIUType(struct soap*, ns1__AlarmCCTIUType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AlarmCCTIUType(struct soap*, const char *, int, ns1__AlarmCCTIUType *const*, const char *);
SOAP_FMAC3 ns1__AlarmCCTIUType ** SOAP_FMAC4 soap_in_PointerTons1__AlarmCCTIUType(struct soap*, const char*, ns1__AlarmCCTIUType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AlarmCCTIUType(struct soap*, ns1__AlarmCCTIUType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AlarmCCTIUType ** SOAP_FMAC4 soap_get_PointerTons1__AlarmCCTIUType(struct soap*, ns1__AlarmCCTIUType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__SlaveStateType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__SlaveStateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__SlaveStateType(struct soap*, ns1__SlaveStateType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__SlaveStateType(struct soap*, const char *, int, ns1__SlaveStateType **const*, const char *);
SOAP_FMAC3 ns1__SlaveStateType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__SlaveStateType(struct soap*, const char*, ns1__SlaveStateType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__SlaveStateType(struct soap*, ns1__SlaveStateType **const*, const char*, const char*);
SOAP_FMAC3 ns1__SlaveStateType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__SlaveStateType(struct soap*, ns1__SlaveStateType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SlaveStateType_DEFINED
#define SOAP_TYPE_PointerTons1__SlaveStateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SlaveStateType(struct soap*, ns1__SlaveStateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SlaveStateType(struct soap*, const char *, int, ns1__SlaveStateType *const*, const char *);
SOAP_FMAC3 ns1__SlaveStateType ** SOAP_FMAC4 soap_in_PointerTons1__SlaveStateType(struct soap*, const char*, ns1__SlaveStateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SlaveStateType(struct soap*, ns1__SlaveStateType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SlaveStateType ** SOAP_FMAC4 soap_get_PointerTons1__SlaveStateType(struct soap*, ns1__SlaveStateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__AlarmType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__AlarmType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AlarmType(struct soap*, ns1__AlarmType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AlarmType(struct soap*, const char *, int, ns1__AlarmType **const*, const char *);
SOAP_FMAC3 ns1__AlarmType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AlarmType(struct soap*, const char*, ns1__AlarmType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AlarmType(struct soap*, ns1__AlarmType **const*, const char*, const char*);
SOAP_FMAC3 ns1__AlarmType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AlarmType(struct soap*, ns1__AlarmType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AlarmType_DEFINED
#define SOAP_TYPE_PointerTons1__AlarmType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AlarmType(struct soap*, ns1__AlarmType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AlarmType(struct soap*, const char *, int, ns1__AlarmType *const*, const char *);
SOAP_FMAC3 ns1__AlarmType ** SOAP_FMAC4 soap_in_PointerTons1__AlarmType(struct soap*, const char*, ns1__AlarmType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AlarmType(struct soap*, ns1__AlarmType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AlarmType ** SOAP_FMAC4 soap_get_PointerTons1__AlarmType(struct soap*, ns1__AlarmType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__MeasureType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__MeasureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__MeasureType(struct soap*, ns1__MeasureType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__MeasureType(struct soap*, const char *, int, ns1__MeasureType **const*, const char *);
SOAP_FMAC3 ns1__MeasureType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__MeasureType(struct soap*, const char*, ns1__MeasureType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__MeasureType(struct soap*, ns1__MeasureType **const*, const char*, const char*);
SOAP_FMAC3 ns1__MeasureType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__MeasureType(struct soap*, ns1__MeasureType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MeasureType_DEFINED
#define SOAP_TYPE_PointerTons1__MeasureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MeasureType(struct soap*, ns1__MeasureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MeasureType(struct soap*, const char *, int, ns1__MeasureType *const*, const char *);
SOAP_FMAC3 ns1__MeasureType ** SOAP_FMAC4 soap_in_PointerTons1__MeasureType(struct soap*, const char*, ns1__MeasureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MeasureType(struct soap*, ns1__MeasureType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MeasureType ** SOAP_FMAC4 soap_get_PointerTons1__MeasureType(struct soap*, ns1__MeasureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MeasureListType_DEFINED
#define SOAP_TYPE_PointerTons1__MeasureListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MeasureListType(struct soap*, ns1__MeasureListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MeasureListType(struct soap*, const char *, int, ns1__MeasureListType *const*, const char *);
SOAP_FMAC3 ns1__MeasureListType ** SOAP_FMAC4 soap_in_PointerTons1__MeasureListType(struct soap*, const char*, ns1__MeasureListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MeasureListType(struct soap*, ns1__MeasureListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MeasureListType ** SOAP_FMAC4 soap_get_PointerTons1__MeasureListType(struct soap*, ns1__MeasureListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__DeviceType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__DeviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__DeviceType(struct soap*, ns1__DeviceType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__DeviceType(struct soap*, const char *, int, ns1__DeviceType **const*, const char *);
SOAP_FMAC3 ns1__DeviceType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__DeviceType(struct soap*, const char*, ns1__DeviceType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__DeviceType(struct soap*, ns1__DeviceType **const*, const char*, const char*);
SOAP_FMAC3 ns1__DeviceType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__DeviceType(struct soap*, ns1__DeviceType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DeviceType_DEFINED
#define SOAP_TYPE_PointerTons1__DeviceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DeviceType(struct soap*, ns1__DeviceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DeviceType(struct soap*, const char *, int, ns1__DeviceType *const*, const char *);
SOAP_FMAC3 ns1__DeviceType ** SOAP_FMAC4 soap_in_PointerTons1__DeviceType(struct soap*, const char*, ns1__DeviceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DeviceType(struct soap*, ns1__DeviceType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DeviceType ** SOAP_FMAC4 soap_get_PointerTons1__DeviceType(struct soap*, ns1__DeviceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AlarmListType_DEFINED
#define SOAP_TYPE_PointerTons1__AlarmListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AlarmListType(struct soap*, ns1__AlarmListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AlarmListType(struct soap*, const char *, int, ns1__AlarmListType *const*, const char *);
SOAP_FMAC3 ns1__AlarmListType ** SOAP_FMAC4 soap_in_PointerTons1__AlarmListType(struct soap*, const char*, ns1__AlarmListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AlarmListType(struct soap*, ns1__AlarmListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AlarmListType ** SOAP_FMAC4 soap_get_PointerTons1__AlarmListType(struct soap*, ns1__AlarmListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__DeviceListType_DEFINED
#define SOAP_TYPE_PointerTons1__DeviceListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__DeviceListType(struct soap*, ns1__DeviceListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__DeviceListType(struct soap*, const char *, int, ns1__DeviceListType *const*, const char *);
SOAP_FMAC3 ns1__DeviceListType ** SOAP_FMAC4 soap_in_PointerTons1__DeviceListType(struct soap*, const char*, ns1__DeviceListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__DeviceListType(struct soap*, ns1__DeviceListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__DeviceListType ** SOAP_FMAC4 soap_get_PointerTons1__DeviceListType(struct soap*, ns1__DeviceListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREQuantityType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREQuantityType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREQuantityType(struct soap*, ns1__MTC_USCOREQuantityType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREQuantityType(struct soap*, const char *, int, ns1__MTC_USCOREQuantityType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREQuantityType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREQuantityType(struct soap*, const char*, ns1__MTC_USCOREQuantityType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREQuantityType(struct soap*, ns1__MTC_USCOREQuantityType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREQuantityType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREQuantityType(struct soap*, ns1__MTC_USCOREQuantityType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__MTC_USCORETitleLoadContainerInfoType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__MTC_USCORETitleLoadContainerInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__MTC_USCORETitleLoadContainerInfoType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__MTC_USCORETitleLoadContainerInfoType(struct soap*, const char *, int, ns1__MTC_USCORETitleLoadContainerInfoType **const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORETitleLoadContainerInfoType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__MTC_USCORETitleLoadContainerInfoType(struct soap*, const char*, ns1__MTC_USCORETitleLoadContainerInfoType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__MTC_USCORETitleLoadContainerInfoType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoType **const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORETitleLoadContainerInfoType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__MTC_USCORETitleLoadContainerInfoType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORETitleLoadContainerInfoType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORETitleLoadContainerInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORETitleLoadContainerInfoType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORETitleLoadContainerInfoType(struct soap*, const char *, int, ns1__MTC_USCORETitleLoadContainerInfoType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORETitleLoadContainerInfoType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORETitleLoadContainerInfoType(struct soap*, const char*, ns1__MTC_USCORETitleLoadContainerInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORETitleLoadContainerInfoType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORETitleLoadContainerInfoType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORETitleLoadContainerInfoType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORETitleLoadContainerInfoListType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORETitleLoadContainerInfoListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORETitleLoadContainerInfoListType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORETitleLoadContainerInfoListType(struct soap*, const char *, int, ns1__MTC_USCORETitleLoadContainerInfoListType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORETitleLoadContainerInfoListType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORETitleLoadContainerInfoListType(struct soap*, const char*, ns1__MTC_USCORETitleLoadContainerInfoListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORETitleLoadContainerInfoListType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORETitleLoadContainerInfoListType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORETitleLoadContainerInfoListType(struct soap*, ns1__MTC_USCORETitleLoadContainerInfoListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORERangeDateType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORERangeDateType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORERangeDateType(struct soap*, ns1__MTC_USCORERangeDateType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORERangeDateType(struct soap*, const char *, int, ns1__MTC_USCORERangeDateType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORERangeDateType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORERangeDateType(struct soap*, const char*, ns1__MTC_USCORERangeDateType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORERangeDateType(struct soap*, ns1__MTC_USCORERangeDateType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORERangeDateType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORERangeDateType(struct soap*, ns1__MTC_USCORERangeDateType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__MTC_USCOREConfigVersionType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__MTC_USCOREConfigVersionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__MTC_USCOREConfigVersionType(struct soap*, ns1__MTC_USCOREConfigVersionType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__MTC_USCOREConfigVersionType(struct soap*, const char *, int, ns1__MTC_USCOREConfigVersionType **const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREConfigVersionType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__MTC_USCOREConfigVersionType(struct soap*, const char*, ns1__MTC_USCOREConfigVersionType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__MTC_USCOREConfigVersionType(struct soap*, ns1__MTC_USCOREConfigVersionType **const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREConfigVersionType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__MTC_USCOREConfigVersionType(struct soap*, ns1__MTC_USCOREConfigVersionType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREConfigVersionType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREConfigVersionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREConfigVersionType(struct soap*, ns1__MTC_USCOREConfigVersionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREConfigVersionType(struct soap*, const char *, int, ns1__MTC_USCOREConfigVersionType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREConfigVersionType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREConfigVersionType(struct soap*, const char*, ns1__MTC_USCOREConfigVersionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREConfigVersionType(struct soap*, ns1__MTC_USCOREConfigVersionType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREConfigVersionType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREConfigVersionType(struct soap*, ns1__MTC_USCOREConfigVersionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREOnBoardSellPointType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREOnBoardSellPointType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREOnBoardSellPointType(struct soap*, ns1__MTC_USCOREOnBoardSellPointType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREOnBoardSellPointType(struct soap*, const char *, int, ns1__MTC_USCOREOnBoardSellPointType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREOnBoardSellPointType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREOnBoardSellPointType(struct soap*, const char*, ns1__MTC_USCOREOnBoardSellPointType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREOnBoardSellPointType(struct soap*, ns1__MTC_USCOREOnBoardSellPointType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREOnBoardSellPointType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREOnBoardSellPointType(struct soap*, ns1__MTC_USCOREOnBoardSellPointType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREOnStationSellPointType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREOnStationSellPointType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREOnStationSellPointType(struct soap*, ns1__MTC_USCOREOnStationSellPointType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREOnStationSellPointType(struct soap*, const char *, int, ns1__MTC_USCOREOnStationSellPointType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREOnStationSellPointType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREOnStationSellPointType(struct soap*, const char*, ns1__MTC_USCOREOnStationSellPointType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREOnStationSellPointType(struct soap*, ns1__MTC_USCOREOnStationSellPointType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREOnStationSellPointType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREOnStationSellPointType(struct soap*, ns1__MTC_USCOREOnStationSellPointType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREOnBoardAccessPointType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREOnBoardAccessPointType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREOnBoardAccessPointType(struct soap*, ns1__MTC_USCOREOnBoardAccessPointType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREOnBoardAccessPointType(struct soap*, const char *, int, ns1__MTC_USCOREOnBoardAccessPointType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREOnBoardAccessPointType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREOnBoardAccessPointType(struct soap*, const char*, ns1__MTC_USCOREOnBoardAccessPointType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREOnBoardAccessPointType(struct soap*, ns1__MTC_USCOREOnBoardAccessPointType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREOnBoardAccessPointType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREOnBoardAccessPointType(struct soap*, ns1__MTC_USCOREOnBoardAccessPointType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREOnStationAccessPointType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREOnStationAccessPointType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREOnStationAccessPointType(struct soap*, ns1__MTC_USCOREOnStationAccessPointType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREOnStationAccessPointType(struct soap*, const char *, int, ns1__MTC_USCOREOnStationAccessPointType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREOnStationAccessPointType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREOnStationAccessPointType(struct soap*, const char*, ns1__MTC_USCOREOnStationAccessPointType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREOnStationAccessPointType(struct soap*, ns1__MTC_USCOREOnStationAccessPointType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREOnStationAccessPointType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREOnStationAccessPointType(struct soap*, ns1__MTC_USCOREOnStationAccessPointType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREOtherPoint_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREOtherPoint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREOtherPoint(struct soap*, ns1__MTC_USCOREOtherPoint *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREOtherPoint(struct soap*, const char *, int, ns1__MTC_USCOREOtherPoint *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREOtherPoint ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREOtherPoint(struct soap*, const char*, ns1__MTC_USCOREOtherPoint **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREOtherPoint(struct soap*, ns1__MTC_USCOREOtherPoint *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREOtherPoint ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREOtherPoint(struct soap*, ns1__MTC_USCOREOtherPoint **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORENetworkLocationType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORENetworkLocationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORENetworkLocationType(struct soap*, ns1__MTC_USCORENetworkLocationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORENetworkLocationType(struct soap*, const char *, int, ns1__MTC_USCORENetworkLocationType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORENetworkLocationType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORENetworkLocationType(struct soap*, const char*, ns1__MTC_USCORENetworkLocationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORENetworkLocationType(struct soap*, ns1__MTC_USCORENetworkLocationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORENetworkLocationType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORENetworkLocationType(struct soap*, ns1__MTC_USCORENetworkLocationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__MTC_USCORELogValueType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__MTC_USCORELogValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__MTC_USCORELogValueType(struct soap*, ns1__MTC_USCORELogValueType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__MTC_USCORELogValueType(struct soap*, const char *, int, ns1__MTC_USCORELogValueType **const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORELogValueType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__MTC_USCORELogValueType(struct soap*, const char*, ns1__MTC_USCORELogValueType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__MTC_USCORELogValueType(struct soap*, ns1__MTC_USCORELogValueType **const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORELogValueType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__MTC_USCORELogValueType(struct soap*, ns1__MTC_USCORELogValueType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORELogValueType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORELogValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORELogValueType(struct soap*, ns1__MTC_USCORELogValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORELogValueType(struct soap*, const char *, int, ns1__MTC_USCORELogValueType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORELogValueType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORELogValueType(struct soap*, const char*, ns1__MTC_USCORELogValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORELogValueType(struct soap*, ns1__MTC_USCORELogValueType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORELogValueType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORELogValueType(struct soap*, ns1__MTC_USCORELogValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREEquipmentInfoType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREEquipmentInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREEquipmentInfoType(struct soap*, ns1__MTC_USCOREEquipmentInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREEquipmentInfoType(struct soap*, const char *, int, ns1__MTC_USCOREEquipmentInfoType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREEquipmentInfoType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREEquipmentInfoType(struct soap*, const char*, ns1__MTC_USCOREEquipmentInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREEquipmentInfoType(struct soap*, ns1__MTC_USCOREEquipmentInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREEquipmentInfoType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREEquipmentInfoType(struct soap*, ns1__MTC_USCOREEquipmentInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREConfigVersionTypeList_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREConfigVersionTypeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREConfigVersionTypeList(struct soap*, ns1__MTC_USCOREConfigVersionTypeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREConfigVersionTypeList(struct soap*, const char *, int, ns1__MTC_USCOREConfigVersionTypeList *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREConfigVersionTypeList ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREConfigVersionTypeList(struct soap*, const char*, ns1__MTC_USCOREConfigVersionTypeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREConfigVersionTypeList(struct soap*, ns1__MTC_USCOREConfigVersionTypeList *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREConfigVersionTypeList ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREConfigVersionTypeList(struct soap*, ns1__MTC_USCOREConfigVersionTypeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORELocationType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORELocationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORELocationType(struct soap*, ns1__MTC_USCORELocationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORELocationType(struct soap*, const char *, int, ns1__MTC_USCORELocationType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORELocationType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORELocationType(struct soap*, const char*, ns1__MTC_USCORELocationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORELocationType(struct soap*, ns1__MTC_USCORELocationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORELocationType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORELocationType(struct soap*, ns1__MTC_USCORELocationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREActionExecutedContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREActionExecutedContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREActionExecutedContentType(struct soap*, ns1__MTC_USCOREActionExecutedContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREActionExecutedContentType(struct soap*, const char *, int, ns1__MTC_USCOREActionExecutedContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREActionExecutedContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREActionExecutedContentType(struct soap*, const char*, ns1__MTC_USCOREActionExecutedContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREActionExecutedContentType(struct soap*, ns1__MTC_USCOREActionExecutedContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREActionExecutedContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREActionExecutedContentType(struct soap*, ns1__MTC_USCOREActionExecutedContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORERestitutionTitleContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORERestitutionTitleContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORERestitutionTitleContentType(struct soap*, ns1__MTC_USCORERestitutionTitleContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORERestitutionTitleContentType(struct soap*, const char *, int, ns1__MTC_USCORERestitutionTitleContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORERestitutionTitleContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORERestitutionTitleContentType(struct soap*, const char*, ns1__MTC_USCORERestitutionTitleContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORERestitutionTitleContentType(struct soap*, ns1__MTC_USCORERestitutionTitleContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORERestitutionTitleContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORERestitutionTitleContentType(struct soap*, ns1__MTC_USCORERestitutionTitleContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREEditTitleContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREEditTitleContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREEditTitleContentType(struct soap*, ns1__MTC_USCOREEditTitleContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREEditTitleContentType(struct soap*, const char *, int, ns1__MTC_USCOREEditTitleContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREEditTitleContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREEditTitleContentType(struct soap*, const char*, ns1__MTC_USCOREEditTitleContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREEditTitleContentType(struct soap*, ns1__MTC_USCOREEditTitleContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREEditTitleContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREEditTitleContentType(struct soap*, ns1__MTC_USCOREEditTitleContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREValidationTitleContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREValidationTitleContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREValidationTitleContentType(struct soap*, ns1__MTC_USCOREValidationTitleContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREValidationTitleContentType(struct soap*, const char *, int, ns1__MTC_USCOREValidationTitleContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREValidationTitleContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREValidationTitleContentType(struct soap*, const char*, ns1__MTC_USCOREValidationTitleContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREValidationTitleContentType(struct soap*, ns1__MTC_USCOREValidationTitleContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREValidationTitleContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREValidationTitleContentType(struct soap*, ns1__MTC_USCOREValidationTitleContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORERechargeTitleContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORERechargeTitleContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORERechargeTitleContentType(struct soap*, ns1__MTC_USCORERechargeTitleContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORERechargeTitleContentType(struct soap*, const char *, int, ns1__MTC_USCORERechargeTitleContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORERechargeTitleContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORERechargeTitleContentType(struct soap*, const char*, ns1__MTC_USCORERechargeTitleContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORERechargeTitleContentType(struct soap*, ns1__MTC_USCORERechargeTitleContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORERechargeTitleContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORERechargeTitleContentType(struct soap*, ns1__MTC_USCORERechargeTitleContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREInstanceTitleContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREInstanceTitleContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREInstanceTitleContentType(struct soap*, ns1__MTC_USCOREInstanceTitleContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREInstanceTitleContentType(struct soap*, const char *, int, ns1__MTC_USCOREInstanceTitleContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREInstanceTitleContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREInstanceTitleContentType(struct soap*, const char*, ns1__MTC_USCOREInstanceTitleContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREInstanceTitleContentType(struct soap*, ns1__MTC_USCOREInstanceTitleContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREInstanceTitleContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREInstanceTitleContentType(struct soap*, ns1__MTC_USCOREInstanceTitleContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREDeleteProfileContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREDeleteProfileContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREDeleteProfileContentType(struct soap*, ns1__MTC_USCOREDeleteProfileContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREDeleteProfileContentType(struct soap*, const char *, int, ns1__MTC_USCOREDeleteProfileContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREDeleteProfileContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREDeleteProfileContentType(struct soap*, const char*, ns1__MTC_USCOREDeleteProfileContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREDeleteProfileContentType(struct soap*, ns1__MTC_USCOREDeleteProfileContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREDeleteProfileContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREDeleteProfileContentType(struct soap*, ns1__MTC_USCOREDeleteProfileContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREEditProfileContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREEditProfileContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREEditProfileContentType(struct soap*, ns1__MTC_USCOREEditProfileContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREEditProfileContentType(struct soap*, const char *, int, ns1__MTC_USCOREEditProfileContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREEditProfileContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREEditProfileContentType(struct soap*, const char*, ns1__MTC_USCOREEditProfileContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREEditProfileContentType(struct soap*, ns1__MTC_USCOREEditProfileContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREEditProfileContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREEditProfileContentType(struct soap*, ns1__MTC_USCOREEditProfileContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREInstanceProfileContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREInstanceProfileContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREInstanceProfileContentType(struct soap*, ns1__MTC_USCOREInstanceProfileContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREInstanceProfileContentType(struct soap*, const char *, int, ns1__MTC_USCOREInstanceProfileContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREInstanceProfileContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREInstanceProfileContentType(struct soap*, const char*, ns1__MTC_USCOREInstanceProfileContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREInstanceProfileContentType(struct soap*, ns1__MTC_USCOREInstanceProfileContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREInstanceProfileContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREInstanceProfileContentType(struct soap*, ns1__MTC_USCOREInstanceProfileContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREEditAppContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREEditAppContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREEditAppContentType(struct soap*, ns1__MTC_USCOREEditAppContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREEditAppContentType(struct soap*, const char *, int, ns1__MTC_USCOREEditAppContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREEditAppContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREEditAppContentType(struct soap*, const char*, ns1__MTC_USCOREEditAppContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREEditAppContentType(struct soap*, ns1__MTC_USCOREEditAppContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREEditAppContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREEditAppContentType(struct soap*, ns1__MTC_USCOREEditAppContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREInstanceAppContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREInstanceAppContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREInstanceAppContentType(struct soap*, ns1__MTC_USCOREInstanceAppContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREInstanceAppContentType(struct soap*, const char *, int, ns1__MTC_USCOREInstanceAppContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREInstanceAppContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREInstanceAppContentType(struct soap*, const char*, ns1__MTC_USCOREInstanceAppContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREInstanceAppContentType(struct soap*, ns1__MTC_USCOREInstanceAppContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREInstanceAppContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREInstanceAppContentType(struct soap*, ns1__MTC_USCOREInstanceAppContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREInitializationSusContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREInitializationSusContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREInitializationSusContentType(struct soap*, ns1__MTC_USCOREInitializationSusContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREInitializationSusContentType(struct soap*, const char *, int, ns1__MTC_USCOREInitializationSusContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREInitializationSusContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREInitializationSusContentType(struct soap*, const char*, ns1__MTC_USCOREInitializationSusContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREInitializationSusContentType(struct soap*, ns1__MTC_USCOREInitializationSusContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREInitializationSusContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREInitializationSusContentType(struct soap*, ns1__MTC_USCOREInitializationSusContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREFabricationSusContentType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREFabricationSusContentType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREFabricationSusContentType(struct soap*, ns1__MTC_USCOREFabricationSusContentType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREFabricationSusContentType(struct soap*, const char *, int, ns1__MTC_USCOREFabricationSusContentType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREFabricationSusContentType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREFabricationSusContentType(struct soap*, const char*, ns1__MTC_USCOREFabricationSusContentType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREFabricationSusContentType(struct soap*, ns1__MTC_USCOREFabricationSusContentType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREFabricationSusContentType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREFabricationSusContentType(struct soap*, ns1__MTC_USCOREFabricationSusContentType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SignedTransactionMTCRegType_DEFINED
#define SOAP_TYPE_PointerTons1__SignedTransactionMTCRegType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SignedTransactionMTCRegType(struct soap*, ns1__SignedTransactionMTCRegType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SignedTransactionMTCRegType(struct soap*, const char *, int, ns1__SignedTransactionMTCRegType *const*, const char *);
SOAP_FMAC3 ns1__SignedTransactionMTCRegType ** SOAP_FMAC4 soap_in_PointerTons1__SignedTransactionMTCRegType(struct soap*, const char*, ns1__SignedTransactionMTCRegType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SignedTransactionMTCRegType(struct soap*, ns1__SignedTransactionMTCRegType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SignedTransactionMTCRegType ** SOAP_FMAC4 soap_get_PointerTons1__SignedTransactionMTCRegType(struct soap*, ns1__SignedTransactionMTCRegType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCOREUnsignedTransactionRegType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCOREUnsignedTransactionRegType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCOREUnsignedTransactionRegType(struct soap*, ns1__MTC_USCOREUnsignedTransactionRegType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCOREUnsignedTransactionRegType(struct soap*, const char *, int, ns1__MTC_USCOREUnsignedTransactionRegType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCOREUnsignedTransactionRegType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCOREUnsignedTransactionRegType(struct soap*, const char*, ns1__MTC_USCOREUnsignedTransactionRegType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCOREUnsignedTransactionRegType(struct soap*, ns1__MTC_USCOREUnsignedTransactionRegType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCOREUnsignedTransactionRegType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCOREUnsignedTransactionRegType(struct soap*, ns1__MTC_USCOREUnsignedTransactionRegType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__TransactionMTCRegType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__TransactionMTCRegType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__TransactionMTCRegType(struct soap*, ns1__TransactionMTCRegType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__TransactionMTCRegType(struct soap*, const char *, int, ns1__TransactionMTCRegType **const*, const char *);
SOAP_FMAC3 ns1__TransactionMTCRegType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__TransactionMTCRegType(struct soap*, const char*, ns1__TransactionMTCRegType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__TransactionMTCRegType(struct soap*, ns1__TransactionMTCRegType **const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionMTCRegType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__TransactionMTCRegType(struct soap*, ns1__TransactionMTCRegType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TransactionMTCRegType_DEFINED
#define SOAP_TYPE_PointerTons1__TransactionMTCRegType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TransactionMTCRegType(struct soap*, ns1__TransactionMTCRegType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TransactionMTCRegType(struct soap*, const char *, int, ns1__TransactionMTCRegType *const*, const char *);
SOAP_FMAC3 ns1__TransactionMTCRegType ** SOAP_FMAC4 soap_in_PointerTons1__TransactionMTCRegType(struct soap*, const char*, ns1__TransactionMTCRegType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TransactionMTCRegType(struct soap*, ns1__TransactionMTCRegType *const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionMTCRegType ** SOAP_FMAC4 soap_get_PointerTons1__TransactionMTCRegType(struct soap*, ns1__TransactionMTCRegType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyType_DEFINED
#define SOAP_TYPE_PointerToxsd__anyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap*, xsd__anyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap*, const char *, int, xsd__anyType *const*, const char *);
SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap*, const char*, xsd__anyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap*, xsd__anyType *const*, const char*, const char*);
SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap*, xsd__anyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Vehicle_DEFINED
#define SOAP_TYPE_PointerTons1__Vehicle_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Vehicle(struct soap*, ns1__Vehicle *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Vehicle(struct soap*, const char *, int, ns1__Vehicle *const*, const char *);
SOAP_FMAC3 ns1__Vehicle ** SOAP_FMAC4 soap_in_PointerTons1__Vehicle(struct soap*, const char*, ns1__Vehicle **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Vehicle(struct soap*, ns1__Vehicle *const*, const char*, const char*);
SOAP_FMAC3 ns1__Vehicle ** SOAP_FMAC4 soap_get_PointerTons1__Vehicle(struct soap*, ns1__Vehicle **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__ActionType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ActionType(struct soap*, ns1__ActionType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ActionType(struct soap*, const char *, int, ns1__ActionType **const*, const char *);
SOAP_FMAC3 ns1__ActionType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ActionType(struct soap*, const char*, ns1__ActionType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ActionType(struct soap*, ns1__ActionType **const*, const char*, const char*);
SOAP_FMAC3 ns1__ActionType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ActionType(struct soap*, ns1__ActionType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ActionType_DEFINED
#define SOAP_TYPE_PointerTons1__ActionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ActionType(struct soap*, ns1__ActionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ActionType(struct soap*, const char *, int, ns1__ActionType *const*, const char *);
SOAP_FMAC3 ns1__ActionType ** SOAP_FMAC4 soap_in_PointerTons1__ActionType(struct soap*, const char*, ns1__ActionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ActionType(struct soap*, ns1__ActionType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ActionType ** SOAP_FMAC4 soap_get_PointerTons1__ActionType(struct soap*, ns1__ActionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PendingPaymentBalanceType_DEFINED
#define SOAP_TYPE_PointerTons1__PendingPaymentBalanceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PendingPaymentBalanceType(struct soap*, ns1__PendingPaymentBalanceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PendingPaymentBalanceType(struct soap*, const char *, int, ns1__PendingPaymentBalanceType *const*, const char *);
SOAP_FMAC3 ns1__PendingPaymentBalanceType ** SOAP_FMAC4 soap_in_PointerTons1__PendingPaymentBalanceType(struct soap*, const char*, ns1__PendingPaymentBalanceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PendingPaymentBalanceType(struct soap*, ns1__PendingPaymentBalanceType *const*, const char*, const char*);
SOAP_FMAC3 ns1__PendingPaymentBalanceType ** SOAP_FMAC4 soap_get_PointerTons1__PendingPaymentBalanceType(struct soap*, ns1__PendingPaymentBalanceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FareMediumType_DEFINED
#define SOAP_TYPE_PointerTons1__FareMediumType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FareMediumType(struct soap*, ns1__FareMediumType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FareMediumType(struct soap*, const char *, int, ns1__FareMediumType *const*, const char *);
SOAP_FMAC3 ns1__FareMediumType ** SOAP_FMAC4 soap_in_PointerTons1__FareMediumType(struct soap*, const char*, ns1__FareMediumType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FareMediumType(struct soap*, ns1__FareMediumType *const*, const char*, const char*);
SOAP_FMAC3 ns1__FareMediumType ** SOAP_FMAC4 soap_get_PointerTons1__FareMediumType(struct soap*, ns1__FareMediumType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__mediaStockType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__mediaStockType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__mediaStockType(struct soap*, ns1__mediaStockType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__mediaStockType(struct soap*, const char *, int, ns1__mediaStockType **const*, const char *);
SOAP_FMAC3 ns1__mediaStockType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__mediaStockType(struct soap*, const char*, ns1__mediaStockType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__mediaStockType(struct soap*, ns1__mediaStockType **const*, const char*, const char*);
SOAP_FMAC3 ns1__mediaStockType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__mediaStockType(struct soap*, ns1__mediaStockType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__mediaStockType_DEFINED
#define SOAP_TYPE_PointerTons1__mediaStockType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__mediaStockType(struct soap*, ns1__mediaStockType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__mediaStockType(struct soap*, const char *, int, ns1__mediaStockType *const*, const char *);
SOAP_FMAC3 ns1__mediaStockType ** SOAP_FMAC4 soap_in_PointerTons1__mediaStockType(struct soap*, const char*, ns1__mediaStockType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__mediaStockType(struct soap*, ns1__mediaStockType *const*, const char*, const char*);
SOAP_FMAC3 ns1__mediaStockType ** SOAP_FMAC4 soap_get_PointerTons1__mediaStockType(struct soap*, ns1__mediaStockType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__monetaryUnit_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__monetaryUnit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__monetaryUnit(struct soap*, ns1__monetaryUnit **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__monetaryUnit(struct soap*, const char *, int, ns1__monetaryUnit **const*, const char *);
SOAP_FMAC3 ns1__monetaryUnit *** SOAP_FMAC4 soap_in_PointerToPointerTons1__monetaryUnit(struct soap*, const char*, ns1__monetaryUnit ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__monetaryUnit(struct soap*, ns1__monetaryUnit **const*, const char*, const char*);
SOAP_FMAC3 ns1__monetaryUnit *** SOAP_FMAC4 soap_get_PointerToPointerTons1__monetaryUnit(struct soap*, ns1__monetaryUnit ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__monetaryUnit_DEFINED
#define SOAP_TYPE_PointerTons1__monetaryUnit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__monetaryUnit(struct soap*, ns1__monetaryUnit *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__monetaryUnit(struct soap*, const char *, int, ns1__monetaryUnit *const*, const char *);
SOAP_FMAC3 ns1__monetaryUnit ** SOAP_FMAC4 soap_in_PointerTons1__monetaryUnit(struct soap*, const char*, ns1__monetaryUnit **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__monetaryUnit(struct soap*, ns1__monetaryUnit *const*, const char*, const char*);
SOAP_FMAC3 ns1__monetaryUnit ** SOAP_FMAC4 soap_get_PointerTons1__monetaryUnit(struct soap*, ns1__monetaryUnit **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__OperationType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__OperationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__OperationType(struct soap*, ns1__OperationType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__OperationType(struct soap*, const char *, int, ns1__OperationType **const*, const char *);
SOAP_FMAC3 ns1__OperationType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__OperationType(struct soap*, const char*, ns1__OperationType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__OperationType(struct soap*, ns1__OperationType **const*, const char*, const char*);
SOAP_FMAC3 ns1__OperationType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__OperationType(struct soap*, ns1__OperationType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OperationType_DEFINED
#define SOAP_TYPE_PointerTons1__OperationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OperationType(struct soap*, ns1__OperationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OperationType(struct soap*, const char *, int, ns1__OperationType *const*, const char *);
SOAP_FMAC3 ns1__OperationType ** SOAP_FMAC4 soap_in_PointerTons1__OperationType(struct soap*, const char*, ns1__OperationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OperationType(struct soap*, ns1__OperationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__OperationType ** SOAP_FMAC4 soap_get_PointerTons1__OperationType(struct soap*, ns1__OperationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OperationListType_DEFINED
#define SOAP_TYPE_PointerTons1__OperationListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OperationListType(struct soap*, ns1__OperationListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OperationListType(struct soap*, const char *, int, ns1__OperationListType *const*, const char *);
SOAP_FMAC3 ns1__OperationListType ** SOAP_FMAC4 soap_in_PointerTons1__OperationListType(struct soap*, const char*, ns1__OperationListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OperationListType(struct soap*, ns1__OperationListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__OperationListType ** SOAP_FMAC4 soap_get_PointerTons1__OperationListType(struct soap*, ns1__OperationListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__MediaOperationType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__MediaOperationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__MediaOperationType(struct soap*, ns1__MediaOperationType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__MediaOperationType(struct soap*, const char *, int, ns1__MediaOperationType **const*, const char *);
SOAP_FMAC3 ns1__MediaOperationType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__MediaOperationType(struct soap*, const char*, ns1__MediaOperationType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__MediaOperationType(struct soap*, ns1__MediaOperationType **const*, const char*, const char*);
SOAP_FMAC3 ns1__MediaOperationType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__MediaOperationType(struct soap*, ns1__MediaOperationType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MediaOperationType_DEFINED
#define SOAP_TYPE_PointerTons1__MediaOperationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MediaOperationType(struct soap*, ns1__MediaOperationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MediaOperationType(struct soap*, const char *, int, ns1__MediaOperationType *const*, const char *);
SOAP_FMAC3 ns1__MediaOperationType ** SOAP_FMAC4 soap_in_PointerTons1__MediaOperationType(struct soap*, const char*, ns1__MediaOperationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MediaOperationType(struct soap*, ns1__MediaOperationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MediaOperationType ** SOAP_FMAC4 soap_get_PointerTons1__MediaOperationType(struct soap*, ns1__MediaOperationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__missingDataType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__missingDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__missingDataType(struct soap*, ns1__missingDataType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__missingDataType(struct soap*, const char *, int, ns1__missingDataType **const*, const char *);
SOAP_FMAC3 ns1__missingDataType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__missingDataType(struct soap*, const char*, ns1__missingDataType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__missingDataType(struct soap*, ns1__missingDataType **const*, const char*, const char*);
SOAP_FMAC3 ns1__missingDataType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__missingDataType(struct soap*, ns1__missingDataType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__missingDataType_DEFINED
#define SOAP_TYPE_PointerTons1__missingDataType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__missingDataType(struct soap*, ns1__missingDataType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__missingDataType(struct soap*, const char *, int, ns1__missingDataType *const*, const char *);
SOAP_FMAC3 ns1__missingDataType ** SOAP_FMAC4 soap_in_PointerTons1__missingDataType(struct soap*, const char*, ns1__missingDataType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__missingDataType(struct soap*, ns1__missingDataType *const*, const char*, const char*);
SOAP_FMAC3 ns1__missingDataType ** SOAP_FMAC4 soap_get_PointerTons1__missingDataType(struct soap*, ns1__missingDataType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__dataReportListType_DEFINED
#define SOAP_TYPE_PointerTons1__dataReportListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__dataReportListType(struct soap*, ns1__dataReportListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__dataReportListType(struct soap*, const char *, int, ns1__dataReportListType *const*, const char *);
SOAP_FMAC3 ns1__dataReportListType ** SOAP_FMAC4 soap_in_PointerTons1__dataReportListType(struct soap*, const char*, ns1__dataReportListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dataReportListType(struct soap*, ns1__dataReportListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__dataReportListType ** SOAP_FMAC4 soap_get_PointerTons1__dataReportListType(struct soap*, ns1__dataReportListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__SlaveDataReportType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__SlaveDataReportType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__SlaveDataReportType(struct soap*, ns1__SlaveDataReportType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__SlaveDataReportType(struct soap*, const char *, int, ns1__SlaveDataReportType **const*, const char *);
SOAP_FMAC3 ns1__SlaveDataReportType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__SlaveDataReportType(struct soap*, const char*, ns1__SlaveDataReportType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__SlaveDataReportType(struct soap*, ns1__SlaveDataReportType **const*, const char*, const char*);
SOAP_FMAC3 ns1__SlaveDataReportType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__SlaveDataReportType(struct soap*, ns1__SlaveDataReportType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SlaveDataReportType_DEFINED
#define SOAP_TYPE_PointerTons1__SlaveDataReportType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SlaveDataReportType(struct soap*, ns1__SlaveDataReportType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SlaveDataReportType(struct soap*, const char *, int, ns1__SlaveDataReportType *const*, const char *);
SOAP_FMAC3 ns1__SlaveDataReportType ** SOAP_FMAC4 soap_in_PointerTons1__SlaveDataReportType(struct soap*, const char*, ns1__SlaveDataReportType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SlaveDataReportType(struct soap*, ns1__SlaveDataReportType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SlaveDataReportType ** SOAP_FMAC4 soap_get_PointerTons1__SlaveDataReportType(struct soap*, ns1__SlaveDataReportType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__dataReportType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__dataReportType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__dataReportType(struct soap*, ns1__dataReportType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__dataReportType(struct soap*, const char *, int, ns1__dataReportType **const*, const char *);
SOAP_FMAC3 ns1__dataReportType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__dataReportType(struct soap*, const char*, ns1__dataReportType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__dataReportType(struct soap*, ns1__dataReportType **const*, const char*, const char*);
SOAP_FMAC3 ns1__dataReportType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__dataReportType(struct soap*, ns1__dataReportType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__dataReportType_DEFINED
#define SOAP_TYPE_PointerTons1__dataReportType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__dataReportType(struct soap*, ns1__dataReportType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__dataReportType(struct soap*, const char *, int, ns1__dataReportType *const*, const char *);
SOAP_FMAC3 ns1__dataReportType ** SOAP_FMAC4 soap_in_PointerTons1__dataReportType(struct soap*, const char*, ns1__dataReportType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__dataReportType(struct soap*, ns1__dataReportType *const*, const char*, const char*);
SOAP_FMAC3 ns1__dataReportType ** SOAP_FMAC4 soap_get_PointerTons1__dataReportType(struct soap*, ns1__dataReportType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InvoiceReceiptType_DEFINED
#define SOAP_TYPE_PointerTons1__InvoiceReceiptType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InvoiceReceiptType(struct soap*, ns1__InvoiceReceiptType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InvoiceReceiptType(struct soap*, const char *, int, ns1__InvoiceReceiptType *const*, const char *);
SOAP_FMAC3 ns1__InvoiceReceiptType ** SOAP_FMAC4 soap_in_PointerTons1__InvoiceReceiptType(struct soap*, const char*, ns1__InvoiceReceiptType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InvoiceReceiptType(struct soap*, ns1__InvoiceReceiptType *const*, const char*, const char*);
SOAP_FMAC3 ns1__InvoiceReceiptType ** SOAP_FMAC4 soap_get_PointerTons1__InvoiceReceiptType(struct soap*, ns1__InvoiceReceiptType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__MoneyReturnedFlow_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__MoneyReturnedFlow_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__MoneyReturnedFlow(struct soap*, ns1__MoneyReturnedFlow **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__MoneyReturnedFlow(struct soap*, const char *, int, ns1__MoneyReturnedFlow **const*, const char *);
SOAP_FMAC3 ns1__MoneyReturnedFlow *** SOAP_FMAC4 soap_in_PointerToPointerTons1__MoneyReturnedFlow(struct soap*, const char*, ns1__MoneyReturnedFlow ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__MoneyReturnedFlow(struct soap*, ns1__MoneyReturnedFlow **const*, const char*, const char*);
SOAP_FMAC3 ns1__MoneyReturnedFlow *** SOAP_FMAC4 soap_get_PointerToPointerTons1__MoneyReturnedFlow(struct soap*, ns1__MoneyReturnedFlow ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MoneyReturnedFlow_DEFINED
#define SOAP_TYPE_PointerTons1__MoneyReturnedFlow_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MoneyReturnedFlow(struct soap*, ns1__MoneyReturnedFlow *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MoneyReturnedFlow(struct soap*, const char *, int, ns1__MoneyReturnedFlow *const*, const char *);
SOAP_FMAC3 ns1__MoneyReturnedFlow ** SOAP_FMAC4 soap_in_PointerTons1__MoneyReturnedFlow(struct soap*, const char*, ns1__MoneyReturnedFlow **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MoneyReturnedFlow(struct soap*, ns1__MoneyReturnedFlow *const*, const char*, const char*);
SOAP_FMAC3 ns1__MoneyReturnedFlow ** SOAP_FMAC4 soap_get_PointerTons1__MoneyReturnedFlow(struct soap*, ns1__MoneyReturnedFlow **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__MoneyInsertedFlow_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__MoneyInsertedFlow_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__MoneyInsertedFlow(struct soap*, ns1__MoneyInsertedFlow **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__MoneyInsertedFlow(struct soap*, const char *, int, ns1__MoneyInsertedFlow **const*, const char *);
SOAP_FMAC3 ns1__MoneyInsertedFlow *** SOAP_FMAC4 soap_in_PointerToPointerTons1__MoneyInsertedFlow(struct soap*, const char*, ns1__MoneyInsertedFlow ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__MoneyInsertedFlow(struct soap*, ns1__MoneyInsertedFlow **const*, const char*, const char*);
SOAP_FMAC3 ns1__MoneyInsertedFlow *** SOAP_FMAC4 soap_get_PointerToPointerTons1__MoneyInsertedFlow(struct soap*, ns1__MoneyInsertedFlow ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MoneyInsertedFlow_DEFINED
#define SOAP_TYPE_PointerTons1__MoneyInsertedFlow_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MoneyInsertedFlow(struct soap*, ns1__MoneyInsertedFlow *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MoneyInsertedFlow(struct soap*, const char *, int, ns1__MoneyInsertedFlow *const*, const char *);
SOAP_FMAC3 ns1__MoneyInsertedFlow ** SOAP_FMAC4 soap_in_PointerTons1__MoneyInsertedFlow(struct soap*, const char*, ns1__MoneyInsertedFlow **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MoneyInsertedFlow(struct soap*, ns1__MoneyInsertedFlow *const*, const char*, const char*);
SOAP_FMAC3 ns1__MoneyInsertedFlow ** SOAP_FMAC4 soap_get_PointerTons1__MoneyInsertedFlow(struct soap*, ns1__MoneyInsertedFlow **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__AwardType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__AwardType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AwardType(struct soap*, ns1__AwardType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AwardType(struct soap*, const char *, int, ns1__AwardType **const*, const char *);
SOAP_FMAC3 ns1__AwardType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AwardType(struct soap*, const char*, ns1__AwardType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AwardType(struct soap*, ns1__AwardType **const*, const char*, const char*);
SOAP_FMAC3 ns1__AwardType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AwardType(struct soap*, ns1__AwardType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AwardType_DEFINED
#define SOAP_TYPE_PointerTons1__AwardType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AwardType(struct soap*, ns1__AwardType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AwardType(struct soap*, const char *, int, ns1__AwardType *const*, const char *);
SOAP_FMAC3 ns1__AwardType ** SOAP_FMAC4 soap_in_PointerTons1__AwardType(struct soap*, const char*, ns1__AwardType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AwardType(struct soap*, ns1__AwardType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AwardType ** SOAP_FMAC4 soap_get_PointerTons1__AwardType(struct soap*, ns1__AwardType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__PaymentModeType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__PaymentModeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__PaymentModeType(struct soap*, ns1__PaymentModeType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__PaymentModeType(struct soap*, const char *, int, ns1__PaymentModeType **const*, const char *);
SOAP_FMAC3 ns1__PaymentModeType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__PaymentModeType(struct soap*, const char*, ns1__PaymentModeType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__PaymentModeType(struct soap*, ns1__PaymentModeType **const*, const char*, const char*);
SOAP_FMAC3 ns1__PaymentModeType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__PaymentModeType(struct soap*, ns1__PaymentModeType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PaymentModeType_DEFINED
#define SOAP_TYPE_PointerTons1__PaymentModeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PaymentModeType(struct soap*, ns1__PaymentModeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PaymentModeType(struct soap*, const char *, int, ns1__PaymentModeType *const*, const char *);
SOAP_FMAC3 ns1__PaymentModeType ** SOAP_FMAC4 soap_in_PointerTons1__PaymentModeType(struct soap*, const char*, ns1__PaymentModeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PaymentModeType(struct soap*, ns1__PaymentModeType *const*, const char*, const char*);
SOAP_FMAC3 ns1__PaymentModeType ** SOAP_FMAC4 soap_get_PointerTons1__PaymentModeType(struct soap*, ns1__PaymentModeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__AccountingFailureInfo_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__AccountingFailureInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AccountingFailureInfo(struct soap*, ns1__AccountingFailureInfo **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AccountingFailureInfo(struct soap*, const char *, int, ns1__AccountingFailureInfo **const*, const char *);
SOAP_FMAC3 ns1__AccountingFailureInfo *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AccountingFailureInfo(struct soap*, const char*, ns1__AccountingFailureInfo ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AccountingFailureInfo(struct soap*, ns1__AccountingFailureInfo **const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingFailureInfo *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AccountingFailureInfo(struct soap*, ns1__AccountingFailureInfo ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingFailureInfo_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingFailureInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingFailureInfo(struct soap*, ns1__AccountingFailureInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingFailureInfo(struct soap*, const char *, int, ns1__AccountingFailureInfo *const*, const char *);
SOAP_FMAC3 ns1__AccountingFailureInfo ** SOAP_FMAC4 soap_in_PointerTons1__AccountingFailureInfo(struct soap*, const char*, ns1__AccountingFailureInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingFailureInfo(struct soap*, ns1__AccountingFailureInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingFailureInfo ** SOAP_FMAC4 soap_get_PointerTons1__AccountingFailureInfo(struct soap*, ns1__AccountingFailureInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__AccountingFailureType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__AccountingFailureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AccountingFailureType(struct soap*, ns1__AccountingFailureType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AccountingFailureType(struct soap*, const char *, int, ns1__AccountingFailureType **const*, const char *);
SOAP_FMAC3 ns1__AccountingFailureType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AccountingFailureType(struct soap*, const char*, ns1__AccountingFailureType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AccountingFailureType(struct soap*, ns1__AccountingFailureType **const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingFailureType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AccountingFailureType(struct soap*, ns1__AccountingFailureType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingFailureType_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingFailureType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingFailureType(struct soap*, ns1__AccountingFailureType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingFailureType(struct soap*, const char *, int, ns1__AccountingFailureType *const*, const char *);
SOAP_FMAC3 ns1__AccountingFailureType ** SOAP_FMAC4 soap_in_PointerTons1__AccountingFailureType(struct soap*, const char*, ns1__AccountingFailureType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingFailureType(struct soap*, ns1__AccountingFailureType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingFailureType ** SOAP_FMAC4 soap_get_PointerTons1__AccountingFailureType(struct soap*, ns1__AccountingFailureType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__cardIdentificationType_DEFINED
#define SOAP_TYPE_PointerTons1__cardIdentificationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__cardIdentificationType(struct soap*, ns1__cardIdentificationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__cardIdentificationType(struct soap*, const char *, int, ns1__cardIdentificationType *const*, const char *);
SOAP_FMAC3 ns1__cardIdentificationType ** SOAP_FMAC4 soap_in_PointerTons1__cardIdentificationType(struct soap*, const char*, ns1__cardIdentificationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__cardIdentificationType(struct soap*, ns1__cardIdentificationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__cardIdentificationType ** SOAP_FMAC4 soap_get_PointerTons1__cardIdentificationType(struct soap*, ns1__cardIdentificationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToULONG64_DEFINED
#define SOAP_TYPE_PointerToULONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToULONG64(struct soap*, ULONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToULONG64(struct soap*, const char *, int, ULONG64 *const*, const char *);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_in_PointerToULONG64(struct soap*, const char*, ULONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToULONG64(struct soap*, ULONG64 *const*, const char*, const char*);
SOAP_FMAC3 ULONG64 ** SOAP_FMAC4 soap_get_PointerToULONG64(struct soap*, ULONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingUnitInfo_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingUnitInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingUnitInfo(struct soap*, ns1__AccountingUnitInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingUnitInfo(struct soap*, const char *, int, ns1__AccountingUnitInfo *const*, const char *);
SOAP_FMAC3 ns1__AccountingUnitInfo ** SOAP_FMAC4 soap_in_PointerTons1__AccountingUnitInfo(struct soap*, const char*, ns1__AccountingUnitInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingUnitInfo(struct soap*, ns1__AccountingUnitInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingUnitInfo ** SOAP_FMAC4 soap_get_PointerTons1__AccountingUnitInfo(struct soap*, ns1__AccountingUnitInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__IdentificationDocument_DEFINED
#define SOAP_TYPE_PointerTons1__IdentificationDocument_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__IdentificationDocument(struct soap*, ns1__IdentificationDocument *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__IdentificationDocument(struct soap*, const char *, int, ns1__IdentificationDocument *const*, const char *);
SOAP_FMAC3 ns1__IdentificationDocument ** SOAP_FMAC4 soap_in_PointerTons1__IdentificationDocument(struct soap*, const char*, ns1__IdentificationDocument **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__IdentificationDocument(struct soap*, ns1__IdentificationDocument *const*, const char*, const char*);
SOAP_FMAC3 ns1__IdentificationDocument ** SOAP_FMAC4 soap_get_PointerTons1__IdentificationDocument(struct soap*, ns1__IdentificationDocument **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FareInfo_DEFINED
#define SOAP_TYPE_PointerTons1__FareInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FareInfo(struct soap*, ns1__FareInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FareInfo(struct soap*, const char *, int, ns1__FareInfo *const*, const char *);
SOAP_FMAC3 ns1__FareInfo ** SOAP_FMAC4 soap_in_PointerTons1__FareInfo(struct soap*, const char*, ns1__FareInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FareInfo(struct soap*, ns1__FareInfo *const*, const char*, const char*);
SOAP_FMAC3 ns1__FareInfo ** SOAP_FMAC4 soap_get_PointerTons1__FareInfo(struct soap*, ns1__FareInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__taxAppliedType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__taxAppliedType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__taxAppliedType(struct soap*, ns1__taxAppliedType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__taxAppliedType(struct soap*, const char *, int, ns1__taxAppliedType **const*, const char *);
SOAP_FMAC3 ns1__taxAppliedType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__taxAppliedType(struct soap*, const char*, ns1__taxAppliedType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__taxAppliedType(struct soap*, ns1__taxAppliedType **const*, const char*, const char*);
SOAP_FMAC3 ns1__taxAppliedType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__taxAppliedType(struct soap*, ns1__taxAppliedType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__taxAppliedType_DEFINED
#define SOAP_TYPE_PointerTons1__taxAppliedType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__taxAppliedType(struct soap*, ns1__taxAppliedType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__taxAppliedType(struct soap*, const char *, int, ns1__taxAppliedType *const*, const char *);
SOAP_FMAC3 ns1__taxAppliedType ** SOAP_FMAC4 soap_in_PointerTons1__taxAppliedType(struct soap*, const char*, ns1__taxAppliedType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__taxAppliedType(struct soap*, ns1__taxAppliedType *const*, const char*, const char*);
SOAP_FMAC3 ns1__taxAppliedType ** SOAP_FMAC4 soap_get_PointerTons1__taxAppliedType(struct soap*, ns1__taxAppliedType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CardDataMagType_DEFINED
#define SOAP_TYPE_PointerTons1__CardDataMagType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CardDataMagType(struct soap*, ns1__CardDataMagType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CardDataMagType(struct soap*, const char *, int, ns1__CardDataMagType *const*, const char *);
SOAP_FMAC3 ns1__CardDataMagType ** SOAP_FMAC4 soap_in_PointerTons1__CardDataMagType(struct soap*, const char*, ns1__CardDataMagType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CardDataMagType(struct soap*, ns1__CardDataMagType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CardDataMagType ** SOAP_FMAC4 soap_get_PointerTons1__CardDataMagType(struct soap*, ns1__CardDataMagType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CardDataInfoType_DEFINED
#define SOAP_TYPE_PointerTons1__CardDataInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CardDataInfoType(struct soap*, ns1__CardDataInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CardDataInfoType(struct soap*, const char *, int, ns1__CardDataInfoType *const*, const char *);
SOAP_FMAC3 ns1__CardDataInfoType ** SOAP_FMAC4 soap_in_PointerTons1__CardDataInfoType(struct soap*, const char*, ns1__CardDataInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CardDataInfoType(struct soap*, ns1__CardDataInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CardDataInfoType ** SOAP_FMAC4 soap_get_PointerTons1__CardDataInfoType(struct soap*, ns1__CardDataInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__taxAppliedList_DEFINED
#define SOAP_TYPE_PointerTons1__taxAppliedList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__taxAppliedList(struct soap*, ns1__taxAppliedList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__taxAppliedList(struct soap*, const char *, int, ns1__taxAppliedList *const*, const char *);
SOAP_FMAC3 ns1__taxAppliedList ** SOAP_FMAC4 soap_in_PointerTons1__taxAppliedList(struct soap*, const char*, ns1__taxAppliedList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__taxAppliedList(struct soap*, ns1__taxAppliedList *const*, const char*, const char*);
SOAP_FMAC3 ns1__taxAppliedList ** SOAP_FMAC4 soap_get_PointerTons1__taxAppliedList(struct soap*, ns1__taxAppliedList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TitleCodeType_DEFINED
#define SOAP_TYPE_PointerTons1__TitleCodeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TitleCodeType(struct soap*, ns1__TitleCodeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TitleCodeType(struct soap*, const char *, int, ns1__TitleCodeType *const*, const char *);
SOAP_FMAC3 ns1__TitleCodeType ** SOAP_FMAC4 soap_in_PointerTons1__TitleCodeType(struct soap*, const char*, ns1__TitleCodeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TitleCodeType(struct soap*, ns1__TitleCodeType *const*, const char*, const char*);
SOAP_FMAC3 ns1__TitleCodeType ** SOAP_FMAC4 soap_get_PointerTons1__TitleCodeType(struct soap*, ns1__TitleCodeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__AccountingUnit_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__AccountingUnit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AccountingUnit(struct soap*, ns1__AccountingUnit **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AccountingUnit(struct soap*, const char *, int, ns1__AccountingUnit **const*, const char *);
SOAP_FMAC3 ns1__AccountingUnit *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AccountingUnit(struct soap*, const char*, ns1__AccountingUnit ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AccountingUnit(struct soap*, ns1__AccountingUnit **const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingUnit *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AccountingUnit(struct soap*, ns1__AccountingUnit ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingUnit_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingUnit_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingUnit(struct soap*, ns1__AccountingUnit *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingUnit(struct soap*, const char *, int, ns1__AccountingUnit *const*, const char *);
SOAP_FMAC3 ns1__AccountingUnit ** SOAP_FMAC4 soap_in_PointerTons1__AccountingUnit(struct soap*, const char*, ns1__AccountingUnit **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingUnit(struct soap*, ns1__AccountingUnit *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingUnit ** SOAP_FMAC4 soap_get_PointerTons1__AccountingUnit(struct soap*, ns1__AccountingUnit **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__AccountingUnitType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__AccountingUnitType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AccountingUnitType(struct soap*, ns1__AccountingUnitType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AccountingUnitType(struct soap*, const char *, int, ns1__AccountingUnitType **const*, const char *);
SOAP_FMAC3 ns1__AccountingUnitType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AccountingUnitType(struct soap*, const char*, ns1__AccountingUnitType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AccountingUnitType(struct soap*, ns1__AccountingUnitType **const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingUnitType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AccountingUnitType(struct soap*, ns1__AccountingUnitType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingUnitType_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingUnitType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingUnitType(struct soap*, ns1__AccountingUnitType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingUnitType(struct soap*, const char *, int, ns1__AccountingUnitType *const*, const char *);
SOAP_FMAC3 ns1__AccountingUnitType ** SOAP_FMAC4 soap_in_PointerTons1__AccountingUnitType(struct soap*, const char*, ns1__AccountingUnitType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingUnitType(struct soap*, ns1__AccountingUnitType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingUnitType ** SOAP_FMAC4 soap_get_PointerTons1__AccountingUnitType(struct soap*, ns1__AccountingUnitType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ReceiptItem_DEFINED
#define SOAP_TYPE_PointerTons1__ReceiptItem_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ReceiptItem(struct soap*, ns1__ReceiptItem *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ReceiptItem(struct soap*, const char *, int, ns1__ReceiptItem *const*, const char *);
SOAP_FMAC3 ns1__ReceiptItem ** SOAP_FMAC4 soap_in_PointerTons1__ReceiptItem(struct soap*, const char*, ns1__ReceiptItem **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ReceiptItem(struct soap*, ns1__ReceiptItem *const*, const char*, const char*);
SOAP_FMAC3 ns1__ReceiptItem ** SOAP_FMAC4 soap_get_PointerTons1__ReceiptItem(struct soap*, ns1__ReceiptItem **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__ReceiptLine_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__ReceiptLine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ReceiptLine(struct soap*, ns1__ReceiptLine **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ReceiptLine(struct soap*, const char *, int, ns1__ReceiptLine **const*, const char *);
SOAP_FMAC3 ns1__ReceiptLine *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ReceiptLine(struct soap*, const char*, ns1__ReceiptLine ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ReceiptLine(struct soap*, ns1__ReceiptLine **const*, const char*, const char*);
SOAP_FMAC3 ns1__ReceiptLine *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ReceiptLine(struct soap*, ns1__ReceiptLine ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ReceiptLine_DEFINED
#define SOAP_TYPE_PointerTons1__ReceiptLine_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ReceiptLine(struct soap*, ns1__ReceiptLine *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ReceiptLine(struct soap*, const char *, int, ns1__ReceiptLine *const*, const char *);
SOAP_FMAC3 ns1__ReceiptLine ** SOAP_FMAC4 soap_in_PointerTons1__ReceiptLine(struct soap*, const char*, ns1__ReceiptLine **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ReceiptLine(struct soap*, ns1__ReceiptLine *const*, const char*, const char*);
SOAP_FMAC3 ns1__ReceiptLine ** SOAP_FMAC4 soap_get_PointerTons1__ReceiptLine(struct soap*, ns1__ReceiptLine **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__valOpMagType_DEFINED
#define SOAP_TYPE_PointerTons1__valOpMagType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__valOpMagType(struct soap*, ns1__valOpMagType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__valOpMagType(struct soap*, const char *, int, ns1__valOpMagType *const*, const char *);
SOAP_FMAC3 ns1__valOpMagType ** SOAP_FMAC4 soap_in_PointerTons1__valOpMagType(struct soap*, const char*, ns1__valOpMagType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__valOpMagType(struct soap*, ns1__valOpMagType *const*, const char*, const char*);
SOAP_FMAC3 ns1__valOpMagType ** SOAP_FMAC4 soap_get_PointerTons1__valOpMagType(struct soap*, ns1__valOpMagType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__cardDataMagBody_DEFINED
#define SOAP_TYPE_PointerTons1__cardDataMagBody_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__cardDataMagBody(struct soap*, ns1__cardDataMagBody *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__cardDataMagBody(struct soap*, const char *, int, ns1__cardDataMagBody *const*, const char *);
SOAP_FMAC3 ns1__cardDataMagBody ** SOAP_FMAC4 soap_in_PointerTons1__cardDataMagBody(struct soap*, const char*, ns1__cardDataMagBody **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__cardDataMagBody(struct soap*, ns1__cardDataMagBody *const*, const char*, const char*);
SOAP_FMAC3 ns1__cardDataMagBody ** SOAP_FMAC4 soap_get_PointerTons1__cardDataMagBody(struct soap*, ns1__cardDataMagBody **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__cardDataMagHeader_DEFINED
#define SOAP_TYPE_PointerTons1__cardDataMagHeader_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__cardDataMagHeader(struct soap*, ns1__cardDataMagHeader *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__cardDataMagHeader(struct soap*, const char *, int, ns1__cardDataMagHeader *const*, const char *);
SOAP_FMAC3 ns1__cardDataMagHeader ** SOAP_FMAC4 soap_in_PointerTons1__cardDataMagHeader(struct soap*, const char*, ns1__cardDataMagHeader **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__cardDataMagHeader(struct soap*, ns1__cardDataMagHeader *const*, const char*, const char*);
SOAP_FMAC3 ns1__cardDataMagHeader ** SOAP_FMAC4 soap_get_PointerTons1__cardDataMagHeader(struct soap*, ns1__cardDataMagHeader **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__hexBinary_DEFINED
#define SOAP_TYPE_PointerToxsd__hexBinary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__hexBinary(struct soap*, xsd__hexBinary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__hexBinary(struct soap*, const char *, int, xsd__hexBinary *const*, const char *);
SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_in_PointerToxsd__hexBinary(struct soap*, const char*, xsd__hexBinary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__hexBinary(struct soap*, xsd__hexBinary *const*, const char*, const char*);
SOAP_FMAC3 xsd__hexBinary ** SOAP_FMAC4 soap_get_PointerToxsd__hexBinary(struct soap*, xsd__hexBinary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FareMedia_DEFINED
#define SOAP_TYPE_PointerTons1__FareMedia_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FareMedia(struct soap*, ns1__FareMedia *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FareMedia(struct soap*, const char *, int, ns1__FareMedia *const*, const char *);
SOAP_FMAC3 ns1__FareMedia ** SOAP_FMAC4 soap_in_PointerTons1__FareMedia(struct soap*, const char*, ns1__FareMedia **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FareMedia(struct soap*, ns1__FareMedia *const*, const char*, const char*);
SOAP_FMAC3 ns1__FareMedia ** SOAP_FMAC4 soap_get_PointerTons1__FareMedia(struct soap*, ns1__FareMedia **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__FareProduct_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__FareProduct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__FareProduct(struct soap*, ns1__FareProduct **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__FareProduct(struct soap*, const char *, int, ns1__FareProduct **const*, const char *);
SOAP_FMAC3 ns1__FareProduct *** SOAP_FMAC4 soap_in_PointerToPointerTons1__FareProduct(struct soap*, const char*, ns1__FareProduct ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__FareProduct(struct soap*, ns1__FareProduct **const*, const char*, const char*);
SOAP_FMAC3 ns1__FareProduct *** SOAP_FMAC4 soap_get_PointerToPointerTons1__FareProduct(struct soap*, ns1__FareProduct ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FareProduct_DEFINED
#define SOAP_TYPE_PointerTons1__FareProduct_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FareProduct(struct soap*, ns1__FareProduct *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FareProduct(struct soap*, const char *, int, ns1__FareProduct *const*, const char *);
SOAP_FMAC3 ns1__FareProduct ** SOAP_FMAC4 soap_in_PointerTons1__FareProduct(struct soap*, const char*, ns1__FareProduct **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FareProduct(struct soap*, ns1__FareProduct *const*, const char*, const char*);
SOAP_FMAC3 ns1__FareProduct ** SOAP_FMAC4 soap_get_PointerTons1__FareProduct(struct soap*, ns1__FareProduct **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LocationBoardType_DEFINED
#define SOAP_TYPE_PointerTons1__LocationBoardType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LocationBoardType(struct soap*, ns1__LocationBoardType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LocationBoardType(struct soap*, const char *, int, ns1__LocationBoardType *const*, const char *);
SOAP_FMAC3 ns1__LocationBoardType ** SOAP_FMAC4 soap_in_PointerTons1__LocationBoardType(struct soap*, const char*, ns1__LocationBoardType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LocationBoardType(struct soap*, ns1__LocationBoardType *const*, const char*, const char*);
SOAP_FMAC3 ns1__LocationBoardType ** SOAP_FMAC4 soap_get_PointerTons1__LocationBoardType(struct soap*, ns1__LocationBoardType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LocationStationType_DEFINED
#define SOAP_TYPE_PointerTons1__LocationStationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LocationStationType(struct soap*, ns1__LocationStationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LocationStationType(struct soap*, const char *, int, ns1__LocationStationType *const*, const char *);
SOAP_FMAC3 ns1__LocationStationType ** SOAP_FMAC4 soap_in_PointerTons1__LocationStationType(struct soap*, const char*, ns1__LocationStationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LocationStationType(struct soap*, ns1__LocationStationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__LocationStationType ** SOAP_FMAC4 soap_get_PointerTons1__LocationStationType(struct soap*, ns1__LocationStationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AVLocation_DEFINED
#define SOAP_TYPE_PointerTons1__AVLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AVLocation(struct soap*, ns1__AVLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AVLocation(struct soap*, const char *, int, ns1__AVLocation *const*, const char *);
SOAP_FMAC3 ns1__AVLocation ** SOAP_FMAC4 soap_in_PointerTons1__AVLocation(struct soap*, const char*, ns1__AVLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AVLocation(struct soap*, ns1__AVLocation *const*, const char*, const char*);
SOAP_FMAC3 ns1__AVLocation ** SOAP_FMAC4 soap_get_PointerTons1__AVLocation(struct soap*, ns1__AVLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OperationalLocation_DEFINED
#define SOAP_TYPE_PointerTons1__OperationalLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OperationalLocation(struct soap*, ns1__OperationalLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OperationalLocation(struct soap*, const char *, int, ns1__OperationalLocation *const*, const char *);
SOAP_FMAC3 ns1__OperationalLocation ** SOAP_FMAC4 soap_in_PointerTons1__OperationalLocation(struct soap*, const char*, ns1__OperationalLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OperationalLocation(struct soap*, ns1__OperationalLocation *const*, const char*, const char*);
SOAP_FMAC3 ns1__OperationalLocation ** SOAP_FMAC4 soap_get_PointerTons1__OperationalLocation(struct soap*, ns1__OperationalLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OnboardLocation_DEFINED
#define SOAP_TYPE_PointerTons1__OnboardLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OnboardLocation(struct soap*, ns1__OnboardLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OnboardLocation(struct soap*, const char *, int, ns1__OnboardLocation *const*, const char *);
SOAP_FMAC3 ns1__OnboardLocation ** SOAP_FMAC4 soap_in_PointerTons1__OnboardLocation(struct soap*, const char*, ns1__OnboardLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OnboardLocation(struct soap*, ns1__OnboardLocation *const*, const char*, const char*);
SOAP_FMAC3 ns1__OnboardLocation ** SOAP_FMAC4 soap_get_PointerTons1__OnboardLocation(struct soap*, ns1__OnboardLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FixedLocation_DEFINED
#define SOAP_TYPE_PointerTons1__FixedLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FixedLocation(struct soap*, ns1__FixedLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FixedLocation(struct soap*, const char *, int, ns1__FixedLocation *const*, const char *);
SOAP_FMAC3 ns1__FixedLocation ** SOAP_FMAC4 soap_in_PointerTons1__FixedLocation(struct soap*, const char*, ns1__FixedLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FixedLocation(struct soap*, ns1__FixedLocation *const*, const char*, const char*);
SOAP_FMAC3 ns1__FixedLocation ** SOAP_FMAC4 soap_get_PointerTons1__FixedLocation(struct soap*, ns1__FixedLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__ConfigVersionType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__ConfigVersionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ConfigVersionType(struct soap*, ns1__ConfigVersionType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ConfigVersionType(struct soap*, const char *, int, ns1__ConfigVersionType **const*, const char *);
SOAP_FMAC3 ns1__ConfigVersionType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ConfigVersionType(struct soap*, const char*, ns1__ConfigVersionType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ConfigVersionType(struct soap*, ns1__ConfigVersionType **const*, const char*, const char*);
SOAP_FMAC3 ns1__ConfigVersionType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ConfigVersionType(struct soap*, ns1__ConfigVersionType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ConfigVersionType_DEFINED
#define SOAP_TYPE_PointerTons1__ConfigVersionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ConfigVersionType(struct soap*, ns1__ConfigVersionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ConfigVersionType(struct soap*, const char *, int, ns1__ConfigVersionType *const*, const char *);
SOAP_FMAC3 ns1__ConfigVersionType ** SOAP_FMAC4 soap_in_PointerTons1__ConfigVersionType(struct soap*, const char*, ns1__ConfigVersionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ConfigVersionType(struct soap*, ns1__ConfigVersionType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ConfigVersionType ** SOAP_FMAC4 soap_get_PointerTons1__ConfigVersionType(struct soap*, ns1__ConfigVersionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__stSWFileType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__stSWFileType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__stSWFileType(struct soap*, ns1__stSWFileType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__stSWFileType(struct soap*, const char *, int, ns1__stSWFileType **const*, const char *);
SOAP_FMAC3 ns1__stSWFileType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__stSWFileType(struct soap*, const char*, ns1__stSWFileType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__stSWFileType(struct soap*, ns1__stSWFileType **const*, const char*, const char*);
SOAP_FMAC3 ns1__stSWFileType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__stSWFileType(struct soap*, ns1__stSWFileType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__stSWFileType_DEFINED
#define SOAP_TYPE_PointerTons1__stSWFileType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__stSWFileType(struct soap*, ns1__stSWFileType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__stSWFileType(struct soap*, const char *, int, ns1__stSWFileType *const*, const char *);
SOAP_FMAC3 ns1__stSWFileType ** SOAP_FMAC4 soap_in_PointerTons1__stSWFileType(struct soap*, const char*, ns1__stSWFileType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__stSWFileType(struct soap*, ns1__stSWFileType *const*, const char*, const char*);
SOAP_FMAC3 ns1__stSWFileType ** SOAP_FMAC4 soap_get_PointerTons1__stSWFileType(struct soap*, ns1__stSWFileType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__stConfigFileType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__stConfigFileType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__stConfigFileType(struct soap*, ns1__stConfigFileType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__stConfigFileType(struct soap*, const char *, int, ns1__stConfigFileType **const*, const char *);
SOAP_FMAC3 ns1__stConfigFileType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__stConfigFileType(struct soap*, const char*, ns1__stConfigFileType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__stConfigFileType(struct soap*, ns1__stConfigFileType **const*, const char*, const char*);
SOAP_FMAC3 ns1__stConfigFileType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__stConfigFileType(struct soap*, ns1__stConfigFileType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__stConfigFileType_DEFINED
#define SOAP_TYPE_PointerTons1__stConfigFileType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__stConfigFileType(struct soap*, ns1__stConfigFileType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__stConfigFileType(struct soap*, const char *, int, ns1__stConfigFileType *const*, const char *);
SOAP_FMAC3 ns1__stConfigFileType ** SOAP_FMAC4 soap_in_PointerTons1__stConfigFileType(struct soap*, const char*, ns1__stConfigFileType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__stConfigFileType(struct soap*, ns1__stConfigFileType *const*, const char*, const char*);
SOAP_FMAC3 ns1__stConfigFileType ** SOAP_FMAC4 soap_get_PointerTons1__stConfigFileType(struct soap*, ns1__stConfigFileType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__stSWFileListType_DEFINED
#define SOAP_TYPE_PointerTons1__stSWFileListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__stSWFileListType(struct soap*, ns1__stSWFileListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__stSWFileListType(struct soap*, const char *, int, ns1__stSWFileListType *const*, const char *);
SOAP_FMAC3 ns1__stSWFileListType ** SOAP_FMAC4 soap_in_PointerTons1__stSWFileListType(struct soap*, const char*, ns1__stSWFileListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__stSWFileListType(struct soap*, ns1__stSWFileListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__stSWFileListType ** SOAP_FMAC4 soap_get_PointerTons1__stSWFileListType(struct soap*, ns1__stSWFileListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__stConfigFileListType_DEFINED
#define SOAP_TYPE_PointerTons1__stConfigFileListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__stConfigFileListType(struct soap*, ns1__stConfigFileListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__stConfigFileListType(struct soap*, const char *, int, ns1__stConfigFileListType *const*, const char *);
SOAP_FMAC3 ns1__stConfigFileListType ** SOAP_FMAC4 soap_in_PointerTons1__stConfigFileListType(struct soap*, const char*, ns1__stConfigFileListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__stConfigFileListType(struct soap*, ns1__stConfigFileListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__stConfigFileListType ** SOAP_FMAC4 soap_get_PointerTons1__stConfigFileListType(struct soap*, ns1__stConfigFileListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__stPackageType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__stPackageType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__stPackageType(struct soap*, ns1__stPackageType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__stPackageType(struct soap*, const char *, int, ns1__stPackageType **const*, const char *);
SOAP_FMAC3 ns1__stPackageType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__stPackageType(struct soap*, const char*, ns1__stPackageType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__stPackageType(struct soap*, ns1__stPackageType **const*, const char*, const char*);
SOAP_FMAC3 ns1__stPackageType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__stPackageType(struct soap*, ns1__stPackageType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__stPackageType_DEFINED
#define SOAP_TYPE_PointerTons1__stPackageType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__stPackageType(struct soap*, ns1__stPackageType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__stPackageType(struct soap*, const char *, int, ns1__stPackageType *const*, const char *);
SOAP_FMAC3 ns1__stPackageType ** SOAP_FMAC4 soap_in_PointerTons1__stPackageType(struct soap*, const char*, ns1__stPackageType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__stPackageType(struct soap*, ns1__stPackageType *const*, const char*, const char*);
SOAP_FMAC3 ns1__stPackageType ** SOAP_FMAC4 soap_get_PointerTons1__stPackageType(struct soap*, ns1__stPackageType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OperationInfoType_DEFINED
#define SOAP_TYPE_PointerTons1__OperationInfoType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OperationInfoType(struct soap*, ns1__OperationInfoType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OperationInfoType(struct soap*, const char *, int, ns1__OperationInfoType *const*, const char *);
SOAP_FMAC3 ns1__OperationInfoType ** SOAP_FMAC4 soap_in_PointerTons1__OperationInfoType(struct soap*, const char*, ns1__OperationInfoType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OperationInfoType(struct soap*, ns1__OperationInfoType *const*, const char*, const char*);
SOAP_FMAC3 ns1__OperationInfoType ** SOAP_FMAC4 soap_get_PointerTons1__OperationInfoType(struct soap*, ns1__OperationInfoType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LocationType_DEFINED
#define SOAP_TYPE_PointerTons1__LocationType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LocationType(struct soap*, ns1__LocationType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LocationType(struct soap*, const char *, int, ns1__LocationType *const*, const char *);
SOAP_FMAC3 ns1__LocationType ** SOAP_FMAC4 soap_in_PointerTons1__LocationType(struct soap*, const char*, ns1__LocationType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LocationType(struct soap*, ns1__LocationType *const*, const char*, const char*);
SOAP_FMAC3 ns1__LocationType ** SOAP_FMAC4 soap_get_PointerTons1__LocationType(struct soap*, ns1__LocationType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ConfigVersionTypeList_DEFINED
#define SOAP_TYPE_PointerTons1__ConfigVersionTypeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ConfigVersionTypeList(struct soap*, ns1__ConfigVersionTypeList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ConfigVersionTypeList(struct soap*, const char *, int, ns1__ConfigVersionTypeList *const*, const char *);
SOAP_FMAC3 ns1__ConfigVersionTypeList ** SOAP_FMAC4 soap_in_PointerTons1__ConfigVersionTypeList(struct soap*, const char*, ns1__ConfigVersionTypeList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ConfigVersionTypeList(struct soap*, ns1__ConfigVersionTypeList *const*, const char*, const char*);
SOAP_FMAC3 ns1__ConfigVersionTypeList ** SOAP_FMAC4 soap_get_PointerTons1__ConfigVersionTypeList(struct soap*, ns1__ConfigVersionTypeList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SamQuotaUpdateRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__SamQuotaUpdateRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SamQuotaUpdateRecordType(struct soap*, ns1__SamQuotaUpdateRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SamQuotaUpdateRecordType(struct soap*, const char *, int, ns1__SamQuotaUpdateRecordType *const*, const char *);
SOAP_FMAC3 ns1__SamQuotaUpdateRecordType ** SOAP_FMAC4 soap_in_PointerTons1__SamQuotaUpdateRecordType(struct soap*, const char*, ns1__SamQuotaUpdateRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SamQuotaUpdateRecordType(struct soap*, ns1__SamQuotaUpdateRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SamQuotaUpdateRecordType ** SOAP_FMAC4 soap_get_PointerTons1__SamQuotaUpdateRecordType(struct soap*, ns1__SamQuotaUpdateRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ParkingValidationRecord_DEFINED
#define SOAP_TYPE_PointerTons1__ParkingValidationRecord_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ParkingValidationRecord(struct soap*, ns1__ParkingValidationRecord *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ParkingValidationRecord(struct soap*, const char *, int, ns1__ParkingValidationRecord *const*, const char *);
SOAP_FMAC3 ns1__ParkingValidationRecord ** SOAP_FMAC4 soap_in_PointerTons1__ParkingValidationRecord(struct soap*, const char*, ns1__ParkingValidationRecord **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ParkingValidationRecord(struct soap*, ns1__ParkingValidationRecord *const*, const char*, const char*);
SOAP_FMAC3 ns1__ParkingValidationRecord ** SOAP_FMAC4 soap_get_PointerTons1__ParkingValidationRecord(struct soap*, ns1__ParkingValidationRecord **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__IncidenceRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__IncidenceRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__IncidenceRecordType(struct soap*, ns1__IncidenceRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__IncidenceRecordType(struct soap*, const char *, int, ns1__IncidenceRecordType *const*, const char *);
SOAP_FMAC3 ns1__IncidenceRecordType ** SOAP_FMAC4 soap_in_PointerTons1__IncidenceRecordType(struct soap*, const char*, ns1__IncidenceRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__IncidenceRecordType(struct soap*, ns1__IncidenceRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__IncidenceRecordType ** SOAP_FMAC4 soap_get_PointerTons1__IncidenceRecordType(struct soap*, ns1__IncidenceRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PrintedInvoiceRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__PrintedInvoiceRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PrintedInvoiceRecordType(struct soap*, ns1__PrintedInvoiceRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PrintedInvoiceRecordType(struct soap*, const char *, int, ns1__PrintedInvoiceRecordType *const*, const char *);
SOAP_FMAC3 ns1__PrintedInvoiceRecordType ** SOAP_FMAC4 soap_in_PointerTons1__PrintedInvoiceRecordType(struct soap*, const char*, ns1__PrintedInvoiceRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PrintedInvoiceRecordType(struct soap*, ns1__PrintedInvoiceRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__PrintedInvoiceRecordType ** SOAP_FMAC4 soap_get_PointerTons1__PrintedInvoiceRecordType(struct soap*, ns1__PrintedInvoiceRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EndTripRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__EndTripRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EndTripRecordType(struct soap*, ns1__EndTripRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EndTripRecordType(struct soap*, const char *, int, ns1__EndTripRecordType *const*, const char *);
SOAP_FMAC3 ns1__EndTripRecordType ** SOAP_FMAC4 soap_in_PointerTons1__EndTripRecordType(struct soap*, const char*, ns1__EndTripRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EndTripRecordType(struct soap*, ns1__EndTripRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__EndTripRecordType ** SOAP_FMAC4 soap_get_PointerTons1__EndTripRecordType(struct soap*, ns1__EndTripRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__StartTripRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__StartTripRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StartTripRecordType(struct soap*, ns1__StartTripRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StartTripRecordType(struct soap*, const char *, int, ns1__StartTripRecordType *const*, const char *);
SOAP_FMAC3 ns1__StartTripRecordType ** SOAP_FMAC4 soap_in_PointerTons1__StartTripRecordType(struct soap*, const char*, ns1__StartTripRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StartTripRecordType(struct soap*, ns1__StartTripRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__StartTripRecordType ** SOAP_FMAC4 soap_get_PointerTons1__StartTripRecordType(struct soap*, ns1__StartTripRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InternalFailureRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__InternalFailureRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InternalFailureRecordType(struct soap*, ns1__InternalFailureRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InternalFailureRecordType(struct soap*, const char *, int, ns1__InternalFailureRecordType *const*, const char *);
SOAP_FMAC3 ns1__InternalFailureRecordType ** SOAP_FMAC4 soap_in_PointerTons1__InternalFailureRecordType(struct soap*, const char*, ns1__InternalFailureRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InternalFailureRecordType(struct soap*, ns1__InternalFailureRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__InternalFailureRecordType ** SOAP_FMAC4 soap_get_PointerTons1__InternalFailureRecordType(struct soap*, ns1__InternalFailureRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InspectionRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__InspectionRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InspectionRecordType(struct soap*, ns1__InspectionRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InspectionRecordType(struct soap*, const char *, int, ns1__InspectionRecordType *const*, const char *);
SOAP_FMAC3 ns1__InspectionRecordType ** SOAP_FMAC4 soap_in_PointerTons1__InspectionRecordType(struct soap*, const char*, ns1__InspectionRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InspectionRecordType(struct soap*, ns1__InspectionRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__InspectionRecordType ** SOAP_FMAC4 soap_get_PointerTons1__InspectionRecordType(struct soap*, ns1__InspectionRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MediaUpdateStatusRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__MediaUpdateStatusRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MediaUpdateStatusRecordType(struct soap*, ns1__MediaUpdateStatusRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MediaUpdateStatusRecordType(struct soap*, const char *, int, ns1__MediaUpdateStatusRecordType *const*, const char *);
SOAP_FMAC3 ns1__MediaUpdateStatusRecordType ** SOAP_FMAC4 soap_in_PointerTons1__MediaUpdateStatusRecordType(struct soap*, const char*, ns1__MediaUpdateStatusRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MediaUpdateStatusRecordType(struct soap*, ns1__MediaUpdateStatusRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MediaUpdateStatusRecordType ** SOAP_FMAC4 soap_get_PointerTons1__MediaUpdateStatusRecordType(struct soap*, ns1__MediaUpdateStatusRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CscPersonalizationRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CscPersonalizationRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CscPersonalizationRecordType(struct soap*, ns1__CscPersonalizationRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CscPersonalizationRecordType(struct soap*, const char *, int, ns1__CscPersonalizationRecordType *const*, const char *);
SOAP_FMAC3 ns1__CscPersonalizationRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CscPersonalizationRecordType(struct soap*, const char*, ns1__CscPersonalizationRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CscPersonalizationRecordType(struct soap*, ns1__CscPersonalizationRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CscPersonalizationRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CscPersonalizationRecordType(struct soap*, ns1__CscPersonalizationRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CsmInitializationRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CsmInitializationRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CsmInitializationRecordType(struct soap*, ns1__CsmInitializationRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CsmInitializationRecordType(struct soap*, const char *, int, ns1__CsmInitializationRecordType *const*, const char *);
SOAP_FMAC3 ns1__CsmInitializationRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CsmInitializationRecordType(struct soap*, const char*, ns1__CsmInitializationRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CsmInitializationRecordType(struct soap*, ns1__CsmInitializationRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CsmInitializationRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CsmInitializationRecordType(struct soap*, ns1__CsmInitializationRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CscKeyUpdateRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CscKeyUpdateRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CscKeyUpdateRecordType(struct soap*, ns1__CscKeyUpdateRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CscKeyUpdateRecordType(struct soap*, const char *, int, ns1__CscKeyUpdateRecordType *const*, const char *);
SOAP_FMAC3 ns1__CscKeyUpdateRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CscKeyUpdateRecordType(struct soap*, const char*, ns1__CscKeyUpdateRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CscKeyUpdateRecordType(struct soap*, ns1__CscKeyUpdateRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CscKeyUpdateRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CscKeyUpdateRecordType(struct soap*, ns1__CscKeyUpdateRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CscDeliveryRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CscDeliveryRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CscDeliveryRecordType(struct soap*, ns1__CscDeliveryRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CscDeliveryRecordType(struct soap*, const char *, int, ns1__CscDeliveryRecordType *const*, const char *);
SOAP_FMAC3 ns1__CscDeliveryRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CscDeliveryRecordType(struct soap*, const char*, ns1__CscDeliveryRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CscDeliveryRecordType(struct soap*, ns1__CscDeliveryRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CscDeliveryRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CscDeliveryRecordType(struct soap*, ns1__CscDeliveryRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__IssueOperationRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__IssueOperationRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__IssueOperationRecordType(struct soap*, ns1__IssueOperationRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__IssueOperationRecordType(struct soap*, const char *, int, ns1__IssueOperationRecordType *const*, const char *);
SOAP_FMAC3 ns1__IssueOperationRecordType ** SOAP_FMAC4 soap_in_PointerTons1__IssueOperationRecordType(struct soap*, const char*, ns1__IssueOperationRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__IssueOperationRecordType(struct soap*, ns1__IssueOperationRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__IssueOperationRecordType ** SOAP_FMAC4 soap_get_PointerTons1__IssueOperationRecordType(struct soap*, ns1__IssueOperationRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TicketExchangeRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__TicketExchangeRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TicketExchangeRecordType(struct soap*, ns1__TicketExchangeRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TicketExchangeRecordType(struct soap*, const char *, int, ns1__TicketExchangeRecordType *const*, const char *);
SOAP_FMAC3 ns1__TicketExchangeRecordType ** SOAP_FMAC4 soap_in_PointerTons1__TicketExchangeRecordType(struct soap*, const char*, ns1__TicketExchangeRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TicketExchangeRecordType(struct soap*, ns1__TicketExchangeRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__TicketExchangeRecordType ** SOAP_FMAC4 soap_get_PointerTons1__TicketExchangeRecordType(struct soap*, ns1__TicketExchangeRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CscRefundRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CscRefundRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CscRefundRecordType(struct soap*, ns1__CscRefundRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CscRefundRecordType(struct soap*, const char *, int, ns1__CscRefundRecordType *const*, const char *);
SOAP_FMAC3 ns1__CscRefundRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CscRefundRecordType(struct soap*, const char*, ns1__CscRefundRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CscRefundRecordType(struct soap*, ns1__CscRefundRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CscRefundRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CscRefundRecordType(struct soap*, ns1__CscRefundRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CscReplacementRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CscReplacementRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CscReplacementRecordType(struct soap*, ns1__CscReplacementRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CscReplacementRecordType(struct soap*, const char *, int, ns1__CscReplacementRecordType *const*, const char *);
SOAP_FMAC3 ns1__CscReplacementRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CscReplacementRecordType(struct soap*, const char*, ns1__CscReplacementRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CscReplacementRecordType(struct soap*, ns1__CscReplacementRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CscReplacementRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CscReplacementRecordType(struct soap*, ns1__CscReplacementRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CashCountingAdjustRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CashCountingAdjustRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CashCountingAdjustRecordType(struct soap*, ns1__CashCountingAdjustRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CashCountingAdjustRecordType(struct soap*, const char *, int, ns1__CashCountingAdjustRecordType *const*, const char *);
SOAP_FMAC3 ns1__CashCountingAdjustRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CashCountingAdjustRecordType(struct soap*, const char*, ns1__CashCountingAdjustRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CashCountingAdjustRecordType(struct soap*, ns1__CashCountingAdjustRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CashCountingAdjustRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CashCountingAdjustRecordType(struct soap*, ns1__CashCountingAdjustRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CashCountingRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CashCountingRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CashCountingRecordType(struct soap*, ns1__CashCountingRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CashCountingRecordType(struct soap*, const char *, int, ns1__CashCountingRecordType *const*, const char *);
SOAP_FMAC3 ns1__CashCountingRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CashCountingRecordType(struct soap*, const char*, ns1__CashCountingRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CashCountingRecordType(struct soap*, ns1__CashCountingRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CashCountingRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CashCountingRecordType(struct soap*, ns1__CashCountingRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MediaStockAdjustRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__MediaStockAdjustRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MediaStockAdjustRecordType(struct soap*, ns1__MediaStockAdjustRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MediaStockAdjustRecordType(struct soap*, const char *, int, ns1__MediaStockAdjustRecordType *const*, const char *);
SOAP_FMAC3 ns1__MediaStockAdjustRecordType ** SOAP_FMAC4 soap_in_PointerTons1__MediaStockAdjustRecordType(struct soap*, const char*, ns1__MediaStockAdjustRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MediaStockAdjustRecordType(struct soap*, ns1__MediaStockAdjustRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MediaStockAdjustRecordType ** SOAP_FMAC4 soap_get_PointerTons1__MediaStockAdjustRecordType(struct soap*, ns1__MediaStockAdjustRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MediaStockUpdateRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__MediaStockUpdateRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MediaStockUpdateRecordType(struct soap*, ns1__MediaStockUpdateRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MediaStockUpdateRecordType(struct soap*, const char *, int, ns1__MediaStockUpdateRecordType *const*, const char *);
SOAP_FMAC3 ns1__MediaStockUpdateRecordType ** SOAP_FMAC4 soap_in_PointerTons1__MediaStockUpdateRecordType(struct soap*, const char*, ns1__MediaStockUpdateRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MediaStockUpdateRecordType(struct soap*, ns1__MediaStockUpdateRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MediaStockUpdateRecordType ** SOAP_FMAC4 soap_get_PointerTons1__MediaStockUpdateRecordType(struct soap*, ns1__MediaStockUpdateRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CoinsAndNotesCollectionRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CoinsAndNotesCollectionRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CoinsAndNotesCollectionRecordType(struct soap*, ns1__CoinsAndNotesCollectionRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CoinsAndNotesCollectionRecordType(struct soap*, const char *, int, ns1__CoinsAndNotesCollectionRecordType *const*, const char *);
SOAP_FMAC3 ns1__CoinsAndNotesCollectionRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CoinsAndNotesCollectionRecordType(struct soap*, const char*, ns1__CoinsAndNotesCollectionRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CoinsAndNotesCollectionRecordType(struct soap*, ns1__CoinsAndNotesCollectionRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CoinsAndNotesCollectionRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CoinsAndNotesCollectionRecordType(struct soap*, ns1__CoinsAndNotesCollectionRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CashMaintenanceRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CashMaintenanceRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CashMaintenanceRecordType(struct soap*, ns1__CashMaintenanceRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CashMaintenanceRecordType(struct soap*, const char *, int, ns1__CashMaintenanceRecordType *const*, const char *);
SOAP_FMAC3 ns1__CashMaintenanceRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CashMaintenanceRecordType(struct soap*, const char*, ns1__CashMaintenanceRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CashMaintenanceRecordType(struct soap*, ns1__CashMaintenanceRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CashMaintenanceRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CashMaintenanceRecordType(struct soap*, ns1__CashMaintenanceRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CoinNoteRefillAdjustmentRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CoinNoteRefillAdjustmentRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CoinNoteRefillAdjustmentRecordType(struct soap*, ns1__CoinNoteRefillAdjustmentRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CoinNoteRefillAdjustmentRecordType(struct soap*, const char *, int, ns1__CoinNoteRefillAdjustmentRecordType *const*, const char *);
SOAP_FMAC3 ns1__CoinNoteRefillAdjustmentRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CoinNoteRefillAdjustmentRecordType(struct soap*, const char*, ns1__CoinNoteRefillAdjustmentRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CoinNoteRefillAdjustmentRecordType(struct soap*, ns1__CoinNoteRefillAdjustmentRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CoinNoteRefillAdjustmentRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CoinNoteRefillAdjustmentRecordType(struct soap*, ns1__CoinNoteRefillAdjustmentRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__InternalCoinFlowRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__InternalCoinFlowRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__InternalCoinFlowRecordType(struct soap*, ns1__InternalCoinFlowRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__InternalCoinFlowRecordType(struct soap*, const char *, int, ns1__InternalCoinFlowRecordType *const*, const char *);
SOAP_FMAC3 ns1__InternalCoinFlowRecordType ** SOAP_FMAC4 soap_in_PointerTons1__InternalCoinFlowRecordType(struct soap*, const char*, ns1__InternalCoinFlowRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__InternalCoinFlowRecordType(struct soap*, ns1__InternalCoinFlowRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__InternalCoinFlowRecordType ** SOAP_FMAC4 soap_get_PointerTons1__InternalCoinFlowRecordType(struct soap*, ns1__InternalCoinFlowRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CoinNoteRefillRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CoinNoteRefillRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CoinNoteRefillRecordType(struct soap*, ns1__CoinNoteRefillRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CoinNoteRefillRecordType(struct soap*, const char *, int, ns1__CoinNoteRefillRecordType *const*, const char *);
SOAP_FMAC3 ns1__CoinNoteRefillRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CoinNoteRefillRecordType(struct soap*, const char*, ns1__CoinNoteRefillRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CoinNoteRefillRecordType(struct soap*, ns1__CoinNoteRefillRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CoinNoteRefillRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CoinNoteRefillRecordType(struct soap*, ns1__CoinNoteRefillRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CollectionRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CollectionRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CollectionRecordType(struct soap*, ns1__CollectionRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CollectionRecordType(struct soap*, const char *, int, ns1__CollectionRecordType *const*, const char *);
SOAP_FMAC3 ns1__CollectionRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CollectionRecordType(struct soap*, const char*, ns1__CollectionRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CollectionRecordType(struct soap*, ns1__CollectionRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CollectionRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CollectionRecordType(struct soap*, ns1__CollectionRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__GateRejectionAnalysisRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__GateRejectionAnalysisRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__GateRejectionAnalysisRecordType(struct soap*, ns1__GateRejectionAnalysisRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__GateRejectionAnalysisRecordType(struct soap*, const char *, int, ns1__GateRejectionAnalysisRecordType *const*, const char *);
SOAP_FMAC3 ns1__GateRejectionAnalysisRecordType ** SOAP_FMAC4 soap_in_PointerTons1__GateRejectionAnalysisRecordType(struct soap*, const char*, ns1__GateRejectionAnalysisRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__GateRejectionAnalysisRecordType(struct soap*, ns1__GateRejectionAnalysisRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__GateRejectionAnalysisRecordType ** SOAP_FMAC4 soap_get_PointerTons1__GateRejectionAnalysisRecordType(struct soap*, ns1__GateRejectionAnalysisRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PenaltyRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__PenaltyRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PenaltyRecordType(struct soap*, ns1__PenaltyRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PenaltyRecordType(struct soap*, const char *, int, ns1__PenaltyRecordType *const*, const char *);
SOAP_FMAC3 ns1__PenaltyRecordType ** SOAP_FMAC4 soap_in_PointerTons1__PenaltyRecordType(struct soap*, const char*, ns1__PenaltyRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PenaltyRecordType(struct soap*, ns1__PenaltyRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__PenaltyRecordType ** SOAP_FMAC4 soap_get_PointerTons1__PenaltyRecordType(struct soap*, ns1__PenaltyRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ValidationRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__ValidationRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ValidationRecordType(struct soap*, ns1__ValidationRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ValidationRecordType(struct soap*, const char *, int, ns1__ValidationRecordType *const*, const char *);
SOAP_FMAC3 ns1__ValidationRecordType ** SOAP_FMAC4 soap_in_PointerTons1__ValidationRecordType(struct soap*, const char*, ns1__ValidationRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ValidationRecordType(struct soap*, ns1__ValidationRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ValidationRecordType ** SOAP_FMAC4 soap_get_PointerTons1__ValidationRecordType(struct soap*, ns1__ValidationRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AdvancedPurchaseRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__AdvancedPurchaseRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AdvancedPurchaseRecordType(struct soap*, ns1__AdvancedPurchaseRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AdvancedPurchaseRecordType(struct soap*, const char *, int, ns1__AdvancedPurchaseRecordType *const*, const char *);
SOAP_FMAC3 ns1__AdvancedPurchaseRecordType ** SOAP_FMAC4 soap_in_PointerTons1__AdvancedPurchaseRecordType(struct soap*, const char*, ns1__AdvancedPurchaseRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AdvancedPurchaseRecordType(struct soap*, ns1__AdvancedPurchaseRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AdvancedPurchaseRecordType ** SOAP_FMAC4 soap_get_PointerTons1__AdvancedPurchaseRecordType(struct soap*, ns1__AdvancedPurchaseRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MaintenanceOperationRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__MaintenanceOperationRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MaintenanceOperationRecordType(struct soap*, ns1__MaintenanceOperationRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MaintenanceOperationRecordType(struct soap*, const char *, int, ns1__MaintenanceOperationRecordType *const*, const char *);
SOAP_FMAC3 ns1__MaintenanceOperationRecordType ** SOAP_FMAC4 soap_in_PointerTons1__MaintenanceOperationRecordType(struct soap*, const char*, ns1__MaintenanceOperationRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MaintenanceOperationRecordType(struct soap*, ns1__MaintenanceOperationRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MaintenanceOperationRecordType ** SOAP_FMAC4 soap_get_PointerTons1__MaintenanceOperationRecordType(struct soap*, ns1__MaintenanceOperationRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AccountingOperationRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__AccountingOperationRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AccountingOperationRecordType(struct soap*, ns1__AccountingOperationRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AccountingOperationRecordType(struct soap*, const char *, int, ns1__AccountingOperationRecordType *const*, const char *);
SOAP_FMAC3 ns1__AccountingOperationRecordType ** SOAP_FMAC4 soap_in_PointerTons1__AccountingOperationRecordType(struct soap*, const char*, ns1__AccountingOperationRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AccountingOperationRecordType(struct soap*, ns1__AccountingOperationRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AccountingOperationRecordType ** SOAP_FMAC4 soap_get_PointerTons1__AccountingOperationRecordType(struct soap*, ns1__AccountingOperationRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OpenWideAisleGateRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__OpenWideAisleGateRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OpenWideAisleGateRecordType(struct soap*, ns1__OpenWideAisleGateRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OpenWideAisleGateRecordType(struct soap*, const char *, int, ns1__OpenWideAisleGateRecordType *const*, const char *);
SOAP_FMAC3 ns1__OpenWideAisleGateRecordType ** SOAP_FMAC4 soap_in_PointerTons1__OpenWideAisleGateRecordType(struct soap*, const char*, ns1__OpenWideAisleGateRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OpenWideAisleGateRecordType(struct soap*, ns1__OpenWideAisleGateRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__OpenWideAisleGateRecordType ** SOAP_FMAC4 soap_get_PointerTons1__OpenWideAisleGateRecordType(struct soap*, ns1__OpenWideAisleGateRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OpenGatePsmRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__OpenGatePsmRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OpenGatePsmRecordType(struct soap*, ns1__OpenGatePsmRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OpenGatePsmRecordType(struct soap*, const char *, int, ns1__OpenGatePsmRecordType *const*, const char *);
SOAP_FMAC3 ns1__OpenGatePsmRecordType ** SOAP_FMAC4 soap_in_PointerTons1__OpenGatePsmRecordType(struct soap*, const char*, ns1__OpenGatePsmRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OpenGatePsmRecordType(struct soap*, ns1__OpenGatePsmRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__OpenGatePsmRecordType ** SOAP_FMAC4 soap_get_PointerTons1__OpenGatePsmRecordType(struct soap*, ns1__OpenGatePsmRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__StationModeChangeRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__StationModeChangeRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StationModeChangeRecordType(struct soap*, ns1__StationModeChangeRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StationModeChangeRecordType(struct soap*, const char *, int, ns1__StationModeChangeRecordType *const*, const char *);
SOAP_FMAC3 ns1__StationModeChangeRecordType ** SOAP_FMAC4 soap_in_PointerTons1__StationModeChangeRecordType(struct soap*, const char*, ns1__StationModeChangeRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StationModeChangeRecordType(struct soap*, ns1__StationModeChangeRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__StationModeChangeRecordType ** SOAP_FMAC4 soap_get_PointerTons1__StationModeChangeRecordType(struct soap*, ns1__StationModeChangeRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CommandReportRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CommandReportRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CommandReportRecordType(struct soap*, ns1__CommandReportRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CommandReportRecordType(struct soap*, const char *, int, ns1__CommandReportRecordType *const*, const char *);
SOAP_FMAC3 ns1__CommandReportRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CommandReportRecordType(struct soap*, const char*, ns1__CommandReportRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CommandReportRecordType(struct soap*, ns1__CommandReportRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CommandReportRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CommandReportRecordType(struct soap*, ns1__CommandReportRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__UnlockShiftRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__UnlockShiftRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UnlockShiftRecordType(struct soap*, ns1__UnlockShiftRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UnlockShiftRecordType(struct soap*, const char *, int, ns1__UnlockShiftRecordType *const*, const char *);
SOAP_FMAC3 ns1__UnlockShiftRecordType ** SOAP_FMAC4 soap_in_PointerTons1__UnlockShiftRecordType(struct soap*, const char*, ns1__UnlockShiftRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UnlockShiftRecordType(struct soap*, ns1__UnlockShiftRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__UnlockShiftRecordType ** SOAP_FMAC4 soap_get_PointerTons1__UnlockShiftRecordType(struct soap*, ns1__UnlockShiftRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LockShiftRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__LockShiftRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LockShiftRecordType(struct soap*, ns1__LockShiftRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LockShiftRecordType(struct soap*, const char *, int, ns1__LockShiftRecordType *const*, const char *);
SOAP_FMAC3 ns1__LockShiftRecordType ** SOAP_FMAC4 soap_in_PointerTons1__LockShiftRecordType(struct soap*, const char*, ns1__LockShiftRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LockShiftRecordType(struct soap*, ns1__LockShiftRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__LockShiftRecordType ** SOAP_FMAC4 soap_get_PointerTons1__LockShiftRecordType(struct soap*, ns1__LockShiftRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EndShiftRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__EndShiftRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EndShiftRecordType(struct soap*, ns1__EndShiftRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EndShiftRecordType(struct soap*, const char *, int, ns1__EndShiftRecordType *const*, const char *);
SOAP_FMAC3 ns1__EndShiftRecordType ** SOAP_FMAC4 soap_in_PointerTons1__EndShiftRecordType(struct soap*, const char*, ns1__EndShiftRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EndShiftRecordType(struct soap*, ns1__EndShiftRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__EndShiftRecordType ** SOAP_FMAC4 soap_get_PointerTons1__EndShiftRecordType(struct soap*, ns1__EndShiftRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__BeginShiftRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__BeginShiftRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BeginShiftRecordType(struct soap*, ns1__BeginShiftRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BeginShiftRecordType(struct soap*, const char *, int, ns1__BeginShiftRecordType *const*, const char *);
SOAP_FMAC3 ns1__BeginShiftRecordType ** SOAP_FMAC4 soap_in_PointerTons1__BeginShiftRecordType(struct soap*, const char*, ns1__BeginShiftRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BeginShiftRecordType(struct soap*, ns1__BeginShiftRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__BeginShiftRecordType ** SOAP_FMAC4 soap_get_PointerTons1__BeginShiftRecordType(struct soap*, ns1__BeginShiftRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MaintenanceAccessRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__MaintenanceAccessRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MaintenanceAccessRecordType(struct soap*, ns1__MaintenanceAccessRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MaintenanceAccessRecordType(struct soap*, const char *, int, ns1__MaintenanceAccessRecordType *const*, const char *);
SOAP_FMAC3 ns1__MaintenanceAccessRecordType ** SOAP_FMAC4 soap_in_PointerTons1__MaintenanceAccessRecordType(struct soap*, const char*, ns1__MaintenanceAccessRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MaintenanceAccessRecordType(struct soap*, ns1__MaintenanceAccessRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MaintenanceAccessRecordType ** SOAP_FMAC4 soap_get_PointerTons1__MaintenanceAccessRecordType(struct soap*, ns1__MaintenanceAccessRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LoginFailureRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__LoginFailureRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LoginFailureRecordType(struct soap*, ns1__LoginFailureRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LoginFailureRecordType(struct soap*, const char *, int, ns1__LoginFailureRecordType *const*, const char *);
SOAP_FMAC3 ns1__LoginFailureRecordType ** SOAP_FMAC4 soap_in_PointerTons1__LoginFailureRecordType(struct soap*, const char*, ns1__LoginFailureRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LoginFailureRecordType(struct soap*, ns1__LoginFailureRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__LoginFailureRecordType ** SOAP_FMAC4 soap_get_PointerTons1__LoginFailureRecordType(struct soap*, ns1__LoginFailureRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__IdentificationRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__IdentificationRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__IdentificationRecordType(struct soap*, ns1__IdentificationRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__IdentificationRecordType(struct soap*, const char *, int, ns1__IdentificationRecordType *const*, const char *);
SOAP_FMAC3 ns1__IdentificationRecordType ** SOAP_FMAC4 soap_in_PointerTons1__IdentificationRecordType(struct soap*, const char*, ns1__IdentificationRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__IdentificationRecordType(struct soap*, ns1__IdentificationRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__IdentificationRecordType ** SOAP_FMAC4 soap_get_PointerTons1__IdentificationRecordType(struct soap*, ns1__IdentificationRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__OpEndOfSessionRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__OpEndOfSessionRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__OpEndOfSessionRecordType(struct soap*, ns1__OpEndOfSessionRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__OpEndOfSessionRecordType(struct soap*, const char *, int, ns1__OpEndOfSessionRecordType *const*, const char *);
SOAP_FMAC3 ns1__OpEndOfSessionRecordType ** SOAP_FMAC4 soap_in_PointerTons1__OpEndOfSessionRecordType(struct soap*, const char*, ns1__OpEndOfSessionRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__OpEndOfSessionRecordType(struct soap*, ns1__OpEndOfSessionRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__OpEndOfSessionRecordType ** SOAP_FMAC4 soap_get_PointerTons1__OpEndOfSessionRecordType(struct soap*, ns1__OpEndOfSessionRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__LocationChangeRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__LocationChangeRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__LocationChangeRecordType(struct soap*, ns1__LocationChangeRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__LocationChangeRecordType(struct soap*, const char *, int, ns1__LocationChangeRecordType *const*, const char *);
SOAP_FMAC3 ns1__LocationChangeRecordType ** SOAP_FMAC4 soap_in_PointerTons1__LocationChangeRecordType(struct soap*, const char*, ns1__LocationChangeRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__LocationChangeRecordType(struct soap*, ns1__LocationChangeRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__LocationChangeRecordType ** SOAP_FMAC4 soap_get_PointerTons1__LocationChangeRecordType(struct soap*, ns1__LocationChangeRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ActionListRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__ActionListRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ActionListRecordType(struct soap*, ns1__ActionListRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ActionListRecordType(struct soap*, const char *, int, ns1__ActionListRecordType *const*, const char *);
SOAP_FMAC3 ns1__ActionListRecordType ** SOAP_FMAC4 soap_in_PointerTons1__ActionListRecordType(struct soap*, const char*, ns1__ActionListRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ActionListRecordType(struct soap*, ns1__ActionListRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ActionListRecordType ** SOAP_FMAC4 soap_get_PointerTons1__ActionListRecordType(struct soap*, ns1__ActionListRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CsmUnblockingRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CsmUnblockingRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CsmUnblockingRecordType(struct soap*, ns1__CsmUnblockingRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CsmUnblockingRecordType(struct soap*, const char *, int, ns1__CsmUnblockingRecordType *const*, const char *);
SOAP_FMAC3 ns1__CsmUnblockingRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CsmUnblockingRecordType(struct soap*, const char*, ns1__CsmUnblockingRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CsmUnblockingRecordType(struct soap*, ns1__CsmUnblockingRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CsmUnblockingRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CsmUnblockingRecordType(struct soap*, ns1__CsmUnblockingRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CsmBlockingRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__CsmBlockingRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CsmBlockingRecordType(struct soap*, ns1__CsmBlockingRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CsmBlockingRecordType(struct soap*, const char *, int, ns1__CsmBlockingRecordType *const*, const char *);
SOAP_FMAC3 ns1__CsmBlockingRecordType ** SOAP_FMAC4 soap_in_PointerTons1__CsmBlockingRecordType(struct soap*, const char*, ns1__CsmBlockingRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CsmBlockingRecordType(struct soap*, ns1__CsmBlockingRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CsmBlockingRecordType ** SOAP_FMAC4 soap_get_PointerTons1__CsmBlockingRecordType(struct soap*, ns1__CsmBlockingRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EndOfSessionRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__EndOfSessionRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EndOfSessionRecordType(struct soap*, ns1__EndOfSessionRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EndOfSessionRecordType(struct soap*, const char *, int, ns1__EndOfSessionRecordType *const*, const char *);
SOAP_FMAC3 ns1__EndOfSessionRecordType ** SOAP_FMAC4 soap_in_PointerTons1__EndOfSessionRecordType(struct soap*, const char*, ns1__EndOfSessionRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EndOfSessionRecordType(struct soap*, ns1__EndOfSessionRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__EndOfSessionRecordType ** SOAP_FMAC4 soap_get_PointerTons1__EndOfSessionRecordType(struct soap*, ns1__EndOfSessionRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__StartOfSessionRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__StartOfSessionRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StartOfSessionRecordType(struct soap*, ns1__StartOfSessionRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StartOfSessionRecordType(struct soap*, const char *, int, ns1__StartOfSessionRecordType *const*, const char *);
SOAP_FMAC3 ns1__StartOfSessionRecordType ** SOAP_FMAC4 soap_in_PointerTons1__StartOfSessionRecordType(struct soap*, const char*, ns1__StartOfSessionRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StartOfSessionRecordType(struct soap*, ns1__StartOfSessionRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__StartOfSessionRecordType ** SOAP_FMAC4 soap_get_PointerTons1__StartOfSessionRecordType(struct soap*, ns1__StartOfSessionRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__StartUpRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__StartUpRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__StartUpRecordType(struct soap*, ns1__StartUpRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__StartUpRecordType(struct soap*, const char *, int, ns1__StartUpRecordType *const*, const char *);
SOAP_FMAC3 ns1__StartUpRecordType ** SOAP_FMAC4 soap_in_PointerTons1__StartUpRecordType(struct soap*, const char*, ns1__StartUpRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__StartUpRecordType(struct soap*, ns1__StartUpRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__StartUpRecordType ** SOAP_FMAC4 soap_get_PointerTons1__StartUpRecordType(struct soap*, ns1__StartUpRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SignedRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__SignedRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SignedRecordType(struct soap*, ns1__SignedRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SignedRecordType(struct soap*, const char *, int, ns1__SignedRecordType *const*, const char *);
SOAP_FMAC3 ns1__SignedRecordType ** SOAP_FMAC4 soap_in_PointerTons1__SignedRecordType(struct soap*, const char*, ns1__SignedRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SignedRecordType(struct soap*, ns1__SignedRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SignedRecordType ** SOAP_FMAC4 soap_get_PointerTons1__SignedRecordType(struct soap*, ns1__SignedRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__UnsignedRecordType_DEFINED
#define SOAP_TYPE_PointerTons1__UnsignedRecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__UnsignedRecordType(struct soap*, ns1__UnsignedRecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__UnsignedRecordType(struct soap*, const char *, int, ns1__UnsignedRecordType *const*, const char *);
SOAP_FMAC3 ns1__UnsignedRecordType ** SOAP_FMAC4 soap_in_PointerTons1__UnsignedRecordType(struct soap*, const char*, ns1__UnsignedRecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__UnsignedRecordType(struct soap*, ns1__UnsignedRecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__UnsignedRecordType ** SOAP_FMAC4 soap_get_PointerTons1__UnsignedRecordType(struct soap*, ns1__UnsignedRecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__RecordType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__RecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__RecordType(struct soap*, ns1__RecordType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__RecordType(struct soap*, const char *, int, ns1__RecordType **const*, const char *);
SOAP_FMAC3 ns1__RecordType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__RecordType(struct soap*, const char*, ns1__RecordType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__RecordType(struct soap*, ns1__RecordType **const*, const char*, const char*);
SOAP_FMAC3 ns1__RecordType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__RecordType(struct soap*, ns1__RecordType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecordType_DEFINED
#define SOAP_TYPE_PointerTons1__RecordType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecordType(struct soap*, ns1__RecordType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecordType(struct soap*, const char *, int, ns1__RecordType *const*, const char *);
SOAP_FMAC3 ns1__RecordType ** SOAP_FMAC4 soap_in_PointerTons1__RecordType(struct soap*, const char*, ns1__RecordType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecordType(struct soap*, ns1__RecordType *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecordType ** SOAP_FMAC4 soap_get_PointerTons1__RecordType(struct soap*, ns1__RecordType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__FileConfigVersionType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__FileConfigVersionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__FileConfigVersionType(struct soap*, ns1__FileConfigVersionType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__FileConfigVersionType(struct soap*, const char *, int, ns1__FileConfigVersionType **const*, const char *);
SOAP_FMAC3 ns1__FileConfigVersionType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__FileConfigVersionType(struct soap*, const char*, ns1__FileConfigVersionType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__FileConfigVersionType(struct soap*, ns1__FileConfigVersionType **const*, const char*, const char*);
SOAP_FMAC3 ns1__FileConfigVersionType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__FileConfigVersionType(struct soap*, ns1__FileConfigVersionType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FileConfigVersionType_DEFINED
#define SOAP_TYPE_PointerTons1__FileConfigVersionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FileConfigVersionType(struct soap*, ns1__FileConfigVersionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FileConfigVersionType(struct soap*, const char *, int, ns1__FileConfigVersionType *const*, const char *);
SOAP_FMAC3 ns1__FileConfigVersionType ** SOAP_FMAC4 soap_in_PointerTons1__FileConfigVersionType(struct soap*, const char*, ns1__FileConfigVersionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FileConfigVersionType(struct soap*, ns1__FileConfigVersionType *const*, const char*, const char*);
SOAP_FMAC3 ns1__FileConfigVersionType ** SOAP_FMAC4 soap_get_PointerTons1__FileConfigVersionType(struct soap*, ns1__FileConfigVersionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodateTime_DEFINED
#define SOAP_TYPE_PointerTodateTime_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodateTime(struct soap*, time_t *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodateTime(struct soap*, const char *, int, time_t *const*, const char *);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_in_PointerTodateTime(struct soap*, const char*, time_t **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodateTime(struct soap*, time_t *const*, const char*, const char*);
SOAP_FMAC3 time_t ** SOAP_FMAC4 soap_get_PointerTodateTime(struct soap*, time_t **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__FileConfigVersionListType_DEFINED
#define SOAP_TYPE_PointerTons1__FileConfigVersionListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__FileConfigVersionListType(struct soap*, ns1__FileConfigVersionListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__FileConfigVersionListType(struct soap*, const char *, int, ns1__FileConfigVersionListType *const*, const char *);
SOAP_FMAC3 ns1__FileConfigVersionListType ** SOAP_FMAC4 soap_in_PointerTons1__FileConfigVersionListType(struct soap*, const char*, ns1__FileConfigVersionListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__FileConfigVersionListType(struct soap*, ns1__FileConfigVersionListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__FileConfigVersionListType ** SOAP_FMAC4 soap_get_PointerTons1__FileConfigVersionListType(struct soap*, ns1__FileConfigVersionListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__PackageConfigVersionType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__PackageConfigVersionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__PackageConfigVersionType(struct soap*, ns1__PackageConfigVersionType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__PackageConfigVersionType(struct soap*, const char *, int, ns1__PackageConfigVersionType **const*, const char *);
SOAP_FMAC3 ns1__PackageConfigVersionType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__PackageConfigVersionType(struct soap*, const char*, ns1__PackageConfigVersionType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__PackageConfigVersionType(struct soap*, ns1__PackageConfigVersionType **const*, const char*, const char*);
SOAP_FMAC3 ns1__PackageConfigVersionType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__PackageConfigVersionType(struct soap*, ns1__PackageConfigVersionType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__PackageConfigVersionType_DEFINED
#define SOAP_TYPE_PointerTons1__PackageConfigVersionType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PackageConfigVersionType(struct soap*, ns1__PackageConfigVersionType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PackageConfigVersionType(struct soap*, const char *, int, ns1__PackageConfigVersionType *const*, const char *);
SOAP_FMAC3 ns1__PackageConfigVersionType ** SOAP_FMAC4 soap_in_PointerTons1__PackageConfigVersionType(struct soap*, const char*, ns1__PackageConfigVersionType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PackageConfigVersionType(struct soap*, ns1__PackageConfigVersionType *const*, const char*, const char*);
SOAP_FMAC3 ns1__PackageConfigVersionType ** SOAP_FMAC4 soap_get_PointerTons1__PackageConfigVersionType(struct soap*, ns1__PackageConfigVersionType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvConfigurationInfoResponseType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvConfigurationInfoResponseType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvConfigurationInfoResponseType(struct soap*, ns1__SrvConfigurationInfoResponseType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvConfigurationInfoResponseType(struct soap*, const char *, int, ns1__SrvConfigurationInfoResponseType *const*, const char *);
SOAP_FMAC3 ns1__SrvConfigurationInfoResponseType ** SOAP_FMAC4 soap_in_PointerTons1__SrvConfigurationInfoResponseType(struct soap*, const char*, ns1__SrvConfigurationInfoResponseType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvConfigurationInfoResponseType(struct soap*, ns1__SrvConfigurationInfoResponseType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvConfigurationInfoResponseType ** SOAP_FMAC4 soap_get_PointerTons1__SrvConfigurationInfoResponseType(struct soap*, ns1__SrvConfigurationInfoResponseType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__CommandParamCCTIUType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__CommandParamCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__CommandParamCCTIUType(struct soap*, ns1__CommandParamCCTIUType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__CommandParamCCTIUType(struct soap*, const char *, int, ns1__CommandParamCCTIUType **const*, const char *);
SOAP_FMAC3 ns1__CommandParamCCTIUType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__CommandParamCCTIUType(struct soap*, const char*, ns1__CommandParamCCTIUType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__CommandParamCCTIUType(struct soap*, ns1__CommandParamCCTIUType **const*, const char*, const char*);
SOAP_FMAC3 ns1__CommandParamCCTIUType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__CommandParamCCTIUType(struct soap*, ns1__CommandParamCCTIUType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CommandParamCCTIUType_DEFINED
#define SOAP_TYPE_PointerTons1__CommandParamCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CommandParamCCTIUType(struct soap*, ns1__CommandParamCCTIUType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CommandParamCCTIUType(struct soap*, const char *, int, ns1__CommandParamCCTIUType *const*, const char *);
SOAP_FMAC3 ns1__CommandParamCCTIUType ** SOAP_FMAC4 soap_in_PointerTons1__CommandParamCCTIUType(struct soap*, const char*, ns1__CommandParamCCTIUType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CommandParamCCTIUType(struct soap*, ns1__CommandParamCCTIUType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CommandParamCCTIUType ** SOAP_FMAC4 soap_get_PointerTons1__CommandParamCCTIUType(struct soap*, ns1__CommandParamCCTIUType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__CommandParamCCTIUListType_DEFINED
#define SOAP_TYPE_PointerTons1__CommandParamCCTIUListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CommandParamCCTIUListType(struct soap*, ns1__CommandParamCCTIUListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CommandParamCCTIUListType(struct soap*, const char *, int, ns1__CommandParamCCTIUListType *const*, const char *);
SOAP_FMAC3 ns1__CommandParamCCTIUListType ** SOAP_FMAC4 soap_in_PointerTons1__CommandParamCCTIUListType(struct soap*, const char*, ns1__CommandParamCCTIUListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CommandParamCCTIUListType(struct soap*, ns1__CommandParamCCTIUListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__CommandParamCCTIUListType ** SOAP_FMAC4 soap_get_PointerTons1__CommandParamCCTIUListType(struct soap*, ns1__CommandParamCCTIUListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTodouble_DEFINED
#define SOAP_TYPE_PointerTodouble_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTofloat_DEFINED
#define SOAP_TYPE_PointerTofloat_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToLONG64_DEFINED
#define SOAP_TYPE_PointerToLONG64_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap*, LONG64 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap*, const char *, int, LONG64 *const*, const char *);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap*, const char*, LONG64 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap*, LONG64 *const*, const char*, const char*);
SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap*, LONG64 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedShort_DEFINED
#define SOAP_TYPE_PointerTounsignedShort_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedShort(struct soap*, unsigned short *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedShort(struct soap*, const char *, int, unsigned short *const*, const char *);
SOAP_FMAC3 unsigned short ** SOAP_FMAC4 soap_in_PointerTounsignedShort(struct soap*, const char*, unsigned short **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedShort(struct soap*, unsigned short *const*, const char*, const char*);
SOAP_FMAC3 unsigned short ** SOAP_FMAC4 soap_get_PointerTounsignedShort(struct soap*, unsigned short **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ValueType_DEFINED
#define SOAP_TYPE_PointerTons1__ValueType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ValueType(struct soap*, ns1__ValueType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ValueType(struct soap*, const char *, int, ns1__ValueType *const*, const char *);
SOAP_FMAC3 ns1__ValueType ** SOAP_FMAC4 soap_in_PointerTons1__ValueType(struct soap*, const char*, ns1__ValueType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ValueType(struct soap*, ns1__ValueType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ValueType ** SOAP_FMAC4 soap_get_PointerTons1__ValueType(struct soap*, ns1__ValueType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__ConfigElementCCTIUType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__ConfigElementCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__ConfigElementCCTIUType(struct soap*, ns1__ConfigElementCCTIUType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__ConfigElementCCTIUType(struct soap*, const char *, int, ns1__ConfigElementCCTIUType **const*, const char *);
SOAP_FMAC3 ns1__ConfigElementCCTIUType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__ConfigElementCCTIUType(struct soap*, const char*, ns1__ConfigElementCCTIUType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__ConfigElementCCTIUType(struct soap*, ns1__ConfigElementCCTIUType **const*, const char*, const char*);
SOAP_FMAC3 ns1__ConfigElementCCTIUType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__ConfigElementCCTIUType(struct soap*, ns1__ConfigElementCCTIUType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ConfigElementCCTIUType_DEFINED
#define SOAP_TYPE_PointerTons1__ConfigElementCCTIUType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ConfigElementCCTIUType(struct soap*, ns1__ConfigElementCCTIUType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ConfigElementCCTIUType(struct soap*, const char *, int, ns1__ConfigElementCCTIUType *const*, const char *);
SOAP_FMAC3 ns1__ConfigElementCCTIUType ** SOAP_FMAC4 soap_in_PointerTons1__ConfigElementCCTIUType(struct soap*, const char*, ns1__ConfigElementCCTIUType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ConfigElementCCTIUType(struct soap*, ns1__ConfigElementCCTIUType *const*, const char*, const char*);
SOAP_FMAC3 ns1__ConfigElementCCTIUType ** SOAP_FMAC4 soap_get_PointerTons1__ConfigElementCCTIUType(struct soap*, ns1__ConfigElementCCTIUType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MTC_USCORETransactionIdType_DEFINED
#define SOAP_TYPE_PointerTons1__MTC_USCORETransactionIdType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MTC_USCORETransactionIdType(struct soap*, ns1__MTC_USCORETransactionIdType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MTC_USCORETransactionIdType(struct soap*, const char *, int, ns1__MTC_USCORETransactionIdType *const*, const char *);
SOAP_FMAC3 ns1__MTC_USCORETransactionIdType ** SOAP_FMAC4 soap_in_PointerTons1__MTC_USCORETransactionIdType(struct soap*, const char*, ns1__MTC_USCORETransactionIdType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MTC_USCORETransactionIdType(struct soap*, ns1__MTC_USCORETransactionIdType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MTC_USCORETransactionIdType ** SOAP_FMAC4 soap_get_PointerTons1__MTC_USCORETransactionIdType(struct soap*, ns1__MTC_USCORETransactionIdType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__TransactionMTCIdRangeType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__TransactionMTCIdRangeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__TransactionMTCIdRangeType(struct soap*, ns1__TransactionMTCIdRangeType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__TransactionMTCIdRangeType(struct soap*, const char *, int, ns1__TransactionMTCIdRangeType **const*, const char *);
SOAP_FMAC3 ns1__TransactionMTCIdRangeType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__TransactionMTCIdRangeType(struct soap*, const char*, ns1__TransactionMTCIdRangeType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__TransactionMTCIdRangeType(struct soap*, ns1__TransactionMTCIdRangeType **const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionMTCIdRangeType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__TransactionMTCIdRangeType(struct soap*, ns1__TransactionMTCIdRangeType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__TransactionMTCIdRangeType_DEFINED
#define SOAP_TYPE_PointerTons1__TransactionMTCIdRangeType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__TransactionMTCIdRangeType(struct soap*, ns1__TransactionMTCIdRangeType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__TransactionMTCIdRangeType(struct soap*, const char *, int, ns1__TransactionMTCIdRangeType *const*, const char *);
SOAP_FMAC3 ns1__TransactionMTCIdRangeType ** SOAP_FMAC4 soap_in_PointerTons1__TransactionMTCIdRangeType(struct soap*, const char*, ns1__TransactionMTCIdRangeType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__TransactionMTCIdRangeType(struct soap*, ns1__TransactionMTCIdRangeType *const*, const char*, const char*);
SOAP_FMAC3 ns1__TransactionMTCIdRangeType ** SOAP_FMAC4 soap_get_PointerTons1__TransactionMTCIdRangeType(struct soap*, ns1__TransactionMTCIdRangeType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__Parameter_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__Parameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__Parameter(struct soap*, ns1__Parameter **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__Parameter(struct soap*, const char *, int, ns1__Parameter **const*, const char *);
SOAP_FMAC3 ns1__Parameter *** SOAP_FMAC4 soap_in_PointerToPointerTons1__Parameter(struct soap*, const char*, ns1__Parameter ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__Parameter(struct soap*, ns1__Parameter **const*, const char*, const char*);
SOAP_FMAC3 ns1__Parameter *** SOAP_FMAC4 soap_get_PointerToPointerTons1__Parameter(struct soap*, ns1__Parameter ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__Parameter_DEFINED
#define SOAP_TYPE_PointerTons1__Parameter_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Parameter(struct soap*, ns1__Parameter *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Parameter(struct soap*, const char *, int, ns1__Parameter *const*, const char *);
SOAP_FMAC3 ns1__Parameter ** SOAP_FMAC4 soap_in_PointerTons1__Parameter(struct soap*, const char*, ns1__Parameter **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Parameter(struct soap*, ns1__Parameter *const*, const char*, const char*);
SOAP_FMAC3 ns1__Parameter ** SOAP_FMAC4 soap_get_PointerTons1__Parameter(struct soap*, ns1__Parameter **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__ParameterList_DEFINED
#define SOAP_TYPE_PointerTons1__ParameterList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ParameterList(struct soap*, ns1__ParameterList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ParameterList(struct soap*, const char *, int, ns1__ParameterList *const*, const char *);
SOAP_FMAC3 ns1__ParameterList ** SOAP_FMAC4 soap_in_PointerTons1__ParameterList(struct soap*, const char*, ns1__ParameterList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ParameterList(struct soap*, ns1__ParameterList *const*, const char*, const char*);
SOAP_FMAC3 ns1__ParameterList ** SOAP_FMAC4 soap_get_PointerTons1__ParameterList(struct soap*, ns1__ParameterList **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecordIdType_DEFINED
#define SOAP_TYPE_PointerTons1__RecordIdType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecordIdType(struct soap*, ns1__RecordIdType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecordIdType(struct soap*, const char *, int, ns1__RecordIdType *const*, const char *);
SOAP_FMAC3 ns1__RecordIdType ** SOAP_FMAC4 soap_in_PointerTons1__RecordIdType(struct soap*, const char*, ns1__RecordIdType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecordIdType(struct soap*, ns1__RecordIdType *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecordIdType ** SOAP_FMAC4 soap_get_PointerTons1__RecordIdType(struct soap*, ns1__RecordIdType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__RecordRangeIdType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__RecordRangeIdType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__RecordRangeIdType(struct soap*, ns1__RecordRangeIdType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__RecordRangeIdType(struct soap*, const char *, int, ns1__RecordRangeIdType **const*, const char *);
SOAP_FMAC3 ns1__RecordRangeIdType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__RecordRangeIdType(struct soap*, const char*, ns1__RecordRangeIdType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__RecordRangeIdType(struct soap*, ns1__RecordRangeIdType **const*, const char*, const char*);
SOAP_FMAC3 ns1__RecordRangeIdType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__RecordRangeIdType(struct soap*, ns1__RecordRangeIdType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__RecordRangeIdType_DEFINED
#define SOAP_TYPE_PointerTons1__RecordRangeIdType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RecordRangeIdType(struct soap*, ns1__RecordRangeIdType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RecordRangeIdType(struct soap*, const char *, int, ns1__RecordRangeIdType *const*, const char *);
SOAP_FMAC3 ns1__RecordRangeIdType ** SOAP_FMAC4 soap_in_PointerTons1__RecordRangeIdType(struct soap*, const char*, ns1__RecordRangeIdType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RecordRangeIdType(struct soap*, ns1__RecordRangeIdType *const*, const char*, const char*);
SOAP_FMAC3 ns1__RecordRangeIdType ** SOAP_FMAC4 soap_get_PointerTons1__RecordRangeIdType(struct soap*, ns1__RecordRangeIdType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTounsignedInt_DEFINED
#define SOAP_TYPE_PointerTounsignedInt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedInt(struct soap*, unsigned int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedInt(struct soap*, const char *, int, unsigned int *const*, const char *);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_in_PointerTounsignedInt(struct soap*, const char*, unsigned int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedInt(struct soap*, unsigned int *const*, const char*, const char*);
SOAP_FMAC3 unsigned int ** SOAP_FMAC4 soap_get_PointerTounsignedInt(struct soap*, unsigned int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__EquipmentReferenceType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__EquipmentReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__EquipmentReferenceType(struct soap*, ns1__EquipmentReferenceType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__EquipmentReferenceType(struct soap*, const char *, int, ns1__EquipmentReferenceType **const*, const char *);
SOAP_FMAC3 ns1__EquipmentReferenceType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__EquipmentReferenceType(struct soap*, const char*, ns1__EquipmentReferenceType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__EquipmentReferenceType(struct soap*, ns1__EquipmentReferenceType **const*, const char*, const char*);
SOAP_FMAC3 ns1__EquipmentReferenceType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__EquipmentReferenceType(struct soap*, ns1__EquipmentReferenceType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SlaveEquipmentListType_DEFINED
#define SOAP_TYPE_PointerTons1__SlaveEquipmentListType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SlaveEquipmentListType(struct soap*, ns1__SlaveEquipmentListType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SlaveEquipmentListType(struct soap*, const char *, int, ns1__SlaveEquipmentListType *const*, const char *);
SOAP_FMAC3 ns1__SlaveEquipmentListType ** SOAP_FMAC4 soap_in_PointerTons1__SlaveEquipmentListType(struct soap*, const char*, ns1__SlaveEquipmentListType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SlaveEquipmentListType(struct soap*, ns1__SlaveEquipmentListType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SlaveEquipmentListType ** SOAP_FMAC4 soap_get_PointerTons1__SlaveEquipmentListType(struct soap*, ns1__SlaveEquipmentListType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__EquipmentReferenceType_DEFINED
#define SOAP_TYPE_PointerTons1__EquipmentReferenceType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EquipmentReferenceType(struct soap*, ns1__EquipmentReferenceType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EquipmentReferenceType(struct soap*, const char *, int, ns1__EquipmentReferenceType *const*, const char *);
SOAP_FMAC3 ns1__EquipmentReferenceType ** SOAP_FMAC4 soap_in_PointerTons1__EquipmentReferenceType(struct soap*, const char*, ns1__EquipmentReferenceType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EquipmentReferenceType(struct soap*, ns1__EquipmentReferenceType *const*, const char*, const char*);
SOAP_FMAC3 ns1__EquipmentReferenceType ** SOAP_FMAC4 soap_get_PointerTons1__EquipmentReferenceType(struct soap*, ns1__EquipmentReferenceType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__SrvConfigurationInfoRequestType_DEFINED
#define SOAP_TYPE_PointerTons1__SrvConfigurationInfoRequestType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__SrvConfigurationInfoRequestType(struct soap*, ns1__SrvConfigurationInfoRequestType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__SrvConfigurationInfoRequestType(struct soap*, const char *, int, ns1__SrvConfigurationInfoRequestType *const*, const char *);
SOAP_FMAC3 ns1__SrvConfigurationInfoRequestType ** SOAP_FMAC4 soap_in_PointerTons1__SrvConfigurationInfoRequestType(struct soap*, const char*, ns1__SrvConfigurationInfoRequestType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__SrvConfigurationInfoRequestType(struct soap*, ns1__SrvConfigurationInfoRequestType *const*, const char*, const char*);
SOAP_FMAC3 ns1__SrvConfigurationInfoRequestType ** SOAP_FMAC4 soap_get_PointerTons1__SrvConfigurationInfoRequestType(struct soap*, ns1__SrvConfigurationInfoRequestType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
#define SOAP_TYPE_PointerToxsd__base64Binary_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap*, const char *, int, xsd__base64Binary *const*, const char *);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap*, const char*, xsd__base64Binary **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary *const*, const char*, const char*);
SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap*, xsd__base64Binary **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_xsd__positiveInteger_DEFINED
#define SOAP_TYPE_xsd__positiveInteger_DEFINED

inline void soap_default_xsd__positiveInteger(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__positiveInteger
	*a = SOAP_DEFAULT_xsd__positiveInteger;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__positiveInteger(struct soap*, char *const*);

#define soap_xsd__positiveInteger2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__positiveInteger(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__positiveInteger(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "\\+?\\d*[1-9]\\d*")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__positiveInteger(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__positiveInteger soap_instantiate_string


#define soap_new_xsd__positiveInteger soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__positiveInteger(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__positiveInteger(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__positiveInteger(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__positiveInteger(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__positiveInteger(soap, p, "xsd:positiveInteger", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__positiveInteger(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__positiveInteger(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__positiveInteger(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__positiveInteger(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__positiveInteger(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__positiveInteger(struct soap *soap, char **p)
{
	if (soap_read_xsd__positiveInteger(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__language_DEFINED
#define SOAP_TYPE_xsd__language_DEFINED

inline void soap_default_xsd__language(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__language
	*a = SOAP_DEFAULT_xsd__language;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__language(struct soap*, char *const*);

#define soap_xsd__language2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__language(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__language(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "([a-zA-Z]{2}|[iI]-[a-zA-Z]+|[xX]-[a-zA-Z]{1,8})(-[a-zA-Z]{1,8})*")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__language(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__language soap_instantiate_string


#define soap_new_xsd__language soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__language(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__language(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__language(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__language(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__language(soap, p, "xsd:language", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__language(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__language(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__language(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__language(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__language(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__language(struct soap *soap, char **p)
{
	if (soap_read_xsd__language(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__integer_DEFINED
#define SOAP_TYPE_xsd__integer_DEFINED

inline void soap_default_xsd__integer(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__integer
	*a = SOAP_DEFAULT_xsd__integer;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, char *const*);

#define soap_xsd__integer2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__integer(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "[-+]?\\d+")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__integer soap_instantiate_string


#define soap_new_xsd__integer soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__integer(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__integer(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__integer(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__integer(soap, p, "xsd:integer", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__integer(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__integer(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__integer(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__integer(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__integer(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__integer(struct soap *soap, char **p)
{
	if (soap_read_xsd__integer(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__date_DEFINED
#define SOAP_TYPE_xsd__date_DEFINED

inline void soap_default_xsd__date(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_xsd__date
	*a = SOAP_DEFAULT_xsd__date;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__date(struct soap*, char *const*);

#define soap_xsd__date2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__date(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2xsd__date(soap, s, a) soap_s2char((soap), (s), (char**)(a), 5, 0, -1, "[-+]?\\d{4,}-\\d{2}-\\d{2}(Z|[-+]\\d{2}:\\d{2})?")
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__date(struct soap*, const char*, char **, const char*);

#define soap_instantiate_xsd__date soap_instantiate_string


#define soap_new_xsd__date soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__date(struct soap*, char *const*, const char*, const char*);

inline int soap_write_xsd__date(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_xsd__date(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_xsd__date(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_xsd__date(soap, p, "xsd:date", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__date(struct soap*, char **, const char*, const char*);

inline int soap_read_xsd__date(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_xsd__date(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__date(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__date(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__date(struct soap *soap, char **p)
{
	if (soap_read_xsd__date(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_PointerTounsignedByte_DEFINED
#define SOAP_TYPE_PointerTounsignedByte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
