/* soapVersionListWSSoapBindingProxy.cpp
   Generated by gSOAP 2.8.54 for sopa.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapVersionListWSSoapBindingProxy.h"

VersionListWSSoapBindingProxy::VersionListWSSoapBindingProxy() : soap(SOAP_IO_DEFAULT)
{	VersionListWSSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

VersionListWSSoapBindingProxy::VersionListWSSoapBindingProxy(const VersionListWSSoapBindingProxy& rhs): soap(rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

VersionListWSSoapBindingProxy::VersionListWSSoapBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

VersionListWSSoapBindingProxy::VersionListWSSoapBindingProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	VersionListWSSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

VersionListWSSoapBindingProxy::VersionListWSSoapBindingProxy(soap_mode iomode) : soap(iomode)
{	VersionListWSSoapBindingProxy_init(iomode, iomode);
}

VersionListWSSoapBindingProxy::VersionListWSSoapBindingProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	VersionListWSSoapBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

VersionListWSSoapBindingProxy::VersionListWSSoapBindingProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	VersionListWSSoapBindingProxy_init(imode, omode);
}

VersionListWSSoapBindingProxy::~VersionListWSSoapBindingProxy()
{
	this->destroy();
	}

void VersionListWSSoapBindingProxy::VersionListWSSoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns2", "http://afc.transporte.indra.es/configuration/types", NULL, NULL},
        {"ns1", "http://es.indra.transporte.iarioncs", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

VersionListWSSoapBindingProxy *VersionListWSSoapBindingProxy::copy()
{	VersionListWSSoapBindingProxy *dup = SOAP_NEW_COPY(VersionListWSSoapBindingProxy(*(struct soap*)this));
	return dup;
}

VersionListWSSoapBindingProxy& VersionListWSSoapBindingProxy::operator=(const VersionListWSSoapBindingProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void VersionListWSSoapBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void VersionListWSSoapBindingProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	VersionListWSSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void VersionListWSSoapBindingProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *VersionListWSSoapBindingProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *VersionListWSSoapBindingProxy::soap_fault()
{	return this->fault;
}

const char *VersionListWSSoapBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *VersionListWSSoapBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int VersionListWSSoapBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

int VersionListWSSoapBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void VersionListWSSoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void VersionListWSSoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *VersionListWSSoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int VersionListWSSoapBindingProxy::getProtoVersionList(const char *endpoint, const char *soap_action, ns1__getProtoVersionList *ns1__getProtoVersionList_, ns1__getProtoVersionListResponse &ns1__getProtoVersionListResponse_)
{	struct soap *soap = this;
	struct __ns1__getProtoVersionList soap_tmp___ns1__getProtoVersionList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://hhtccsdv:8080/cddc-webservice-web/VersionListWS";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___ns1__getProtoVersionList.ns1__getProtoVersionList_ = ns1__getProtoVersionList_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getProtoVersionList(soap, &soap_tmp___ns1__getProtoVersionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getProtoVersionList(soap, &soap_tmp___ns1__getProtoVersionList, "-ns1:getProtoVersionList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getProtoVersionList(soap, &soap_tmp___ns1__getProtoVersionList, "-ns1:getProtoVersionList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__getProtoVersionListResponse*>(&ns1__getProtoVersionListResponse_)) // NULL ref?
		return soap_closesock(soap);
	ns1__getProtoVersionListResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getProtoVersionListResponse_.soap_get(soap, "ns1:getProtoVersionListResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int VersionListWSSoapBindingProxy::getVersionList(const char *endpoint, const char *soap_action, ns1__getVersionList *ns1__getVersionList_, ns1__getVersionListResponse &ns1__getVersionListResponse_)
{	struct soap *soap = this;
	struct __ns1__getVersionList soap_tmp___ns1__getVersionList;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://hhtccsdv:8080/cddc-webservice-web/VersionListWS";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp___ns1__getVersionList.ns1__getVersionList_ = ns1__getVersionList_;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns1__getVersionList(soap, &soap_tmp___ns1__getVersionList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getVersionList(soap, &soap_tmp___ns1__getVersionList, "-ns1:getVersionList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getVersionList(soap, &soap_tmp___ns1__getVersionList, "-ns1:getVersionList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<ns1__getVersionListResponse*>(&ns1__getVersionListResponse_)) // NULL ref?
		return soap_closesock(soap);
	ns1__getVersionListResponse_.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getVersionListResponse_.soap_get(soap, "ns1:getVersionListResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
