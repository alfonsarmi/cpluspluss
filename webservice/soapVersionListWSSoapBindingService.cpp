/* soapVersionListWSSoapBindingService.cpp
   Generated by gSOAP 2.8.54 for sopa.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapVersionListWSSoapBindingService.h"

VersionListWSSoapBindingService::VersionListWSSoapBindingService() : soap(SOAP_IO_DEFAULT)
{	VersionListWSSoapBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

VersionListWSSoapBindingService::VersionListWSSoapBindingService(const VersionListWSSoapBindingService& rhs)
{	soap_copy_context(this, &rhs);
}

VersionListWSSoapBindingService::VersionListWSSoapBindingService(const struct soap &_soap) : soap(_soap)
{ }

VersionListWSSoapBindingService::VersionListWSSoapBindingService(soap_mode iomode) : soap(iomode)
{	VersionListWSSoapBindingService_init(iomode, iomode);
}

VersionListWSSoapBindingService::VersionListWSSoapBindingService(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	VersionListWSSoapBindingService_init(imode, omode);
}

VersionListWSSoapBindingService::~VersionListWSSoapBindingService()
{
	this->destroy();
}

void VersionListWSSoapBindingService::VersionListWSSoapBindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns2", "http://afc.transporte.indra.es/configuration/types", NULL, NULL},
        {"ns1", "http://es.indra.transporte.iarioncs", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

void VersionListWSSoapBindingService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void VersionListWSSoapBindingService::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	VersionListWSSoapBindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
VersionListWSSoapBindingService *VersionListWSSoapBindingService::copy()
{	VersionListWSSoapBindingService *dup = SOAP_NEW_COPY(VersionListWSSoapBindingService(*(struct soap*)this));
	return dup;
}
#endif

VersionListWSSoapBindingService& VersionListWSSoapBindingService::operator=(const VersionListWSSoapBindingService& rhs)
{	soap_copy_context(this, &rhs);
	return *this;
}

int VersionListWSSoapBindingService::soap_close_socket()
{	return soap_closesock(this);
}

int VersionListWSSoapBindingService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int VersionListWSSoapBindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int VersionListWSSoapBindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int VersionListWSSoapBindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int VersionListWSSoapBindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void VersionListWSSoapBindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void VersionListWSSoapBindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *VersionListWSSoapBindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void VersionListWSSoapBindingService::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *VersionListWSSoapBindingService::soap_header()
{	return this->header;
}

#ifndef WITH_NOIO
int VersionListWSSoapBindingService::run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int VersionListWSSoapBindingService::ssl_run(int port)
{	if (!soap_valid_socket(this->master) && !soap_valid_socket(this->bind(NULL, port, 100)))
		return this->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->errnum == 0) // timeout?
				this->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->error;
}
#endif

SOAP_SOCKET VersionListWSSoapBindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET VersionListWSSoapBindingService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int VersionListWSSoapBindingService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif
#endif

int VersionListWSSoapBindingService::serve()
{
#ifndef WITH_FASTCGI
	this->keep_alive = this->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->keep_alive > 0 && this->max_keep_alive > 0)
			this->keep_alive--;
#endif
		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if ((dispatch() || (this->fserveloop && this->fserveloop(this))) && this->error && this->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__getProtoVersionList(VersionListWSSoapBindingService*);
static int serve___ns1__getVersionList(VersionListWSSoapBindingService*);

int VersionListWSSoapBindingService::dispatch()
{
	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns1:getProtoVersionList"))
		return serve___ns1__getProtoVersionList(this);
	if (!soap_match_tag(this, this->tag, "ns1:getVersionList"))
		return serve___ns1__getVersionList(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve___ns1__getProtoVersionList(VersionListWSSoapBindingService *soap)
{	struct __ns1__getProtoVersionList soap_tmp___ns1__getProtoVersionList;
	ns1__getProtoVersionListResponse ns1__getProtoVersionListResponse_;
	ns1__getProtoVersionListResponse_.soap_default(soap);
	soap_default___ns1__getProtoVersionList(soap, &soap_tmp___ns1__getProtoVersionList);
	if (!soap_get___ns1__getProtoVersionList(soap, &soap_tmp___ns1__getProtoVersionList, "-ns1:getProtoVersionList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getProtoVersionList(soap_tmp___ns1__getProtoVersionList.ns1__getProtoVersionList_, ns1__getProtoVersionListResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__getProtoVersionListResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getProtoVersionListResponse_.soap_put(soap, "ns1:getProtoVersionListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getProtoVersionListResponse_.soap_put(soap, "ns1:getProtoVersionListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__getVersionList(VersionListWSSoapBindingService *soap)
{	struct __ns1__getVersionList soap_tmp___ns1__getVersionList;
	ns1__getVersionListResponse ns1__getVersionListResponse_;
	ns1__getVersionListResponse_.soap_default(soap);
	soap_default___ns1__getVersionList(soap, &soap_tmp___ns1__getVersionList);
	if (!soap_get___ns1__getVersionList(soap, &soap_tmp___ns1__getVersionList, "-ns1:getVersionList", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->getVersionList(soap_tmp___ns1__getVersionList.ns1__getVersionList_, ns1__getVersionListResponse_);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	ns1__getVersionListResponse_.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__getVersionListResponse_.soap_put(soap, "ns1:getVersionListResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__getVersionListResponse_.soap_put(soap, "ns1:getVersionListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
